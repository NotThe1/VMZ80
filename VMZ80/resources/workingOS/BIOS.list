0001: F600         ;     File created by MakeZ80Source on Tue Sep 18 12:43:09 EDT 2018 from:
0002: F600         ;     C:\Users\admin\Dropbox\Resources\CPM\CurrentOS\8080\BIOS.asm
0003: F600         ; BIOS.Z80
0004: F600
0005: F600         ; 2018-01-19 Repaired CP   A,TRUE
0006: F600         ; 2018-12-28 Version 1.0
0007: F600         ; 2018-12-28 Changed the READ & WRITE routines
0008: F600         ; 2018 12-27 Adjusted BOOT & WBOOT
0009: F600         ; 2018-12-10 Refactored  character device routines;
0010: F600         ; 2017-03-31 Added List out functionality for List Device
0011: F600         ; 2017-03-02 Refactored the CP/M Suite
0012: F600         ; 2017-02-08 All disk drives are 3.5 DH disks (1.44MB)
0013: F600         ; 2014-01-16
0014: F600         ; 2014-03-14  :  Frank Martyn
0015: F600
0016: F600         ; BIOS Function Descriptions are from THE PROGRAMMER'S CP/MÂ® HANDBOOK
0017: F600         ; by Andy Johnson-Laird
0018: F600         ;
0019: F600         ; Published by
0020: F600         ; Osborne/McGraw-Hill
0021: F600         ; 2600 Tenth Street
0022: F600         ; Berkeley, California 94710
0023: F600         ; U.S.A.
0024: F600
0025: F600                        Include ./stdHeader.Z80
0026: F600         ;<<<<<<<<<<<<<<<<<<<<<<< Include >>>>>>>>>>>>>>>>
0027: F600         ;     File created by MakeZ80Source on Mon Sep 17 16:25:01 EDT 2018 from:
0028: F600         ;     C:\Users\admin\Dropbox\Resources\CPM\CurrentOS\8080\stdHeader.asm
0029: F600         ; stdHeader.asm
0030: F600         ; standard equates
0031: F600
0032: F600         ; 2017-03-02 Refactored the CP/M Suite
0033: F600
0034: F600
0035: F600             TRUE       EQU    -1                   ; not false
0036: F600             FALSE      EQU    0000H
0037: F600             ON         EQU    -1
0038: F600             OFF        EQU    0000H
0039: F600             LO_NIBBLE_MASK EQU    0FH                  ; mask used to obtain the bytes low four bits
0040: F600
0041: F600             BYTE       EQU    1                    ; number of bytes for "byte" type
0042: F600             WORD       EQU    2                    ; number of bytes for "word" type
0043: F600
0044: F600
0045: F600             ASCII_MASK EQU    7FH                  ; Ascii mask 7 bits
0046: F600             ZERO       EQU    00H                  ; Zero
0047: F600             EndOfMessage EQU    00H
0048: F600
0049: F600             CTRL_C     EQU    03H                  ; ETX
0050: F600             CTRL_E     EQU    05H                  ; physical eol
0051: F600             CTRL_H     EQU    08H                  ; backspace
0052: F600             CTRL_K     EQU    0BH                  ; VT - Vertical tab
0053: F600             CTRL_L     EQU    0CH                  ; FF - Form feed
0054: F600             CTRL_P     EQU    10H                  ; prnt toggle
0055: F600             CTRL_R     EQU    12H                  ; repeat line
0056: F600             CTRL_S     EQU    13H                  ; X-OFF stop/start screen
0057: F600             CTRL_U     EQU    15H                  ; line delete
0058: F600             CTRL_X     EQU    18H                  ; =ctl-u
0059: F600             CTRL_Z     EQU    1AH                  ; end of file
0060: F600
0061: F600             NULL       EQU    00H                  ; Null
0062: F600             SOH        EQU    01H                  ; Start of Heading
0063: F600             BELL       EQU    07H                  ; Bell
0064: F600             TAB        EQU    09H                  ; Tab
0065: F600             LF         EQU    0AH                  ; Line Feed
0066: F600             CR         EQU    0DH                  ; Carriage Return
0067: F600             SPACE      EQU    20H                  ; Space
0068: F600             EXCLAIM_POINT EQU    21H                  ; Exclamtion Point
0069: F600             HASH_TAG   EQU    23H                  ; Sharp sign #
0070: F600             DOLLAR     EQU    24H                  ; Dollar Sign
0071: F600             PERCENT    EQU    25H                  ; Percent Sign
0072: F600             L_PAREN    EQU    28H                  ; Left Paenthesis (
0073: F600             R_PAREN    EQU    29H                  ; Right Paenthesis )
0074: F600             ASTERISK   EQU    2AH                  ; Asterisk *
0075: F600             PLUS_SIGN  EQU    2BH                  ; Plus sign +
0076: F600             COMMA      EQU    2CH                  ; Comma
0077: F600             DASH       EQU    2DH                  ; Dash Hyphen -
0078: F600             PERIOD     EQU    2EH                  ; Period
0079: F600             SLASH      EQU    2FH                  ; /
0080: F600             ASCII_ZERO EQU    30H                  ; zero
0081: F600             COLON      EQU    3AH                  ; Colon
0082: F600
0083: F600             SEMICOLON  EQU    3BH                  ; Semi Colon
0084: F600             LESS_THAN  EQU    3CH                  ; Less Than <
0085: F600             EQUAL_SIGN EQU    3DH                  ; Equal Sign
0086: F600             GREATER_THAN EQU    3EH                  ; Greater Than >
0087: F600             QMARK      EQU    3FH                  ; Question Mark
0088: F600             UNDER_SCORE EQU    5FH                  ; under score _
0089: F600             LEFT_ARROW EQU    5FH                  ; Left Arrow ?
0090: F600             RUBOUT     EQU    7FH                  ; Delete Key
0091: F600
0092: F600
0093: F600             ASCII_A    EQU    'A'
0094: F600             ASCII_C    EQU    'C'
0095: F600             ASCII_K    EQU    'K'
0096: F600             ASCII_N    EQU    'N'
0097: F600             ASCII_Q    EQU    'Q'
0098: F600             ASCII_R    EQU    'R'
0099: F600             ASCII_W    EQU    'W'
0100: F600             ASCII_Y    EQU    'Y'
0101: F600             CARET      EQU    '^'
0102: F600             ASCII_LO_A EQU    'a'
0103: F600             ASCII_LO_K EQU    'k'
0104: F600             ASCII_LO_P EQU    'p'
0105: F600             LEFT_CURLY EQU    '{'                  ; Left curly Bracket
0106: F600
0107: F600         ;<<<<<<<<<<<<<<<<<<<<<<< Include >>>>>>>>>>>>>>>>
0108: F600                        Include ./osHeader.Z80
0109: F600         ;<<<<<<<<<<<<<<<<<<<<<<< Include >>>>>>>>>>>>>>>>
0110: F600         ;     File created by MakeZ80Source on Mon Sep 17 16:25:47 EDT 2018 from:
0111: F600         ;     C:\Users\admin\Dropbox\Resources\CPM\CurrentOS\8080\osHeader.asm
0112: F600         ; osHeader.Z80
0113: F600
0114: F600         ; 2018-12-28 Changed BDOSEntry to remove dead space in BDOS
0115: F600         ; 2017-03-02 Refactored the CP/M Suite
0116: F600
0117: F600         ; Contains the Equates used by the CP/M system
0118: F600
0119: F600         ;------------------------Page Zero Constants ---------------------------------
0120: F600             RAM        EQU    0                    ; Start of RAM ( and the Base page)
0121: F600
0122: F600             WarmBoot   EQU    RAM + 0              ; Contains a JMP instruction to warm boot in BIOS
0123: F600             BIOSPAGE   EQU    RAM + 2              ; BIOS Jump Vector Page
0124: F600             IOBYTE     EQU    RAM + 3              ; Input/Output redirection byte
0125: F600
0126: F600             Pg0CurentUser EQU    RAM + 4              ; Current user ( bits 7-4)
0127: F600             Pg0CurentDisk EQU    Pg0CurentUser        ; Default logical disk (bits 0-3)
0128: F600
0129: F600             BDOSE      EQU    RAM + 5              ; Contains a JMP to BDOS entry
0130: F600             TopRAM     EQU    BDOSE+2              ; Top page of usable RAM
0131: F600
0132: F600             FCB1       EQU    RAM + 05CH           ; File Control Block #1
0133: F600             FCB2       EQU    FCB1 + 16            ; File Control Block #2
0134: F600
0135: F600             ComTail    EQU    RAM + 080H           ; Complete command tail
0136: F600             ComTailCount EQU    ComTail + 1          ; Count of the number of char in tail
0137: F600             ComTailChars EQU    ComTailCount + 1     ; Complete Command tail up-cased, w/o trailing CR
0138: F600         ;-----------------------------------------------------------------------
0139: F600
0140: F600             DMABuffer  EQU    RAM + 080H           ; Default "DMA" address used as buffer
0141: F600         ;-----------------------------------------------------------------------
0142: F600             TPA        EQU    RAM + 0100H          ; Start of Transient program Area
0143: F600         ;-----------------------------------------------------------------------
0144: F600             END_OF_FILE EQU    1AH                  ; end of file
0145: F600         ;-----------------------------------------------------------------------
0146: F600
0147: F600         ;--------------- CP/M Constants -----------------------------------------
0148: F600
0149: F600             CCPLength  EQU    0800H                ; Constant
0150: F600             BDOSLength EQU    0E00H                ; Constant 0E00H
0151: F600             BIOSLength EQU    0A00H                ; Constant 0900H
0152: F600
0153: F600             LengthInBytes EQU    CCPLength + BDOSLength + BIOSLength
0154: F600             LengthInK  EQU    (LengthInBytes/1024) + 1
0155: F600
0156: F600             MemorySize EQU    64
0157: F600
0158: F600             CCPEntry   EQU    (MemorySize * 1024) - LengthInBytes
0159: F600
0160: F600             BDOSBase   EQU    CCPEntry + CCPLength
0161: F600             BDOSEntry  EQU    BDOSBase
0162: F600
0163: F600             BIOSBase   EQU    BDOSBase + BDOSLength
0164: F600             BIOSStart  EQU    CCPEntry + CCPLength + BDOSLength
0165: F600         ;-----------------------------------------------------------------------
0166: F600
0167: F600         ;------------------- BDOS System Call Equates --------------------------
0168: F600             fConsoleIn EQU    01H                  ; rcharf - Console Input
0169: F600             fConsoleOut EQU    02H                  ; pcharf - Console Output
0170: F600             fPrintString EQU    09H                  ; pbuff	- Print String
0171: F600             fReadString EQU    0AH                  ; rbuff	- Read Console String
0172: F600             fGetConsoleStatus EQU    0BH                  ; breakf - Get Console Status
0173: F600             fGetVersion EQU    0CH                  ; liftf	- Return Version Number
0174: F600             fResetSystem EQU    0DH                  ; initf	- Reset Disk System
0175: F600             fSelectDisk EQU    0EH                  ; self	- Select Disk
0176: F600             fOpenFile  EQU    0FH                  ; openf	- Open File
0177: F600             fCloseFile EQU    10H                  ; closef - Close File
0178: F600             fSearchFirst EQU    11H                  ; searf	- Search For First
0179: F600             fSearchNext EQU    12H                  ; searnf - Search for Next
0180: F600             fDeleteFile EQU    13H                  ; delf - Delete File
0181: F600             fReadSeq   EQU    14H                  ; dreadf - Read Sequential
0182: F600             fWriteSeq  EQU    15H                  ; dwritf - Write Sequential
0183: F600             fMakeFile  EQU    16H                  ; makef	- Make File
0184: F600             fRenameFile EQU    17H                  ; renf	- Rename File
0185: F600             fGetLoginVector EQU    18H                  ; logf	- Return Login Vector
0186: F600             fGetCurrentDisk EQU    19H                  ; cself	- Return Current Disk
0187: F600             fSetDMA    EQU    1AH                  ; dmaf	- Set DMA address
0188: F600             fGetSetUserNumber EQU    20H                  ; userf	- Set/Get User Code
0189: F600         ;-----------------------------------------------------------------------
0190: F600
0191: F600
0192: F600
0193: F600
0194: F600
0195: F600         ;*******************************************************************************
0196: F600         ; These are the values handed over by the BDOS when it calls the Writer operation
0197: F600         ; The allocated.unallocated indicates whether the BDOS is set to write to an
0198: F600         ; unallocated allocation block (it only indicates this for the first 128 byte
0199: F600         ; sector write) or to an allocation block that has already been allocated to a
0200: F600         ; file. The BDOS also indicates if it is set to write to the file directory
0201: F600         ;*******************************************************************************
0202: F600             WriteAllocated EQU    00H
0203: F600             WriteDirectory EQU    01H
0204: F600             WriteCleanBuffer EQU    02H
0205: F600
0206: F600
0207: F600         ;<<<<<<<<<<<<<<<<<<<<<<< Include >>>>>>>>>>>>>>>>
0208: F600                        Include ./diskHeader.Z80
0209: F600         ;<<<<<<<<<<<<<<<<<<<<<<< Include >>>>>>>>>>>>>>>>
0210: F600         ;     File created by MakeZ80Source on Mon Sep 17 16:26:22 EDT 2018 from:
0211: F600         ;     C:\Users\admin\Dropbox\Resources\CPM\CurrentOS\8080\diskHeader.asm
0212: F600         ; diskHeader.asm
0213: F600
0214: F600         ; 2017-03-02 Refactored the CP/M Suite
0215: F600
0216: F600         ; needs osHeader.asm declared before this is used !!!!!!!
0217: F600
0218: F600         ; Contains the Equates used by the CP/M system to handle disks
0219: F600
0220: F600
0221: F600         ;*******************************************************************************
0222: F600         ;
0223: F600         ;     Disk related values
0224: F600         ;
0225: F600         ;
0226: F600         ;*******************************************************************************
0227: F600             DiskStatusLocation EQU    043H                 ; status after disk I/O placed here
0228: F600             DiskControlByte EQU    045H                 ; control byte for disk I/O
0229: F600             DiskCommandBlock EQU    046H                 ; Control Table Pointer
0230: F600         ; for boot
0231: F600             DiskControlTable EQU    0040H
0232: F600
0233: F600             DiskReadCode EQU    01H                  ; Code for Read
0234: F600             DiskWriteCode EQU    02H                  ; Code for Write
0235: F600
0236: F600
0237: F600             cpmRecordSize EQU    080H                 ; (128) record size that CP/M uses
0238: F600             diskSectorSize EQU    200H                 ; (512) size of physical disk I/O
0239: F600             recordsPerSector EQU    diskSectorSize/cpmRecordSize
0240: F600
0241: F600             DirEntrySize EQU    20H                  ; (32)
0242: F600             DirBuffSize EQU    cpmRecordSize
0243: F600
0244: F600             DirectoryEntryPerRecord EQU    cpmRecordSize / DirEntrySize
0245: F600
0246: F600             RecordsPerExtent EQU    080H                 ; extent Record capacity
0247: F600
0248: F600
0249: F600         ;-------------------------------------------------------------------------------------
0250: F600             NumberOfLogicalDisks EQU    4                    ; max number of disk in this system
0251: F600
0252: F600         ;----------------------3.5 Double Density Disk Geometry----------------------------------------
0253: F600             NumberOfHeads EQU    02H                  ; number of heads
0254: F600             TracksPerHead EQU    50H                  ; 80
0255: F600             SectorsPerTrack EQU    12H                  ; 18 -  1 head only
0256: F600             SectorsPerBlock EQU    04H                  ; 2048 bytes
0257: F600             DirectoryBlockCount EQU    02H                  ;
0258: F600         ;-----------------------------------------------------------------------
0259: F600
0260: F600             BlockSize  EQU    SectorsPerBlock * 	diskSectorSize ; Size in Bytes
0261: F600
0262: F600             RecordsPerBlock EQU    recordsPerSector * SectorsPerBlock
0263: F600
0264: F600             TotalNumberOfSectors EQU    SectorsPerTrack * TracksPerHead * NumberOfHeads
0265: F600             TotalNumberOfBlocks EQU    TotalNumberOfSectors / SectorsPerBlock
0266: F600             SectorsPerCylinder EQU    SectorsPerTrack * NumberOfHeads
0267: F600
0268: F600             SystemSectors EQU    LengthInBytes / diskSectorSize + 1 ; need to account for boot sector
0269: F600             myOffset   EQU    (SystemSectors / SectorsPerCylinder) + 1 ;
0270: F600             DataSectors EQU    TotalNumberOfSectors - (SectorsPerCylinder * myOffset)
0271: F600             DataBlocks EQU    DataSectors / 	SectorsPerBlock
0272: F600
0273: F600         ;-----------------------------------------------------------------------
0274: F600         ;; Disk block parameters for F3HD - 3.5 HD   1.44 MB Diskette
0275: F600         ;-----------------------------------------------------------------------
0276: F600         ;dpb3hdSPT				EQU		0090H			; cpmRecords per track- (144)
0277: F600             dpb3hdSPT  EQU    recordsPerSector * SectorsPerTrack * NumberOfHeads ; SPT - records per Clynder
0278: F600             dpb3hdBSH  EQU    04H                  ; Block Shift Factor - BlockSize = 128 * (2**BSH)											; BSH = Log2(BlockSize/cpmRecordSize)
0279: F600             dpb3hdBLM  EQU    0FH                  ; BlockMask = (2**BSH) -1
0280: F600             dpb3hdEXM  EQU    00H                  ; Extent mask = (PhysicalExtents/LogicalExtents) - 1
0281: F600             dpb3hdDSM  EQU    DataBlocks -1        ; Maximum allocation block number (710)
0282: F600             dpb3hdDRM  EQU    ((BlockSize *  DirectoryBlockCount)	/	DirEntrySize) -1 ; DRM Number of directory entries - 1 (127)
0283: F600             dpb3hdAL0  EQU    0C0H                 ; Bit map for reserving 1 alloc. block
0284: F600             dpb3hdAL1  EQU    00H                  ;  for each file directory
0285: F600             dpb3hdCKS  EQU    (dpb3hdDRM +1)/ DirectoryEntryPerRecord ; Disk change work area size (32)
0286: F600             dpb3hdOFF  EQU    myOffset             ; Number of tracks before directory
0287: F600             dpb3hdNOH  EQU    NumberOfHeads
0288: F600
0289: F600         ;*******************************************************************************
0290: F600
0291: F600             SectorMask EQU    SectorsPerBlock - 1
0292: F600
0293: F600         ;***************************************************************************
0294: F600
0295: F600         ;<<<<<<<<<<<<<<<<<<<<<<< Include >>>>>>>>>>>>>>>>
0296: F600
0297: F600             BOOT_CON_ADDRESS EQU    0ECH                 ; tty data address
0298: F600
0299: F600             IN_OPCODE  EQU    0DBH
0300: F600             OUT_OPCODE EQU    0D3H
0301: F600             JP_OPCODE  EQU    0C3H
0302: F600             DISK_READ  EQU    0FFH
0303: F600             DISK_WRITE EQU    000H
0304: F600
0305: F600                        ORG    BIOSStart            ; Assemble code at BIOS address
0306: F600         ; BIOS jump Vector
0307: F600             CodeStart:
0308: F600
0309: F600 C3 33 F6               JP     BOOT                 ; 00 Cold/Hard Boot
0310: F603             WarmBootEntry:
0311: F603 C3 43 F6               JP     WBOOT                ; 01 Warm/Soft Boot
0312: F606 C3 E2 F6               JP     CONST                ; 02 Console Input Status
0313: F609 C3 F4 F6               JP     CONIN                ; 03 Console Input
0314: F60C C3 00 F7               JP     CONOUT               ; 04 Console Output
0315: F60F C3 16 F7               JP     LIST                 ; 05 List Output
0316: F612 C3 21 F7               JP     PUNCH                ; 06 Punch Device Output
0317: F615 C3 2E F7               JP     READER               ; 07 Reader Device Input
0318: F618 C3 F3 F7               JP     HOME                 ; 08 Home Disk
0319: F61B C3 05 F8               JP     SELDSK               ; 09 Select Disk
0320: F61E C3 2F F8               JP     SETTRK               ; 0A Set Track
0321: F621 C3 34 F8               JP     SETSEC               ; 0B Set Sector
0322: F624 C3 39 F8               JP     SETDMA               ; 0C Set DMA Address
0323: F627 C3 41 F8               JP     READ                 ; 0D Read Sector
0324: F62A C3 4E F8               JP     WRITE                ; 0E Write Sector
0325: F62D C3 43 F7               JP     LISTST               ; 0F List Status
0326: F630 C3 3E F8               JP     SECTRAN              ; 10 Sector Translate
0327: F633
0328: F633
0329: F633         ;============================================================================;
0330: F633         ;	BOOT:  BIOS 00		Hard Boot/Cold Boot                                  ;
0331: F633         ;                                                                            ;
0332: F633         ;  The BOOT jump instruction is the first instruction executed in CP/M. The  ;
0333: F633         ; bootstrap sequence must transfer control to the BOOT entry point in order  ;
0334: F633         ; to  bring up CP/M.                                                         ;
0335: F633         ;  This reads in the CP/M loader on the first sector of the physical disk    ;
0336: F633         ; drive chosen to be logical disk A. This CP/M loader program reads the      ;
0337: F633         ; binary image of the CCP, BOOS, and BIOS into memory at some predetermined  ;
0338: F633         ; address. Then it transfers control to the BOOT entry point in the BIOS     ;
0339: F633         ; jump vector. This BOOT routine must initialize all of the required         ;
0340: F633         ; computer hardware.                                                         ;
0341: F633         ;                                                                            ;
0342: F633         ;  Most BOOT routines sign on by displaying a short message on the console,  ;
0343: F633         ; indicating the current version ofCP/M and the computer hardware that this  ;
0344: F633         ; BIOS can support. The BOOT routine terminates by transferring control to   ;
0345: F633         ; the start of the CCP +6 bytes (the CCP has its own small jump vector at    ;
0346: F633         ; the beginning). Just before the BOOT routine jumps into the CCP, it sets   ;
0347: F633         ; the C register to 0 to indicate that logical disk A is to be the default   ;
0348: F633         ; disk drive. This is what causes "A>" to be the CCP's initial prompt.       ;
0349: F633         ;                                                                            ;
0350: F633         ;			Entry Point  	:	BiosStart + (0 *  3).  (00H)                 ;
0351: F633         ;			Entry Parameters:	None										 ;
0352: F633         ;			Exit Parameters :	None										 ;
0353: F633         ;============================================================================;
0354: F633
0355: F633             BOOT:
0356: F633         ;CodeStart:
0357: F633 21 D5 F6               LD     HL,ROMControl
0358: F636 CD 79 F6               CALL   ReadRawDisk          ; Load the boot sector from the disk
0359: F639 D2 00 01               JP     NC,TPA               ; Now execute the boot loader;
0360: F63C
0361: F63C 21 93 F6               LD     HL,NoDiskMessage     ; Else let the user know Disk A does
0362: F63F CD 8B F6               CALL   DisplayMessage       ;  not have a system disk in it
0363: F642 76                     HALT
0364: F643
0365: F643
0366: F643         ;============================================================================;
0367: F643         ;	WBOOT:  BIOS 01		SoftBoot/Warm Boot                                   ;
0368: F643         ;                                                                            ;
0369: F643         ;  Unlike the "cold" bootstrap entry point, which executes only once,        ;
0370: F643         ; the WBOOT or warm boot routine will be executed every time a program       ;
0371: F643         ; terminates by jumping to location OOOOH, or whenever you type a CONTROL-C  ;
0372: F643         ; on the console as the first character of an input line.                    ;
0373: F643         ;  The WBOOT routine is responsible for reloading the CCP into memory.       ;
0374: F643         ; Programs often use all of memory up to the starting point of the BDOS,     ;
0375: F643         ; overwriting the CCP in the process. The underlying philosophy is that      ;
0376: F643         ; while a program is executing, the CCP is not needed, so the program can    ;
0377: F643         ; use the memory previously occupied by the CCP. The CCP occupies            ;
0378: F643         ; 800H (2048) bytes ofmemory-and this is frequently just enough to make the  ;
0379: F643         ; difference between a program that cannot run and one that can.             ;
0380: F643         ; A few programs that are self-contained and do not require the BDOS's       ;
0381: F643         ; facilities will also overwrite the BDOS to get another 1600H (5632) bytes  ;
0382: F643         ; of memory. Therefore, to be really safe, the WBOOT routine should read in  ;
0383: F643         ; both the CCP and the BDOS. It also needs to set up the two JMPs at         ;
0384: F643         ; location OOOOH (to WBOOT itself) and at location 0005H (to the BOOS).      ;
0385: F643         ; Location 0003H should be set to the initial value of the 10BYTE if this    ;
0386: F643         ; is implemented in the BIOS. As its last act, the WBOOT routine sets        ;
0387: F643         ; register C to indicate which logical disk is to be selected                ;
0388: F643         ; (C= 0 for A, I for B, and so on). It then transfers control into the CCP   ;
0389: F643         ; at the first instruction in order to restart the CCP.                      ;
0390: F643         ;                                                                            ;
0391: F643         ;			Entry Point  	:	BiosStart + (1 *  3).  (003H)                ;
0392: F643         ;			Entry Parameters:	None										 ;
0393: F643         ;			Exit Parameters :	None										 ;
0394: F643         ;============================================================================;
0395: F643
0396: F643             WBOOT:
0397: F643 31 FF DF               LD     SP,CCPEntry-1        ; Put stack at top of User area
0398: F646 21 C8 F6               LD     HL,WBOOTControl      ; Get the WBOOT Control Block
0399: F649 CD 79 F6               CALL   ReadRawDisk          ; Read CCP & BDOS
0400: F64C 30 09                  JR     NC,LoadPage0         ; Set up page 0 if good read
0401: F64E
0402: F64E 21 AE F6               LD     HL,WarmBootErroMessage
0403: F651 CD 8B F6               CALL   DisplayMessage       ; Send bad warm boot message
0404: F654 C3 43 F6               JP     WBOOT                ;  Keep trying
0405: F657
0406: F657
0407: F657         ; Set up page Zero
0408: F657             LoadPage0:
0409: F657 3E C3                  LD     A,JP_OPCODE          ; Get JP opCode
0410: F659
0411: F659 32 00 00               LD     (WarmBoot),A
0412: F65C 21 03 F6               LD     HL,WarmBootEntry     ; Warm Boot entry point
0413: F65F 22 01 00               LD     (WarmBoot+1),HL      ; Warm Boot Vector
0414: F662
0415: F662 32 05 00               LD     (BDOSE),A
0416: F665 21 00 E8               LD     HL,BDOSEntry         ; BDOS entry point
0417: F668 22 06 00               LD     (BDOSE+1),HL         ; BDOS Vector
0418: F66B
0419: F66B 01 80 00               LD     BC,DMABuffer         ; Default Disk Buffer
0420: F66E CD 39 F8               CALL   SETDMA               ; use normal BDOS  routine
0421: F671 FB                     EI                          ; Enable interrupts
0422: F672
0423: F672 3A 04 00               LD     A,(Pg0CurentDisk)    ; Let CCP know what disk is current
0424: F675 4F                     LD     C,A
0425: F676 C3 00 E0               JP     CCPEntry             ; Transfer control to CCP
0426: F679
0427: F679
0428: F679
0429: F679
0430: F679         ;=============================================================================
0431: F679         ;---------------------------- Raw Disk Code ---------------------------------;
0432: F679         ;  Enter with DiskControlBlock pointer in HL	                             ;
0433: F679             ReadRawDisk:                      ;
0434: F679 22 46 00               LD     (DiskCommandBlock),HL ; Put it into the DCB in page 0      ;
0435: F67C         ;
0436: F67C 21 45 00               LD     HL,DiskControlByte   ;
0437: F67F 36 80                  LD     (HL),080H            ; Activate the controller            ;
0438: F681         ;
0439: F681             WaitForBootComplete:                      ;
0440: F681 7E                     LD     A,(HL)               ; Get the control byte               ;
0441: F682 B7                     OR     A                    ; Is it completed                    ;
0442: F683 20 FC                  JR     NZ,WaitForBootComplete ; If not try again                   ;
0443: F685         ;
0444: F685 3A 43 00               LD     A,(DiskStatusLocation) ; What's the status?                 ;
0445: F688 FE 80                  CP     080H                 ; Any errors ?                       ;
0446: F68A C9                     RET                         ; Exit with result in the CCs        ;
0447: F68B         ;
0448: F68B         ;---------------------------- Raw Disk Code ---------------------------------;
0449: F68B
0450: F68B         ;---------------------------- Raw Message Code ------------------------------;
0451: F68B             DisplayMessage:                      ;
0452: F68B 7E                     LD     A,(HL)               ;
0453: F68C B7                     OR     A                    ;
0454: F68D C8                     RET    Z                    ;
0455: F68E D3 EC                  OUT    (BOOT_CON_ADDRESS),A ; Console address               	 ;
0456: F690 23                     INC    HL                   ;
0457: F691 18 F8                  JR     DisplayMessage       ;
0458: F693         ;
0459: F693             NoDiskMessage:                      ;
0460: F693 0D 0A                  DB     CR,LF                ;
0461: F695 4E 6F 20 53 79 73 74 65 6D 20 44 69 73 6B 20 4D 6F 75 6E 74 65 64                DB     'No System Disk Mounted' ;
0462: F6AB 0D 0A 00                DB     CR,LF,EndOfMessage   ;
0463: F6AE         ;
0464: F6AE             WarmBootErroMessage:                      ;
0465: F6AE 0D 0A                  DB     CR,LF                ;
0466: F6B0 57 61 72 6D 20 42 6F 6F 74 20 2D                DB     'Warm Boot -'        ;
0467: F6BB 20 52 65 74 72 79 69 6E 67 2E                DB     ' Retrying.'         ;
0468: F6C5 0D 0A 00                DB     CR,LF,EndOfMessage   ;
0469: F6C8         ;---------------------------- Raw Message Code ------------------------------;
0470: F6C8         ;---------------------------- WBOOT Disk Control Block ----------------------;
0471: F6C8             WBOOTControl:                      ;
0472: F6C8 01                     DB     DiskReadCode         ; Read function                      ;
0473: F6C9 00                     DB     00H                  ; unit number                        ;
0474: F6CA 00                     DB     00H                  ; head number                        ;
0475: F6CB 00                     DB     00H                  ; track number                       ;
0476: F6CC 02                     DB     02H                  ; Starting sector number             ;
0477: F6CD         ;  (skip cold boot sector)           ;
0478: F6CD 00 16                  DW     CCPLength + BDOSLength ; Number of bytes to read            ;
0479: F6CF         ;  ( rest of the head)               ;
0480: F6CF 00 E0                  DW     CCPEntry             ; read into this address             ;
0481: F6D1 43 00                  DW     DiskStatusLocation   ; pointer to next block - no linking ;
0482: F6D3 45 00                  DW     DiskControlByte      ; pointer to next table- no linking  ;
0483: F6D5         ;---------------------------- WBOOT Disk Control Block ----------------------;
0484: F6D5         ;---------------------------- ROM Disk Control Block ------------------------;
0485: F6D5             ROMControl:                      ;
0486: F6D5 01                     DB     DiskReadCode         ; Read function                      ;
0487: F6D6 00                     DB     00H                  ; unit number                        ;
0488: F6D7 00                     DB     00H                  ; head number                        ;
0489: F6D8 00                     DB     00H                  ; track number                       ;
0490: F6D9 01                     DB     01H                  ; Starting sector number ()          ;
0491: F6DA 00 02                  DW     diskSectorSize       ; Number of bytes to read ( 1 Sector);
0492: F6DC 00 01                  DW     TPA                  ; read into this address             ;
0493: F6DE 43 00                  DW     DiskStatusLocation   ; pointer to next block - no linking ;
0494: F6E0 40 00                  DW     DiskControlTable     ; pointer to next table- no linking  ;
0495: F6E2         ;---------------------------- ROM Disk Control Block ------------------------;
0496: F6E2
0497: F6E2         ;=============================================================================
0498: F6E2
0499: F6E2
0500: F6E2         ;============================================================================;
0501: F6E2         ;	Console Status:		BIOS 02                                              ;
0502: F6E2         ;                                                                            ;
0503: F6E2         ;  CONST simply returns an indicator showing whether there is an incoming    ;
0504: F6E2         ; character from the console device. The convention is that A = OFFH if a    ;
0505: F6E2         ; character is waiting to be processed, A = 0 if one is not. Note that the   ;
0506: F6E2         ; zero flag need not be set to reflect the contents of the A register        ;
0507: F6E2         ; it is the contents that are important. CONST is called by the CCP whenever ;
0508: F6E2         ; the CCP is in the middle of an operation that can be interrupted by        ;
0509: F6E2         ; pressing a keyboard character.                                             ;
0510: F6E2         ;                                                                            ;
0511: F6E2         ;  The BDOS will call CONST if a program makes a Read Console Status         ;
0512: F6E2         ; function call (CONST, code 11, OBH). It is also called by the console      ;
0513: F6E2         ; input BIOS routine, CONIN                                                  ;
0514: F6E2         ;                                                                            ;
0515: F6E2         ;			Entry Point  	:	BiosStart + (2 *  3).  (006H)                ;
0516: F6E2         ;			Entry Parameters:	None										 ;
0517: F6E2         ;			Exit Parameters :	A = 0FFH if there is a character waiting	 ;
0518: F6E2         ;			                    A = 00H  if one is not						 ;
0519: F6E2         ;============================================================================;
0520: F6E2
0521: F6E2             CONST:
0522: F6E2             ConStatus:
0523: F6E2 3A 03 00               LD     A,(IOBYTE)
0524: F6E5 DD 21 D3 F7               LD     IX,CON_Vector
0525: F6E9
0526: F6E9             GenericInStatus:                      ; Entry point for generic input status
0527: F6E9 CD 8F F7               CALL   SetDeviceVector      ; IX has the vector
0528: F6EC CD 5C F7               CALL   GetInStatus          ;  for the Physical Device
0529: F6EF B7                     OR     A
0530: F6F0 C8                     RET    Z                    ; 00 => No data pending
0531: F6F1 3E FF                  LD     A,0FFH
0532: F6F3 C9                     RET                         ; OFFH => Data in Buffer
0533: F6F4
0534: F6F4         ;============================================================================;
0535: F6F4         ;	Console In:		BIOS 03                                                  ;
0536: F6F4         ;                                                                            ;
0537: F6F4         ;  CONIN reads the next character from the console to the A register and     ;
0538: F6F4         ; sets; the most significant (parity) bit to O. Normally, CONIN will call    ;
0539: F6F4         ; the CONST routine until it detects A = OFFH. Only then will it input the   ;
0540: F6F4         ; data character and mask off the parity bit. CONIN is called by the CCP     ;
0541: F6F4         ; and by the BDOS when a program executes a Read Console Byte function       ;
0542: F6F4         ; (CONIN, code 1). Normally this follows a call to CONST                     ;
0543: F6F4         ; ( a blocking call) to indicates a char is ready.                           ;
0544: F6F4         ;                                                                            ;
0545: F6F4         ; This is a blocking routine                                                 ;
0546: F6F4         ;                                                                            ;
0547: F6F4         ;			Entry Point  	:	BiosStart + (3 *  3).  (009H)                ;
0548: F6F4         ;			Entry Parameters:	None										 ;
0549: F6F4         ;			Exit Parameters :	A = ASCII character read from console   	 ;
0550: F6F4         ;============================================================================;
0551: F6F4
0552: F6F4             CONIN:
0553: F6F4             ConIn:
0554: F6F4 CD E2 F6               CALL   ConStatus            ; Loop until there is some
0555: F6F7 28 FB                  JR     Z,ConIn              ;   data to read
0556: F6F9         ; Call to ConStatus Sets up IX with Physical Table
0557: F6F9 DD 6E 06               LD     L,(IX+DataReadIndex)
0558: F6FC DD 66 07               LD     H,(IX+(DataReadIndex+1))
0559: F6FF E9                     JP     (HL)
0560: F700         ;============================================================================;
0561: F700         ;	Console Out:		BIOS 04                                              ;
0562: F700         ;                                                                            ;
0563: F700         ;  CONOUT outputs the character (in ASCII) in register C to the console. The ;
0564: F700         ; most significant (parity) bit of the character will always be O.           ;
0565: F700         ; CONOUT must first check that the console device is ready to receive more   ;
0566: F700         ; data, delaying if necessary until it is, and only then sending the         ;
0567: F700         ; character to the device. CONOUT is called by the CCP and by the BDOS when  ;
0568: F700         ; a program executes a Write Console Byte function (CONOUT, code 2).         ;
0569: F700         ;                                                                            ;
0570: F700         ; This is a blocking routine                                                 ;
0571: F700         ;                                                                            ;
0572: F700         ;			Entry Point  	:	BiosStart + (4 *  3).  (00CH)                ;
0573: F700         ;			Entry Parameters:	C = ASCII character to be sent to Console	 ;
0574: F700         ;			Exit Parameters :	None										 ;
0575: F700         ;============================================================================;
0576: F700
0577: F700             CONOUT:
0578: F700             CONOut:
0579: F700 3A 03 00               LD     A,(IOBYTE)
0580: F703 DD 21 D3 F7               LD     IX,CON_Vector
0581: F707         ; entry point for standard blocking write
0582: F707             GenericOutStatus:
0583: F707 CD 8F F7               CALL   SetDeviceVector
0584: F70A         ; IX has the vector for the Physical Device
0585: F70A             GenericOutStatus1:
0586: F70A CD 57 F7               CALL   GetOutStatus
0587: F70D 28 FB                  JR     Z,GenericOutStatus1  ; wait until ready
0588: F70F DD 6E 08               LD     L,(IX+DataWriteIndex)
0589: F712 DD 66 09               LD     H,(IX+(DataWriteIndex+1))
0590: F715 E9                     JP     (HL)
0591: F716
0592: F716         ;============================================================================;
0593: F716         ;	List output  BIOS 05                                                     ;
0594: F716         ;                                                                            ;
0595: F716         ;  LIST is similar to CONOUT except that it sends the character in register  ;
0596: F716         ; C to the list device. It too checks first that the list device is ready to ;
0597: F716         ; receive the character. LIST is called by the CCP in response to the        ;
0598: F716         ; CONTROL-P toggle for printer echo of console output, and by the BDOS when	 ;
0599: F716         ; a program makes a Write Printer Byte or Display String call                ;
0600: F716         ; (LISTOUT and PRINTS, codes 5 and 9).                                       ;
0601: F716         ;                                                                            ;
0602: F716         ; This is a blocking routine                                                 ;
0603: F716         ;                                                                            ;
0604: F716         ;			Entry Point  	:	BiosStart + (5 *  3.)  (00FH)                ;
0605: F716         ;			Entry Parameters:	C = ASCII character to be sent to List Device;
0606: F716         ;			Exit Parameters :	None										 ;
0607: F716         ;============================================================================;
0608: F716
0609: F716             LIST:
0610: F716 3A 03 00               LD     A,(IOBYTE)
0611: F719 07                     RLCA                        ; move bits 7,6
0612: F71A 07                     RLCA                        ; to 1,0
0613: F71B DD 21 EB F7               LD     IX,LST_Vector
0614: F71F 18 E6                  JR     GenericOutStatus     ; go to generic blocking out routine
0615: F721
0616: F721         ;============================================================================;
0617: F721         ;	Punch output  BIOS 06                                                    ;
0618: F721         ;                                                                            ;
0619: F721         ;  PUNCH sends the character in register C to the "punch" device. As         ;
0620: F721         ; mentioned earlier, the "punch" is rarely a real paper tape punch.          ;
0621: F721         ; In most BIOS's, the PUNCH entry point either returns immediately and is    ;
0622: F721         ; effectively a null routine, or it outputs the character to a               ;
0623: F721         ; communications device, such as a; modem, on your computer. PUNCH must      ;
0624: F721         ; check that the "punch" device is indeed ready to accept another character  ;
0625: F721         ; for output, and must wait if it is not.                                    ;
0626: F721         ;                                                                            ;
0627: F721         ;  Digital Research's documentation states that the character to be output   ;
0628: F721         ; will always have its most significant bit set to O. This is not true.      ;
0629: F721         ; The BDOS simply transfers control over to the PUNCH entry point in the     ;
0630: F721         ; BIOS the setting of the most significant bit will be determined by the     ;
0631: F721         ; program making the BDOS function request (PUNOUT, code 4). This is         ;
0632: F721         ; important because the requirement of a zero would preclude being able to   ;
0633: F721         ; send pure  binary data via the BIOS PUNCH function                         ;
0634: F721         ;                                                                            ;
0635: F721         ; This is a blocking routine                                                 ;
0636: F721         ;                                                                            ;
0637: F721         ;			Entry Point  	:	BiosStart + (6 *  3).  (012H)                ;
0638: F721         ;			Entry Parameters:	C = ASCII character to be sent toPunch Device;
0639: F721         ;			Exit Parameters :	None										 ;
0640: F721         ;============================================================================;
0641: F721
0642: F721             PUNCH:                          ; Punch output
0643: F721 3A 03 00               LD     A,(IOBYTE)
0644: F724 0F                     RRCA
0645: F725 0F                     RRCA
0646: F726 0F                     RRCA                        ; move bits 5,4
0647: F727 0F                     RRCA                        ; to 1,0
0648: F728 DD 21 E3 F7               LD     IX,PUN_Vector
0649: F72C 18 D9                  JR     GenericOutStatus     ; go to generic blocking out routine
0650: F72E
0651: F72E         ;============================================================================;
0652: F72E         ;	Reader input  BIOS 07                                                    ;
0653: F72E         ;                                                                            ;
0654: F72E         ;  As with the PUNCH entry point, the READER entry point rarely connects to  ;
0655: F72E         ; a real paper tape reader.                                                  ;
0656: F72E         ; The READER function must return the next character from the reader device  ;
0657: F72E         ; in the A register, waiting, if need be, until there is a character.        ;
0658: F72E         ;                                                                            ;
0659: F72E         ;  Digital Research's documentation again says that the most significant bit ;
0660: F72E         ; of the A register must be 0, but this is not the case if you wish to       ;
0661: F72E         ; receive pure binary information via this function.                         ;
0662: F72E         ;                                                                            ;
0663: F72E         ;  READER is called whenever a program makes a Read "Reader" Byte function   ;
0664: F72E         ; request (READIN, code 3).                                                  ;
0665: F72E         ;                                                                            ;
0666: F72E         ; This is a blocking routine                                                 ;
0667: F72E         ;                                                                            ;
0668: F72E         ;			Entry Point  	:	BiosStart + (7 *  3).  (015H)                ;
0669: F72E         ;			Entry Parameters:	None										 ;
0670: F72E         ;			Exit Parameters :	A = ASCII character read from Reader Device	 ;
0671: F72E         ;============================================================================;
0672: F72E
0673: F72E             READER:                         ; Reader Input
0674: F72E 3A 03 00               LD     A,(IOBYTE)
0675: F731 0F                     RRCA
0676: F732 0F                     RRCA                        ; move bits 3,2  to 1,0
0677: F733 DD 21 DB F7               LD     IX,RDR_Vector
0678: F737             READER1:
0679: F737 CD E9 F6               CALL   GenericInStatus
0680: F73A 28 FB                  JR     Z,READER1            ; loop until there is some data to read
0681: F73C
0682: F73C DD 6E 06               LD     L,(IX+DataReadIndex)
0683: F73F DD 66 07               LD     H,(IX+(DataReadIndex+1))
0684: F742 E9                     JP     (HL)
0685: F743
0686: F743         ;============================================================================;
0687: F743         ;	List Status:  BIOS 0F                                                    ;
0688: F743         ;                                                                            ;
0689: F743         ;  LISTST was added when CP/M was upgraded from version 1.4 to version 2.0.  ;
0690: F743         ; This function returns the current status of the list device, using the     ;
0691: F743         ; IOBYTE if necessary to select the correct physical device. It sets the A   ;
0692: F743         ; register to OFFH if the list device can accept another character for       ;
0693: F743         ; output or to OOH if it is not ready. Digital Research's documentation      ;
0694: F743         ; states that this function is used by the DESPOOL utility program (which    ;
0695: F743         ; allows you to print a file "simultaneously" with other operations) to      ;
0696: F743         ; improve console response during its operation, and that it is acceptable   ;
0697: F743         ; for the routine always to return OOH if you choose not to implement it     ;
0698: F743         ; fully. Unfortunately, this statement is wrong. Many other programs use     ;
0699: F743         ; the LISTST function to "poll" the list device to make sure it is ready,    ;
0700: F743         ; and if it fails to come ready after a predetermined time, to output a      ;
0701: F743         ; message to the console; indicating that the printer is not ready. If you   ;
0702: F743         ; ever make a call to the BDOS list output functions, Write Printer Byte     ;
0703: F743         ; and Print String (codes 5 and 9), and the printer is not ready,            ;
0704: F743         ; then CP/M will wait forever-and your program will have lost control so     ;
0705: F743         ; it cannot even detect that the problem has occurred. If LISTST always      ;
0706: F743         ; returns a OOH, then the printer will always appear not to be ready.        ;
0707: F743         ; Not only does this make nonsense out of the LISTST function, but it also   ;
0708: F743         ; causes a stream of false "Printer not Ready" error messages to appear      ;
0709: F743         ; on the console.											                 ;
0710: F743         ;                                                                            ;
0711: F743         ;			Entry Point  	:	BiosStart + (F *  3).  (02DH)                ;
0712: F743         ;			Entry Parameters:	None										 ;
0713: F743         ;			Exit Parameters :	A = 0FFH if List Device is ready        	 ;
0714: F743         ;			                    A = 00H  if List Device is  not ready     	 ;
0715: F743         ;============================================================================;
0716: F743
0717: F743             LISTST:
0718: F743 3A 03 00               LD     A,(IOBYTE)           ; Get Physical device
0719: F746 07                     RLCA
0720: F747 07                     RLCA                        ; Move bits 6 & 7 to bits 0 & 1
0721: F748 DD 21 EB F7               LD     IX,LST_Vector        ; Set th vector base
0722: F74C CD 8F F7               CALL   SetDeviceVector      ; IX has the vector for
0723: F74F CD 57 F7               CALL   GetOutStatus         ;  the Physical Device
0724: F752
0725: F752 B7                     OR     A
0726: F753 C8                     RET    Z                    ; 00 => Device Ready
0727: F754 3E FF                  LD     A,0FFH
0728: F756 C9                     RET                         ; OFFH => Device No Ready
0729: F757
0730: F757         ;-----------------------------------------------------------------------------
0731: F757         ;-----------------------------------------------------------------------------
0732: F757             GetOutStatus:
0733: F757         ; vector to CON Devices
0734: F757 DD 56 02               LD     D,(IX+OutputMaskIndex) ; setup Output mask
0735: F75A 18 03                  JR     GetStatus
0736: F75C             GetInStatus:
0737: F75C DD 56 03               LD     D,(IX+InputMaskIndex) ; setup Input mask
0738: F75F             GetStatus:
0739: F75F DD 6E 04               LD     L,(IX+StatusReadIndex)
0740: F762 DD 66 05               LD     H,(IX+(StatusReadIndex+1))
0741: F765         ; Load HL with address for Status Read
0742: F765 E9                     JP     (HL)                 ; jump to the stats read routine
0743: F766
0744: F766         ;-----------------------------------------------------------------------------
0745: F766
0746: F766             DataRead:
0747: F766 DD 7E 01               LD     A,(IX+DataPortIndex)
0748: F769 32 6D F7               LD     (AddressDataIn),A    ; modify code with the Data port
0749: F76C DB                     DB     IN_OPCODE
0750: F76D             AddressDataIn:
0751: F76D 00                     DB     00                   ; perform the read
0752: F76E C9                     RET
0753: F76F
0754: F76F             DataReadASCII:
0755: F76F CD 66 F7               CALL   DataRead
0756: F772 E6 7F                  AND    ASCII_MASK           ; Strip off MSB
0757: F774 C9                     RET
0758: F775
0759: F775         ; Enter DataWrite the value to be output in C
0760: F775             DataWrite:
0761: F775 DD 7E 01               LD     A,(IX+DataPortIndex)
0762: F778 32 7D F7               LD     (AddressDataOut),A   ; modify code with the Data port
0763: F77B 79                     LD     A,C                  ; get value into ACC
0764: F77C D3                     DB     OUT_OPCODE
0765: F77D             AddressDataOut:
0766: F77D 00                     DB     00                   ; perform the write
0767: F77E C9                     RET
0768: F77F
0769: F77F
0770: F77F         ; Enter Status Read with Target mask in D
0771: F77F             StatusRead:
0772: F77F DD 7E 00               LD     A,(IX+StatusPortIndex)
0773: F782 32 86 F7               LD     (AddressStatus),A    ; modify code with the status port
0774: F785 DB                     DB     IN_OPCODE
0775: F786             AddressStatus:
0776: F786 00                     DB     00
0777: F787 A2                     AND    D                    ; Check return vale with the mask
0778: F788 C9                     RET
0779: F789
0780: F789             DUMMYRead:
0781: F789 C9                     RET
0782: F78A             DUMMYWrite:
0783: F78A C9                     RET
0784: F78B             DUMMYCheck:
0785: F78B 3E FF                  LD     A,0FFH               ; Always return 0FFH
0786: F78D B7                     OR     A                    ; Set flags
0787: F78E C9                     RET
0788: F78F
0789: F78F         ;============================================================================;
0790: F78F             SetDeviceVector:
0791: F78F E6 03                  AND    03H                  ; Get bits 0 & 1;
0792: F791 87                     ADD    A,A                  ; Double for word size index
0793: F792 16 00                  LD     D,00H
0794: F794 5F                     LD     E,A                  ; load byte index int DE
0795: F795 DD 19                  ADD    IX,DE                ; add to the value vector base
0796: F797         ; IX points at correct entry in vector
0797: F797 DD 5E 00               LD     E,(IX+0)
0798: F79A DD 56 01               LD     D,(IX+1)             ; DE now has the Vector for the device
0799: F79D D5                     PUSH   DE
0800: F79E DD E1                  POP    IX                   ; Move it to IX
0801: F7A0 C9                     RET
0802: F7A1
0803: F7A1
0804: F7A1         ;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
0805: F7A1         ; Physical Device Attributes
0806: F7A1
0807: F7A1             TTY_StatusPort EQU    0EDH
0808: F7A1             TTY_DataPort EQU    0ECH
0809: F7A1             TTY_OutputMask EQU    80H                  ; Status Mask
0810: F7A1             TTY_InputMask EQU    7FH                  ; Status Mask
0811: F7A1
0812: F7A1             CRT_StatusPort EQU    02H
0813: F7A1             CRT_DataPort EQU    01H
0814: F7A1             CRT_OutputMask EQU    80H                  ; Status Mask - ready for output
0815: F7A1             CRT_InputMask EQU    07FH                 ; Status Mask - bytes yet to  read
0816: F7A1
0817: F7A1             COM_StatusPort EQU    0EDH
0818: F7A1             COM_DataPort EQU    0ECH
0819: F7A1             COM_OutputMask EQU    01H                  ; Status Mask
0820: F7A1             COM_InputMask EQU    02H                  ; Status Mask
0821: F7A1
0822: F7A1             LPT_StatusPort EQU    011H
0823: F7A1             LPT_DataPort EQU    010H
0824: F7A1             LPT_OutputMask EQU    0FFH                 ; Status Mask - ready for output
0825: F7A1             LPT_InputMask EQU    07FH                 ; Status Mask - not used
0826: F7A1
0827: F7A1             DUMMY_StatusPort EQU    011H
0828: F7A1             DUMMY_DataPort EQU    010H
0829: F7A1             DUMMY_OutputMask EQU    0FFH                 ; Status Mask - ready for output
0830: F7A1             DUMMY_InputMask EQU    07FH                 ; Status Mask - not used
0831: F7A1
0832: F7A1         ; Device Table Control Block Definition
0833: F7A1             StatusPortIndex EQU    0
0834: F7A1             DataPortIndex EQU    1
0835: F7A1             OutputMaskIndex EQU    2
0836: F7A1             InputMaskIndex EQU    3
0837: F7A1             StatusReadIndex EQU    4
0838: F7A1             DataReadIndex EQU    6
0839: F7A1             DataWriteIndex EQU    8
0840: F7A1
0841: F7A1         ;Physical Devices Control Blocks
0842: F7A1
0843: F7A1             TTY_Table:
0844: F7A1 ED                     DB     TTY_StatusPort
0845: F7A2 EC                     DB     TTY_DataPort
0846: F7A3 80                     DB     TTY_OutputMask
0847: F7A4 7F                     DB     TTY_InputMask
0848: F7A5 7F F7                  DW     StatusRead
0849: F7A7 6F F7                  DW     DataReadASCII
0850: F7A9 75 F7                  DW     DataWrite
0851: F7AB
0852: F7AB             CRT_Table:
0853: F7AB 02                     DB     CRT_StatusPort
0854: F7AC 01                     DB     CRT_DataPort
0855: F7AD 80                     DB     CRT_OutputMask
0856: F7AE 7F                     DB     CRT_InputMask
0857: F7AF 7F F7                  DW     StatusRead
0858: F7B1 66 F7                  DW     DataRead
0859: F7B3 75 F7                  DW     DataWrite
0860: F7B5             COM_Table:
0861: F7B5 ED                     DB     COM_StatusPort
0862: F7B6 EC                     DB     COM_DataPort
0863: F7B7 01                     DB     COM_OutputMask
0864: F7B8 02                     DB     COM_InputMask
0865: F7B9 7F F7                  DW     StatusRead
0866: F7BB 66 F7                  DW     DataRead
0867: F7BD 75 F7                  DW     DataWrite
0868: F7BF             LPT_Table:
0869: F7BF 11                     DB     LPT_StatusPort
0870: F7C0 10                     DB     LPT_DataPort
0871: F7C1 FF                     DB     LPT_OutputMask
0872: F7C2 7F                     DB     LPT_InputMask
0873: F7C3 7F F7                  DW     StatusRead
0874: F7C5 66 F7                  DW     DataRead
0875: F7C7 75 F7                  DW     DataWrite
0876: F7C9             DUMMY_Table:
0877: F7C9 11                     DB     DUMMY_StatusPort
0878: F7CA 10                     DB     DUMMY_DataPort
0879: F7CB FF                     DB     DUMMY_OutputMask
0880: F7CC 7F                     DB     DUMMY_InputMask
0881: F7CD 8B F7                  DW     DUMMYCheck
0882: F7CF 89 F7                  DW     DUMMYRead
0883: F7D1 8A F7                  DW     DUMMYWrite
0884: F7D3
0885: F7D3         ;-----------------------------------------------------------------------------
0886: F7D3
0887: F7D3         ; Logical Device Vector, Controlled by IOBYTE
0888: F7D3
0889: F7D3             CON_Vector:                      ; IOBYTE bits 1 & 0
0890: F7D3 A1 F7                  DW     TTY_Table
0891: F7D5 AB F7                  DW     CRT_Table
0892: F7D7 B5 F7                  DW     COM_Table
0893: F7D9 C9 F7                  DW     DUMMY_Table
0894: F7DB             RDR_Vector:                      ; IOBYTE bits 3 & 2
0895: F7DB A1 F7                  DW     TTY_Table
0896: F7DD AB F7                  DW     CRT_Table
0897: F7DF C9 F7                  DW     DUMMY_Table
0898: F7E1 C9 F7                  DW     DUMMY_Table
0899: F7E3             PUN_Vector:                      ; IOBYTE bits 5 & 4
0900: F7E3 A1 F7                  DW     TTY_Table
0901: F7E5 C9 F7                  DW     DUMMY_Table
0902: F7E7 B5 F7                  DW     COM_Table
0903: F7E9 AB F7                  DW     CRT_Table
0904: F7EB             LST_Vector:                      ; IOBYTE bits 7 & 6
0905: F7EB BF F7                  DW     LPT_Table
0906: F7ED AB F7                  DW     CRT_Table
0907: F7EF BF F7                  DW     LPT_Table
0908: F7F1 C9 F7                  DW     DUMMY_Table
0909: F7F3
0910: F7F3         ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
0911: F7F3         ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
0912: F7F3
0913: F7F3         ;============================================================================;
0914: F7F3         ;                            Disk routines                                   ;
0915: F7F3         ;============================================================================;
0916: F7F3         ;                                                                            ;
0917: F7F3         ;  All of the disk functions that follow were originally designed to operate ;
0918: F7F3         ; on the 128-byte sectors used on single-sided, single-density, 8-inch       ;
0919: F7F3         ; floppy diskettes that were standard in the industry at the time.           ;
0920: F7F3         ; Now that CP/M runs on many different types of disks, some of the BIOS      ;
0921: F7F3         ; disk functions seem strange because most of the new disk drives use        ;
0922: F7F3         ; sector sizes other than 128 bytes. To handle larger sector sizes,          ;
0923: F7F3         ; the BIOS has some additional code that makes the BDOS respond as if it     ;
0924: F7F3         ; were still handling 128-byte sectors. This code is referred to as the      ;
0925: F7F3         ; blocking/deblocking code.  As its name implies, it blocks together         ;
0926: F7F3         ; several 128-byte "sectors" and only writes to the disk when a complete     ;
0927: F7F3         ; physical sector has been assembled.  When reading, it reads in a physical  ;
0928: F7F3         ; sector and then de-blocks it,handing back several 128-byte "sectors"       ;
0929: F7F3         ; to the BDOS.                                                               ;
0930: F7F3         ;  To do all of this, the blocking/deblocking code uses a special buffer     ;
0931: F7F3         ; area; of the same size as the physical sectors on the disk. This is known  ;
0932: F7F3         ; as the host disk buffer or HSTBUE Physical sectors are read into this      ;
0933: F7F3         ; buffer and written to the disk from it. In order to optimize this          ;
0934: F7F3         ; blocking/deblocking ; routine, the BIOS has code in it to reduce the       ;
0935: F7F3         ; number of times that an; actual disk read or write occurs. A side effect   ;
0936: F7F3         ; is that at any given  moment, several 128-byte "sectors" may be stored     ;
0937: F7F3         ; in the HSTBUF, waiting to be written out to the disk when HSTBUF becomes   ;
0938: F7F3         ; full. This sometimes complicates the logic of the BIOS disk functions.     ;
0939: F7F3         ; You cannot simply select a new disk drive, for example, when the HSTBUF    ;
0940: F7F3         ; contains data destined for another disk drive. You will see this           ;
0941: F7F3         ; complication in the BIOS only in the form of added logical operations the  ;
0942: F7F3         ; BIOS disk functions rarely trigger immediate physical operations.          ;
0943: F7F3         ; It is easier to understand these BIOS functions if you consider that they  ;
0944: F7F3         ; make requests-and that these requests are satisfied only when it makes     ;
0945: F7F3         ; sense to do so, taking into account the blocking/ deblocking logic.        ;
0946: F7F3         ;============================================================================;
0947: F7F3         ;============================================================================;
0948: F7F3
0949: F7F3         ;============================================================================;
0950: F7F3         ;	Home Disk	BIOS 08                                                      ;
0951: F7F3         ;                                                                            ;
0952: F7F3         ;  HOME - Home the selected logical disk to track 0. Before doing this, a    ;
0953: F7F3         ; check must be made to see if the physical disk buffer has information that ;
0954: F7F3         ; must be written out. This is indicated by a flag, DirtyBufferFlag,set in   ;
0955: F7F3         ; the de-blocking code                                                       ;
0956: F7F3         ;                                                                            ;
0957: F7F3         ;			Entry Point  	:	BiosStart + (8 *  3).  (18H)                 ;
0958: F7F3         ;			Entry Parameters:	None										 ;
0959: F7F3         ;			Exit Parameters :	None										 ;
0960: F7F3         ;============================================================================;
0961: F7F3
0962: F7F3             HOME:
0963: F7F3 3A 68 F9               LD     A,(DirtyBufferFlag)  ; Check for Dirty Buffer
0964: F7F6 FE FF                  CP     TRUE
0965: F7F8 28 05                  JR     Z,Home1
0966: F7FA 3E 00                  LD     A,FALSE              ; Clear DataInBufferFlag
0967: F7FC 32 67 F9               LD     (DataInBufferFlag),A ;   if Buffer not dirty
0968: F7FF             Home1:
0969: F7FF 0E 00                  LD     C,00H                ; Set to track 0
0970: F801 CD 2F F8               CALL   SETTRK               ; no, physical, only logical
0971: F804 C9                     RET
0972: F805
0973: F805         ;============================================================================;
0974: F805         ;	Select Disk	BIOS 09                                                      ;
0975: F805         ;                                                                            ;
0976: F805         ;  SELDSK does not do what its name implies. It does not (and must not)      ;
0977: F805         ;  physically select a logical disk. Instead, it returns a pointer in the HL ;
0978: F805         ;  register pair to the disk parameter header for the logical disk specified ;
0979: F805         ;  in register C on entry. C=0 for drive A, 1for drive B, and so on. SELDSK  ;
0980: F805         ;  also stores this code for the requested disk to be used later in the READ ;
0981: F805         ;  and WRITE functions. If the logical disk code in register C refers to a   ;
0982: F805         ;  nonexistent disk or to one for which no disk parameter header exists,     ;
0983: F805         ; then SELDSK must return with HL set to OOOOH. Then the BDOS will output a  ;
0984: F805         ;  message of the form "BDOS Err on XI Select" Note that SELDSK not only     ;
0985: F805         ; does not select the disk, but also does not indicate whether or not the    ;
0986: F805         ;  requested disk is physically present -merely whether or not there are     ;
0987: F805         ; disk tables present for the disk.                                          ;
0988: F805         ;                                                                            ;
0989: F805         ;  SELDSK is called by the BDOS either during disk file operations or by a   ;
0990: F805         ; program issuing a Select Disk request (SELDSK, code 14).                   ;
0991: F805         ;                                                                            ;
0992: F805         ;			Entry Point  	:	BiosStart + (9 *  3).  (1BH)                 ;
0993: F805         ;			Entry Parameters:	C = Drive to select (0=A,1=B...)             ;
0994: F805         ;			Exit Parameters :	HL = Pointer to Disk Parameter Header		 ;
0995: F805         ;			                    HL = 0000H if no disk found					 ;
0996: F805         ;============================================================================;
0997: F805
0998: F805             SELDSK:
0999: F805 21 00 00               LD     HL,00H               ; Assume an error
1000: F808 79                     LD     A,C
1001: F809 FE 04                  CP     NumberOfLogicalDisks
1002: F80B D0                     RET    NC                   ; return if > max number of Disks
1003: F80C
1004: F80C 32 69 F9               LD     (SelectedDisk),A     ; save disk number
1005: F80F
1006: F80F 07                     RLCA                        ; X2
1007: F810 07                     RLCA                        ; X4
1008: F811 07                     RLCA                        ; X8
1009: F812 07                     RLCA                        ; X16
1010: F813 16 00                  LD     D,0
1011: F815 5F                     LD     E,A                  ; put index int DE
1012: F816 DD 21 74 F9               LD     IX,DiskParameterHeaders ; get DPH address Base
1013: F81A DD 19                  ADD    IX,DE                ; get the specific DiskParameterHeader
1014: F81C DD E5                  PUSH   IX                   ; save for return in HL
1015: F81E
1016: F81E DD 56 0B               LD     D,(IX+11)            ; LSB for Disk Parameter Block
1017: F821 DD 5E 0A               LD     E,(IX+10)            ; MSB for Disk Parameter Block
1018: F824
1019: F824 D5                     PUSH   DE
1020: F825 DD E1                  POP    IX
1021: F827 DD 7E 0F               LD     A,(IX+15)            ; Disk Parameter Block in IY
1022: F82A 32 6E F9               LD     (SelectedDskSecsPerHead),A
1023: F82D
1024: F82D E1                     POP    HL                   ; recover DPH pointer
1025: F82E C9                     RET
1026: F82F
1027: F82F
1028: F82F
1029: F82F         ;============================================================================;
1030: F82F         ;	Set Track	BIOS 0A                                                      ;
1031: F82F         ;                                                                            ;
1032: F82F         ;  SETTRK saves the requested disk track that is in the BC register pair     ;
1033: F82F         ; when SETTRK gets control. Note that this is an absolute track number       ;
1034: F82F         ; that is the number of reserved tracks before the file directory will have  ;
1035: F82F         ; been added to the track number relative to the start of the logical disk.  ;
1036: F82F         ; The number of the requested track will be used in the next BIOS READ or    ;
1037: F82F         ; WRITE function. SETTRK is called by the BDOS when it needs to read or      ;
1038: F82F         ; write a 128-byte sector. Legitimate track numbers are from                 ;
1039: F82F         ; 0 to OFFFFH (65,535).                                                      ;
1040: F82F         ;                                                                            ;
1041: F82F         ;			Entry Point  	:	BiosStart + (A *  3).  (1EH)                 ;
1042: F82F         ;			Entry Parameters:	BC = Absolute Track Number					 ;
1043: F82F         ;			Exit Parameters :	None										 ;
1044: F82F         ;============================================================================;
1045: F82F
1046: F82F             SETTRK:
1047: F82F         ;	LD		H,B							; select track in BC on entry
1048: F82F         ;	LD		L,C
1049: F82F         ;	LD	(SelectedTrack),HL				; save for low level driver
1050: F82F ED 43 6A F9               LD     (SelectedTrack),BC   ; save for low level driver
1051: F833 C9                     RET
1052: F834
1053: F834         ;============================================================================;
1054: F834         ;	Set Sector	BIOS 0B  (Set Record)                                        ;
1055: F834         ;                                                                            ;
1056: F834         ; Sector  = Record for disk with 128 byte sectors                            ;
1057: F834         ;                                                                            ;
1058: F834         ;  Sector contains 4 records for disks with 512 byte sectors this routine is ;
1059: F834         ; missed named it should be called Set Record                                ;
1060: F834         ;                                                                            ;
1061: F834         ;  SETSEC is similar to SETTRK in that it stores the requested Record        ;
1062: F834         ; (sector) number for later use in BIOS READ or WRITE functions. The         ;
1063: F834         ; requested Record (sector) number is handed to SETSEC in the A register     ;
1064: F834         ; legitimate values are from 0 to OFFH (255). The Record (sector) number     ;
1065: F834         ; is a logical Record (sector) number. It does not take into account any     ;
1066: F834         ; sector skewing that might be used to improve disk performance. SETSEC      ;
1067: F834         ; is called by the BDOS when it needs to read or write a 128-byte            ;
1068: F834         ; Record (sector).                                                           ;
1069: F834         ;                                                                            ;
1070: F834         ;			Entry Point  	:	BiosStart + (B *  3).  (21H)                 ;
1071: F834         ;			Entry Parameters:	A = Logical Sector Number					 ;
1072: F834         ;			Exit Parameters :	None										 ;
1073: F834         ;============================================================================;
1074: F834
1075: F834             SETSEC:                         ; SETRECORD
1076: F834 79                     LD     A,C
1077: F835 32 6D F9               LD     (SelectedRecord),A   ; save for low level driver
1078: F838 C9                     RET
1079: F839
1080: F839         ;============================================================================;
1081: F839         ;	Set DMA		BIOS 0C                                                      ;
1082: F839         ;                                                                            ;
1083: F839         ;  SETDMA saves the address in the BC register pair in the requested DMA     ;
1084: F839         ; address. The next BIOS READ or WRITE function will use the DMA address as  ;
1085: F839         ; a pointer to the 128-byte sector buffer into which data will be read or    ;
1086: F839         ; from which data will be written.                                           ;
1087: F839         ;  The default DMA address is 0080H. SETDMA is called by the BDOS when it    ;
1088: F839         ; needs to READ or WRITE a 128-byte sector.                                  ;
1089: F839         ;                                                                            ;
1090: F839         ;			Entry Point  	:	BiosStart + (C *  3).  (24H)                 ;
1091: F839         ;			Entry Parameters:	BC = DMA address							 ;
1092: F839         ;			Exit Parameters :	None										 ;
1093: F839         ;============================================================================;
1094: F839
1095: F839             SETDMA:
1096: F839 ED 43 6F F9               LD     (DMAAddress),BC      ; save for low level driver
1097: F83D C9                     RET
1098: F83E
1099: F83E         ;============================================================================;
1100: F83E         ;	Sector Translate	BIOS 10                                              ;
1101: F83E         ;                                                                            ;
1102: F83E         ;  SECTRAN, given a logical sector number, locates the correct physical      ;
1103: F83E         ;  sector number in the sector translate table for the previously selected   ;
1104: F83E         ;  (via SELDSK) logical disk drive. Note that both logical and physical      ;
1105: F83E         ;  sector numbers are l28-byte sectors, so if you are working with a hard    ;
1106: F83E         ;  disk system, it is not too efficient to impose a sector interlace at the  ;
1107: F83E         ;  l28-byte sector level. It is better to impose the sector interlace right  ;
1108: F83E         ;  inside the hard disk driver, if at all. In general, hard disks spin so    ;
1109: F83E         ;  rapidly that CP/M simply cannot take advantage of sector interlace.       ;
1110: F83E         ;  The BDOS hands over the logical sector number in the BC register pair,    ;
1111: F83E         ;  with the address of the sector translate table in the DE register pair.   ;
1112: F83E         ;  SECTRAN must return the physical sector number in HL. If SECTRAN is to be ;
1113: F83E         ;  a null routine, it must move the contents of BC to HL and return.         ;
1114: F83E         ;                                                                            ;
1115: F83E         ;			Entry Point  	:	BiosStart + (10 *  3).  (30H)                ;
1116: F83E         ;			Entry Parameters:	BC = Original Sector						 ;
1117: F83E         ;			Exit Parameters :	DE = Translated Sector	                 	 ;
1118: F83E         ;============================================================================;
1119: F83E             SECTRAN:
1120: F83E C5                     PUSH   BC
1121: F83F E1                     POP    HL                   ; just move the value from BC to HL
1122: F840 C9                     RET
1123: F841
1124: F841         ;============================================================================;
1125: F841         ;	READ			BIOS 0D                                                  ;
1126: F841         ;                                                                            ;
1127: F841         ;  READ reads in a 128-byte sector provided that there have been previous    ;
1128: F841         ; BIOS function calls to:                                                    ;
1129: F841         ; 				- SELDSK	"select" the disk                                ;
1130: F841         ; 				- SETDMA	set the DMA address                              ;
1131: F841         ; 				- SETTRK	set the track number                             ;
1132: F841         ; 				- SETSEC	set the sector number.                           ;
1133: F841         ; 			                                                                 ;
1134: F841         ;  Because of the blocking/ deblocking code in the BIOS, there are frequent  ;
1135: F841         ; occasions when the requested sector will already be in the host buffer     ;
1136: F841         ; (HSTBUF), so that a physical disk read is not required. All that is then   ;
1137: F841         ; required is for the BIOS to move the appropriate 128 bytes from the        ;
1138: F841         ; HSTBUF into the buffer pointed at by the DMA address. Only during the READ ;
1139: F841         ; function will the BIOS normally communicate with the physical disk drive,  ;
1140: F841         ; selecting it and seeking to read the requested track and sector. During    ;
1141: F841         ; this process, the READ function must also handle any hardware errors that  ;
1142: F841         ; occur, trying an operation again if a "soft," or recoverable, error        ;
1143: F841         ; occurs.                                                                    ;
1144: F841         ;  The READ function must return with the A register set to OOH if the read  ;
1145: F841         ; operation has completed successfully. If the READ function returns with    ;
1146: F841         ; the A register set to 01 H, the BDOS will display an error message of the  ;
1147: F841         ; form BDOS Err on X: Bad Sector. Under these circumstances, you have only   ;
1148: F841         ; two choices. You can enter a CARRIAGE RETURN, ignore the fact that there   ;
1149: F841         ; was an error, and attempt to make sense of the data in the DMA buffer. Or  ;
1150: F841         ; you can type a CONTROL-C to abort the operation, perform a warm boot, and  ;
1151: F841         ; return control to the CCP. As you can see, CP/M's error handling is not    ;
1152: F841         ; particularly helpful, so most BIOS writers add more sophisticated error    ;
1153: F841         ; recovery right in the disk driver. This can include some interaction with  ;
1154: F841         ; the console so that a more determined effort can be made to correct errors ;
1155: F841         ; or, if nothing else, give you more information as to what has gone wrong.  ;
1156: F841         ;                                                                            ;
1157: F841         ;                                                                            ;
1158: F841         ;			Entry Point  	:	BiosStart + (D *  3).  (27H)                 ;
1159: F841         ;			Entry Parameters:	None										 ;
1160: F841         ;			Exit Parameters :	A = 00H Successful Read                 	 ;
1161: F841         ;			                    A = 01H BDOS Err         					 ;
1162: F841         ;============================================================================;
1163: F841
1164: F841             READ:
1165: F841 3E FF                  LD     A,DISK_READ
1166: F843 32 72 F9               LD     (DiskCommand),A      ; Set to Flag to read (non-zero)
1167: F846 3E 02                  LD     A,WriteCleanBuffer   ; Fake a clean sector Write
1168: F848 32 73 F9               LD     (WriteType),A        ;  to avoid a Directory Write later
1169: F84B C3 57 F8               JP     CommonDiskIO         ; Use common code to execute read
1170: F84E
1171: F84E         ;============================================================================;
1172: F84E         ;	WRITE			BIOS 0E                                                  ;
1173: F84E         ;                                                                            ;
1174: F84E         ;  Write a cpmRecord,128-bytes, from the current DMA address to the          ;
1175: F84E         ; previously Selected disk, track, and sector.                               ;
1176: F84E         ;                                                                            ;
1177: F84E         ;  On arrival here, the BDOS will have set register C to indicate whether    ;
1178: F84E         ; this write operation is to:                                                ;
1179: F84E         ;	00H [WriteAllocated]	An already allocated allocation block            ;
1180: F84E         ;	01H [WriteDirectory]	To the directory                                 ;
1181: F84E         ;	02H [WriteCleanBuffer]	To the first cpmRecord of an Alocation block     ;
1182: F84E         ;                                                                            ;
1183: F84E         ;  WRITE is similar to READ but with the obvious difference that data is     ;
1184: F84E         ; transferred from the DMA buffer to the specified 128-byte sector.Like READ,;
1185: F84E         ; this function requires that the following  calls have already been made:   ;
1186: F84E         ;	- SELDSK	"select" the disk                                            ;
1187: F84E         ;	- SETDMA	set the DMA address                                          ;
1188: F84E         ;	- SETTRK	set the track number                                         ;
1189: F84E         ;	- SETSEC	set the sector number.                                       ;
1190: F84E         ;			                                                                 ;
1191: F84E         ;  Again, it is only in the WRITE routine that the driver will start to talk ;
1192: F84E         ; directly to the physical hardware, selecting the disk unit, track, and     ;
1193: F84E         ; sector, and transferring the data to the disk. With the                    ;
1194: F84E         ; blocking/deblocking code, the BDOS optimizes the number of disk writes     ;
1195: F84E         ; that are needed by indicating in register C the type of disk write that    ;
1196: F84E         ; is to be performed:                                                        ;
1197: F84E         ;	0 = normal sector write                                                  ;
1198: F84E         ;	1 = write to file directory sector                                       ;
1199: F84E         ;	2 = write to sector of previously unchanged Deblocking Buffer            ;
1200: F84E         ;			                                                                 ;
1201: F84E         ;  Type 0 occurs whenever the BDOS is writing to a data sector in an already ;
1202: F84E         ; used allocation block. Under these circumstances, the disk driver must     ;
1203: F84E         ; preread the appropriate host sector because there may be previously stored ;
1204: F84E         ; information on it.                                                         ;
1205: F84E         ;                                                                            ;
1206: F84E         ;  Type 1 occurs whenever the BDOS is writing to a file directory sector-in  ;
1207: F84E         ; this case, the BIOS must not defer writing the sector to the disk, as the  ;
1208: F84E         ; information is too valuable to hold in memory until the HSTBUF is full.    ;
1209: F84E         ; The longer the information resides in the HSTBUF, the greater the chance   ;
1210: F84E         ; of a power failure or glitch, making file data already physically written  ;
1211: F84E         ; to the disk inaccessible because the file directory is out of date.        ;
1212: F84E         ;                                                                            ;
1213: F84E         ;  Type 2 occurs whenever the BDOS needs to write to the first sector of a   ;
1214: F84E         ; previously unused allocation block. Unused, in this context, includes an   ;
1215: F84E         ; allocation block that has become available as a result of a file being     ;
1216: F84E         ; erased. In this case, there is no need for the disk driver to preread an   ;
1217: F84E         ; entire host-sized sector into the HSTBUF, as there is no data of value in  ;
1218: F84E         ; the physical sector.                                                       ;
1219: F84E         ;                                                                            ;
1220: F84E         ;  As with the READ routine, the WRITE function returns with A set to OOH if ;
1221: F84E         ; the operation has been completed successfully. If the WRITE function       ;
1222: F84E         ; returns with A set to 01H, then the BDOS will display the same message as  ;
1223: F84E         ; for READ: BDOS Err on X: Bad Sector                                        ;
1224: F84E         ;                                                                            ;
1225: F84E         ;			Entry Point  	:	BiosStart + (E *  3).  (2AH)                 ;
1226: F84E         ;			Entry Parameters:	C = Write type 								 ;
1227: F84E         ;			Exit Parameters :	A = 00H Successful Read                 	 ;
1228: F84E         ;			                    A = 01H BDOS Err         					 ;
1229: F84E         ;============================================================================;
1230: F84E
1231: F84E             WRITE:
1232: F84E 79                     LD     A,C                  ; Retrieve the calling write type
1233: F84F 32 73 F9               LD     (WriteType),A        ; Save the type of write
1234: F852 3E 00                  LD     A,DISK_WRITE
1235: F854 32 72 F9               LD     (DiskCommand),A      ; Set to Flag to Write
1236: F857
1237: F857         ;****************************************************************************;
1238: F857         ;     Common code to execute both reads and writes of 128-byte records       ;
1239: F857         ;****************************************************************************;
1240: F857             CommonDiskIO:
1241: F857 AF                     XOR    A                    ; Assume no disk error will occur
1242: F858 32 71 F9               LD     (DiskStatus),A
1243: F85B         ;-------------------------Convert selected record into physical sector-------;
1244: F85B 3A 6D F9               LD     A,(SelectedRecord)   ;
1245: F85E 1F                     RRA                         ; Convert selected record into       ;
1246: F85F 1F                     RRA                         ;  physical sector by dividing by    ;
1247: F860 E6 3F                  AND    03FH                 ; Remove unwanted bits               ;
1248: F862 32 6C F9               LD     (SelectedSector),A   ;
1249: F865         ;-------------------------Convert selected record into physical sector-------;
1250: F865
1251: F865         ;------------------------- Any Data in Buffer -------------------------------;
1252: F865         ;Flag is ONLY reset by BIOS HOME Function. otherwise it is set by all passes ; ;                                                                            ;
1253: F865 21 67 F9               LD     HL,DataInBufferFlag  ; See if there is any data here ?    ;
1254: F868 7E                     LD     A,(HL)               ;
1255: F869 36 FF                  LD     (HL),TRUE            ; Force flag true                    ;
1256: F86B FE FF                  CP     TRUE                 ; Was  any data here ?               ;
1257: F86D 20 0F                  JR     NZ,PreRead           ; No, then we need to load data      ;
1258: F86F         ;------------------------- Any Data in Buffer -------------------------------;
1259: F86F
1260: F86F         ;--------------------------- Is This My Data --------------------------------;
1261: F86F CD D8 F8               CALL   IsItMyData           ;
1262: F872 28 22                  JR     Z,DoPart2            ;
1263: F874         ;--------------------------- Is This My Data --------------------------------;
1264: F874
1265: F874         ;--------------------------- Is The Data Dirty ------------------------------;
1266: F874 3A 68 F9               LD     A,(DirtyBufferFlag)  ;
1267: F877 FE FF                  CP     TRUE                 ;
1268: F879 20 03                  JR     NZ,PreRead           ;
1269: F87B         ;--------------------------- Is The Data Dirty ------------------------------;
1270: F87B
1271: F87B         ;-------------------------------- PreWrite ----------------------------------;
1272: F87B             PreWrite:                       ;
1273: F87B         ; Do the actual Write                                                        ;
1274: F87B CD E9 F8               CALL   PhysicalWrite        ;
1275: F87E         ;-------------------------------- PreWrite ----------------------------------;
1276: F87E
1277: F87E         ;--------------------------------- PreRead ----------------------------------;
1278: F87E         ;     prepare for physical IO                                                ;
1279: F87E             PreRead:                        ;
1280: F87E         ; Set IOBuffer to Selected state for physical read                           ;
1281: F87E 21 69 F9               LD     HL,SelectedState     ;
1282: F881 11 63 F9               LD     DE,IOBufferState     ;
1283: F884 01 04 00               LD     BC,SelectedStateSize ;
1284: F887 ED B0                  LDIR                        ;
1285: F889         ; Do the actual read                                                         ;
1286: F889 CD EE F8               CALL   PhysicalRead         ;
1287: F88C 3E FF                  LD     A,TRUE               ;
1288: F88E 32 67 F9               LD     (DataInBufferFlag),A ; Set DataInBuffeer Flag			 ;
1289: F891 3E 00                  LD     A,FALSE              ;
1290: F893 32 68 F9               LD     (DirtyBufferFlag),A  ; Reset DataIsDirty Flag			 ;
1291: F896         ;--------------------------------- PreRead ----------------------------------;
1292: F896
1293: F896         ;-------------------Calculate the address of the record in the sector -------;
1294: F896             DoPart2:                        ;
1295: F896             DataIsInBuffer:                      ;
1296: F896 3A 6D F9               LD     A,(SelectedRecord)   ;
1297: F899 E6 03                  AND    SectorMask           ; Want relative record               ;
1298: F89B 3C                     INC    A                    ; Adjust for DJNZ                    ;
1299: F89C 47                     LD     B,A                  ;
1300: F89D 11 80 00               LD     DE,cpmRecordSize     ;
1301: F8A0 21 80 FF               LD     HL,-cpmRecordSize    ;
1302: F8A3             SectorInBuffer1:                      ;
1303: F8A3 19                     ADD    HL,DE                ; RecordNumber * recordSize          ;
1304: F8A4 10 FD                  DJNZ   SectorInBuffer1      ;  yields index into the Sector      ;
1305: F8A6         ;
1306: F8A6 11 28 FC               LD     DE,DiskBuffer        ; Start of sector                    ;
1307: F8A9 19                     ADD    HL,DE                ; HL -> start of record in buffer	 ;
1308: F8AA ED 5B 6F F9               LD     DE,(DMAAddress)      ; Callers  DMA Address               ;
1309: F8AE         ;
1310: F8AE         ;-------------------Calculate the address of the record in the sector -------;
1311: F8AE
1312: F8AE         ;------------------------- Determine if its a Read or Write and set HL & DE  ;
1313: F8AE 3A 72 F9               LD     A,(DiskCommand)      ; 0 => Write, non Zero => Read       ;
1314: F8B1 FE FF                  CP     DISK_READ            ;
1315: F8B3 CA BC F8               JP     Z,BufferMove         ; Read : move data from Buffer to DMA;
1316: F8B6         ;write                              	; Write: move data from DMA to Buffer;
1317: F8B6 3E FF                  LD     A,TRUE               ; Set the flag to indicate           ;
1318: F8B8 32 68 F9               LD     (DirtyBufferFlag),A  ;   dirty buffer                     ;
1319: F8BB EB                     EX     DE,HL                ; Swap source and destn for Write    ;
1320: F8BC         ;------------------------- Determine if its a Read or Write and set HL & DE ;
1321: F8BC
1322: F8BC         ;----------------------  Move the Data between Buffer and DMA location   ----;
1323: F8BC             BufferMove:                      ;
1324: F8BC 01 80 00               LD     BC,cpmRecordSize     ;
1325: F8BF ED B0                  LDIR                        ;
1326: F8C1         ;----------------------  Move the Data between Buffer and DMA location   ----;
1327: F8C1
1328: F8C1
1329: F8C1 3A 73 F9               LD     A,(WriteType)        ; Is this a write to the directory ?
1330: F8C4 FE 01                  CP     WriteDirectory
1331: F8C6 3A 71 F9               LD     A,(DiskStatus)       ; Get disk status if an  return
1332: F8C9 C0                     RET    NZ                   ; Return if not a directory entry
1333: F8CA
1334: F8CA B7                     OR     A                    ; Check for any disk errors ?
1335: F8CB C0                     RET    NZ                   ; If yes - abandon
1336: F8CC
1337: F8CC 3E 00                  LD     A,FALSE
1338: F8CE 32 68 F9               LD     (DirtyBufferFlag),A  ; Clear the dirty buffer flag
1339: F8D1 CD E9 F8               CALL   PhysicalWrite        ; Immediate update of the directory
1340: F8D4 3A 71 F9               LD     A,(DiskStatus)       ; Set ACC with disk status
1341: F8D7 C9                     RET
1342: F8D8
1343: F8D8
1344: F8D8         ;--------------------------- Is It My Data ----------------------------------;
1345: F8D8             IsItMyData:                      ;
1346: F8D8         ;
1347: F8D8 21 69 F9               LD     HL,SelectedState     ;
1348: F8DB 11 63 F9               LD     DE,IOBufferState     ;
1349: F8DE 06 04                  LD     B,SelectedStateSize  ;
1350: F8E0             IsItMyData1:                      ;
1351: F8E0 1A                     LD     A,(DE)               ;
1352: F8E1 AE                     XOR    (HL)                 ; (HL) =(DE)                         ;
1353: F8E2 C0                     RET    NZ                   ; If not we are done                 ;
1354: F8E3 13                     INC    DE                   ;
1355: F8E4 23                     INC    HL                   ; Lets look at the next bytes        ;
1356: F8E5 10 F9                  DJNZ   IsItMyData1          ; Loop if not exhausted the count    ;
1357: F8E7 AF                     XOR    A                    ; Else set the Z flag                ;
1358: F8E8 C9                     RET                         ;  and exit                          ;
1359: F8E9         ;--------------------------- Is It My Data ----------------------------------;
1360: F8E9
1361: F8E9         ;***********************************************;
1362: F8E9         ;			      Physical Disk IO				  ;
1363: F8E9         ;***********************************************;
1364: F8E9
1365: F8E9         ;Write contents of disk buffer to correct sector
1366: F8E9             PhysicalWrite:
1367: F8E9 3E 02                  LD     A,DiskWriteCode      ; get write function
1368: F8EB C3 F0 F8               JP     CommonPhysical
1369: F8EE
1370: F8EE             PhysicalRead:
1371: F8EE 3E 01                  LD     A,DiskReadCode       ; get read function
1372: F8F0
1373: F8F0
1374: F8F0             CommonPhysical:
1375: F8F0         ;--------------------------- Setup Disk Control Table  ----------------------;
1376: F8F0         ;
1377: F8F0         ;Command                                                                     ;
1378: F8F0 32 56 F9               LD     (DCTCommand),A       ; set the command for Read or Write  ;
1379: F8F3         ;Disk                                                                        ;
1380: F8F3 3A 63 F9               LD     A,(IOBufferDisk)     ;
1381: F8F6 E6 03                  AND    03H                  ; only units 0 to 3                  ;
1382: F8F8 32 57 F9               LD     (DCTDisk),A          ; set disk                           ;
1383: F8FB         ;Track                                                                       ;
1384: F8FB 2A 64 F9               LD     HL,(IOBufferTrack)   ;
1385: F8FE 7D                     LD     A,L                  ;
1386: F8FF 32 59 F9               LD     (DCTTrack),A         ; set track	                         ;
1387: F902         ;
1388: F902         ;Head and Track	Calculations                                                 ;
1389: F902         ; The sector must be converted into a head number and sector number.         ;
1390: F902         ;	Head = (int) Sector / SectorsPerHead                                     ;
1391: F902         ;	Sector = Sector MOD SectorsPerHead                                       ;
1392: F902             DetermineHead:                      ;
1393: F902 06 00                  LD     B,0                  ; Start at head 0                    ;
1394: F904 21 6E F9               LD     HL,SelectedDskSecsPerHead ; Point at track counts              ;
1395: F907 3A 66 F9               LD     A,(IOBufferSector)   ; get target sector                  ;
1396: F90A             DetermineHead1:                      ;
1397: F90A BE                     CP     M                    ; Need another Head?                 ;
1398: F90B DA 13 F9               JP     C,HeadFound          ; nope done with head calculation    ;
1399: F90E         ;
1400: F90E 96                     SUB    M                    ; subtract track value               ;
1401: F90F 04                     INC    B                    ; Increment head                     ;
1402: F910 C3 0A F9               JP     DetermineHead1       ; loop for next head value           ;
1403: F913         ;Sector                                                                      ;
1404: F913             HeadFound:                      ; Sector MOD SectorsPerHead          ;
1405: F913 3C                     INC    A                    ; physical sectors start at 1        ;
1406: F914 32 5A F9               LD     (DCTSector),A        ; set sector                         ;
1407: F917         ;Head                                                                        ;
1408: F917 78                     LD     A,B                  ;
1409: F918 32 58 F9               LD     (DCTHead),A          ; set head number                    ;
1410: F91B         ;Byte Count                                                                  ;
1411: F91B 21 00 02               LD     HL,diskSectorSize    ;
1412: F91E 22 5B F9               LD     (DCTByteCount),HL    ; set byte count                     ;
1413: F921         ;DMA                                                                         ;
1414: F921 21 28 FC               LD     HL,DiskBuffer        ;
1415: F924 22 5D F9               LD     (DCTDMAAddress),HL   ; set transfer address               ;
1416: F927         ;
1417: F927         ; Since only one control table is in use, close the status and               ;
1418: F927         ; busy chain pointers ; back to the main control bytes.                      ;
1419: F927         ;
1420: F927         ;NextStatusBlock                                                             ;
1421: F927 21 43 00               LD     HL,DiskStatusLocation ;
1422: F92A 22 5F F9               LD     (DCTNextStatusBlock),HL ;
1423: F92D         ;NextControlLocation                                                         ;
1424: F92D 21 45 00               LD     HL,DiskControlByte   ;
1425: F930 22 61 F9               LD     (DCTNextControlLocation),HL ;
1426: F933         ;                                                                        ;
1427: F933         ;Put  DCT pointer in page0                                                   ;
1428: F933 21 56 F9               LD     HL,DCTCommand        ;
1429: F936 22 46 00               LD     (DiskCommandBlock),HL ;
1430: F939         ;--------------------------- Setup Disk Control Table  ----------------------;
1431: F939
1432: F939         ; Make the IO happen
1433: F939 21 45 00               LD     HL,DiskControlByte   ; Activate disk controller
1434: F93C 36 80                  LD     (HL),080H
1435: F93E
1436: F93E             WaitForDiskComplete:
1437: F93E 7E                     LD     A,(HL)               ; Get control bytes
1438: F93F B7                     OR     A
1439: F940 C2 3E F9               JP     NZ,WaitForDiskComplete ; Operation not done
1440: F943
1441: F943         ;Check if any errors occurred.
1442: F943 3A 43 00               LD     A,(DiskStatusLocation)
1443: F946 FE 80                  CP     080H                 ; Any errors NC = good read?
1444: F948 DA 50 F9               JP     C,DiskError
1445: F94B AF                     XOR    A
1446: F94C 32 71 F9               LD     (DiskStatus),A       ; Clear the flag
1447: F94F C9                     RET                         ; Clean read, return to caller
1448: F950
1449: F950         ; set error flag and return
1450: F950             DiskError:
1451: F950 3E 01                  LD     A,1
1452: F952 32 71 F9               LD     (DiskStatus),A       ; Set the error flag
1453: F955 C9                     RET
1454: F956
1455: F956
1456: F956
1457: F956
1458: F956
1459: F956         ;============================================================================;
1460: F956         ;                                                                            ;
1461: F956         ;  There is one  disk controller on this system,                             ;
1462: F956         ; for the 3.5 HD drive (1.44MB)                                              ;
1463: F956         ;                                                                            ;
1464: F956         ; The controller is "hard-wired" to monitor memory location 0X45 to detect   ;
1465: F956         ; when it is to perform some disk operation.  This is called its disk        ;
1466: F956         ; control byte. If the most significant bit of  disk control byte is set,    ;
1467: F956         ; the controller will look at the word following the respective control      ;
1468: F956         ; bytes. This word must contain the address of  valid disk control table     ;
1469: F956         ; that specifies the exact disk operation to be performed. Once the          ;
1470: F956         ; operation has been completed. the controller resets its disk control byte  ;
1471: F956         ; to OOH.  This indicates completion to the disk driver code.                ;
1472: F956         ;                                                                            ;
1473: F956         ;  The controller also sets a return code in a disk status block,            ;
1474: F956         ; location 0X43H. If the first byte of this status block is less than 80H.   ;
1475: F956         ; then a disk error has occurred.                                            ;
1476: F956         ;
1477: F956         ;  The disk control table layout is shown below. Note that the controller    ;
1478: F956         ; has the capability  for control tables to be chained together so that a    ;
1479: F956         ; sequence of disk operations can be initiated. In this BIOS this feature    ;
1480: F956         ; is not used. However. the controller requires that the chain pointers      ;
1481: F956         ; in the disk control tables be pointed back to the main control bytes in    ;
1482: F956         ; order to indicate  the end of the chain                                    ;
1483: F956         ;============================================================================;
1484: F956
1485: F956         ;**************************** Disk ControlTable *****************************;
1486: F956             DCTStart:                       ;
1487: F956 00          DCTCommand: DB     00H                  ; Command	                         ;
1488: F957 00          DCTDisk:   DB     00H                  ; unit (drive) number = 0 or 1   	 ;
1489: F958 00          DCTHead:   DB     00H                  ; head number = 0 or 1           	 ;
1490: F959 00          DCTTrack:  DB     00H                  ; track number                   	 ;
1491: F95A 00          DCTSector: DB     00H                  ; sector number                  	 ;
1492: F95B 00 00       DCTByteCount: DW     0000H                ; number of bytes to read/write  	 ;
1493: F95D 00 00       DCTDMAAddress: DW     0000H                ; transfer address               	 ;
1494: F95F 00 00       DCTNextStatusBlock: DW     0000H                ; pointer to next status block   	 ;
1495: F961 00 00       DCTNextControlLocation: DW     0000H                ; pointer to next control byte   	 ;
1496: F963             DCTEnd:                         ;
1497: F963             DCTSize    EQU    DCTEnd-DCTStart      ;
1498: F963         ;**************************** Disk ControlTable *****************************;
1499: F963
1500: F963         ;**************************** Physical IO State *****************************;
1501: F963             IOBufferState:                      ;
1502: F963 00          IOBufferDisk: DB     00H                  ;
1503: F964 00 00       IOBufferTrack: DW     0000H                ;
1504: F966 10          IOBufferSector: DB     010H                 ;
1505: F967         ;**************************** Physical IO State *****************************;
1506: F967
1507: F967         ;**************************** Buffer State **********************************;
1508: F967 00          DataInBufferFlag: DB     00H                  ;
1509: F968 00          DirtyBufferFlag: DB     00H                  ;
1510: F969         ;**************************** Buffer State **********************************;
1511: F969
1512: F969         ;**************************** Selected Record State *************************;
1513: F969         ;     variables for selected disk, track and sector                          ;
1514: F969         ;These are moved and compared as a group with Physical IO State. DO NOT ALTER;
1515: F969         ;
1516: F969             SelectedState:                      ;
1517: F969 00          SelectedDisk: DB     00H                  ;
1518: F96A 00 00       SelectedTrack: DW     0000H                ;
1519: F96C 00          SelectedSector: DB     00H                  ; (SelectedRecord/RecordsPerSector)  ;
1520: F96D             SelectedStateEnd:                      ;
1521: F96D             SelectedStateSize EQU    SelectedStateEnd - SelectedState ;
1522: F96D         ;
1523: F96D 00          SelectedRecord: DB     00H                  ;
1524: F96E         ;
1525: F96E 00          SelectedDskSecsPerHead: DB     00H                  ; Sectors / head	                 ;
1526: F96F         ;**************************** Selected Record State *************************;
1527: F96F
1528: F96F 00 00       DMAAddress: DW     0000H                ; Callers DMA address
1529: F971 00          DiskStatus: DB     00H                  ; Non-Zero - unrecoverable error
1530: F972 00          DiskCommand: DB     00H                  ; holds the disk command
1531: F973 00          WriteType: DB     00H                  ; The type of write set by BDOS
1532: F974
1533: F974         ;=============================================================================
1534: F974
1535: F974
1536: F974         ;*************************** Disk Definition Tables *************************;
1537: F974         ; These consists of disk parameter headers, with one entry per logical disk  ;
1538: F974         ; drive, and disk parameter blocks, with either one parameter block per      ;
1539: F974         ; logical disk or the same parameter block for several logical disks.        ;
1540: F974             DiskParameterHeaders:                      ;
1541: F974         ;
1542: F974         ; Logical Disk A: (3.25" HD 1.44MB Diskette)                                 ;
1543: F974 00 00                  DW     0000H                ; No Skew table                  	 ;
1544: F976 00 00                  DW     0000H                ; Rel pos for file (0-3)         	 ;
1545: F978 00 00                  DW     0000H                ; Last Selected Track #          	 ;
1546: F97A 00 00                  DW     0000H                ; Last Selected Sector #         	 ;
1547: F97C A8 FB                  DW     DirectoryBuffer      ; all disks use this buffer      	 ;
1548: F97E B4 F9                  DW     ParameterBlock3HD    ; specific to disk's parameters  	 ;
1549: F980 C4 F9                  DW     DiskAWorkArea        ;
1550: F982 44 FA                  DW     DiskAAllocationVector ;
1551: F984         ;
1552: F984         ; Logical Disk B: (3.25" HD 1.44MB Diskette)                                 ;
1553: F984 00 00                  DW     0000H                ; No Skew table                   	 ;
1554: F986 00 00                  DW     0000H                ; Rel pos for file (0-3)          	 ;
1555: F988 00 00                  DW     0000H                ; Last Selected Track #           	 ;
1556: F98A 00 00                  DW     0000H                ; Last Selected Sector #          	 ;
1557: F98C A8 FB                  DW     DirectoryBuffer      ; all disks use this buffer       	 ;
1558: F98E B4 F9                  DW     ParameterBlock3HD    ; specific to disk's parameters   	 ;
1559: F990 E4 F9                  DW     DiskBWorkArea        ;
1560: F992 9D FA                  DW     DiskBAllocationVector ;
1561: F994         ;
1562: F994         ; Logical Disk C: (3.25" HD 1.44MB Diskette)                                 ;
1563: F994 00 00                  DW     0000H                ; No Skew table                  	 ;
1564: F996 00 00                  DW     0000H                ; Rel pos for file (0-3)         	 ;
1565: F998 00 00                  DW     0000H                ; Last Selected Track #          	 ;
1566: F99A 00 00                  DW     0000H                ; Last Selected Sector #         	 ;
1567: F99C A8 FB                  DW     DirectoryBuffer      ; all disks use this buffer      	 ;
1568: F99E B4 F9                  DW     ParameterBlock3HD    ; specific to disk's parameters  	 ;
1569: F9A0 04 FA                  DW     DiskCWorkArea        ;
1570: F9A2 F6 FA                  DW     DiskCAllocationVector ;
1571: F9A4         ;
1572: F9A4         ; Logical Disk D: (3.25" HD 1.44MB Diskette)                                 ;
1573: F9A4 00 00                  DW     0000H                ; No Skew table                  	 ;
1574: F9A6 00 00                  DW     0000H                ; Rel pos for file (0-3)         	 ;
1575: F9A8 00 00                  DW     0000H                ; Last Selected Track #          	 ;
1576: F9AA 00 00                  DW     0000H                ; Last Selected Sector #         	 ;
1577: F9AC A8 FB                  DW     DirectoryBuffer      ; all disks use this buffer      	 ;
1578: F9AE B4 F9                  DW     ParameterBlock3HD    ; specific to disk's parameters  	 ;
1579: F9B0 24 FA                  DW     DiskDWorkArea        ;
1580: F9B2 4F FB                  DW     DiskDAllocationVector ;
1581: F9B4         ;*************************** Disk Definition Tables *************************;
1582: F9B4
1583: F9B4
1584: F9B4         ;-----------------------------------------------------------
1585: F9B4         ;******** Parameter Block for 3.5 Inch High Density 1.44 MB Diskettes *******;
1586: F9B4         ;
1587: F9B4             ParameterBlock3HD:                      ;
1588: F9B4 90 00                  DW     dpb3hdSPT            ; cpmRecords per track- (144)        ;
1589: F9B6 04                     DB     dpb3hdBSH            ; Block shift ( 4=> 2K)              ;
1590: F9B7 0F                     DB     dpb3hdBLM            ; Block mask                         ;
1591: F9B8 00                     DB     dpb3hdEXM            ; Extent mask                        ;
1592: F9B9 C6 02                  DW     dpb3hdDSM            ; Max allocation block number (710)  ;
1593: F9BB 7F 00                  DW     dpb3hdDRM            ; Max directory entries - 1 (127)    ;
1594: F9BD C0                     DB     dpb3hdAL0            ; Bit map for reserving allocation   ;
1595: F9BE 00                     DB     dpb3hdAL1            ;   blocks for file directory        ;
1596: F9BF 20 00                  DW     dpb3hdCKS            ; Disk change work area size (32)    ;
1597: F9C1 01 00                  DW     dpb3hdOFF            ; Number of tracks before directory  ;
1598: F9C3         ;
1599: F9C3 12                     DB     (dpb3hdSPT/4)/dpb3hdNOH ; number of Sectors/Head             ;
1600: F9C4         ;******** Parameter Block for 3.5 Inch High Density 1.44 MB Diskettes *******;
1601: F9C4
1602: F9C4         ;**************************** Disk Work Area ********************************;
1603: F9C4         ; This is used by the BDOS to detect any unexpected  change of diskette.     ;
1604: F9C4         ; The BDOS will  set such a changed diskette to read-only status.            ;
1605: F9C4         ;
1606: F9C4             DiskAWorkArea: DS     dpb3hdCKS            ; A:  020H	                         ;
1607: F9E4             DiskBWorkArea: DS     dpb3hdCKS            ; B:  020H	                         ;
1608: FA04             DiskCWorkArea: DS     dpb3hdCKS            ; C:  020H	                         ;
1609: FA24             DiskDWorkArea: DS     dpb3hdCKS            ; D:  020H	                         ;
1610: FA44         ;**************************** Disk Work Area ********************************;
1611: FA44
1612: FA44         ;************************ Disk Allocation Vectors ***************************;
1613: FA44         ; These are used by the BDOS to maintain a bit map of which allocation blocks;
1614: FA44         ; are used and which are free. One byte is used for eight allocation blocks, ;
1615: FA44         ; hence the  expression of the form  (allocation blocks/8)+1				 ;
1616: FA44         ;
1617: FA44             DiskAAllocationVector: DS     (dpb3hdDSM/8)+1      ; A:                  			 ;
1618: FA9D             DiskBAllocationVector: DS     (dpb3hdDSM/8)+1      ; B:                  			 ;
1619: FAF6         ;
1620: FAF6             DiskCAllocationVector: DS     (dpb3hdDSM/8)+1      ; C:                  			 ;
1621: FB4F             DiskDAllocationVector: DS     (dpb3hdDSM/8)+1      ; D:                  			 ;
1622: FBA8         ;************************ Disk Allocation Vectors ***************************;
1623: FBA8
1624: FBA8         ;********************************* Buffers **********************************;
1625: FBA8             DirectoryBuffer: DS     DirBuffSize          ;
1626: FC28         ;
1627: FC28         ;
1628: FC28             DiskBuffer:                      ;
1629: FC28                        DS     diskSectorSize       ;
1630: FE28         ;********************************* Buffers **********************************;
1631: FE28
1632: FE28             Z_HighestLocation:
1633: FE28             Z_MemoryLeft EQU    0FFFFH - Z_HighestLocation
1634: FE28
           ************************   Xref   ************************
0000: $               FE28
0750: AddressDataIn   F76D   0748
0765: AddressDataOut  F77D   0762
0775: AddressStatus   F786   0773
0093: ASCII_A         0041
0094: ASCII_C         0043
0095: ASCII_K         004B
0102: ASCII_LO_A      0061
0103: ASCII_LO_K      006B
0104: ASCII_LO_P      0070
0045: ASCII_MASK      007F   0756
0096: ASCII_N         004E
0097: ASCII_Q         0051
0098: ASCII_R         0052
0099: ASCII_W         0057
0100: ASCII_Y         0059
0080: ASCII_ZERO      0030
0074: ASTERISK        002A
0160: BDOSBase        E800   0161 0163
0129: BDOSE           0005   0130 0415 0417
0161: BDOSEntry       E800   0416
0150: BDOSLength      0E00   0153 0163 0164 0478
0063: BELL            0007
0163: BIOSBase        F600
0151: BIOSLength      0A00   0153
0123: BIOSPAGE        0002
0164: BIOSStart       F600   0305
0260: BlockSize       0800   0282
0355: BOOT            F633   0309
0297: BOOT_CON_ADDRESS 00EC   0455
1323: BufferMove      F8BC   1315
0041: BYTE            0001
0101: CARET           005E
0158: CCPEntry        E000   0160 0164 0397 0425 0480
0149: CCPLength       0800   0153 0160 0164 0478
0307: CodeStart       F600
0081: COLON           003A
0818: COM_DataPort    00EC   0862
0820: COM_InputMask   0002   0864
0819: COM_OutputMask  0001   0863
0817: COM_StatusPort  00ED   0861
0860: COM_Table       F7B5   0892 0902
0076: COMMA           002C
1240: CommonDiskIO    F857   1169
1374: CommonPhysical  F8F0   1368
0135: ComTail         0080   0136
0137: ComTailChars    0082
0136: ComTailCount    0081   0137
0889: CON_Vector      F7D3   0524 0580
0553: ConIn           F6F4   0555
0552: CONIN           F6F4   0313
0577: CONOUT          F700   0314
0578: CONOut          F700
0521: CONST           F6E2   0312
0522: ConStatus       F6E2   0554
0237: cpmRecordSize   0080   0239 0242 0244 1300 1301 1324
0066: CR              000D   0460 0462 0465 0468
0813: CRT_DataPort    0001   0854
0815: CRT_InputMask   007F   0856
0814: CRT_OutputMask  0080   0855
0812: CRT_StatusPort  0002   0853
0852: CRT_Table       F7AB   0891 0896 0903 0906
0049: CTRL_C          0003
0050: CTRL_E          0005
0051: CTRL_H          0008
0052: CTRL_K          000B
0053: CTRL_L          000C
0054: CTRL_P          0010
0055: CTRL_R          0012
0056: CTRL_S          0013
0057: CTRL_U          0015
0058: CTRL_X          0018
0059: CTRL_Z          001A
0077: DASH            002D
0271: DataBlocks      02C7   0281
1508: DataInBufferFlag F967   0967 1253 1288
1295: DataIsInBuffer  F896
0834: DataPortIndex   0001   0747 0761
0746: DataRead        F766   0755 0858 0866 0874
0754: DataReadASCII   F76F   0849
0838: DataReadIndex   0006   0557 0558 0682 0683
0270: DataSectors     0B1C   0271
0760: DataWrite       F775   0850 0859 0867 0875
0839: DataWriteIndex  0008   0588 0589
1492: DCTByteCount    F95B   1412
1487: DCTCommand      F956   1378 1428
1488: DCTDisk         F957   1382
1493: DCTDMAAddress   F95D   1415
1496: DCTEnd          F963   1497
1489: DCTHead         F958   1409
1495: DCTNextControlLocation F961   1425
1494: DCTNextStatusBlock F95F   1422
1491: DCTSector       F95A   1406
1497: DCTSize         000D
1486: DCTStart        F956   1497
1490: DCTTrack        F959   1386
1392: DetermineHead   F902
1396: DetermineHead1  F90A   1402
0242: DirBuffSize     0080   1625
0257: DirectoryBlockCount 0002   0282
1625: DirectoryBuffer FBA8   1547 1557 1567 1577
0244: DirectoryEntryPerRecord 0004   0285
0241: DirEntrySize    0020   0244 0282
1509: DirtyBufferFlag F968   0963 1266 1290 1318 1338
0302: DISK_READ       00FF   1165 1314
0303: DISK_WRITE      0000   1234
1617: DiskAAllocationVector FA44   1550
1606: DiskAWorkArea   F9C4   1549
1618: DiskBAllocationVector FA9D   1560
1628: DiskBuffer      FC28   1306 1414
1607: DiskBWorkArea   F9E4   1559
1620: DiskCAllocationVector FAF6   1570
1530: DiskCommand     F972   1166 1235 1313
0229: DiskCommandBlock 0046   0434 1429
0228: DiskControlByte 0045   0436 0482 1424 1433
0231: DiskControlTable 0040   0494
1608: DiskCWorkArea   FA04   1569
1621: DiskDAllocationVector FB4F   1580
1609: DiskDWorkArea   FA24   1579
1450: DiskError       F950   1444
1540: DiskParameterHeaders F974   1012
0233: DiskReadCode    0001   0472 0486 1371
0238: diskSectorSize  0200   0239 0260 0268 0491 1411 1629
1529: DiskStatus      F971   1242 1331 1340 1446 1452
0227: DiskStatusLocation 0043   0444 0481 0493 1421 1442
0234: DiskWriteCode   0002   1367
0451: DisplayMessage  F68B   0362 0403 0457
1528: DMAAddress      F96F   1096 1308
0140: DMABuffer       0080   0419
0070: DOLLAR          0024
1294: DoPart2         F896   1262
0283: dpb3hdAL0       00C0   1594
0284: dpb3hdAL1       0000   1595
0279: dpb3hdBLM       000F   1590
0278: dpb3hdBSH       0004   1589
0285: dpb3hdCKS       0020   1596 1606 1607 1608 1609
0282: dpb3hdDRM       007F   0285 1593
0281: dpb3hdDSM       02C6   1592 1617 1618 1620 1621
0280: dpb3hdEXM       0000   1591
0287: dpb3hdNOH       0002   1599
0286: dpb3hdOFF       0001   1597
0277: dpb3hdSPT       0090   1588 1599
0828: DUMMY_DataPort  0010   0878
0830: DUMMY_InputMask 007F   0880
0829: DUMMY_OutputMask 00FF   0879
0827: DUMMY_StatusPort 0011   0877
0876: DUMMY_Table     F7C9   0893 0897 0898 0901 0908
0784: DUMMYCheck      F78B   0881
0780: DUMMYRead       F789   0882
0782: DUMMYWrite      F78A   0883
0144: END_OF_FILE     001A
0047: EndOfMessage    0000   0462 0468
0085: EQUAL_SIGN      003D
0068: EXCLAIM_POINT   0021
0036: FALSE           0000   0966 1289 1337
0132: FCB1            005C   0133
0133: FCB2            006C
0177: fCloseFile      0010
0168: fConsoleIn      0001
0169: fConsoleOut     0002
0180: fDeleteFile     0013
0172: fGetConsoleStatus 000B
0186: fGetCurrentDisk 0019
0185: fGetLoginVector 0018
0188: fGetSetUserNumber 0020
0173: fGetVersion     000C
0183: fMakeFile       0016
0176: fOpenFile       000F
0170: fPrintString    0009
0181: fReadSeq        0014
0171: fReadString     000A
0184: fRenameFile     0017
0174: fResetSystem    000D
0178: fSearchFirst    0011
0179: fSearchNext     0012
0175: fSelectDisk     000E
0187: fSetDMA         001A
0182: fWriteSeq       0015
0526: GenericInStatus F6E9   0679
0582: GenericOutStatus F707   0614 0649
0585: GenericOutStatus1 F70A   0587
0736: GetInStatus     F75C   0528
0732: GetOutStatus    F757   0586 0723
0738: GetStatus       F75F   0735
0086: GREATER_THAN    003E
0069: HASH_TAG        0023
1404: HeadFound       F913   1398
0962: HOME            F7F3   0318
0968: Home1           F7FF   0965
0299: IN_OPCODE       00DB   0749 0774
0836: InputMaskIndex  0003   0737
1502: IOBufferDisk    F963   1380
1504: IOBufferSector  F966   1395
1501: IOBufferState   F963   1282 1348
1503: IOBufferTrack   F964   1384
0124: IOBYTE          0003   0523 0579 0610 0643 0674 0718
1345: IsItMyData      F8D8   1261
1350: IsItMyData1     F8E0   1356
0301: JP_OPCODE       00C3   0409
0072: L_PAREN         0028
0089: LEFT_ARROW      005F
0105: LEFT_CURLY      007B
0153: LengthInBytes   2000   0154 0158 0268
0154: LengthInK       0009
0084: LESS_THAN       003C
0065: LF              000A   0460 0462 0465 0468
0609: LIST            F716   0315
0717: LISTST          F743   0325
0039: LO_NIBBLE_MASK  000F
0408: LoadPage0       F657   0400
0823: LPT_DataPort    0010   0870
0825: LPT_InputMask   007F   0872
0824: LPT_OutputMask  00FF   0871
0822: LPT_StatusPort  0011   0869
0868: LPT_Table       F7BF   0905 0907
0904: LST_Vector      F7EB   0613 0721
0156: MemorySize      0040   0158
0269: myOffset        0001   0270 0286
0459: NoDiskMessage   F693   0361
0061: NULL            0000
0253: NumberOfHeads   0002   0264 0266 0277 0287
0250: NumberOfLogicalDisks 0004   1001
0038: OFF             0000
0037: ON              FFFF
0300: OUT_OPCODE      00D3   0764
0835: OutputMaskIndex 0002   0734
1587: ParameterBlock3HD F9B4   1548 1558 1568 1578
0071: PERCENT         0025
0078: PERIOD          002E
0127: Pg0CurentDisk   0004   0423
0126: Pg0CurentUser   0004   0127
1370: PhysicalRead    F8EE   1286
1366: PhysicalWrite   F8E9   1274 1339
0075: PLUS_SIGN       002B
1279: PreRead         F87E   1257 1268
1272: PreWrite        F87B
0899: PUN_Vector      F7E3   0648
0642: PUNCH           F721   0316
0087: QMARK           003F
0073: R_PAREN         0029
0120: RAM             0000   0122 0123 0124 0126 0129 0132 0135 0140 0142
0894: RDR_Vector      F7DB   0677
1164: READ            F841   0323
0673: READER          F72E   0317
0678: READER1         F737   0680
0433: ReadRawDisk     F679   0358 0399
0262: RecordsPerBlock 0010
0246: RecordsPerExtent 0080
0239: recordsPerSector 0004   0262 0277
0485: ROMControl      F6D5   0357
0090: RUBOUT          007F
1302: SectorInBuffer1 F8A3   1304
0291: SectorMask      0003   1297
0256: SectorsPerBlock 0004   0260 0262 0265 0271 0291
0266: SectorsPerCylinder 0024   0269 0270
0255: SectorsPerTrack 0012   0264 0266 0277
1119: SECTRAN         F83E   0326
0998: SELDSK          F805   0319
1517: SelectedDisk    F969   1004
1525: SelectedDskSecsPerHead F96E   1022 1394
1523: SelectedRecord  F96D   1077 1244 1296
1519: SelectedSector  F96C   1248
1516: SelectedState   F969   1281 1347 1521
1520: SelectedStateEnd F96D   1521
1521: SelectedStateSize 0004   1283 1349
1518: SelectedTrack   F96A   1050
0083: SEMICOLON       003B
0790: SetDeviceVector F78F   0527 0583 0722
1095: SETDMA          F839   0322 0420
1075: SETSEC          F834   0321
1046: SETTRK          F82F   0320 0970
0079: SLASH           002F
0062: SOH             0001
0067: SPACE           0020
0833: StatusPortIndex 0000   0772
0771: StatusRead      F77F   0848 0857 0865 0873
0837: StatusReadIndex 0004   0739 0740
0268: SystemSectors   0011   0269
0064: TAB             0009
0130: TopRAM          0007
0265: TotalNumberOfBlocks 02D0
0264: TotalNumberOfSectors 0B40   0265 0270
0142: TPA             0100   0359 0492
0254: TracksPerHead   0050   0264
0035: TRUE            FFFF   0964 1255 1256 1267 1287 1317
0808: TTY_DataPort    00EC   0845
0810: TTY_InputMask   007F   0847
0809: TTY_OutputMask  0080   0846
0807: TTY_StatusPort  00ED   0844
0843: TTY_Table       F7A1   0890 0895 0900
0088: UNDER_SCORE     005F
0439: WaitForBootComplete F681   0442
1436: WaitForDiskComplete F93E   1439
0122: WarmBoot        0000   0411 0413
0310: WarmBootEntry   F603   0412
0464: WarmBootErroMessage F6AE   0402
0396: WBOOT           F643   0311 0404
0471: WBOOTControl    F6C8   0398
0042: WORD            0002
1231: WRITE           F84E   0324
0202: WriteAllocated  0000
0204: WriteCleanBuffer 0002   1167
0203: WriteDirectory  0001   1330
1531: WriteType       F973   1168 1233 1329
1632: Z_HighestLocation FE28   1633
1633: Z_MemoryLeft    01D7
0046: ZERO            0000
