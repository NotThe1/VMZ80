0001: E800         ;     File created by MakeZ80Source on Tue Sep 18 12:41:03 EDT 2018 from:
0002: E800         ;     C:\Users\admin\Dropbox\Resources\CPM\CurrentOS\8080\BDOSX.asm
0003: E800         ; BDOS.Z80
0004: E800         ;  in process Make File (16H)
0005: E800
0006: E800         ; 2019-02-04 Fixed bdosStack problem
0007: E800         ; 2019-01-10	Last rev before remaking  FInd nearest Block
0008: E800         ; 2019-01-11 - BDOS 0.B  - Function 0-A Refactored to Z80 idiom
0009: E800         ; 2018-12-28 Started to refactor to Z80 idiom
0010: E800         ; 2018-03-31 added vector for BDOS Call 5 -ListOut
0011: E800         ; 2018-03-02 Refactored the CP/M Suite
0012: E800         ; 2018-02-12 fixed allocate 16 bit problem
0013: E800         ; 2014-01-16 extended from part of newOS (newBDOS)
0014: E800         ; 2014-03-14  :  Frank Martyn
0015: E800             fcbExtIndexLSB EQU    0CH                  ; 12
0016: E800             fcbExtIndexMSB EQU    0EH                  ; 14   Bit 7 = Write protected
0017: E800
0018: E800                        Include ./stdHeader.Z80
0019: E800         ;<<<<<<<<<<<<<<<<<<<<<<< Include >>>>>>>>>>>>>>>>
0020: E800         ;     File created by MakeZ80Source on Mon Sep 17 16:25:01 EDT 2018 from:
0021: E800         ;     C:\Users\admin\Dropbox\Resources\CPM\CurrentOS\8080\stdHeader.asm
0022: E800         ; stdHeader.asm
0023: E800         ; standard equates
0024: E800
0025: E800         ; 2017-03-02 Refactored the CP/M Suite
0026: E800
0027: E800
0028: E800             TRUE       EQU    -1                   ; not false
0029: E800             FALSE      EQU    0000H
0030: E800             ON         EQU    -1
0031: E800             OFF        EQU    0000H
0032: E800             LO_NIBBLE_MASK EQU    0FH                  ; mask used to obtain the bytes low four bits
0033: E800
0034: E800             BYTE       EQU    1                    ; number of bytes for "byte" type
0035: E800             WORD       EQU    2                    ; number of bytes for "word" type
0036: E800
0037: E800
0038: E800             ASCII_MASK EQU    7FH                  ; Ascii mask 7 bits
0039: E800             ZERO       EQU    00H                  ; Zero
0040: E800             EndOfMessage EQU    00H
0041: E800
0042: E800             CTRL_C     EQU    03H                  ; ETX
0043: E800             CTRL_E     EQU    05H                  ; physical eol
0044: E800             CTRL_H     EQU    08H                  ; backspace
0045: E800             CTRL_K     EQU    0BH                  ; VT - Vertical tab
0046: E800             CTRL_L     EQU    0CH                  ; FF - Form feed
0047: E800             CTRL_P     EQU    10H                  ; prnt toggle
0048: E800             CTRL_R     EQU    12H                  ; repeat line
0049: E800             CTRL_S     EQU    13H                  ; X-OFF stop/start screen
0050: E800             CTRL_U     EQU    15H                  ; line delete
0051: E800             CTRL_X     EQU    18H                  ; =ctl-u
0052: E800             CTRL_Z     EQU    1AH                  ; end of file
0053: E800
0054: E800             NULL       EQU    00H                  ; Null
0055: E800             SOH        EQU    01H                  ; Start of Heading
0056: E800             BELL       EQU    07H                  ; Bell
0057: E800             TAB        EQU    09H                  ; Tab
0058: E800             LF         EQU    0AH                  ; Line Feed
0059: E800             CR         EQU    0DH                  ; Carriage Return
0060: E800             SPACE      EQU    20H                  ; Space
0061: E800             EXCLAIM_POINT EQU    21H                  ; Exclamtion Point
0062: E800             HASH_TAG   EQU    23H                  ; Sharp sign #
0063: E800             DOLLAR     EQU    24H                  ; Dollar Sign
0064: E800             PERCENT    EQU    25H                  ; Percent Sign
0065: E800             L_PAREN    EQU    28H                  ; Left Paenthesis (
0066: E800             R_PAREN    EQU    29H                  ; Right Paenthesis )
0067: E800             ASTERISK   EQU    2AH                  ; Asterisk *
0068: E800             PLUS_SIGN  EQU    2BH                  ; Plus sign +
0069: E800             COMMA      EQU    2CH                  ; Comma
0070: E800             DASH       EQU    2DH                  ; Dash Hyphen -
0071: E800             PERIOD     EQU    2EH                  ; Period
0072: E800             SLASH      EQU    2FH                  ; /
0073: E800             ASCII_ZERO EQU    30H                  ; zero
0074: E800             COLON      EQU    3AH                  ; Colon
0075: E800
0076: E800             SEMICOLON  EQU    3BH                  ; Semi Colon
0077: E800             LESS_THAN  EQU    3CH                  ; Less Than <
0078: E800             EQUAL_SIGN EQU    3DH                  ; Equal Sign
0079: E800             GREATER_THAN EQU    3EH                  ; Greater Than >
0080: E800             QMARK      EQU    3FH                  ; Question Mark
0081: E800             UNDER_SCORE EQU    5FH                  ; under score _
0082: E800             LEFT_ARROW EQU    5FH                  ; Left Arrow ?
0083: E800             RUBOUT     EQU    7FH                  ; Delete Key
0084: E800
0085: E800
0086: E800             ASCII_A    EQU    'A'
0087: E800             ASCII_C    EQU    'C'
0088: E800             ASCII_K    EQU    'K'
0089: E800             ASCII_N    EQU    'N'
0090: E800             ASCII_Q    EQU    'Q'
0091: E800             ASCII_R    EQU    'R'
0092: E800             ASCII_W    EQU    'W'
0093: E800             ASCII_Y    EQU    'Y'
0094: E800             CARET      EQU    '^'
0095: E800             ASCII_LO_A EQU    'a'
0096: E800             ASCII_LO_K EQU    'k'
0097: E800             ASCII_LO_P EQU    'p'
0098: E800             LEFT_CURLY EQU    '{'                  ; Left curly Bracket
0099: E800
0100: E800         ;<<<<<<<<<<<<<<<<<<<<<<< Include >>>>>>>>>>>>>>>>
0101: E800                        Include ./osHeader.Z80
0102: E800         ;<<<<<<<<<<<<<<<<<<<<<<< Include >>>>>>>>>>>>>>>>
0103: E800         ;     File created by MakeZ80Source on Mon Sep 17 16:25:47 EDT 2018 from:
0104: E800         ;     C:\Users\admin\Dropbox\Resources\CPM\CurrentOS\8080\osHeader.asm
0105: E800         ; osHeader.Z80
0106: E800
0107: E800         ; 2018-12-28 Changed BDOSEntry to remove dead space in BDOS
0108: E800         ; 2017-03-02 Refactored the CP/M Suite
0109: E800
0110: E800         ; Contains the Equates used by the CP/M system
0111: E800
0112: E800         ;------------------------Page Zero Constants ---------------------------------
0113: E800             RAM        EQU    0                    ; Start of RAM ( and the Base page)
0114: E800
0115: E800             WarmBoot   EQU    RAM + 0              ; Contains a JMP instruction to warm boot in BIOS
0116: E800             BIOSPAGE   EQU    RAM + 2              ; BIOS Jump Vector Page
0117: E800             IOBYTE     EQU    RAM + 3              ; Input/Output redirection byte
0118: E800
0119: E800             Pg0CurentUser EQU    RAM + 4              ; Current user ( bits 7-4)
0120: E800             Pg0CurentDisk EQU    Pg0CurentUser        ; Default logical disk (bits 0-3)
0121: E800
0122: E800             BDOSE      EQU    RAM + 5              ; Contains a JMP to BDOS entry
0123: E800             TopRAM     EQU    BDOSE+2              ; Top page of usable RAM
0124: E800
0125: E800             FCB1       EQU    RAM + 05CH           ; File Control Block #1
0126: E800             FCB2       EQU    FCB1 + 16            ; File Control Block #2
0127: E800
0128: E800             ComTail    EQU    RAM + 080H           ; Complete command tail
0129: E800             ComTailCount EQU    ComTail + 1          ; Count of the number of char in tail
0130: E800             ComTailChars EQU    ComTailCount + 1     ; Complete Command tail up-cased, w/o trailing CR
0131: E800         ;-----------------------------------------------------------------------
0132: E800
0133: E800             DMABuffer  EQU    RAM + 080H           ; Default "DMA" address used as buffer
0134: E800         ;-----------------------------------------------------------------------
0135: E800             TPA        EQU    RAM + 0100H          ; Start of Transient program Area
0136: E800         ;-----------------------------------------------------------------------
0137: E800             END_OF_FILE EQU    1AH                  ; end of file
0138: E800         ;-----------------------------------------------------------------------
0139: E800
0140: E800         ;--------------- CP/M Constants -----------------------------------------
0141: E800
0142: E800             CCPLength  EQU    0800H                ; Constant
0143: E800             BDOSLength EQU    0E00H                ; Constant 0E00H
0144: E800             BIOSLength EQU    0A00H                ; Constant 0900H
0145: E800
0146: E800             LengthInBytes EQU    CCPLength + BDOSLength + BIOSLength
0147: E800             LengthInK  EQU    (LengthInBytes/1024) + 1
0148: E800
0149: E800             MemorySize EQU    64
0150: E800
0151: E800             CCPEntry   EQU    (MemorySize * 1024) - LengthInBytes
0152: E800
0153: E800             BDOSBase   EQU    CCPEntry + CCPLength
0154: E800             BDOSEntry  EQU    BDOSBase
0155: E800
0156: E800             BIOSBase   EQU    BDOSBase + BDOSLength
0157: E800             BIOSStart  EQU    CCPEntry + CCPLength + BDOSLength
0158: E800         ;-----------------------------------------------------------------------
0159: E800
0160: E800         ;------------------- BDOS System Call Equates --------------------------
0161: E800             fConsoleIn EQU    01H                  ; rcharf - Console Input
0162: E800             fConsoleOut EQU    02H                  ; pcharf - Console Output
0163: E800             fPrintString EQU    09H                  ; pbuff	- Print String
0164: E800             fReadString EQU    0AH                  ; rbuff	- Read Console String
0165: E800             fGetConsoleStatus EQU    0BH                  ; breakf - Get Console Status
0166: E800             fGetVersion EQU    0CH                  ; liftf	- Return Version Number
0167: E800             fResetSystem EQU    0DH                  ; initf	- Reset Disk System
0168: E800             fSelectDisk EQU    0EH                  ; self	- Select Disk
0169: E800             fOpenFile  EQU    0FH                  ; openf	- Open File
0170: E800             fCloseFile EQU    10H                  ; closef - Close File
0171: E800             fSearchFirst EQU    11H                  ; searf	- Search For First
0172: E800             fSearchNext EQU    12H                  ; searnf - Search for Next
0173: E800             fDeleteFile EQU    13H                  ; delf - Delete File
0174: E800             fReadSeq   EQU    14H                  ; dreadf - Read Sequential
0175: E800             fWriteSeq  EQU    15H                  ; dwritf - Write Sequential
0176: E800             fMakeFile  EQU    16H                  ; makef	- Make File
0177: E800             fRenameFile EQU    17H                  ; renf	- Rename File
0178: E800             fGetLoginVector EQU    18H                  ; logf	- Return Login Vector
0179: E800             fGetCurrentDisk EQU    19H                  ; cself	- Return Current Disk
0180: E800             fSetDMA    EQU    1AH                  ; dmaf	- Set DMA address
0181: E800             fGetSetUserNumber EQU    20H                  ; userf	- Set/Get User Code
0182: E800         ;-----------------------------------------------------------------------
0183: E800
0184: E800
0185: E800
0186: E800
0187: E800
0188: E800         ;*******************************************************************************
0189: E800         ; These are the values handed over by the BDOS when it calls the Writer operation
0190: E800         ; The allocated.unallocated indicates whether the BDOS is set to write to an
0191: E800         ; unallocated allocation block (it only indicates this for the first 128 byte
0192: E800         ; sector write) or to an allocation block that has already been allocated to a
0193: E800         ; file. The BDOS also indicates if it is set to write to the file directory
0194: E800         ;*******************************************************************************
0195: E800             WriteAllocated EQU    00H
0196: E800             WriteDirectory EQU    01H
0197: E800             WriteCleanBuffer EQU    02H
0198: E800
0199: E800
0200: E800         ;<<<<<<<<<<<<<<<<<<<<<<< Include >>>>>>>>>>>>>>>>
0201: E800                        Include ./diskHeader.Z80
0202: E800         ;<<<<<<<<<<<<<<<<<<<<<<< Include >>>>>>>>>>>>>>>>
0203: E800         ;     File created by MakeZ80Source on Mon Sep 17 16:26:22 EDT 2018 from:
0204: E800         ;     C:\Users\admin\Dropbox\Resources\CPM\CurrentOS\8080\diskHeader.asm
0205: E800         ; diskHeader.asm
0206: E800
0207: E800         ; 2017-03-02 Refactored the CP/M Suite
0208: E800
0209: E800         ; needs osHeader.asm declared before this is used !!!!!!!
0210: E800
0211: E800         ; Contains the Equates used by the CP/M system to handle disks
0212: E800
0213: E800
0214: E800         ;*******************************************************************************
0215: E800         ;
0216: E800         ;     Disk related values
0217: E800         ;
0218: E800         ;
0219: E800         ;*******************************************************************************
0220: E800             DiskStatusLocation EQU    043H                 ; status after disk I/O placed here
0221: E800             DiskControlByte EQU    045H                 ; control byte for disk I/O
0222: E800             DiskCommandBlock EQU    046H                 ; Control Table Pointer
0223: E800         ; for boot
0224: E800             DiskControlTable EQU    0040H
0225: E800
0226: E800             DiskReadCode EQU    01H                  ; Code for Read
0227: E800             DiskWriteCode EQU    02H                  ; Code for Write
0228: E800
0229: E800
0230: E800             cpmRecordSize EQU    080H                 ; (128) record size that CP/M uses
0231: E800             diskSectorSize EQU    200H                 ; (512) size of physical disk I/O
0232: E800             recordsPerSector EQU    diskSectorSize/cpmRecordSize
0233: E800
0234: E800             DirEntrySize EQU    20H                  ; (32)
0235: E800             DirBuffSize EQU    cpmRecordSize
0236: E800
0237: E800             DirectoryEntryPerRecord EQU    cpmRecordSize / DirEntrySize
0238: E800
0239: E800             RecordsPerExtent EQU    080H                 ; extent Record capacity
0240: E800
0241: E800
0242: E800         ;-------------------------------------------------------------------------------------
0243: E800             NumberOfLogicalDisks EQU    4                    ; max number of disk in this system
0244: E800
0245: E800         ;----------------------3.5 Double Density Disk Geometry----------------------------------------
0246: E800             NumberOfHeads EQU    02H                  ; number of heads
0247: E800             TracksPerHead EQU    50H                  ; 80
0248: E800             SectorsPerTrack EQU    12H                  ; 18 -  1 head only
0249: E800             SectorsPerBlock EQU    04H                  ; 2048 bytes
0250: E800             DirectoryBlockCount EQU    02H                  ;
0251: E800         ;-----------------------------------------------------------------------
0252: E800
0253: E800             BlockSize  EQU    SectorsPerBlock * 	diskSectorSize ; Size in Bytes
0254: E800
0255: E800             RecordsPerBlock EQU    recordsPerSector * SectorsPerBlock
0256: E800
0257: E800             TotalNumberOfSectors EQU    SectorsPerTrack * TracksPerHead * NumberOfHeads
0258: E800             TotalNumberOfBlocks EQU    TotalNumberOfSectors / SectorsPerBlock
0259: E800             SectorsPerCylinder EQU    SectorsPerTrack * NumberOfHeads
0260: E800
0261: E800             SystemSectors EQU    LengthInBytes / diskSectorSize + 1 ; need to account for boot sector
0262: E800             myOffset   EQU    (SystemSectors / SectorsPerCylinder) + 1 ;
0263: E800             DataSectors EQU    TotalNumberOfSectors - (SectorsPerCylinder * myOffset)
0264: E800             DataBlocks EQU    DataSectors / 	SectorsPerBlock
0265: E800
0266: E800         ;-----------------------------------------------------------------------
0267: E800         ;; Disk block parameters for F3HD - 3.5 HD   1.44 MB Diskette
0268: E800         ;-----------------------------------------------------------------------
0269: E800         ;dpb3hdSPT				EQU		0090H			; cpmRecords per track- (144)
0270: E800             dpb3hdSPT  EQU    recordsPerSector * SectorsPerTrack * NumberOfHeads ; SPT - records per Clynder
0271: E800             dpb3hdBSH  EQU    04H                  ; Block Shift Factor - BlockSize = 128 * (2**BSH)											; BSH = Log2(BlockSize/cpmRecordSize)
0272: E800             dpb3hdBLM  EQU    0FH                  ; BlockMask = (2**BSH) -1
0273: E800             dpb3hdEXM  EQU    00H                  ; Extent mask = (PhysicalExtents/LogicalExtents) - 1
0274: E800             dpb3hdDSM  EQU    DataBlocks -1        ; Maximum allocation block number (710)
0275: E800             dpb3hdDRM  EQU    ((BlockSize *  DirectoryBlockCount)	/	DirEntrySize) -1 ; DRM Number of directory entries - 1 (127)
0276: E800             dpb3hdAL0  EQU    0C0H                 ; Bit map for reserving 1 alloc. block
0277: E800             dpb3hdAL1  EQU    00H                  ;  for each file directory
0278: E800             dpb3hdCKS  EQU    (dpb3hdDRM +1)/ DirectoryEntryPerRecord ; Disk change work area size (32)
0279: E800             dpb3hdOFF  EQU    myOffset             ; Number of tracks before directory
0280: E800             dpb3hdNOH  EQU    NumberOfHeads
0281: E800
0282: E800         ;*******************************************************************************
0283: E800
0284: E800             SectorMask EQU    SectorsPerBlock - 1
0285: E800
0286: E800         ;***************************************************************************
0287: E800
0288: E800         ;<<<<<<<<<<<<<<<<<<<<<<< Include >>>>>>>>>>>>>>>>
0289: E800
0290: E800             VERSION    EQU    20H                  ; Version 2.0
0291: E800             STACK_SIZE EQU    20H                  ; Make stack big enough
0292: E800             EOD        EQU    -1                   ; End of Directory
0293: E800
0294: E800         ;************************ BIOS Function Constants ***************************;
0295: E800             bcBoot     EQU    BIOSStart+3*0        ; Cold Boot function	             ;
0296: E800             bcWboot    EQU    BIOSStart+3*1        ; Warm Boot function                 ;
0297: E800             bcConst    EQU    BIOSStart+3*2        ; Console Status function            ;
0298: E800             bcConin    EQU    BIOSStart+3*3        ; Console Input function             ;
0299: E800             bcConout   EQU    BIOSStart+3*4        ; Console Output function            ;
0300: E800             bcList     EQU    BIOSStart+3*5        ; List Output function               ;
0301: E800             bcPunch    EQU    BIOSStart+3*6        ; Punch Output function              ;
0302: E800             bcReader   EQU    BIOSStart+3*7        ; Reader Input function              ;
0303: E800             bcHome     EQU    BIOSStart+3*8        ; Disk Home function                 ;
0304: E800             bcSeldsk   EQU    BIOSStart+3*9        ; Select Disk function               ;
0305: E800             bcSettrk   EQU    BIOSStart+3*10       ; Set Track function                 ;
0306: E800             bcSetsec   EQU    BIOSStart+3*11       ; Set Sector function                ;
0307: E800             bcSetdma   EQU    BIOSStart+3*12       ; Set DMA function                   ;
0308: E800             bcRead     EQU    BIOSStart+3*13       ; Read Disk function                 ;
0309: E800             bcWrite    EQU    BIOSStart+3*14       ; Write Disk function                ;
0310: E800             bcListst   EQU    BIOSStart+3*15       ; List Status function               ;
0311: E800             bcSectran  EQU    BIOSStart+3*16       ; Sector Translate                   ;
0312: E800         ;************************ BIOS Function Constants ***************************;
0313: E800
0314: E800         ;============================================================================;
0315: E800         ;	BDOS                                                                     ;
0316: E800         ; Calling into   :                                                           ;
0317: E800         ;					Register  C - Contains BDOS Function Code                ;
0318: E800         ;					Register  A - Holds the Byte argument if any             ;
0319: E800         ;					Register DE - Holds the Word argument if any             ;
0320: E800         ; Returning from :                                                           ;
0321: E800         ;					Register  A - The Byte return value if any               ;
0322: E800         ;					Register HL - The Word return value if any               ;
0323: E800         ;                   ( Register A=L and B=H)                                  ;
0324: E800         ;============================================================================;
0325: E800
0326: E800
0327: E800                        ORG    BDOSBase
0328: E800
0329: E800         ;===========================BDOS Entry=======================================;
0330: E800         ;BDOSEntry:                                                                  ;
0331: E800         ;
0332: E800         ;
0333: E800             BdosStart:                      ;
0334: E800         ;	LD		A,C                                                              ;
0335: E800         ; 	LD		(FunctionValue),A			; Save the function number           ;
0336: E800         ;
0337: E800         ; Save Calling Arguments                                                     ;
0338: E800 ED 53 C3 EA               LD     (paramDE),DE         ; Save the Word Argument             ;
0339: E804 7B                     LD     A,E                  ;
0340: E805 32 C2 EA               LD     (paramE),A           ; Save the Byte argument             ;
0341: E808         ; Save users Stack pointer                                                   ;
0342: E808 ED 73 BC EA               LD     (usersStack),SP      ; Save the User's stack				 ;
0343: E80C 31 DD F5               LD     SP,bdosStack         ; We will use our own stack			 ;
0344: E80F         ;
0345: E80F         ; initialize variables                                                       ;
0346: E80F 21 00 00               LD     HL,0000H             ;
0347: E812 22 C5 EA               LD     (exitParameterWord),HL ; Assume all is well for return      ;
0348: E815 AF                     XOR    A                    ;
0349: E816 32 91 F5               LD     (fcbDisk),A          ; Initialize to 00                   ;
0350: E819 32 8F F5               LD     (fResel),A           ; Clear re selection flag            ;
0351: E81C         ;
0352: E81C         ; Set up for return to caller when Function Completes                        ;
0353: E81C 21 32 E8               LD     HL,ReturnToCaller    ;
0354: E81F E5                     PUSH   HL                   ;Set up to ReturnToCaller            ;
0355: E820         ;
0356: E820         ; is it a valid function number ?	                                         ;
0357: E820         ;	LD		A,(FunctionValue)			; Get the Function Number            ;
0358: E820 79                     LD     A,C                  ;
0359: E821 FE 28                  CP     functionCount        ; make sure its a good number        ;
0360: E823 D0                     RET    NC                   ; exit if not a valid function       ;
0361: E824         ;
0362: E824         ; Calculate the index and get vector to go to	                             ;
0363: E824 4B                     LD     C,E                  ; Assume byte argument               ;
0364: E825 21 57 E8               LD     HL,functionTable     ; Get table base                     ;
0365: E828 5F                     LD     E,A                  ; Function number in E               ;
0366: E829 16 00                  LD     D,0                  ;
0367: E82B 19                     ADD    HL,DE                ; Have byte location                 ;
0368: E82C 19                     ADD    HL,DE                ;  but we want a Word offset         ;
0369: E82D 5E                     LD     E,(HL)               ; Get LSB of vector                  ;
0370: E82E 23                     INC    HL                   ;
0371: E82F 56                     LD     D,(HL)               ; Get MSB of vector                  ;
0372: E830 EB                     EX     DE,HL                ; Vector now in HL                   ;
0373: E831         ;
0374: E831         ; Vector to Function is in HL                                                ;
0375: E831 E9                     JP     (HL)                 ; Put it into the Program Counter    ;
0376: E832         ;===========================BDOS Entry=======================================;
0377: E832         ;===========================BDOS Exit =======================================;
0378: E832         ;arrive here at end of processing to return to user                          ;
0379: E832             ReturnToCaller:                      ;
0380: E832 3A 8F F5               LD     A,(fResel)           ; get re-selection flag              ;
0381: E835 B7                     OR     A                    ; is it set?                         ;
0382: E836 28 15                  JR     Z,ReturnToCaller1    ;
0383: E838         ;re-selection  may have taken place                                         ;
0384: E838 2A C3 EA               LD     HL,(paramDE)         ;
0385: E83B 36 00                  LD     (HL),0               ;
0386: E83D 3A 91 F5               LD     A,(fcbDisk)          ;
0387: E840 B7                     OR     A                    ; Disk = 0?                          ;
0388: E841 28 0A                  JR     Z,ReturnToCaller1    ; exit if yes                  		 ;
0389: E843         ;
0390: E843 77                     LD     (HL),A               ;
0391: E844 3A 90 F5               LD     A,(entryDisk)        ; get back original Disk             ;
0392: E847 32 C2 EA               LD     (paramE),A           ; and select it                      ;
0393: E84A CD BC EC               CALL   SelectCurrent        ;
0394: E84D         ;
0395: E84D             ReturnToCaller1:                      ;
0396: E84D 2A BC EA               LD     HL,(usersStack)      ;
0397: E850 F9                     LD     SP,HL                ; restore callers stack              ;
0398: E851 2A C5 EA               LD     HL,(exitParameterWord) ;
0399: E854 7D                     LD     A,L                  ;
0400: E855 44                     LD     B,H                  ; BA = exitParameterWord             ;
0401: E856 C9                     RET                         ;
0402: E857         ;===========================BDOS Exit =======================================;
0403: E857
0404: E857         ;++++++++++++++++++++++++++++ Function Vector Table +++++++++++++++++++++++++;
0405: E857             functionTable:                      ;
0406: E857 AA E8                  DW     vSystemReset         ;   0 - System Reset                 ;
0407: E859 AD E8                  DW     vConsoleIn           ;   1 - Console Input                ;
0408: E85B BE E8                  DW     vConsoleOut          ;   2 - Console Output               ;
0409: E85D C2 E8                  DW     vReaderIn            ;   3 - Reader Input                 ;
0410: E85F C9 E8                  DW     vPunchOut            ;   4 - Punch Output                 ;
0411: E861 CD E8                  DW     vListOut             ;   5 - List Output                  ;
0412: E863 D1 E8                  DW     vDirectConIO         ;   6 - Direct Console I/O           ;
0413: E865 E7 E8                  DW     vGetIOBYTE           ;   7 - Get I/O Byte                 ;
0414: E867 EE E8                  DW     vSetIOBYTE           ;   8 - Set I/O Byte                 ;
0415: E869 F3 E8                  DW     vPrintString         ;   9 - Print String                 ;
0416: E86B FC E8                  DW     vReadString          ;   A - Read Console String          ;
0417: E86D 00 E9                  DW     vGetConsoleStatus    ;   B - Get Console Status           ;
0418: E86F             diskf      EQU    ($-functionTable)/2  ; disk functions                     ;
0419: E86F 07 E9                  DW     vGetVersion          ;   C - Return Version Number        ;
0420: E871 C7 EA                  DW     vResetSystem         ;   D - Reset Disk System            ;
0421: E873 E0 EA                  DW     vSelectDisk          ;   E - Select Disk                  ;
0422: E875 E3 EA                  DW     vOpenFile            ;   F - Open File                    ;
0423: E877 EC EA                  DW     vCloseFile           ;  10 - Close File                   ;
0424: E879 F2 EA                  DW     vFindFirst           ;  11 - Search For First             ;
0425: E87B 0B EB                  DW     vFindNext            ;  12 - Search for Next              ;
0426: E87D 1A EB                  DW     vDeleteFile          ;  13 - Delete File                  ;
0427: E87F 6B F2                  DW     vReadSeq             ;  14 - Read Sequential              ;
0428: E881 72 F2                  DW     vWriteSeq            ;  15 - Write Sequential             ;
0429: E883 45 EB                  DW     vMakeFile            ;  16 - Make File                    ;
0430: E885 79 F2                  DW     vRenameFile          ;  17 - Rename File                  ;
0431: E887 4E EB                  DW     vGetLoginVector      ;  18 - Return Login Vector          ;
0432: E889 55 EB                  DW     vGetCurrentDisk      ;  19 - Return Current Disk          ;
0433: E88B 5C EB                  DW     vSetDMA              ;  1A - Set DMA address              ;
0434: E88D 65 EB                  DW     vGetAllocAddr        ;  1B - Get ADDR (ALLOC)             ;
0435: E88F 6C EB                  DW     vWriteProtectDisk    ;  1C - Write Protect Disk           ;
0436: E891 6F EB                  DW     vGetReadOnlyMap      ;  1D - Get Read/Only MAP	         ;
0437: E893 B3 EC                  DW     vSetFileAttributes   ;  1E - Set File Attributes ??       ;
0438: E895 76 EB                  DW     vGetDiskParamBlock   ;  1F - Get ADDR (Disk Parameters)   ;
0439: E897 0D E9                  DW     vGetSetUserNumber    ;  20 - Set/Get User Code            ;
0440: E899 7E EB                  DW     vReadRandom          ;  21 - Read Random                  ;
0441: E89B 84 EB                  DW     vWriteRandom         ;  22 - Write Random                 ;
0442: E89D 8A EB                  DW     vComputeFileSize     ;  23 - Compute File Size            ;
0443: E89F 90 EB                  DW     vSetRandomRecord     ;  24 - Set Random Record            ;
0444: E8A1 7D EB                  DW     vResetDrive          ;  25 - Reset Drive                  ;
0445: E8A3 A9 E8                  DW     DUMMY                ;  26 - Access Drive (not supported) ;
0446: E8A5 A9 E8                  DW     DUMMY                ;  27 - Free Drive (not supported)   ;
0447: E8A7 93 EB                  DW     vWriteRandom0Fill    ;  28 - Write random w/Fill          ;
0448: E8A9             functionCount EQU    ($-functionTable)/2  ; Number of  functions               ;
0449: E8A9         ;
0450: E8A9             DUMMY:                          ;
0451: E8A9 76                     HALT                        ;
0452: E8AA         ;++++++++++++++++++++++++++++ Function Vector Table +++++++++++++++++++++++++;
0453: E8AA
0454: E8AA         ;-------------------------- System Reset - 0 (0) ----------------------------;
0455: E8AA         ;  The system reset function makes CP/M do a complete reset, exactly the     ;
0456: E8AA         ; same as the warm boot function invoked when you transfer control to the    ;
0457: E8AA         ; WARMBOOT point. In addition to resetting the BDOS, this function reloads   ;
0458: E8AA         ; the CCP, rebuilds the allocation vectors for the currently logged disks,   ;
0459: E8AA         ; sets the DMA address (used byCP/M to address the disk read/write buffer)   ;
0460: E8AA         ; to 80H, marks all disks as being Read/Write status, and transfers control  ;
0461: E8AA         ; to the  CCP. The CCP then outputs its prompt to the console.               ;
0462: E8AA         ;																			 ;
0463: E8AA         ;			Function Code	 :	C = 00H                                      ;
0464: E8AA         ;			Entry Parameters:	None                                         ;
0465: E8AA         ;			Exit Parameters :	Does Not Return								 ;
0466: E8AA         ;																			 ;
0467: E8AA         ;-------------------------- System Reset - 0 (0) ----------------------------;
0468: E8AA             vSystemReset:
0469: E8AA C3 03 F6               JP     bcWboot              ; do a Warm Boot
0470: E8AD
0471: E8AD         ;****************************************************************************;
0472: E8AD         ;								IOByte device I/O							 ;
0473: E8AD         ;****************************************************************************;
0474: E8AD
0475: E8AD
0476: E8AD         ;-------------------------- Read Console Byte - 1 (1) -----------------------;
0477: E8AD         ;  This function reads the next byte of data from the console keyboard and   ;
0478: E8AD         ; puts it into register A. If the character input is a graphic character, it ;
0479: E8AD         ; will be echoed back to the console. The only control characters that are   ;
0480: E8AD         ; echoed are  CARRIAGE RETURN, LINE FEED, BACKSPACE, and TAB. In the case    ;
0481: E8AD         ; of a TAB character, the BDOS outputs as many spaces as are required to     ;
0482: E8AD         ; move the cursor to the next multiple of eight columns. All of the other    ;
0483: E8AD         ; control characters, including CONTROL-C, are input but are not echoed.     ;
0484: E8AD         ;  This function also checks for CONTROL-S (XOFF) to see if console output   ;
0485: E8AD         ; should be suspended, and for CONTROL-P (printer echo toggle) to see if     ;
0486: E8AD         ; console output should also be sent to the list device. If CONTROL-S is     ;
0487: E8AD         ; found, further output will be suspended until you type another character.  ;
0488: E8AD         ; CONTROL-P will enable the echoing of console output the first time it is   ;
0489: E8AD         ; pressed and disable it the second time. If there is no incoming data       ;
0490: E8AD         ; character, this function will wait until there is one.                     ;
0491: E8AD         ;                                                                            ;
0492: E8AD         ; This is a blocking function                                                ;
0493: E8AD         ;																			 ;
0494: E8AD         ;																			 ;
0495: E8AD         ;			Function Code	:	C = 01H                                      ;
0496: E8AD         ;			Entry Parameters:	None                                         ;
0497: E8AD         ;			Exit Parameters :	A = Data byte from console					 ;
0498: E8AD         ;																			 ;
0499: E8AD         ;-------------------------- Read Console Byte - 1 (1) -----------------------;
0500: E8AD             vConsoleIn:
0501: E8AD CD 21 E9               CALL   ConIn                ; Don't come back without input
0502: E8B0 CD 2C E9               CALL   IsPrintableASCII     ; CR,LF,TAB,BACK_SPACE or GE SPACE
0503: E8B3 D8                     RET    C                    ; return nothing to echo
0504: E8B4
0505: E8B4 F5                     PUSH   AF                   ; Save printable character
0506: E8B5 4F                     LD     C,A
0507: E8B6 CD 58 E9               CALL   TabOut               ; Send to console. if TAB expand
0508: E8B9 F1                     POP    AF                   ; retrieve exit value
0509: E8BA
0510: E8BA 32 C5 EA               LD     (exitParameterByte),A
0511: E8BD C9                     RET
0512: E8BE
0513: E8BE         ;------------------------- Write Console Byte - 2 (2) -----------------------;
0514: E8BE         ;  This function outputs the data byte in register E to the console. As with ;
0515: E8BE         ; function 1, if the data byte is a TAB character, it will be expanded by    ;
0516: E8BE         ; the BDOS to the next column that is a multiple of eight. The BDOS also     ;
0517: E8BE         ; checks to see if there is an incoming character, and if there is,          ;
0518: E8BE         ; checks to see if it is a CONTROL-S ,in which case console output is        ;
0519: E8BE         ; suspended or CONTROL-P, in which case echoing of console output to the     ;
0520: E8BE         ; printer is  toggled on or off                                              ;
0521: E8BE         ;																			 ;
0522: E8BE         ;			Function Code	:	C = 02H                                      ;
0523: E8BE         ;			Entry Parameters:	E = Data byte to be output					 ;
0524: E8BE         ;			Exit Parameters :	None										 ;
0525: E8BE         ;																			 ;
0526: E8BE         ;------------------------- Write Console Byte - 2 (2) -----------------------;
0527: E8BE         ;BDOS put parameter in C before entering this routine
0528: E8BE             vConsoleOut:
0529: E8BE CD 58 E9               CALL   TabOut
0530: E8C1 C9                     RET
0531: E8C2
0532: E8C2         ;--------------------------- Read Reader Byte - 3 (3) -----------------------;
0533: E8C2         ;   function reads the next character from the logical "reader" device into  ;
0534: E8C2         ; register A. In practice, the physical device that is accessed depends      ;
0535: E8C2         ; entirely on how your BIOS is configured. In some systems, there is no      ;
0536: E8C2         ; reader at all; this function will return some arbitrary value such as lAH  ;
0537: E8C2         ; (the ASCII CONTROL-Z character, used by CP/M to denote "End of File').     ;
0538: E8C2         ; Control is not returned to the calling program until a character has been  ;
0539: E8C2         ; read.                                                                      ;
0540: E8C2         ;                                                                            ;
0541: E8C2         ; This is a blocking function                                                ;
0542: E8C2         ;																			 ;
0543: E8C2         ;			Function Code	:	C = 03H                                      ;
0544: E8C2         ;			Entry Parameters:	None										 ;
0545: E8C2         ;			Exit Parameters :	A = Character Input							 ;
0546: E8C2         ;																			 ;
0547: E8C2         ;--------------------------- Read Reader Byte - 3 (3) -----------------------;
0548: E8C2             vReaderIn:
0549: E8C2 CD 15 F6               CALL   bcReader
0550: E8C5 32 C5 EA               LD     (exitParameterWord),A
0551: E8C8 C9                     RET
0552: E8C9
0553: E8C9         ;--------------------------- Write Punch Byte - 4 (4) -----------------------;
0554: E8C9         ;  This function is a counterpart to the Read "Reader" Byte It outputs the   ;
0555: E8C9         ; specified character from register E to the logical punch device. Again,    ;
0556: E8C9         ; the actual physical device used, if any, is determined by the BIOS.        ;
0557: E8C9         ; There is no set standard for this device; in some systems the punch        ;
0558: E8C9         ; device is a "bit bucket," so called because it absorbs all data that you   ;
0559: E8C9         ; output to it.                                                              ;
0560: E8C9         ;																			 ;
0561: E8C9         ;			Function Code	:	C = 04H                                      ;
0562: E8C9         ;			Entry Parameters:	E = Data byte to be output					 ;
0563: E8C9         ;			Exit Parameters :	None										 ;
0564: E8C9         ;																			 ;
0565: E8C9         ;--------------------------- Write Punch Byte - 4 (4) -----------------------;
0566: E8C9         ;BDOS put parameter in C before entering this routine
0567: E8C9             vPunchOut:
0568: E8C9 CD 12 F6               CALL   bcPunch
0569: E8CC C9                     RET
0570: E8CD
0571: E8CD         ;---------------------------- Write List Byte - 5 (5) -----------------------;
0572: E8CD         ;  This function outputs the specified byte in register E to the logical     ;
0573: E8CD         ; list device. As with the reader and the punch, the physical device used    ;
0574: E8CD         ; depends entirely on the BIOS.                                              ;
0575: E8CD         ;																			 ;
0576: E8CD         ;			Function Code	:	C = 05H                                      ;
0577: E8CD         ;			Entry Parameters:	E = Data byte to be output					 ;
0578: E8CD         ;			Exit Parameters :	None										 ;
0579: E8CD         ;																			 ;
0580: E8CD         ;---------------------------- Write List Byte - 5 (5) -----------------------;
0581: E8CD         ;BDOS put parameter in C before entering this routine
0582: E8CD             vListOut:                       ; func5 (05 - 05) List Output
0583: E8CD CD 0F F6               CALL   bcList               ; direct call to BIOS
0584: E8D0 C9                     RET
0585: E8D1
0586: E8D1         ;--------------------------- Direct Console I/O - 6 (6) ---------------------;
0587: E8D1         ;  This function serves double duty: it both inputs and outputs characters   ;
0588: E8D1         ; from the console. However, it bypasses the normal control characters and   ;
0589: E8D1         ; line editing features (such as CONTROL-P and CONTROL-S) normally           ;
0590: E8D1         ; associated with console I( O. Hence the name "direct" (or "unadorned" as   ;
0591: E8D1         ; Digital Research describes it). If the value in register E is not OFFH,    ;
0592: E8D1         ; then E contains a valid ASCII character that is output to the console.     ;
0593: E8D1         ;  This function works well provided you never have to send a value ofOFFH   ;
0594: E8D1         ; or expect to receive a value ofOOH. If you do need to send or receive pure ;
0595: E8D1         ; binary data, you cannot use this function, since these values are likely   ;
0596: E8D1         ; to be part of the data stream.                                             ;
0597: E8D1         ;                                                                            ;
0598: E8D1         ;			Function Code	:	C = 06H                                      ;
0599: E8D1         ;			Entry Parameters:	E = 0FFH for Input					  		 ;
0600: E8D1         ;								E = Other than 0FFH for Output				 ;
0601: E8D1         ;			Exit Parameters :	A = Input byte or status					 ;
0602: E8D1         ;																			 ;
0603: E8D1         ;--------------------------- Direct Console I/O - 6 (6) ---------------------;
0604: E8D1         ;BDOS put parameter in C before entering this routine
0605: E8D1             vDirectConIO:
0606: E8D1 79                     LD     A,C
0607: E8D2 3C                     INC    A
0608: E8D3 28 04                  JR     Z,vDirectConIO1      ; 0ffh => 00h, means input mode
0609: E8D5         ; send byte to console
0610: E8D5 CD 0C F6               CALL   bcConout             ; Send the byte to the console
0611: E8D8 C9                     RET
0612: E8D9
0613: E8D9         ;read byte/status from console
0614: E8D9             vDirectConIO1:
0615: E8D9 CD 06 F6               CALL   bcConst              ; Check Status
0616: E8DC B7                     OR     A                    ; 00 means not data ready
0617: E8DD CA 4D E8               JP     Z,ReturnToCaller1    ; If no data return  00 to caller
0618: E8E0 CD 09 F6               CALL   bcConin              ; Data is available, get it to A
0619: E8E3 32 C5 EA               LD     (exitParameterByte),A ; Save it
0620: E8E6 C9                     RET
0621: E8E7
0622: E8E7         ;--------------------------- Get IOBYTE Setting - 7 (7) ---------------------;
0623: E8E7         ; This function places the current value of the IOBYTE in register A.        ;
0624: E8E7         ;                                                                            ;
0625: E8E7         ; The IOBYTE structure:                                                      ;
0626: E8E7         ;								+-------+-------+-------+-------+            ;
0627: E8E7         ;						Bit No. | 7 : 6 | 5 : 4 | 3 : 2 | 1 : 0 |            ;
0628: E8E7         ;								+-------+-------+-------+-------+            ;
0629: E8E7         ;				Logical Device     List | Punch | Reader|Console             ;
0630: E8E7         ;                                                                            ;
0631: E8E7         ;                                                                            ;
0632: E8E7         ;			Function Code	:	C = 07H                                      ;
0633: E8E7         ;			Entry Parameters:	None					  		  			 ;
0634: E8E7         ;			Exit Parameters :	A = Current IOBYTE value					 ;
0635: E8E7         ;																			 ;
0636: E8E7         ;--------------------------- Get IOBYTE Setting - 7 (7) ---------------------;
0637: E8E7             vGetIOBYTE:
0638: E8E7 3A 03 00               LD     A,(IOBYTE)           ; Get the IOBYTE
0639: E8EA 32 C5 EA               LD     (exitParameterWord),A ; Return it to caller
0640: E8ED C9                     RET
0641: E8EE         ;--------------------------- Set IOBYTE Setting - 8 (8) ---------------------;
0642: E8EE         ; This function sets the IOBYTE         									 ;
0643: E8EE         ;                                                                            ;
0644: E8EE         ; The IOBYTE structure:                                                      ;
0645: E8EE         ;								+-------+-------+-------+-------+            ;
0646: E8EE         ;						Bit No. | 7 : 6 | 5 : 4 | 3 : 2 | 1 : 0 |            ;
0647: E8EE         ;								+-------+-------+-------+-------+            ;
0648: E8EE         ;				Logical Device     List | Punch | Reader|Console             ;
0649: E8EE         ;                                                                            ;
0650: E8EE         ;                                                                            ;
0651: E8EE         ;			Function Code	:	C = 08H                                      ;
0652: E8EE         ;			Entry Parameters:	E = New IOBYTE value	  		  			 ;
0653: E8EE         ;			Exit Parameters :	None                                         ;
0654: E8EE         ;																			 ;
0655: E8EE         ;--------------------------- Get IOBYTE Setting - 8 (8) ---------------------;
0656: E8EE         ;BDOS put parameter in C before entering this routine
0657: E8EE             vSetIOBYTE:
0658: E8EE 21 03 00               LD     HL,IOBYTE            ; point at The IOBYTE
0659: E8F1 71                     LD     (HL),C               ; Place new vale in it
0660: E8F2 C9                     RET
0661: E8F3
0662: E8F3         ;---------------------- Display $ terminated String - 9 (9) -----------------;
0663: E8F3         ;  This function outputs a string of characters to the console device. The   ;
0664: E8F3         ; address of this string is in registers DE. You must make sure that the last;
0665: E8F3         ; character of the string is "$"; the BDOS uses this character as a marker   ;
0666: E8F3         ; for the end of the string.                                                 ;
0667: E8F3         ;  The "$" itself does not get output to the console.                        ;
0668: E8F3         ;                                                                            ;
0669: E8F3         ; While the BDOS is outputting the string, it expands tabs as previously     ;
0670: E8F3         ; described, checks to see if there is an incoming character, and checks for ;
0671: E8F3         ; CONTROL-S (XOFF, which stops the output until another character is entered);
0672: E8F3         ; or CONTROL-P (which turns on or off echoing of console characters to       ;
0673: E8F3         ; the printer).                                                              ;
0674: E8F3         ;                                                                            ;
0675: E8F3         ;			Function Code	:	C = 09H                                      ;
0676: E8F3         ;			Entry Parameters:	DE = Address of the first byte of the string ;
0677: E8F3         ;			Exit Parameters :	None							             ;
0678: E8F3         ;																			 ;
0679: E8F3         ;---------------------- Display $ terminated String - 9 (9) -----------------;
0680: E8F3             vPrintString:
0681: E8F3 2A C3 EA               LD     HL,(paramDE)         ; Get address of the string
0682: E8F6 4D                     LD     C,L
0683: E8F7 44                     LD     B,H                  ; Put it into BC for call
0684: E8F8 CD 3B E9               CALL   Print                ; out to console
0685: E8FB C9                     RET
0686: E8FC
0687: E8FC         ;-------------------------- Read Console String - A (10) --------------------;
0688: E8FC         ;  This function reads a string of characters from the console device        ;
0689: E8FC         ; and stores them in a buffer (address in DE) that you define. Full line     ;
0690: E8FC         ; editing is possible: the operator can backspace, cancel the line and start ;
0691: E8FC         ; over, and use all the normal control functions. What you will ultimately   ;
0692: E8FC         ; see in the buffer is the final version of the character string entered,    ;
0693: E8FC         ; without any of the errors or control characters used to do the line editing;
0694: E8FC         ;                                                                            ;
0695: E8FC         ;  The buffer that you define has a special format. The first byte in the    ;
0696: E8FC         ; buffer tells the BDOS the maximum number of characters to be accepted.     ;
0697: E8FC         ; The second byte is reserved for the BDOS to tell you how many characters   ;
0698: E8FC         ; were actually placed in the buffer. The following bytes contain            ;
0699: E8FC         ; the characters of the string. Character input will cease either when a     ;
0700: E8FC         ; CARRIAGE RETURN is entered or when the maximum number of characters,       ;
0701: E8FC         ; as specified in the buffer, has been received. The CARRIAGE RETURN is not  ;
0702: E8FC         ; stored in the buffer as a character-it just serves as a terminator. If     ;
0703: E8FC         ; the first character entered is a CARRIAGE RETURN, then the BDOS sets       ;
0704: E8FC         ; the "characters input" byte to O. If you attempt to input more than the    ;
0705: E8FC         ; maximum number of characters, the "characters input" count will be the     ;
0706: E8FC         ; same as the maximum value allowed.                                         ;
0707: E8FC         ;                                                                            ;
0708: E8FC         ;			Function Code	:	C = 0AH                                      ;
0709: E8FC         ;			Entry Parameters:	DE = Address string buffer					 ;
0710: E8FC         ;			Exit Parameters :	String Buffer with console bytes in it       ;
0711: E8FC         ;																			 ;
0712: E8FC         ;-------------------------- Read Console String - A (10) --------------------;
0713: E8FC             vReadString:
0714: E8FC CD E0 E9               CALL   ReadString
0715: E8FF C9                     RET
0716: E900
0717: E900         ;------------------------- Read Console Status - B (11) ---------------------;
0718: E900         ; This function tells you whether a console input character is waiting to be ;
0719: E900         ;processed. Unlike the Console Input functions, which will wait until there  ;
0720: E900         ;is input,this function simply checks and returns immediately.               ;
0721: E900         ;                                                                            ;
0722: E900         ;			Function Code	:	C = 0BH                                      ;
0723: E900         ;			Entry Parameters:	None										 ;
0724: E900         ;			Exit Parameters :	A = 00H if no incoming Data					 ;
0725: E900         ;								A = FFH	if incoming Data					 ;
0726: E900         ;																			 ;
0727: E900         ;------------------------- Read Console Status - B (11) ---------------------;
0728: E900             vGetConsoleStatus:
0729: E900 CD 8C E9               CALL   ConBreak
0730: E903 32 C5 EA               LD     (exitParameterByte),A
0731: E906 C9                     RET
0732: E907
0733: E907         ;--------------------------- Get CP/M Version - C (12) ----------------------;
0734: E907         ;  This function tells you which version of CP/M you are currently running.  ;
0735: E907         ; A two-byte value is returned:                                              ;
0736: E907         ;	H = OOH for CP/M, H = OlH for MP/M                                       ;
0737: E907         ;	L = OOH for all releases before CP/M 2.0                                 ;
0738: E907         ;	L = 20H for CP/M 2.0,21 H for 2.1, 22H for 2.2,                          ;
0739: E907         ;		and so on for any subsequent releases.                               ;
0740: E907         ;                                                                            ;
0741: E907         ; This information is of interest only if your program has some version      ;
0742: E907         ; specific logic built into it. For example, CP/M version 1.4 does not       ;
0743: E907         ; support the same Random File Input/ Output operations that CP/M 2.2 does.  ;
0744: E907         ; Therefore, if your program uses Random I/O, put this check at the          ;
0745: E907         ; beginning to ensure that it is indeed running under the appropriate        ;
0746: E907         ; version of CP/M.                                                           ;
0747: E907         ;                                                                            ;
0748: E907         ;			Function Code	:	C = 0CH                                      ;
0749: E907         ;			Entry Parameters:	None										 ;
0750: E907         ;			Exit Parameters :	HL =Version Number Code						 ;
0751: E907         ;								A = FFH	if incoming Data					 ;
0752: E907         ;																			 ;
0753: E907         ;--------------------------- Get CP/M Version - C (12) ----------------------;
0754: E907             vGetVersion:                      ; func12 (12 - 0C)	 Get Version
0755: E907 3E 20                  LD     A,VERSION
0756: E909 32 C5 EA               LD     (exitParameterByte),A ;exitParameterByte = VERSION
0757: E90C C9                     RET
0758: E90D
0759: E90D         ;--------------------------- Get/Set User Number - 20 (32) ------------------;
0760: E90D         ;  This subroutine either sets or gets the current user number. The current  ;
0761: E90D         ; user number determines which file directory entries are matched during all ;
0762: E90D         ; disk file operations. When you call this function, the contents of the     ;
0763: E90D         ; E register specify what action is to be taken. IfE=OFFH, then the function ;
0764: E90D         ; will return the current user number in the A register. If you set E to a   ;
0765: E90D         ; number in the range 0 to 15 (that is, a valid user number), the function   ;
0766: E90D         ; will set the current user number to this value.                            ;
0767: E90D         ;                                                                            ;
0768: E90D         ;			Function Code	:	C = 0CH                                      ;
0769: E90D         ;			Entry Parameters:	E = 0FFH to get User Number  				 ;
0770: E90D         ;								  = 0 to 15 to set User Number				 ;
0771: E90D         ;			Exit Parameters :	A = Current user Number if E was set to 0FFH ;
0772: E90D         ;								A = FFH	if incoming Data					 ;
0773: E90D         ;																			 ;
0774: E90D         ;                                                                            ;
0775: E90D         ;--------------------------- Get/Set User Number - 20 (32) ------------------;
0776: E90D             vGetSetUserNumber:
0777: E90D 3A C2 EA               LD     A,(paramE)
0778: E910 FE FF                  CP     0FFH
0779: E912 20 07                  JR     NZ,SetUserNumber     ; interrogate user code instead
0780: E914 3A 5E F5               LD     A,(currentUserNumber)
0781: E917 32 C5 EA               LD     (exitParameterByte),A ; exitParameterByte=currentUserNumber
0782: E91A C9                     RET
0783: E91B
0784: E91B             SetUserNumber:
0785: E91B E6 0F                  AND    LO_NIBBLE_MASK
0786: E91D 32 5E F5               LD     (currentUserNumber),A
0787: E920 C9                     RET
0788: E921
0789: E921         ;****************************************************************************;
0790: E921         ;								Character Support Routines					 ;
0791: E921         ;****************************************************************************;
0792: E921
0793: E921
0794: E921         ;-------------------- Return a Character from the console -------------------;
0795: E921         ;return byte from buffer or read from the console                            ;
0796: E921             ConIn:                          ;
0797: E921 21 BE EA               LD     HL,keyboardByte      ; is there a Byte waiting?           ;
0798: E924 7E                     LD     A,(HL)               ;
0799: E925 36 00                  LD     (HL),0               ;
0800: E927 B7                     OR     A                    ;
0801: E928 C0                     RET    NZ                   ;
0802: E929         ;
0803: E929 C3 09 F6               JP     bcConin              ; Go get byte from Console           ;
0804: E92C         ;-------------------- Return a Character from the console -------------------;
0805: E92C
0806: E92C         ;----------- Is the Character ASCII printable, CR,LF,TAB,BACKSPACE ----------;
0807: E92C         ; Resets Carry Flag if ASCII Printable, CR,LF,TAB,BackSpace or GE SPACE      ;
0808: E92C             IsPrintableASCII:                      ;
0809: E92C FE 0D                  CP     CR                   ;
0810: E92E C8                     RET    Z                    ; carriage return?                                                  ;
0811: E92F FE 0A                  CP     LF                   ;
0812: E931 C8                     RET    Z                    ; line feed?                                                        ;
0813: E932 FE 09                  CP     TAB                  ;
0814: E934 C8                     RET    Z                    ; TAB?                                                              ;
0815: E935 FE 08                  CP     CTRL_H               ;
0816: E937 C8                     RET    Z                    ; backspace?                                                        ;
0817: E938 FE 20                  CP     SPACE                ; Reset Carry if ASCII printable         ;
0818: E93A C9                     RET                         ;
0819: E93B         ;----------- Is the Character ASCII printable, CR,LF,TAB,BACKSPACE ----------;
0820: E93B
0821: E93B         ;------------------ Print character from (BC) until  $ found ----------------;
0822: E93B             Print:                          ;
0823: E93B 0A                     LD     A,(BC)               ; Get the next character             ;
0824: E93C FE 24                  CP     DOLLAR               ; Is it the end ?                    ;
0825: E93E C8                     RET    Z                    ;  exit if yes                       ;
0826: E93F 03                     INC    BC                   ; Update the pointer                 ;
0827: E940 C5                     PUSH   BC                   ; Save it                            ;
0828: E941 4F                     LD     C,A                  ; Does Byte require                  ;
0829: E942 CD 58 E9               CALL   TabOut               ;  special attention - check         ;
0830: E945 C1                     POP    BC                   ; Retrieve the pointer				 ;
0831: E946 18 F3                  JR     Print                ; Loop back                          ;
0832: E948         ;------------------ Print character from (BC) until  $ found ----------------;
0833: E948
0834: E948         ;-- Send printable character to console. Precede with Caret if needed -------;
0835: E948         ; character is in Reg C                                                      ;
0836: E948             CaretOut:                       ;
0837: E948 79                     LD     A,C                  ;
0838: E949 CD 2C E9               CALL   IsPrintableASCII     ;
0839: E94C 30 0A                  JR     NC,TabOut            ; Skip if Caret not needed           ;
0840: E94E         ; send preceding up arrow                                                    ;
0841: E94E F5                     PUSH   AF                   ; Save the character                 ;
0842: E94F 0E 5E                  LD     C,CARET              ;
0843: E951 CD 6B E9               CALL   ConsoleOut           ; Send Caret to Console              ;
0844: E954 F1                     POP    AF                   ; Get the character                  ;
0845: E955 F6 40                  OR     40H                  ; Make the graphic a letter          ;
0846: E957 4F                     LD     C,A                  ; Set up to print                    ;
0847: E958         ; fall thru to TabbOut                                                       ;
0848: E958         ;-- Send printable character to console. Precede with Caret if needed -------;
0849: E958
0850: E958         ;------------- Send printable character to console. Expand if TAB -----------;
0851: E958         ; character is in Reg C                                                      ;
0852: E958             TabOut:                         ;
0853: E958 79                     LD     A,C                  ;
0854: E959 FE 09                  CP     TAB                  ; Is it a TAB                        ;
0855: E95B C2 6B E9               JP     NZ,ConsoleOut        ; Go directly to ConsoleOut if not   ;
0856: E95E         ;
0857: E95E         ; TAB encountered                                                           ;
0858: E95E             TabOut0:                        ;
0859: E95E 0E 20                  LD     C,SPACE              ; Expand TABs with SPACEs            ;
0860: E960 CD 6B E9               CALL   ConsoleOut           ; Send to Console                    ;
0861: E963 3A C1 EA               LD     A,(columnPosition)   ; Get Column position                ;
0862: E966 E6 07                  AND    111b                 ; (ColumnPosition mod 8) = 0 ?       ;
0863: E968 20 F4                  JR     NZ,TabOut0           ; Do again if not                    ;
0864: E96A C9                     RET                         ;
0865: E96B         ;------------- Send printable character to console. Expand if TAB -----------;
0866: E96B
0867: E96B         ;-------------------------- Send character to console -----------------------;
0868: E96B         ; C  = Character to be output                                                ;
0869: E96B             ConsoleOut:                      ;
0870: E96B         ; Look for CNTL_S from keyboard and save it in keyboardByte                  ;
0871: E96B C5                     PUSH   BC                   ; Save character and Count           ;
0872: E96C CD 8C E9               CALL   ConBreak             ; Check for screen stop key stroke   ;
0873: E96F C1                     POP    BC                   ;
0874: E970 C5                     PUSH   BC                   ; Get/save character                 ;
0875: E971         ; Send character to Console	                                                 ;
0876: E971 CD 0C F6               CALL   bcConout             ; Send character to the console      ;
0877: E974 C1                     POP    BC                   ;
0878: E975 C5                     PUSH   BC                   ; Get/save character                 ;
0879: E976         ; is the data to be output to print device?                                  ;
0880: E976 3A BF EA               LD     A,(printEchoFlag)    ;
0881: E979 B7                     OR     A                    ;
0882: E97A C4 0F F6               CALL   NZ,bcList            ; Send it to printer, if so          ;
0883: E97D C1                     POP    BC                   ; Get the character                  ;
0884: E97E         ;
0885: E97E 79                     LD     A,C                  ; Put character to ACC               ;
0886: E97F 21 C1 EA               LD     HL,columnPosition    ; A = char, HL = .columnPosition     ;
0887: E982 34                     INC    M                    ; increment the ColumnPosition       ;
0888: E983         ;
0889: E983 FE 20                  CP     SPACE                ;
0890: E985 D0                     RET    NC                   ; Exit if ASCII printable            ;
0891: E986         ;
0892: E986 FE 0A                  CP     LF                   ;
0893: E988 C0                     RET    NZ                   ; Exit if not a Line Feed            ;
0894: E989         ;
0895: E989 36 00                  LD     (HL),0               ;  else force columnPosition = 0     ;
0896: E98B C9                     RET                         ;
0897: E98C         ;-------------------------- Send character to console -----------------------;
0898: E98C
0899: E98C         ;--------------------  Check for Status and Control S or C ------------------;
0900: E98C         ;  Returns:																	 ;
0901: E98C         ;			ACC = 0FFH if Saved keyboard byte or CNTL_S entered from console ;
0902: E98C         ;			ACC = 00   No data Pending										 ;
0903: E98C         ;			DOES NOT RETURN if CTRL_C is entered from the keyboard           ;
0904: E98C         ;                                                                            ;
0905: E98C             ConBreak:                       ;
0906: E98C 3A BE EA               LD     A,(keyboardByte)     ;
0907: E98F B7                     OR     A                    ; If there is a char waiting         ;
0908: E990 20 2B                  JR     NZ,ConBreak1         ;  return with FF in ACC             ;
0909: E992         ;
0910: E992 CD 06 F6               CALL   bcConst              ; Get status                         ;
0911: E995 FE 00                  CP     00H                  ; If 00 => No data pending	         ;
0912: E997 C8                     RET    Z                    ; Return 00 No data pending          ;
0913: E998         ;
0914: E998 CD 09 F6               CALL   bcConin              ; Read the byte                      ;
0915: E99B         ;
0916: E99B FE 10                  CP     CTRL_P               ;
0917: E99D 20 0D                  JR     NZ,CheckCTL_S        ;
0918: E99F         ;<><><><><><><><><><><><><> Toggle Print Echo Flag<><><><><><><>             ;
0919: E99F 21 BF EA               LD     HL,printEchoFlag     ;
0920: E9A2 3E FF                  LD     A,TRUE               ;
0921: E9A4 BE                     CP     (HL)                 ;
0922: E9A5 20 02                  JR     NZ,ToggleFlag1       ;
0923: E9A7 3E 00                  LD     A,FALSE              ;
0924: E9A9             ToggleFlag1:                      ;
0925: E9A9 77                     LD     (HL),A               ;
0926: E9AA 18 0C                  JR     NothingWaiting       ;
0927: E9AC         ;<><><><><><><><><><><><><> Toggle Print Echo Flag<><><><><><><>             ;
0928: E9AC             CheckCTL_S:                      ;
0929: E9AC FE 13                  CP     CTRL_S               ; If it is not Stop Screen, save     ;
0930: E9AE 20 0A                  JR     NZ,ConBreak0         ;   and and return 0FFH              ;
0931: E9B0         ;
0932: E9B0 CD 09 F6               CALL   bcConin              ; Else Read next byte                ;
0933: E9B3 FE 03                  CP     CTRL_C               ;
0934: E9B5 CA 00 00               JP     Z,WarmBoot           ; do WarmBoot if  CTRL_C             ;
0935: E9B8             NothingWaiting:                      ;
0936: E9B8 AF                     XOR    A                    ;
0937: E9B9 C9                     RET                         ; Set ACC = 0 and return             ;
0938: E9BA             ConBreak0:                      ;
0939: E9BA 32 BE EA               LD     (keyboardByte),A     ; save the byte                      ;
0940: E9BD             ConBreak1:                      ;
0941: E9BD 3E FF                  LD     A,TRUE               ; return with true set in ACC        ;
0942: E9BF C9                     RET                         ;
0943: E9C0         ;--------------------  Check for Status and Control S or C ------------------;
0944: E9C0
0945: E9C0         ;------------------------  Console Output Utilities -------------------------;
0946: E9C0             showHashCRLF:                      ;
0947: E9C0 0E 23                  LD     C,HASH_TAG           ;
0948: E9C2 CD 6B E9               CALL   ConsoleOut           ; Send # to console                  ;
0949: E9C5 CD D6 E9               CALL   showCRLF             ;
0950: E9C8             showHashCRLF1:                      ;
0951: E9C8 3E C1                  LD     A,columnPosition     ;
0952: E9CA 21 C0 EA               LD     HL,startingColumn    ;
0953: E9CD BF                     CP     A,M                  ;
0954: E9CE D0                     RET    NC                   ;
0955: E9CF 0E 20                  LD     C,SPACE              ;
0956: E9D1 CD 6B E9               CALL   ConsoleOut           ;
0957: E9D4 18 F2                  JR     showHashCRLF1        ;
0958: E9D6         ;------------------------  Console Output Utilities -------------------------;
0959: E9D6
0960: E9D6         ;------------------------  Send Carriage Return and Line Feed ---------------;
0961: E9D6             showCRLF:                       ;
0962: E9D6 0E 0D                  LD     C,CR                 ;
0963: E9D8 CD 6B E9               CALL   ConsoleOut           ;
0964: E9DB 0E 0A                  LD     C,LF                 ;
0965: E9DD C3 6B E9               JP     ConsoleOut           ; exit via ConsoleOuts RET           ;
0966: E9E0         ;------------------------  Send Carriage Return and Line Feed ---------------;
0967: E9E0
0968: E9E0         ;------------------------- Read a $ terminated String -----------------------;
0969: E9E0         ;read to paramDE address (max length, current length, buffer)               ;
0970: E9E0             ReadString:                      ;
0971: E9E0 3A C1 EA               LD     A,(columnPosition)   ;
0972: E9E3 32 C0 EA               LD     (startingColumn),A   ; Save start for CTRL_X and CTRL_R   ;
0973: E9E6 2A C3 EA               LD     HL,(paramDE)         ; Get the start of the String        ;
0974: E9E9 4E                     LD     C,(HL)               ; Get Max Count  					 ;
0975: E9EA 23                     INC    HL                   ; Point at actual bytes read         ;
0976: E9EB 06 00                  LD     B,0                  ; Initialize Current Count           ;
0977: E9ED         ;
0978: E9ED         ; B = Current Count                                                      ;
0979: E9ED         ; C = Maximum characters                                                 ;
0980: E9ED         ; HL= Insertion Pointer                                                  ;
0981: E9ED         ;
0982: E9ED         ; read next character, BC, HL active                                        ;
0983: E9ED             ReadNext:                       ;
0984: E9ED C5                     PUSH   BC                   ; Save Current Index and Max Count   ;
0985: E9EE E5                     PUSH   HL                   ; Save pointer                       ;
0986: E9EF             ReadNext0:                      ;
0987: E9EF CD 21 E9               CALL   ConIn                ; Get the next Character             ;
0988: E9F2 E6 7F                  AND    ASCII_MASK           ; Mask parity bit                    ;
0989: E9F4 E1                     POP    HL                   ; Restore Pointer					 ;
0990: E9F5 C1                     POP    BC                   ; Restore Current Index and Max Count;
0991: E9F6         ;Is It Carriage Return                                                       ;
0992: E9F6 FE 0D                  CP     CR                   ;
0993: E9F8 CA 3E EA               JP     Z,EndRead            ; End the read if yes                ;
0994: E9FB FE 0A                  CP     LF                   ;
0995: E9FD         ;Is It Linefeed                                                              ;
0996: E9FD CA 3E EA               JP     Z,EndRead            ; End the read if yes                ;
0997: EA00         ;Is It BackSpace                                                             ;
0998: EA00 FE 08                  CP     CTRL_H               ;
0999: EA02 CA 48 EA               JP     Z,BSspaceBS          ;
1000: EA05             IsItRubout:                      ;
1001: EA05 FE 7F                  CP     RUBOUT               ; Non destructive delete             ;
1002: EA07 CA 52 EA               JP     Z,ItIsRubout         ;
1003: EA0A             IsPhysicalEOL:                      ;
1004: EA0A FE 05                  CP     CTRL_E               ;
1005: EA0C CA 5D EA               JP     Z,ItIsPhysicalEOL    ;
1006: EA0F             IsItPrintToggle:                      ;
1007: EA0F FE 10                  CP     CTRL_P               ;
1008: EA11 CA 65 EA               JP     Z,ItIsPrintToggle    ;
1009: EA14             IsItDeleteTheLineX:                      ;
1010: EA14 FE 18                  CP     CTRL_X               ;
1011: EA16 CA 8E EA               JP     Z,DeleteTheLine      ; If CTRL_X go delete the line       ;
1012: EA19             IsItDeleteTheLineU:                      ;
1013: EA19 FE 15                  CP     CTRL_U               ;
1014: EA1B CA AC EA               JP     Z,IgnoreTheLine      ; If CTRL_U ignore the line          ;
1015: EA1E         ;Retype the line                                                             ;
1016: EA1E FE 12                  CP     CTRL_R               ;
1017: EA20 CA 75 EA               JP     Z,RepeatLine         ;
1018: EA23
1019: EA23         ;....................... Echo input back to the Console  ....................;
1020: EA23         ; Full Duplex								                                 ;
1021: EA23         ; A = Character to display	                                                 ;
1022: EA23         ; B = current char count                                                     ;
1023: EA23         ; C = maximum buffer length                                                  ;
1024: EA23         ; HL= buffer pointer                                                         ;
1025: EA23         ;ReadEcho                                                                    ;
1026: EA23 04                     INC    B                    ; Increment byte count		         ;
1027: EA24 23                     INC    HL                   ; Advance the Pointer                ;
1028: EA25 77                     LD     (HL),A               ; Put char in buffer                 ;
1029: EA26         ;
1030: EA26             ReadEchoRubOut:                      ;
1031: EA26 C5                     PUSH   BC                   ; Save index and length              ;
1032: EA27 E5                     PUSH   HL                   ; Save the Pointer                   ;
1033: EA28 4F                     LD     C,A                  ; Get char                           ;
1034: EA29 CD 48 E9               CALL   CaretOut             ; Output to Console (^ if needed)    ;
1035: EA2C E1                     POP    HL                   ; Restore the Pointer                ;
1036: EA2D C1                     POP    BC                   ; Restore index and length           ;
1037: EA2E 7E                     LD     A,(HL)               ; Recall char                        ;
1038: EA2F         ; check for Warm Boot                                                        ;
1039: EA2F FE 03                  CP     CTRL_C               ;
1040: EA31 78                     LD     A,B                  ; Get Line position                  ;
1041: EA32 C2 3A EA               JP     NZ,AreWeAtEndOfBuffer ; Skip if not CTRL_C                 ;
1042: EA35 FE 01                  CP     1                    ; Beginning of the Line?             ;
1043: EA37 CA 00 00               JP     Z,WarmBoot           ;   if yes do the Boot               ;
1044: EA3A         ; Check to see if we are at the end of the buffer                            ;
1045: EA3A             AreWeAtEndOfBuffer:                      ;
1046: EA3A B9                     CP     C                    ; Over Max ?					     ;
1047: EA3B DA ED E9               JP     C,ReadNext           ;  no, Go for more				     ;
1048: EA3E         ;
1049: EA3E         ; At the end of read                                  					     ;
1050: EA3E             EndRead:                        ;
1051: EA3E         ; 	POP		HL                                                               ;
1052: EA3E 2A C3 EA               LD     HL,(paramDE)         ;
1053: EA41 23                     INC    HL                   ;
1054: EA42         ;
1055: EA42 70                     LD     (HL),B               ; Actual length at Pos 0 of Buffer   ;
1056: EA43 0E 0D                  LD     C,CR                 ;
1057: EA45 C3 6B E9               JP     ConsoleOut           ; Send CR to the Console			 ;
1058: EA48         ;....................... Echo input back to the Console  ....................;
1059: EA48         ;.......................... Backspace SPACE BackSpace .......................;
1060: EA48             BSspaceBS:                      ;
1061: EA48 05                     DEC    B                    ;
1062: EA49 2B                     DEC    HL                   ;
1063: EA4A C5                     PUSH   BC                   ;
1064: EA4B E5                     PUSH   HL                   ;
1065: EA4C CD 9F EA               CALL   BackUp               ;
1066: EA4F C3 EF E9               JP     ReadNext0            ;
1067: EA52         ;.......................... Backspace SPACE BackSpace .......................;
1068: EA52         ;.......................... It is RubOut ....................................;
1069: EA52             ItIsRubout:                      ;
1070: EA52         ; RUBOUT if possible                                                         ;
1071: EA52 78                     LD     A,B                  ; Are we at the start of the line    ;
1072: EA53 B7                     OR     A                    ;
1073: EA54 CA ED E9               JP     Z,ReadNext           ; then ignore and go for next char   ;
1074: EA57         ;adjust pointers back one                                                    ;
1075: EA57 7E                     LD     A,(HL)               ; ACC = current character            ;
1076: EA58 05                     DEC    B                    ; Adjust the index			    	 ;
1077: EA59 2B                     DEC    HL                   ; Adjust the pointer                 ;
1078: EA5A C3 26 EA               JP     ReadEchoRubOut       ; Echo back - Full Duplex            ;
1079: EA5D         ;.......................... It is RubOut ....................................;
1080: EA5D         ;.......................... It is PhysicalEOL ...............................;
1081: EA5D             ItIsPhysicalEOL:                      ;
1082: EA5D C5                     PUSH   BC                   ; Save Current Index and Max Count   ;
1083: EA5E E5                     PUSH   HL                   ; Save pointer                       ;
1084: EA5F CD D6 E9               CALL   showCRLF             ; Make new line                      ;
1085: EA62 C3 EF E9               JP     ReadNext0            ;   and go for next char   			 ;
1086: EA65         ;.......................... It is PhysicalEOL ...............................;
1087: EA65         ;.......................... It is PrintToggle ...............................;
1088: EA65             ItIsPrintToggle:                      ;
1089: EA65 E5                     PUSH   HL                   ; Save pointer                       ;
1090: EA66         ; Toggle the printEcho Flag                                                  ;
1091: EA66 21 BF EA               LD     HL,printEchoFlag     ; Point at the flag                  ;
1092: EA69 3E FF                  LD     A,TRUE               ; Load ACC with TRUE                 ;
1093: EA6B BE                     CP     (HL)                 ; Is the flag true?                  ;
1094: EA6C 20 02                  JR     NZ,IsItPrintToggle1  ; Skip if not                        ;
1095: EA6E 3E 00                  LD     A,FALSE              ;   else. load ACC with FALSE        ;
1096: EA70             IsItPrintToggle1:                      ;
1097: EA70 77                     LD     (HL),A               ; Set the Flags new Value	         ;
1098: EA71 E1                     POP    HL                   ; Restore pointer                    ;
1099: EA72 C3 ED E9               JP     ReadNext             ;   and for another char             ;
1100: EA75         ;.......................... It is PrintToggle ...............................;
1101: EA75         ;.......................... RepeatLine ......................................;
1102: EA75             RepeatLine:                      ;
1103: EA75 C5                     PUSH   BC                   ; Save Current Index and Max Count   ;
1104: EA76 E5                     PUSH   HL                   ;  for exit                          ;
1105: EA77 CD C0 E9               CALL   showHashCRLF         ; Display Hash, new Line			 ;
1106: EA7A         ;
1107: EA7A 2A C3 EA               LD     HL,(paramDE)         ; Get start of Buffer                ;
1108: EA7D 23                     INC    HL                   ; Skip past character count          ;
1109: EA7E         ;
1110: EA7E             LL1:                            ;
1111: EA7E 23                     INC    HL                   ; Point at next char to display      ;
1112: EA7F C5                     PUSH   BC                   ; Save counter, in B                 ;
1113: EA80 E5                     PUSH   HL                   ; Save buffer pointer                ;
1114: EA81 4E                     LD     C,M                  ; Get the next character             ;
1115: EA82 CD 48 E9               CALL   CaretOut             ; Display it                         ;
1116: EA85 E1                     POP    HL                   ; Restore                            ;
1117: EA86 C1                     POP    BC                   ;  the counter and pointer           ;
1118: EA87 10 F5                  DJNZ   LL1                  ; loop if still more to show         ;
1119: EA89 E1                     POP    HL                   ; Restore values                     ;
1120: EA8A C1                     POP    BC                   ;  from routine entry                ;
1121: EA8B C3 ED E9               JP     ReadNext             ; Done here !                        ;
1122: EA8E         ;.......................... RepeatLine ......................................;
1123: EA8E         ;.......................... Delete The Line .................................;
1124: EA8E             DeleteTheLine:                      ;
1125: EA8E E1                     POP    HL                   ; Adjust Stack                       ;
1126: EA8F         ;                                             ;
1127: EA8F             DeleteTheLine1:                      ;
1128: EA8F 3A C0 EA               LD     A,(startingColumn)   ;
1129: EA92 21 C1 EA               LD     HL,columnPosition    ;
1130: EA95 BE                     CP     M                    ; Start of line ?                    ;
1131: EA96 D2 E0 E9               JP     NC,ReadString        ;  If yes get out and go for more    ;
1132: EA99 35                     DEC    M                    ; Adjust the ColumnPosition          ;
1133: EA9A CD 9F EA               CALL   BackUp               ; Clear 1 column                     ;
1134: EA9D 18 F0                  JR     DeleteTheLine1       ; Loop for more                      ;
1135: EA9F         ;.......................... Delete The Line .................................;
1136: EA9F         ;------------------------ Back-up one screen position -----------------------;
1137: EA9F             BackUp:                         ;
1138: EA9F CD A7 EA               CALL   BackUp1              ; Send Backspace                     ;
1139: EAA2 0E 20                  LD     C,SPACE              ; Overwrite with SPACE               ;
1140: EAA4 CD 0C F6               CALL   bcConout             ; Overwrite with SPACE				 ;
1141: EAA7         ;does not affect column count                                                ;
1142: EAA7             BackUp1:                        ;
1143: EAA7 0E 08                  LD     C,CTRL_H             ;
1144: EAA9 C3 0C F6               JP     bcConout             ; Send Backspace                     ;
1145: EAAC         ;------------------------ Back-up one screen position -----------------------;
1146: EAAC         ;.......................... Ignore The Line .................................;
1147: EAAC             IgnoreTheLine:                      ;
1148: EAAC CD C0 E9               CALL   showHashCRLF         ; Display Hash, new Line			 ;
1149: EAAF 0E 20                  LD     C,SPACE              ; We want to add a few spaces        ;
1150: EAB1 CD 0C F6               CALL   bcConout             ;  to the console                    ;
1151: EAB4 0E 20                  LD     C,SPACE              ;
1152: EAB6 CD 0C F6               CALL   bcConout             ;
1153: EAB9 C3 E0 E9               JP     ReadString           ; Start all over                     ;
1154: EABC         ;.......................... Ignore The Line .................................;
1155: EABC
1156: EABC         ;------------------------- Read a $ terminated String -----------------------;
1157: EABC
1158: EABC         ;****************************************************************************
1159: EABC         ;                           DATA AREA                                       *
1160: EABC         ;****************************************************************************
1161: EABC
1162: EABC         ;------------------------------Non Disk Data Area ---------------------------;
1163: EABC             usersStack: DS     2                    ; entry stack pointer                ;
1164: EABE         ;
1165: EABE 00          keyboardByte: DB     00                   ; Saved keyboard character           ;
1166: EABF         ;
1167: EABF 00          printEchoFlag: DB     00                   ; Controlled by ^P                   ;
1168: EAC0         ;
1169: EAC0         ; FunctionValue:DB	00H					; Reg C on BDOS Entry                ;
1170: EAC0 00          startingColumn: DB     0                    ; Starting col pos after read        ;
1171: EAC1 00          columnPosition: DB     0                    ; Current Column position            ;
1172: EAC2         ;
1173: EAC2             paramE:    DS     BYTE                 ; Byte Argument for BDOS Call        ;
1174: EAC3             paramDE:   DS     WORD                 ; Word Argument for BDOS Call	     ;
1175: EAC5             exitParameterByte:                      ; Byte returned Value                ;
1176: EAC5             exitParameterWord: DS     WORD                 ; Word                           ;
1177: EAC7         ;
1178: EAC7         ;
1179: EAC7         ;------------------------------------ Data Area -----------------------------;
1180: EAC7
1181: EAC7
1182: EAC7
1183: EAC7         ;****************************************************************************;
1184: EAC7         ;								Disk I/O									 ;
1185: EAC7         ;****************************************************************************;
1186: EAC7
1187: EAC7         ;---------------------------- Reset Disk System - D (13) --------------------;
1188: EAC7         ;  This function requests CP/M to completely reset the disk file system.     ;
1189: EAC7         ; CP/M then resets its internal tables, selects logical disk A as the        ;
1190: EAC7         ; default disk, resets the DMAaddress back to 0080H (the address of the      ;
1191: EAC7         ; buffer used by the BDOS to read and write to the disk), and marks all      ;
1192: EAC7         ; logical disks as having Read/Write status. The BDOS will then have to log  ;
1193: EAC7         ; in each logical disk as each disk is accessed. This involves reading the   ;
1194: EAC7         ; entire file directory for the disk and rebuilding the allocation vectors   ;
1195: EAC7         ; which keep track of which allocation blocks are free and which             ;
1196: EAC7         ; are used for file storage.                                                 ;
1197: EAC7         ;                                                                            ;
1198: EAC7         ;			Function Code	:	C = 0DH                                      ;
1199: EAC7         ;			Entry Parameters:	None										 ;
1200: EAC7         ;			Exit Parameters :	None										 ;
1201: EAC7         ;																			 ;
1202: EAC7         ;---------------------------- Reset Disk System - D (13) --------------------;
1203: EAC7             vResetSystem:
1204: EAC7 21 00 00               LD     HL,0
1205: EACA 22 61 F5               LD     (readOnlyVector),HL  ; Clear the vectors for
1206: EACD 22 63 F5               LD     (loggedDisks),HL     ;   R/O and Logged Disks
1207: EAD0 AF                     XOR    A                    ; Clear the current disk
1208: EAD1 32 5F F5               LD     (currentDisk),A
1209: EAD4         ; note that currentUserNumber remains unchanged
1210: EAD4 21 80 00               LD     HL,DMABuffer
1211: EAD7 22 65 F5               LD     (initDAMAddress),HL  ; initDAMAddress = DMABuffer
1212: EADA CD D0 EE               CALL   SetDataDMA           ; to data DMA address
1213: EADD C3 C8 EC               JP     Select
1214: EAE0         ;---------------------------- Select Disk - E (14) -------------------------;
1215: EAE0         ;  This function makes the logical disk named in register E the default disk;
1216: EAE0         ; All subsequent references to disk files that do not specify the disk will ;
1217: EAE0         ; use this default. When you reference a disk file that does have an        ;
1218: EAE0         ; explicit logical disk in its name you do not have to issue another        ;
1219: EAE0         ; Select Disk function; the BDOS will take care of that for you.            ;
1220: EAE0         ;                                                                           ;
1221: EAE0         ;  Notice the way in which the logical disk is specified in register E.     ;
1222: EAE0         ; It is not the same as the disk drive specification in the first byte of   ;
1223: EAE0         ; the file control block. In the FeB, a value ofOOH is used to mean         ;
1224: EAE0         ; "use the current default disk" (as specified in the last Select Disk      ;
1225: EAE0         ; call or by the operator on the console). With this function, a value      ;
1226: EAE0         ; of OOH in register A means that A is the selected drive, a value of       ;
1227: EAE0         ; 01H means drive B, and so on to OFR for drive P, allowing                 ;
1228: EAE0         ; 16 drives in the system.                                                  ;
1229: EAE0         ;                                                                           ;
1230: EAE0         ;			Function Code	:	C = 0EH                                     ;
1231: EAE0         ;			Entry Parameters:	E = Logical Disk Code (00H = A,01H = B ..)	;
1232: EAE0         ;			Exit Parameters :	None										;
1233: EAE0         ;																			;
1234: EAE0         ;---------------------------- Select Disk - E (14) -------------------------;
1235: EAE0
1236: EAE0             vSelectDisk:
1237: EAE0 C3 BC EC               JP     SelectCurrent
1238: EAE3
1239: EAE3         ;---------------------------- Open File - F (15) ---------------------------;
1240: EAE3         ;  This function opens a specified file for reading or writing. The FCB,    ;
1241: EAE3         ; whose address must be in register DE, tells CP/M the user number,         ;
1242: EAE3         ; the logical disk, the file name, and the file type. All other bytes of    ;
1243: EAE3         ; the FCB will normally be set to O.                                        ;
1244: EAE3         ;  The code returned by the BDOS in register A indicates whether the file   ;
1245: EAE3         ; has been opened successfully. If A contains OFFH, then the BOOS was       ;
1246: EAE3         ; unable to find the correct entry in the directory. If A= 0,1,2, or 3,     ;
1247: EAE3         ; then the file has been opened.                                            ;
1248: EAE3         ;			Function Code	:	C  = 0FH                                    ;
1249: EAE3         ;			Entry Parameters:	DE = Address of File Control Block			;
1250: EAE3         ;			Exit Parameters :	A  = Directory Code							;
1251: EAE3         ;																			;
1252: EAE3         ;---------------------------- Open File - F (15) ---------------------------;
1253: EAE3             vOpenFile:
1254: EAE3 CD 88 EF               CALL   InitializeExtentNumberMSB ; Clear the Extent number
1255: EAE6 CD 09 EF               CALL   ReselectDisk         ; do we need to reselect disk?
1256: EAE9 C3 9F ED               JP     OpenFile
1257: EAEC
1258: EAEC         ;---------------------------- Close File - 10 (16) -------------------------;
1259: EAEC         ;  This function terminates the processing of a file to which you have      ;
1260: EAEC         ; written information. Under CP/M you do not need to close a file that you  ;
1261: EAEC         ; have been reading. However, if you ever intend for your program to        ;
1262: EAEC         ; function correctly under MP/M (the multi-user version of CP/M) you        ;
1263: EAEC         ; should close all files regardless of their use.                           ;
1264: EAEC         ;  The Close File function, like Open File, returns a directory code in     ;
1265: EAEC         ; the A register. Register A will contain OFFH if the BOOS could not        ;
1266: EAEC         ; close the file successfully. If A is 0, 1, 2, or 3, then the file has     ;
1267: EAEC         ; been closed.                                                              ;
1268: EAEC         ;                                                                           ;
1269: EAEC         ;  When the BDOS closes a file to which data has been written, it writes    ;
1270: EAEC         ; the current contents of the FCB out to the disk directory, updating       ;
1271: EAEC         ; an existing directory entry by matching the disk, name, type, and         ;
1272: EAEC         ; extent number in the same manner that the Open File function does.        ;
1273: EAEC         ; Note that the BDOS does not transfer the last record of the file to the   ;
1274: EAEC         ; disk during the close operation. It merely updates the file directory.    ;
1275: EAEC         ; You must arrange to flush any partly filled record to the disk. If the    ;
1276: EAEC         ; file that you have created is a standard CP/M ASCII text file, you must   ;
1277: EAEC         ; arrange to fill the unused portion of the record with the standard lAH    ;
1278: EAEC         ; end-of-file characters as CP/M expects.                                   ;
1279: EAEC         ;                                                                           ;
1280: EAEC         ;			Function Code	:	C  = 10FH                                   ;
1281: EAEC         ;			Entry Parameters:	DE = Address of File Control Block			;
1282: EAEC         ;			Exit Parameters :	A  = Directory Code							;
1283: EAEC         ;																			;
1284: EAEC         ;---------------------------- Close File - 10 (16) -------------------------;
1285: EAEC             vCloseFile:
1286: EAEC CD 09 EF               CALL   ReselectDisk
1287: EAEF C3 E2 ED               JP     CloseDirEntry
1288: EAF2         ;---------------------Search for First Name Match - 11 (17) ----------------;
1289: EAF2         ;  This function scans down the file directory for the first entry that     ;
1290: EAF2         ; matches the file name, type, and extent in the FCB addressed by DE.       ;
1291: EAF2         ; The file name, type, and extent may contain a "?" (ASCII 3FH) in one or   ;
1292: EAF2         ; more character positions. Where a "?" occurs, the BDOS will match any     ;
1293: EAF2         ; character in the corresponding position in the file directory. This is    ;
1294: EAF2         ; known as ambiguous file name matching.                                    ;
1295: EAF2         ;  The first byte of an FCB normally contains the logical disk number code. ;
1296: EAF2         ; A value of 0 indicates the default disk, while 1 means disk A, 2 is B,    ;
1297: EAF2         ; and so on up to a possible maximum of 16 for disk P. However, if this     ;
1298: EAF2         ; byte contains a "?", the BDOS will search the default logical disk and    ;
1299: EAF2         ; will match the file name and type regardless of the user number. This     ;
1300: EAF2         ; function is normally used in conjunction with the Search Next function.   ;
1301: EAF2         ; Search First, in the process of matching a file, leaves certain           ;
1302: EAF2         ; variables in the BDOS set, ready for a subsequent Search Next.            ;
1303: EAF2         ;  Both Search First and Search Next return a directory code in the         ;
1304: EAF2         ; A register. With Search First, A = OFFH when no files match the FCB,      ;
1305: EAF2         ; if a file match is found, A will have a value of 0, I, 2, or 3.           ;
1306: EAF2         ;                                                                           ;
1307: EAF2         ;  To locate the particular directory entry that either the Search First    ;
1308: EAF2         ; or Search Next function matched, multiply the directory code returned     ;
1309: EAF2         ; in A by the length of a directory entry (32 bytes). This is easily done   ;
1310: EAF2         ; by adding the A register to itself five times. Then add the DMA address   ;
1311: EAF2         ; to get the actual address where the matched directory entry is stored.    ;
1312: EAF2         ;  There are many occasions when you may need to write a program that will  ;
1313: EAF2         ; accept an ambiguous file name and operate on all of the file names that   ;
1314: EAF2         ; match it. (The DIR and ERA commands built into the CCP are examples that  ;
1315: EAF2         ; use ambiguous file names.) To do this, you must use several BDOS          ;
1316: EAF2         ; functions: the Set DMA Address function (code 26), this function          ;
1317: EAF2         ; (Search First), and Search Next (code 18). All of this is shown in the    ;
1318: EAF2         ; subroutine given in Figure 5-17.                                          ;
1319: EAF2         ;                                                                           ;
1320: EAF2         ;                                                                           ;
1321: EAF2         ;			Function Code	:	C  = 11FH                                   ;
1322: EAF2         ;			Entry Parameters:	DE = Address of File Control Block			;
1323: EAF2         ;			Exit Parameters :	A  = Directory Code							;
1324: EAF2         ;																			;
1325: EAF2         ;---------------------Search for First Name Match - 11 (17) ----------------;
1326: EAF2             vFindFirst:
1327: EAF2 0E 00                  LD     C,0                  ; Length assuming '?' true
1328: EAF4 2A C3 EA               LD     HL,(paramDE)         ; Get the FCB
1329: EAF7 7E                     LD     A,(HL)               ; DIsk/User No
1330: EAF8 FE 3F                  CP     QMARK                ; Does it contain '?' ?
1331: EAFA CA 05 EB               JP     Z,QMarkFind          ;  if Yes, skip disk reselect
1332: EAFD         ;  and reset of EXT
1333: EAFD
1334: EAFD CD 88 EF               CALL   InitializeExtentNumberMSB ; Set Ext to 0
1335: EB00 CD 09 EF               CALL   ReselectDisk         ; Use FCB to set currentDisk
1336: EB03 0E 0F                  LD     C,nameLength         ; Match name,type and extent
1337: EB05
1338: EB05             QMarkFind:
1339: EB05 CD B4 EF               CALL   SearchForDirectoryRecord ; Find the directory record
1340: EB08 C3 1F F1               JP     CopyDirEntryToUserDMA ; Move it to the User's buffer
1341: EB0B
1342: EB0B         ;---------------------Search for Next Name Match - 12 (18) -----------------;
1343: EB0B         ;	This function searches down the file directory for the next file name,  ;
1344: EB0B         ; type, and extent that match the FCB specified in a previous Search First  ;
1345: EB0B         ; function call. Search First and Search Next are the only BDOS functions   ;
1346: EB0B         ; that must be used together. As you can see, the Search Next function      ;
1347: EB0B         ; does not require an FCB address as an input parameter-all the necessary   ;
1348: EB0B         ; information will have been left in the BDOS on the Search First call.     ;
1349: EB0B         ; Like Search First, Search Next returns a directory code in the A register,;
1350: EB0B         ; in this case, if A = OFFH, it means that there are no more files that     ;
1351: EB0B         ; match the file control block. If A is not OFFH, it will be a value of     ;
1352: EB0B         ; 0, 1, 2, or 3, indicating the relative directory entry number.            ;
1353: EB0B         ;                                                                           ;
1354: EB0B         ;  There are two ways of using the Search First/ Next calls. Consider a     ;
1355: EB0B         ; simple file copying program that takes as input an ambiguous file name.   ;
1356: EB0B         ; You could scan the file directory, matching all of the possible file      ;
1357: EB0B         ; names, possibly displaying them on the console, and storing the names of  ;
1358: EB0B         ; the files to be copied in a table inside your program. This would have    ;
1359: EB0B         ; the advantage of enabling you to present the file names to the operator   ;
1360: EB0B         ; before any copying occurred. You could even arrange for the operator to   ;
1361: EB0B         ; select which files to copy on a file-by-file basis. One disadvantage      ;
1362: EB0B         ; would be that you could not accurately predict how many files might be    ;
1363: EB0B         ; selected. On some hard disk systems you might have to accommodate several ;
1364: EB0B         ; thousand file names.                                                      ;
1365: EB0B         ;  The alternative way of handling the problem would be to match one file   ;
1366: EB0B         ; name, copy it, then match the next file name, copy it, and so on. If you  ;
1367: EB0B         ; gave the operator the choice of selecting which files to copy, this person;
1368: EB0B         ; would have to wait at the terminal as each file was being copied, but the ;
1369: EB0B         ; program would not need to have large table areas set aside to hold file   ;
1370: EB0B         ; names. This solution to the problem is slightly more complicated, as you  ;
1371: EB0B         ; can see from the logic in Figure 5-17.                                    ;
1372: EB0B         ;  The subroutine in Figure 5-17, Get Next File (GNF), contains all of the  ;
1373: EB0B         ; necessary logic to search down a directory for both alternatives described;
1374: EB0B         ; It does require that you indicate on entry whether it should search for   ;
1375: EB0B         ; the first or next file match, by setting A to zero or some nonzero value  ;
1376: EB0B         ; respectively.                                                             ;
1377: EB0B         ;  You can see from Figure 5-17 that whenever the subroutine is called to   ;
1378: EB0B         ; get the next file, you must execute a Search First function to re-find    ;
1379: EB0B         ; the  previous file. Only then can a Search Next be issued. As with all    ;
1380: EB0B         ; functions that return a directory code in A, if this value is not OFFH, it;
1381: EB0B         ; will be the relative directory entry number in the directory record       ;
1382: EB0B         ; currently in memory. This directory record will have been read into memory;
1383: EB0B         ; at whatever address was specified at the last Set DMA Address function    ;
1384: EB0B         ; call. Notwithstanding its odd name, the DMA Address is simply the address ;
1385: EB0B         ; into which any record input from disk will be placed. If the Set DMA      ;
1386: EB0B         ; Address function has not been used to change the value, then the CP/M     ;
1387: EB0B         ; default DMA address, location 0080H, will be used to hold the directory   ;
1388: EB0B         ; record.                                                                   ;
1389: EB0B         ;  The actual code for locating the address of the particular directory     ;
1390: EB0B         ;  entry matched by the Search First/ Next functions is shown in Figure 5-17;
1391: EB0B         ;  near the label GNFC. The method involves multiplying the directory code  ;
1392: EB0B         ;  by 32 and then adding this product to the current DMA address.	        ;
1393: EB0B         ;                                                                           ;
1394: EB0B         ;                                                                           ;
1395: EB0B         ;			Function Code	:	C  = 12FH                                   ;
1396: EB0B         ;			Entry Parameters:	None , Assume previous Search First Call	;
1397: EB0B         ;			Exit Parameters :	A  = Directory Code							;
1398: EB0B         ;																			;
1399: EB0B         ;---------------------Search for Next Name Match - 12 (18) -----------------;
1400: EB0B             vFindNext:
1401: EB0B 2A 8C F5               LD     HL,(searchAddress)   ; Get Current Dir Entry
1402: EB0E 22 C3 EA               LD     (paramDE),HL         ; Get the user's FCB
1403: EB11 CD 09 EF               CALL   ReselectDisk         ; Reselect if needed
1404: EB14 CD C9 EF               CALL   GetNextDirectoryRecord ; Go find the next directory record
1405: EB17 C3 1F F1               JP     CopyDirEntryToUserDMA ; Copy directory entry to user
1406: EB1A
1407: EB1A         ;--------------------------------Delete File - 13 (19) ---------------------;
1408: EB1A         ; This function logically deletes from the file directory files that match  ;
1409: EB1A         ; the FCB addressed by DE. It does so by replacing the first byte of each   ;
1410: EB1A         ; relevant directory entry (remember, a single file can have several        ;
1411: EB1A         ; entries, one for each extent) by the value OE5H. This flags the directory ;
1412: EB1A         ; entry as being available for use.                                         ;
1413: EB1A         ;                                                                           ;
1414: EB1A         ;  Like the previous two functions, Search First and Search Next, this      ;
1415: EB1A         ; function can take an ambiguous file name and type as part of the          ;
1416: EB1A         ; File Control Block, but unlike those functions, the logical disk select   ;
1417: EB1A         ; code cannot be a"?". This function returns a directory code in A in the   ;
1418: EB1A         ; same way as the previous file operations.                                 ;
1419: EB1A         ;                                                                           ;
1420: EB1A         ;                                                                           ;
1421: EB1A         ;			Function Code	:	C  = 13FH                                   ;
1422: EB1A         ;			Entry Parameters:	DE = Address of File Control Block			;
1423: EB1A         ;			Exit Parameters :	A  = Directory Code							;
1424: EB1A         ;																			;
1425: EB1A         ;--------------------------------Delete File - 13 (19) ---------------------;
1426: EB1A             vDeleteFile:
1427: EB1A CD 09 EF               CALL   ReselectDisk         ; Reselect if needed
1428: EB1D CD 23 EB               CALL   DeleteFile
1429: EB20 C3 2C F1               JP     DirLocationToReturnLoc ; Return directory Index to caller
1430: EB23
1431: EB23             DeleteFile:
1432: EB23 CD 33 F1               CALL   CheckWrite           ; Terminate with error if Disk R/O
1433: EB26 0E 0C                  LD     C,fcbExtIndex        ; Load the extent number field
1434: EB28 CD B4 EF               CALL   SearchForDirectoryRecord ; Look for directory entry
1435: EB2B
1436: EB2B             DeleteFileLoop:
1437: EB2B CD 50 F0               CALL   AtEndOfDirectory     ; Have we worked thru all entries
1438: EB2E C8                     RET    Z                    ;  exit if we have
1439: EB2F         ; set each non zero disk map entry to 0 in the allocation vector
1440: EB2F CD 3A F1               CALL   CheckRODirectory     ; Terminate with error if File R/O
1441: EB32 CD 59 F0               CALL   GetCurrentDirectoryRecord ; Point to Directory Entry
1442: EB35 36 E5                  LD     (HL),emptyDir        ; Mark as Empty
1443: EB37 0E 00                  LD     C,FALSE              ; Set flag for remove
1444: EB39 CD 7D F0               CALL   ScanDiskMap          ; Reclaim Bisk Blocks, set to 0
1445: EB3C CD 31 F0               CALL   WriteDir             ; Update the directory
1446: EB3F CD C9 EF               CALL   GetNextDirectoryRecord ; Look for more
1447: EB42 C3 2B EB               JP     DeleteFileLoop       ; Loop
1448: EB45
1449: EB45         ;--------------------------------- Make File - 16 (22) ---------------------;
1450: EB45         ;  This function creates a new file of the specified name and type. You must;
1451: EB45         ; first ensure that no file of the same name and type already exists on the ;
1452: EB45         ; same logical disk, either by trying to open the file (if this succeeds,   ;
1453: EB45         ; the file already exists) or by unconditionally erasing the file.          ;
1454: EB45         ;  In addition to creating the file and its associated file directory entry,;
1455: EB45         ; this function also effectively opens the file so that it is ready for     ;
1456: EB45         ; records to be written to it.                                              ;
1457: EB45         ;  This function returns a normal directory code if the file creation has   ;
1458: EB45         ; completed successfully or a value of OFFH if there is insufficient        ;
1459: EB45         ; disk or directory space.                                                  ;
1460: EB45         ;  Note that this function cannot accept an ambiguous file name in the FCB. ;
1461: EB45         ;                                                                           ;
1462: EB45         ;                                                                           ;
1463: EB45         ;			Function Code	:	C  = 16FH                                   ;
1464: EB45         ;			Entry Parameters:	DE = Address of File Control Block			;
1465: EB45         ;			Exit Parameters :	A  = Directory Code							;
1466: EB45         ;																			;
1467: EB45         ;--------------------------------- Make File - 16 (22) ---------------------;
1468: EB45             vMakeFile:
1469: EB45 CD 88 EF               CALL   InitializeExtentNumberMSB ; Clear the Extent number
1470: EB48 CD 09 EF               CALL   ReselectDisk         ; Reselect if needed
1471: EB4B C3 62 EE               JP     MakeNewFile          ; Go Make it
1472: EB4E
1473: EB4E
1474: EB4E         ;------
1475: EB4E
1476: EB4E         ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1477: EB4E         ;---------------------------- Get Active Disks - 18 (24) --------------------;
1478: EB4E         ; This function returns a bit map, called the login vector, in register pair ;
1479: EB4E         ; HL, indicating which logical disk drives have been selected since the last ;
1480: EB4E         ; warm boot or Reset Disk function (code 13, ODH). The least significant bit ;
1481: EB4E         ; of L corresponds to disk A, while the highest order bit in H maps disk P.  ;
1482: EB4E         ; The bit corresponding to the specific logical disk is set to 1 if the      ;
1483: EB4E         ; disk has been selected or to 0 if the disk is not currently on-line.       ;
1484: EB4E         ;  Logical disks can be selected programmatically through any file operation ;
1485: EB4E         ; that sets the drive field to a nonzero value, through the Select Disk      ;
1486: EB4E         ; function (code 14, OEH), or by the operator entering an "X:" command       ;
1487: EB4E         ; where "X" is equal to A, B, ... , P.                                       ;
1488: EB4E         ;                                                                            ;
1489: EB4E         ;			Function Code	:	C = 018H                                     ;
1490: EB4E         ;			Entry Parameters:	None										 ;
1491: EB4E         ;			Exit Parameters :	HL = Active disk map (login vector)			 ;
1492: EB4E         ;																			 ;
1493: EB4E         ;---------------------------- Get Active Disks - 18 (24) --------------------;
1494: EB4E             vGetLoginVector:
1495: EB4E 2A 63 F5               LD     HL,(loggedDisks)
1496: EB51 22 C5 EA               LD     (exitParameterWord),HL
1497: EB54 C9                     RET
1498: EB55         ;---------------------------- Get Current Disk- 19 (25) ---------------------;
1499: EB55         ;   This function returns the current default disk set by the last Select    ;
1500: EB55         ; Disk function call (code 14, OEH) or by the operator entering the          ;
1501: EB55         ; "X:"command (where "X" is A, B, ..., P) to the CCP.                        ;
1502: EB55         ;                                                                            ;
1503: EB55         ;  This function returns the current default disk in coded form.             ;
1504: EB55         ; Register A= 0 if drive A is the current drive, I if drive B, and so on.    ;
1505: EB55         ; If you need to convert this to the corresponding ASCII character, simply   ;
1506: EB55         ; add 41H to register A. Use this function when you convert a file name and  ;
1507: EB55         ; type in an FCB to an ASCII string in order to display it. If the first     ;
1508: EB55         ; byte of the FCB is OOH, the current default drive is to be used.           ;
1509: EB55         ; You must therefore use this function to determine the logical disk letter  ;
1510: EB55         ; for the default drive.                                                     ;
1511: EB55         ;                                                                            ;
1512: EB55         ;			Function Code	:	C = 019H                                     ;
1513: EB55         ;			Entry Parameters:	None										 ;
1514: EB55         ;			Exit Parameters :	A = Current Disk (0=A,1=B...,F=P)			 ;
1515: EB55         ;																			 ;
1516: EB55         ;---------------------------- Get Current Disk- 19 (25) ---------------------;
1517: EB55             vGetCurrentDisk:
1518: EB55 3A 5F F5               LD     A,(currentDisk)
1519: EB58 32 C5 EA               LD     (exitParameterByte),A
1520: EB5B C9                     RET
1521: EB5C         ;---------------------------- Set DMA Address - 1A (26) ---------------------;
1522: EB5C         ;  This function sets the BDOS's direct memory access (DMA) address to a new ;
1523: EB5C         ; value. The name is an historic relic dating back to the Intel Development  ;
1524: EB5C         ; System on which CP/M was originally developed. This machine, by virtue of  ;
1525: EB5C         ; its hardware, could read data from a diskette directly into memory or      ;
1526: EB5C         ; write data to a diskette directly from memory. The name DMA address now    ;
1527: EB5C         ; applies to the address of the buffer to and from which data is             ;
1528: EB5C         ; transferred whenever a diskette Read, Write, or directory operation is     ;
1529: EB5C         ; performed. Whenever CP/M first starts up (cold boot) m a warm boot or      ;
1530: EB5C         ; Reset Disk operation occurs, the DMA address is reset to its default       ;
1531: EB5C         ; value of 0080H.                                                            ;
1532: EB5C         ;                                                                            ;
1533: EB5C         ;			Function Code	:	C = 0A9H                                     ;
1534: EB5C         ;			Entry Parameters:	DE = DMA Address							 ;
1535: EB5C         ;			Exit Parameters :	None										 ;
1536: EB5C         ;																			 ;
1537: EB5C         ;---------------------------- Set DMA Address - 1A (26) ---------------------;
1538: EB5C             vSetDMA:
1539: EB5C 2A C3 EA               LD     HL,(paramDE)
1540: EB5F 22 65 F5               LD     (initDAMAddress),HL
1541: EB62 C3 D0 EE               JP     SetDataDMA
1542: EB65
1543: EB65         ;---------------------------- Get Allocation Vector - 1B (27) ---------------;
1544: EB65         ;  This function returns the base, or starting, address of the allocation    ;
1545: EB65         ; vector for the currently selected logical disk. This information,          ;
1546: EB65         ; indicating which parts of the disk are assigned, is used by utility        ;
1547: EB65         ; programs and the BDOS itself to determine how much unused space is on the  ;
1548: EB65         ; logical disk, to locate an unused allocation block in order to extend      ;
1549: EB65         ; a file, or to relinquish an allocation block when a file is deleted.       ;
1550: EB65         ;                                                                            ;
1551: EB65         ;			Function Code	:	C = 01BH                                     ;
1552: EB65         ;			Entry Parameters:	None										 ;
1553: EB65         ;			Exit Parameters :	HL = Address of allocation vector			 ;
1554: EB65         ;																			 ;
1555: EB65         ;---------------------------- Get Allocation Vector - 1B (27) ---------------;
1556: EB65             vGetAllocAddr:
1557: EB65 2A 73 F5               LD     HL,(caAllocVector)
1558: EB68 22 C5 EA               LD     (exitParameterWord),HL
1559: EB6B C9                     RET
1560: EB6C
1561: EB6C         ;---------------------------- Write Protect Disk - 1C (28) ------------------;
1562: EB6C         ;  This function logically sets the currently selected disk to a Read-Only   ;
1563: EB6C         ; state. Any attempts to execute a Write Sequential or Write Random function ;
1564: EB6C         ; to the selected disk will be intercepted by the BDOS, and the following    ;
1565: EB6C         ; message will appear on the console:                                        ;
1566: EB6C         ;	BDOS Err on X: R/O                                                       ;
1567: EB6C         ;	where X: is the selected disk.                                           ;
1568: EB6C         ;                                                                            ;
1569: EB6C         ;  Once you have requested Read-Only status for the currently selected       ;
1570: EB6C         ; logical disk, this status will persist even if you proceed to select       ;
1571: EB6C         ; other logical disks. In fact, it will remain in force until the next warm  ;
1572: EB6C         ; boot or Reset Disk System function call.                                   ;
1573: EB6C         ;  Digital Research documentation refers to this function code as Disk Write ;
1574: EB6C         ; Protect. The Read-Only description is used here because it corresponds     ;
1575: EB6C         ; to the error message produced if your program attempts to write on         ;
1576: EB6C         ; the disk.                                                                  ;
1577: EB6C         ;                                                                            ;
1578: EB6C         ;			Function Code	:	C = 01CH                                     ;
1579: EB6C         ;			Entry Parameters:	None										 ;
1580: EB6C         ;			Exit Parameters :	None										 ;
1581: EB6C         ;																			 ;
1582: EB6C         ;---------------------------- Write Protect Disk - 1C (28) ------------------;
1583: EB6C         ;;write protect current disk
1584: EB6C             vWriteProtectDisk:
1585: EB6C C3 E6 EE               JP     SetDiskReadOnly
1586: EB6F
1587: EB6F         ;---------------------------- Get Read-Only Map - 1D (29) -------------------;
1588: EB6F         ;  This function returns a bit map in registers H and L showing which logical;
1589: EB6F         ; disks in the system have been set to Read-Only status, either by the       ;
1590: EB6F         ; Set Logical Disk to Read-Only function call (code 28, ICH), or by the      ;
1591: EB6F         ; BDOS itself, because it detected that a diskette had been changed.         ;
1592: EB6F         ;  The least significant bit of L corresponds to logical disk A, while the   ;
1593: EB6F         ; most significant bit of H corresponds to disk P. The bit corresponding to  ;
1594: EB6F         ; the specific logical disk is set to I if the disk has been set to          ;
1595: EB6F         ; Read-Only status.                                                          ;
1596: EB6F         ;                                                                            ;
1597: EB6F         ;			Function Code	:	C = 01DH                                     ;
1598: EB6F         ;			Entry Parameters:	None										 ;
1599: EB6F         ;			Exit Parameters :	HL = Read-Only Vector						 ;
1600: EB6F         ;																			 ;
1601: EB6F         ;---------------------------- Get Read-Only Map - 1D (29) -------------------;
1602: EB6F             vGetReadOnlyMap:
1603: EB6F 2A 61 F5               LD     HL,(readOnlyVector)
1604: EB72 22 C5 EA               LD     (exitParameterWord),HL
1605: EB75 C9                     RET
1606: EB76
1607: EB76         ;------------------ Get Disk Parameter Block Address - 1F (31) --------------;
1608: EB76         ;  This function returns the address of the disk parameter block (DPB) for   ;
1609: EB76         ; the last selected logical disk. The DPB describes the physical             ;
1610: EB76         ; characteristics of a specific logical disk-information mainly of interest  ;
1611: EB76         ; for system utility programs.                                               ;
1612: EB76         ;                                                                            ;
1613: EB76         ;			Function Code	:	C = 1FH                                      ;
1614: EB76         ;			Entry Parameters:	None										 ;
1615: EB76         ;			Exit Parameters :	HL = Address of Disk Parameter Block		 ;
1616: EB76         ;																			 ;
1617: EB76         ;------------------ Get Disk Parameter Block Address - 1F (31) --------------;
1618: EB76             vGetDiskParamBlock:                      ; func31 (31 - 1F)
1619: EB76 2A 6F F5               LD     HL,(caDiskParamBlock)
1620: EB79 22 C5 EA               LD     (exitParameterWord),HL
1621: EB7C C9                     RET
1622: EB7D
1623: EB7D         ;---------------------------- XXXXX YYYY ZZZZZZ - x (nn) --------------------;
1624: EB7D         ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1625: EB7D         ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1626: EB7D         ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1627: EB7D
1628: EB7D         ;------------------------ Reset Logical Disk Drive - 25 (37) ----------------;
1629: EB7D         ;  This function resets individual disk drives. It is a more precise version ;
1630: EB7D         ; of the Reset Disk System function (code 13,ODH), in that you can set       ;
1631: EB7D         ; specific logical; disks rather than all of them.                           ;
1632: EB7D         ;  The bit map in DE shows which disks are to be reset. The least significant;
1633: EB7D         ; bit of; E represents disk A, and the most significant bit of D, disk P.    ;
1634: EB7D         ; The bits set to I indicate the disks to be reset.                          ;
1635: EB7D         ;  Note that this function returns a zero value in A in order to maintain    ;
1636: EB7D         ; compatibility with MP/ M.                                                  ;
1637: EB7D         ;                                                                            ;
1638: EB7D         ;			Function Code	:	C = 25H                                      ;
1639: EB7D         ;			Entry Parameters:	DE = Logical Drive Bit Vector					 ;
1640: EB7D         ;			Exit Parameters :	A = 00H										 ;
1641: EB7D         ;																			 ;
1642: EB7D         ;------------------------ Reset Logical Disk Drive - 25 (37) ----------------;
1643: EB7D         ;Reset Drive
1644: EB7D         ;IN  - (DE) Drive Vector
1645: EB7D         ;OUT - (A) 00
1646: EB7D             vResetDrive:                      ; func37 (37 - 25) Reset Drive
1647: EB7D         ; Not Yet Implemented   **************
1648: EB7D C9                     RET
1649: EB7E         ;*****************************************************************
1650: EB7E
1651: EB7E         ;-----------------------------------------------------------------
1652: EB7E
1653: EB7E         ;*****************************************************************
1654: EB7E         ;random disk read
1655: EB7E         ;IN  - (DE) FCB address
1656: EB7E         ;OUT - (A) 01 = Reading unwritten data
1657: EB7E         ;	 02 = N/U
1658: EB7E         ;	 03 = Cannot close current extent
1659: EB7E         ;	 04 = Seek to unwriten Extent
1660: EB7E         ;	 05 = N/U
1661: EB7E         ;	 06 = Seek past Physical end of Disk
1662: EB7E             vReadRandom:                      ; func33 (33 - 21) Read Random record
1663: EB7E CD 09 EF               CALL   ReselectDisk
1664: EB81 C3 94 EB               JP     RandomDiskRead       ; to perform the disk read
1665: EB84         ;*****************************************************************
1666: EB84         ;write random record
1667: EB84         ;IN  - (DE) FCB address
1668: EB84         ;OUT - (A) 01 = Reading unwritten data
1669: EB84         ;	 02 = N/U
1670: EB84         ;	 03 = Cannot close current extent
1671: EB84         ;	 04 = Seek to unwriten Extent
1672: EB84         ;	 05 = Cannot create new Extent because of directory overflow
1673: EB84         ;	 06 = Seek past Physical end of Disk
1674: EB84             vWriteRandom:                      ; func34 (34 - 22) Write Random record
1675: EB84 CD 09 EF               CALL   ReselectDisk
1676: EB87 C3 9D EB               JP     RandomDiskWrite      ; to perform the disk write
1677: EB8A         ;ret ;jmp goback
1678: EB8A         ;*****************************************************************
1679: EB8A         ;return file size (0-65536)
1680: EB8A         ;IN  - (DE) FCB address
1681: EB8A             vComputeFileSize:                      ; func35 (35 - 23) Compute File Size
1682: EB8A CD 09 EF               CALL   ReselectDisk
1683: EB8D C3 4A EC               JP     GetFileSize
1684: EB90         ;*****************************************************************
1685: EB90         ;set random record
1686: EB90         ;IN  - (DE) FCB address
1687: EB90         ;OUT - Random Record Field is set
1688: EB90             vSetRandomRecord:                      ; func36 (36 - 24) Set random Record
1689: EB90 C3 37 EC               JP     SetRandomRecord
1690: EB93         ;? ;*****************************************************************
1691: EB93         ;? ;Reset Drive
1692: EB93         ;? ;IN  - (DE) Drive Vector
1693: EB93         ;? ;OUT - (A) 00
1694: EB93         ;? vResetDrive:								; func37 (37 - 25) Reset Drive
1695: EB93         ;? ; Not Yet Implemented   **************
1696: EB93         ;?	RET
1697: EB93         ;*****************************************************************
1698: EB93         ;*****************************************************************
1699: EB93         ;Write Random With Zero Fill
1700: EB93         ;IN  - (DE) FCB address
1701: EB93         ;OUT - (A) Return Code		see Function 34
1702: EB93             vWriteRandom0Fill:                      ; func40 (40 - 28) Reset Drive
1703: EB93         ; Not Yet Implemented   **************
1704: EB93 C9                     RET
1705: EB94         ;*****************************************************************
1706: EB94         ;******************< Random I/O Stuff ****************************
1707: EB94         ;*****************************************************************
1708: EB94         ;random disk read
1709: EB94             RandomDiskRead:                      ; randiskread
1710: EB94 0E FF                  LD     C,TRUE               ; marked as read operation
1711: EB96 CD A6 EB               CALL   RandomSeek
1712: EB99 CC 87 F2               CALL   Z,DiskRead           ; if seek successful
1713: EB9C C9                     RET
1714: EB9D         ;*****************************************************************
1715: EB9D         ;random disk write
1716: EB9D             RandomDiskWrite:                      ; randiskwrite
1717: EB9D 0E 00                  LD     C,FALSE              ; marked as read operation
1718: EB9F CD A6 EB               CALL   RandomSeek
1719: EBA2 CC CA F2               CALL   Z,DiskWrite          ; if seek successful
1720: EBA5 C9                     RET
1721: EBA6         ;*****************************************************************
1722: EBA6         ;*****************************************************************
1723: EBA6         ;random access seek operation, C=0ffh if read mode
1724: EBA6         ;fcb is assumed to address an active file control block
1725: EBA6         ;(fcbS2Index has been set to 11000000b if previous bad seek)
1726: EBA6             RandomSeek:
1727: EBA6 AF                     XOR    A
1728: EBA7 32 89 F5               LD     (seqReadFlag),A      ; marked as random access operation
1729: EBAA C5                     PUSH   BC                   ; save r/w flag
1730: EBAB 2A C3 EA               LD     HL,(paramDE)
1731: EBAE EB                     EX     DE,HL                ; DE will hold base of fcb
1732: EBAF 21 21 00               LD     HL,RANDOM_REC_FIELD
1733: EBB2 19                     ADD    HL,DE                ; HL=.fcb(RANDOM_REC_FIELD)
1734: EBB3 7E                     LD     A,(HL)
1735: EBB4 E6 7F                  AND    7FH
1736: EBB6 F5                     PUSH   AF                   ; record number
1737: EBB7 7E                     LD     A,(HL)
1738: EBB8 17                     RLA                         ; cy=lsb of extent#
1739: EBB9 23                     INC    HL
1740: EBBA 7E                     LD     A,(HL)
1741: EBBB 17                     RLA
1742: EBBC E6 1F                  AND    11111B               ; A=ext#
1743: EBBE 4F                     LD     C,A                  ; C holds extent number, record stacked
1744: EBBF 7E                     LD     A,(HL)
1745: EBC0 1F                     RRA
1746: EBC1 1F                     RRA
1747: EBC2 1F                     RRA
1748: EBC3 1F                     RRA
1749: EBC4 E6 0F                  AND    1111B                ; mod#
1750: EBC6 47                     LD     B,A                  ; B holds module#, C holds ext#
1751: EBC7 F1                     POP    AF                   ; recall sought record #
1752: EBC8         ;check to insure that high byte of ran rec = 00
1753: EBC8 23                     INC    HL
1754: EBC9 6E                     LD     L,(HL)               ; l=high byte (must be 00)
1755: EBCA 2C                     INC    L
1756: EBCB 2D                     DEC    L
1757: EBCC 2E 06                  LD     L,06                 ; zero flag, l=6
1758: EBCE         ; produce error 6, seek past physical eod
1759: EBCE C2 2F EC               JP     NZ,RandomSeekError
1760: EBD1         ; otherwise, high byte = 0, A = sought record
1761: EBD1 21 20 00               LD     HL,NEXT_RECORD
1762: EBD4 19                     ADD    HL,DE                ; HL = .fcb(NEXT_RECORD)
1763: EBD5 77                     LD     (HL),A               ; sought rec# stored away
1764: EBD6         ; arrive here with B=mod#, C=ext#, DE=.fcb, rec stored
1765: EBD6         ; the r/w flag is still stacked.  compare fcb values
1766: EBD6 21 0C 00               LD     HL,fcbExtIndex       ; extent number field
1767: EBD9 19                     ADD    HL,DE
1768: EBDA 79                     LD     A,C                  ; A=seek ext#
1769: EBDB 96                     SUB    M
1770: EBDC C2 EA EB               JP     NZ,RandomSeekClose   ; tests for = extents
1771: EBDF         ; extents match, check mod#
1772: EBDF 21 0E 00               LD     HL,fcbS2Index
1773: EBE2 19                     ADD    HL,DE
1774: EBE3 78                     LD     A,B                  ; B=seek mod#
1775: EBE4         ; could be overflow at eof, producing module#
1776: EBE4         ; of 90H or 10H, so compare all but fwf
1777: EBE4 96                     SUB    M
1778: EBE5 E6 7F                  AND    7FH
1779: EBE7 CA 22 EC               JP     Z,RandomSeekExit     ; same?
1780: EBEA             RandomSeekClose:
1781: EBEA C5                     PUSH   BC
1782: EBEB D5                     PUSH   DE                   ; save seek mod#,ext#, .fcb
1783: EBEC CD E2 ED               CALL   CloseDirEntry        ; current extent closed
1784: EBEF D1                     POP    DE
1785: EBF0 C1                     POP    BC                   ; recall parameters and fill
1786: EBF1 2E 03                  LD     L,03                 ; cannot close error #3
1787: EBF3 3A C5 EA               LD     A,(exitParameterByte)
1788: EBF6 3C                     INC    A
1789: EBF7 CA 28 EC               JP     Z,RandomSeekErrorBadSeek
1790: EBFA 21 0C 00               LD     HL,fcbExtIndex
1791: EBFD 19                     ADD    HL,DE
1792: EBFE 71                     LD     (HL),C               ; fcb(fcbExtIndex)=ext#
1793: EBFF 21 0E 00               LD     HL,fcbS2Index
1794: EC02 19                     ADD    HL,DE
1795: EC03 70                     LD     (HL),B               ; fcb(fcbS2Index)=mod#
1796: EC04 CD 9F ED               CALL   OpenFile             ; is the file present?
1797: EC07 3A C5 EA               LD     A,(exitParameterByte)
1798: EC0A 3C                     INC    A
1799: EC0B C2 22 EC               JP     NZ,RandomSeekExit    ; open successful?
1800: EC0E         ; cannot open the file, read mode?
1801: EC0E C1                     POP    BC                   ; r/w flag to c (=0ffh if read)
1802: EC0F C5                     PUSH   BC                   ; everyone expects this item stacked
1803: EC10 2E 04                  LD     L,04                 ; seek to unwritten extent #4
1804: EC12 0C                     INC    C                    ; becomes 00 if read operation
1805: EC13 CA 28 EC               JP     Z,RandomSeekErrorBadSeek ; skip to error if read operation
1806: EC16 CD 62 EE               CALL   MakeNewFile          ; write operation, make new extent
1807: EC19 2E 05                  LD     L,05                 ; cannot create new extent #5
1808: EC1B 3A C5 EA               LD     A,(exitParameterByte)
1809: EC1E 3C                     INC    A
1810: EC1F CA 28 EC               JP     Z,RandomSeekErrorBadSeek ; no dir space
1811: EC22         ; file make operation successful
1812: EC22             RandomSeekExit:                      ; seekok:
1813: EC22 C1                     POP    BC                   ; discard r/w flag
1814: EC23 AF                     XOR    A
1815: EC24 32 C5 EA               LD     (exitParameterByte),A
1816: EC27 C9                     RET                         ; with zero set
1817: EC28
1818: EC28             RandomSeekErrorBadSeek:
1819: EC28         ; fcb no longer contains a valid fcb, mark with 11000000b in fcbS2Index field so that it
1820: EC28         ; appears as overflow with file write flag set
1821: EC28 E5                     PUSH   HL                   ; save error flag
1822: EC29 CD 8E EF               CALL   GetExtentNumberMSB   ; HL = .fcbS2Index
1823: EC2C 36 C0                  LD     (HL),11000000B
1824: EC2E E1                     POP    HL                   ; and drop through
1825: EC2F             RandomSeekError:                      ; seekerr:
1826: EC2F C1                     POP    BC                   ; discard r/w flag
1827: EC30 7D                     LD     A,L
1828: EC31 32 C5 EA               LD     (exitParameterByte),A ; exitParameterByte=#, nonzero
1829: EC34         ; SetFileWriteFlag returns non-zero accumulator for err
1830: EC34 C3 97 EF               JP     SetFileWriteFlag     ; flag set, so subsequent close ok
1831: EC37         ;ret
1832: EC37         ;
1833: EC37         ;*****************************************************************
1834: EC37             SetRandomRecord:                      ; setrandom
1835: EC37 2A C3 EA               LD     HL,(paramDE)
1836: EC3A 11 20 00               LD     DE,NEXT_RECORD       ; ready params for computesize
1837: EC3D CD 86 EC               CALL   GetRandomRecordPosition ; DE=paramDE, A=cy, BC=mmmm eeee errr rrrr
1838: EC40 21 21 00               LD     HL,RANDOM_REC_FIELD
1839: EC43 19                     ADD    HL,DE                ; HL = .FCB(RANDOM_REC_FIELD)
1840: EC44 71                     LD     (HL),C
1841: EC45 23                     INC    HL
1842: EC46 70                     LD     (HL),B
1843: EC47 23                     INC    HL
1844: EC48 77                     LD     (HL),A               ; to RANDOM_REC_FIELD
1845: EC49 C9                     RET
1846: EC4A         ;*****************************************************************
1847: EC4A         ;compute logical file size for current fcb
1848: EC4A             GetFileSize:                      ; getfilesize
1849: EC4A 0E 0C                  LD     C,fcbExtIndex
1850: EC4C CD B4 EF               CALL   SearchForDirectoryRecord
1851: EC4F         ; zero the receiving Ramdom record field
1852: EC4F 2A C3 EA               LD     HL,(paramDE)
1853: EC52 11 21 00               LD     DE,RANDOM_REC_FIELD
1854: EC55 19                     ADD    HL,DE
1855: EC56 E5                     PUSH   HL                   ; save position
1856: EC57 72                     LD     (HL),D
1857: EC58 23                     INC    HL
1858: EC59 72                     LD     (HL),D
1859: EC5A 23                     INC    HL
1860: EC5B 72                     LD     (HL),D               ; =00 00 00
1861: EC5C             GetFileSize1:                      ; getsize:
1862: EC5C CD 50 F0               CALL   AtEndOfDirectory
1863: EC5F CA 84 EC               JP     Z,GetFileSizeExit
1864: EC62         ; current fcb addressed by dptr
1865: EC62 CD 59 F0               CALL   GetCurrentDirectoryRecord
1866: EC65 11 0F 00               LD     DE,fcbRCIndex        ; ready for compute size
1867: EC68 CD 86 EC               CALL   GetRandomRecordPosition
1868: EC6B         ; A=0000 000? BC = mmmm eeee errr rrrr compare with memory, larger?
1869: EC6B E1                     POP    HL
1870: EC6C E5                     PUSH   HL                   ; recall, replace .fcb(Random record Field)
1871: EC6D 5F                     LD     E,A                  ; save cy
1872: EC6E 79                     LD     A,C
1873: EC6F 96                     SUB    M
1874: EC70 23                     INC    HL                   ; ls byte
1875: EC71 78                     LD     A,B
1876: EC72 9E                     SBC    A,(HL)
1877: EC73 23                     INC    HL                   ; middle byte
1878: EC74 7B                     LD     A,E
1879: EC75 9E                     SBC    A,(HL)               ; carry if .fcb(random record field) > directory
1880: EC76 DA 7E EC               JP     C,GetFileSize2       ; for another try
1881: EC79         ; fcb is less or equal, fill from directory
1882: EC79 73                     LD     (HL),E
1883: EC7A 2B                     DEC    HL
1884: EC7B 70                     LD     (HL),B
1885: EC7C 2B                     DEC    HL
1886: EC7D 71                     LD     (HL),C
1887: EC7E             GetFileSize2:                      ; getnextsize:
1888: EC7E CD C9 EF               CALL   GetNextDirectoryRecord
1889: EC81 C3 5C EC               JP     GetFileSize1
1890: EC84             GetFileSizeExit:                      ; setsize:
1891: EC84 E1                     POP    HL                   ; discard .fcb(random record field)
1892: EC85 C9                     RET
1893: EC86         ;-----------------------------------------------------------------
1894: EC86         ;compute random record position
1895: EC86             GetRandomRecordPosition:                      ; compute$rr
1896: EC86 EB                     EX     DE,HL
1897: EC87 19                     ADD    HL,DE
1898: EC88         ; DE=.buf(dptr) or .fcb(0), HL = .f(NEXT_RECORD/fcbRCIndex)
1899: EC88 4E                     LD     C,(HL)
1900: EC89 06 00                  LD     B,0                  ; BC = 0000 0000 ?rrr rrrr
1901: EC8B 21 0C 00               LD     HL,fcbExtIndex
1902: EC8E 19                     ADD    HL,DE
1903: EC8F 7E                     LD     A,(HL)
1904: EC90 0F                     RRCA
1905: EC91 E6 80                  AND    80H                  ; A=e000 0000
1906: EC93 81                     ADD    A,C
1907: EC94 4F                     LD     C,A
1908: EC95 3E 00                  LD     A,0
1909: EC97 88                     ADC    A,B
1910: EC98 47                     LD     B,A
1911: EC99         ; BC = 0000 000? errrr rrrr
1912: EC99 7E                     LD     A,(HL)
1913: EC9A 0F                     RRCA
1914: EC9B E6 0F                  AND    LO_NIBBLE_MASK
1915: EC9D 80                     ADD    A,B
1916: EC9E 47                     LD     B,A
1917: EC9F         ; BC = 000? eeee errrr rrrr
1918: EC9F 21 0E 00               LD     HL,fcbS2Index
1919: ECA2 19                     ADD    HL,DE
1920: ECA3 7E                     LD     A,(HL)               ; A=XXX? mmmm
1921: ECA4 87                     ADD    A,A
1922: ECA5 87                     ADD    A,A
1923: ECA6 87                     ADD    A,A
1924: ECA7 87                     ADD    A,A                  ; cy=? A=mmmm 0000
1925: ECA8 F5                     PUSH   AF
1926: ECA9 80                     ADD    A,B
1927: ECAA 47                     LD     B,A
1928: ECAB         ; cy=?, BC = mmmm eeee errr rrrr
1929: ECAB F5                     PUSH   AF                   ; possible second carry
1930: ECAC E1                     POP    HL                   ; cy = lsb of L
1931: ECAD 7D                     LD     A,L                  ; cy = lsb of A
1932: ECAE E1                     POP    HL                   ; cy = lsb of L
1933: ECAF B5                     OR     L                    ; cy/cy = lsb of A
1934: ECB0 E6 01                  AND    1                    ; A = 0000 000? possible carry-out
1935: ECB2 C9                     RET
1936: ECB3         ;-----------------------------------------------------------------
1937: ECB3
1938: ECB3
1939: ECB3
1940: ECB3         ;*****************************************************************
1941: ECB3         ;********************** Disk  I/O ********************************
1942: ECB3         ;*****************************************************************
1943: ECB3         ;-----------------------------------------------------------------
1944: ECB3         ;;set file Attributes
1945: ECB3             vSetFileAttributes:                      ; func30 (30 - 1E) Set File Attributes
1946: ECB3 CD 09 EF               CALL   ReselectDisk
1947: ECB6 CD 55 F2               CALL   SetAttributes
1948: ECB9 C3 2C F1               JP     DirLocationToReturnLoc ; exitParameterByte=dirloc
1949: ECBC         ;-----------------------------------------------------------------
1950: ECBC         ;--------------------------- Select  Drive ---------------------------------;
1951: ECBC         ; Establish the disk found in (paramE) as the current disk drive            ;
1952: ECBC             SelectCurrent:                      ;
1953: ECBC 3A C2 EA               LD     A,(paramE)           ; Get Disk (00H = A,01H = B ..)     ;
1954: ECBF 21 5F F5               LD     HL,currentDisk       ; Get the current disk              ;
1955: ECC2 BE                     CP     M                    ; Are the the same ?                ;
1956: ECC3 C8                     RET    Z                    ; Exit if yes, nothing to do        ;
1957: ECC4 77                     LD     (HL),A               ;  else update curretDisk and       ;
1958: ECC5 C3 C8 EC               JP     Select               ;  select it                        ;
1959: ECC8         ;--------------------------- Select  Drive ---------------------------------;
1960: ECC8         ;--------------------------- Select Login Drive ----------------------------;
1961: ECC8         ; select Login Drive                                                       ;
1962: ECC8             Select:                         ;
1963: ECC8 CD E9 EC               CALL   SelectDisk           ; Select the Disk                   ;
1964: ECCB CC CE F4               CALL   Z,errSelect          ;
1965: ECCE 21 5F F5               LD     HL,currentDisk       ;
1966: ECD1 46                     LD     B,(HL)               ; Get Current Disk                  ;
1967: ECD2 2A 63 F5               LD     HL,(loggedDisks)     ; Load Logged Disk MAP              ;
1968: ECD5 CD A0 F4               CALL   IsBitSet             ;
1969: ECD8 C0                     RET    NZ                   ; Exit if already logged in         ;
1970: ECD9         ;                                                                           ;
1971: ECD9 21 5F F5               LD     HL,currentDisk       ;
1972: ECDC 46                     LD     B,(HL)               ; Get Current Disk                  ;
1973: ECDD 2A 63 F5               LD     HL,(loggedDisks)     ; else log in a different disk	    ;
1974: ECE0 CD B0 F4               CALL   SetVectorBit         ;
1975: ECE3 22 63 F5               LD     (loggedDisks),HL     ; Update the Vector                 ;
1976: ECE6         ;
1977: ECE6 C3 2F ED               JP     InitDisk             ;
1978: ECE9         ;--------------------------- Select Login Drive ----------------------------;
1979: ECE9         ;--------------------------- Select Disk ------------------------------------;
1980: ECE9         ;*****************************************************************          ;
1981: ECE9         ; select the disk drive given by currentDisk, and fill the base addresses   ;
1982: ECE9         ; caTrack - caAllocVector, then fill the values of the disk parameter block ;
1983: ECE9             SelectDisk:                      ;
1984: ECE9 3A 5F F5               LD     A,(currentDisk)      ; Get current disk (0=A,1=B...)      ;
1985: ECEC 4F                     LD     C,A                  ; Prepare for BIOS Call              ;
1986: ECED CD 1B F6               CALL   bcSeldsk             ; Select the disk                    ;
1987: ECF0 7C                     LD     A,H                  ; Return Pointer to                  ;
1988: ECF1 B5                     OR     L                    ;  Disk Parameter Header             ;
1989: ECF2 C8                     RET    Z                    ; exit if error, with HL = 0000      ;
1990: ECF3         ;
1991: ECF3 5E                     LD     E,(HL)               ;
1992: ECF4 23                     INC    HL                   ;
1993: ECF5 56                     LD     D,(HL)               ; Skew Table in DE                   ;
1994: ECF6 23                     INC    HL                   ; HL = DPH + 2, Rel Pos for File     ;
1995: ECF7 ED 53 84 F5               LD     (caSkewTable),DE     ; Move to Current Skew Table         ;
1996: ECFB         ;
1997: ECFB 22 67 F5               LD     (caDirMaxValue),HL   ; Move to Current Dir max            ;
1998: ECFE 23                     INC    HL                   ;
1999: ECFF 23                     INC    HL                   ; HL = Last Track #                  ;
2000: ED00 22 69 F5               LD     (caTrack),HL         ; Move to Current Track #            ;
2001: ED03 23                     INC    HL                   ;
2002: ED04 23                     INC    HL                   ; HL = Last Sector #                 ;
2003: ED05 22 6B F5               LD     (caSector),HL        ; Move to Current Sector #           ;
2004: ED08 23                     INC    HL                   ;
2005: ED09 23                     INC    HL                   ;
2006: ED0A 11 6D F5               LD     DE,caDirectoryDMA    ;
2007: ED0D 01 08 00               LD     BC,caListSize        ;
2008: ED10 ED B0                  LDIR                        ;
2009: ED12         ;
2010: ED12         ; finish filling in address list                                             ;
2011: ED12 2A 6F F5               LD     HL,(caDiskParamBlock) ; Point Disk Parameter Block         ;
2012: ED15 11 75 F5               LD     DE,dpbStart          ; Point at BIOS DPB                  ;
2013: ED18 01 0F 00               LD     BC,dpbSize           ;
2014: ED1B ED B0                  LDIR                        ; Move DPB to current                ;
2015: ED1D         ;
2016: ED1D         ; Determine if Byte or Word Allocation Table	                             ;
2017: ED1D 2A 7A F5               LD     HL,(dpbDSM)          ; Get max entry number               ;
2018: ED20 7C                     LD     A,H                  ; If  its 00 then < 255              ;
2019: ED21 21 8E F5               LD     HL,byteAllocationFlag ; Point at the  flag				 ;
2020: ED24 36 FF                  LD     (HL),TRUE            ; Assume its less than 255           ;
2021: ED26 B7                     OR     A                    ;  is the assumption confirmed ?     ;
2022: ED27 28 02                  JR     Z,SelectDisk1        ;  skip if yes                       ;
2023: ED29 36 00                  LD     (HL),FALSE           ; Fix assumption,set flag to false   ;
2024: ED2B         ;
2025: ED2B         ; Set Sign, reset Carry and Zero to indicate success                         ;
2026: ED2B             SelectDisk1:                      ;
2027: ED2B 3E FF                  LD     A,TRUE               ;
2028: ED2D B7                     OR     A                    ;
2029: ED2E C9                     RET                         ;
2030: ED2F         ;--------------------------- Select Disk ------------------------------------;
2031: ED2F         ;--------------------------- Initialize Disk --------------------------------;
2032: ED2F             InitDisk:                       ;
2033: ED2F 2A 7A F5               LD     HL,(dpbDSM)          ; Maximum allocation value           ;
2034: ED32 CD 6F F1               CALL   DivideHLby8          ; Length of Map                      ;
2035: ED35 E5                     PUSH   HL                   ; Save Length                        ;
2036: ED36 E5                     PUSH   HL                   ; Save for end of MAP                ;
2037: ED37 C1                     POP    BC                   ; BC = dpbDSM/8                      ;
2038: ED38         ; Clear the Allocation Vector	                                             ;
2039: ED38 2A 73 F5               LD     HL,(caAllocVector)   ; Allocation vector Start            ;
2040: ED3B 36 00                  LD     (HL),0               ; Clear location                     ;
2041: ED3D ED 5B 73 F5               LD     DE,(caAllocVector)   ;
2042: ED41 13                     INC    DE                   ; Allocation vector Start + 1        ;
2043: ED42 ED B0                  LDIR                        ; Cascade 00 thru Map                ;
2044: ED44         ; Force bits at End of Map                                                   ;
2045: ED44 EB                     EX     DE,HL                ; Put last Map byte into DE          ;
2046: ED45 E1                     POP    HL                   ;
2047: ED46 23                     INC    HL                   ;
2048: ED47 CD 79 F1               CALL   MultiplyHLby8        ; Blocks if all bits used            ;
2049: ED4A ED 4B 7A F5               LD     BC,(dpbDSM)          ; Actual block max                   ;
2050: ED4E 03                     INC    BC                   ; Now has size of the Map            ;
2051: ED4F AF                     XOR    A                    ; Clear CY                           ;
2052: ED50 ED 42                  SBC    HL,BC                ; Extra unused bits                  ;
2053: ED52 BD                     CP     L                    ;  are there any                     ;
2054: ED53 28 07                  JR     Z,Mark4Directory     ;
2055: ED55 45                     LD     B,L                  ; Number of bits to set              ;
2056: ED56 EB                     EX     DE,HL                ; Put last Map byte into HL          ;
2057: ED57             SetBitLoop:                      ;
2058: ED57 37                     SCF                         ;
2059: ED58 CB 16                  RL     (HL)                 ; Set LSB                            ;
2060: ED5A 10 FB                  DJNZ   SetBitLoop           ; Loop thru the bits                 ;
2061: ED5C         ;
2062: ED5C             Mark4Directory:                      ;
2063: ED5C         ; Mark the reserved space for the directory                                  ;
2064: ED5C 2A 7E F5               LD     HL,(dpbDABM)         ; Directory block reserved bits      ;
2065: ED5F EB                     EX     DE,HL                ;
2066: ED60 2A 73 F5               LD     HL,(caAllocVector)   ; HL Start of Allocation Vector      ;
2067: ED63 73                     LD     (HL),E               ;
2068: ED64 23                     INC    HL                   ;
2069: ED65 72                     LD     (HL),D               ; Put reserved blocks in Vector      ;
2070: ED66         ; end of Map                                                                 ;
2071: ED66         ; Home disk, and set current track and sector to 00                          ;
2072: ED66 CD B6 EE               CALL   Home                 ;
2073: ED69 2A 67 F5               LD     HL,(caDirMaxValue)   ;
2074: ED6C 36 03                  LD     (HL),3               ;
2075: ED6E 23                     INC    HL                   ;
2076: ED6F 36 00                  LD     (HL),0               ; Current Max Dir Value = 0003       ;
2077: ED71 CD 49 F0               CALL   SetEndDirectory      ; dirEntryIndex = EOD (-1)           ;
2078: ED74         ;
2079: ED74             InitDisk1:                      ;
2080: ED74         ; Process the directory                                                      ;
2081: ED74 0E FF                  LD     C,TRUE               ; Set flag for setting CheckSum	     ;
2082: ED76 CD 9A F1               CALL   ReadDirectory        ; Get the directory Record           ;
2083: ED79 CD 50 F0               CALL   AtEndOfDirectory     ; Are we Done ?                      ;
2084: ED7C C8                     RET    Z                    ;  Exit if Yes                       ;
2085: ED7D         ; Not end of directory, valid entry?                                         ;
2086: ED7D CD 59 F0               CALL   GetCurrentDirectoryRecord ; Calculate location of the element  ;
2087: ED80 3E E5                  LD     A,emptyDir           ;
2088: ED82 BE                     CP     M                    ; Is it an Empty Dir Entry           ;
2089: ED83 28 EF                  JR     Z,InitDisk1          ;   Loop back if yes                 ;
2090: ED85         ; Not emptyDir, user code the same?                                          ;
2091: ED85 3A 5E F5               LD     A,(currentUserNumber) ;
2092: ED88 BE                     CP     M                    ;
2093: ED89 20 0A                  JR     NZ,InitDisk2         ; Skip if this entry not the users   ;
2094: ED8B         ; Same user, check for '$' submit                                            ;
2095: ED8B 23                     INC    HL                   ;
2096: ED8C 7E                     LD     A,(HL)               ;
2097: ED8D D6 24                  SUB    DOLLAR               ; Is first Char a $                  ;
2098: ED8F 20 04                  JR     NZ,InitDisk2         ;
2099: ED91         ; dollar file found, mark in exitParameterByte                               ;
2100: ED91 3D                     DEC    A                    ; Set A to FFH                       ;
2101: ED92 32 C5 EA               LD     (exitParameterByte),A ; Return it the exit parameter       ;
2102: ED95             InitDisk2:                      ;
2103: ED95         ; now scan the disk map for allocated blocks                                 ;
2104: ED95 0E FF                  LD     C,TRUE               ; set to allocated                   ;
2105: ED97 CD 7D F0               CALL   ScanDiskMap          ;
2106: ED9A CD 67 F0               CALL   SetDirectoryEntry    ; Mark directory entry               ;
2107: ED9D 18 D5                  JR     InitDisk1            ; Loop for another entry             ;
2108: ED9F         ;--------------------------- Initialize Disk --------------------------------;
2109: ED9F         ;----------------------------- Open File -----------------------------------;
2110: ED9F         ;search for the directory entry matching FCB at paramDE						;
2111: ED9F             OpenFile:                       ;
2112: ED9F 0E 0F                  LD     C,nameLength         ;
2113: EDA1 CD B4 EF               CALL   SearchForDirectoryRecord ;
2114: EDA4 CD 50 F0               CALL   AtEndOfDirectory     ; Have we gone thru all the dir    	;
2115: EDA7 C8                     RET    Z                    ; Exit exitParameterByte=255 if yes	;
2116: EDA8         ;
2117: EDA8             CopyDirRecordToFCB:                      ;
2118: EDA8 CD 5A EF               CALL   GetExtentAddress     ; HL points to FCB's EXT           	;
2119: EDAB 7E                     LD     A,(HL)               ; Get the EXT                      	;
2120: EDAC F5                     PUSH   AF                   ; Save the FCB's EXT value         	;
2121: EDAD E5                     PUSH   HL                   ;  also save FCB's pointer         	;
2122: EDAE CD 59 F0               CALL   GetCurrentDirectoryRecord ; Get pointer to Dir record in HL  	;
2123: EDB1 E5                     PUSH   HL                   ; Save Directory Record address    	;
2124: EDB2         ;
2125: EDB2 ED 5B C3 EA               LD     DE,(paramDE)         ;
2126: EDB6 01 20 00               LD     BC,fcbLength         ;
2127: EDB9 ED B0                  LDIR                        ; Move dir record to FCB           	;
2128: EDBB         ;
2129: EDBB         ; note that entire fcb is copied, including indicators                    	;
2130: EDBB CD 97 EF               CALL   SetFileWriteFlag     ; Set clean file flag				;
2131: EDBE D1                     POP    DE                   ; Get Directory Record address     	;
2132: EDBF 21 0C 00               LD     HL,fcbExtIndex       ; Extent Index                     	;
2133: EDC2 19                     ADD    HL,DE                ; Directory's EXT address          	;
2134: EDC3 4E                     LD     C,(HL)               ; Dir's EXT is in B		           	;
2135: EDC4 21 0F 00               LD     HL,fcbRCIndex        ; Get Record Count Index           	;
2136: EDC7 19                     ADD    HL,DE                ; Directory's RC address           	;
2137: EDC8 46                     LD     B,(HL)               ; B holds Dir's  record count      	;
2138: EDC9 E1                     POP    HL                   ; Get FCB's Extent Address         	;
2139: EDCA F1                     POP    AF                   ; Get FCB's Extent Value           	;
2140: EDCB 77                     LD     (HL),A               ; Restore Extent Value             	;
2141: EDCC         ; if user ext < dir ext then user := 128 records                           	;
2142: EDCC         ; if user ext = dir ext then user := dir records                           	;
2143: EDCC         ; if user ext > dir ext then user := 0 records                             	;
2144: EDCC 79                     LD     A,C                  ; Get the Dir's EXT                	;
2145: EDCD BE                     CP     M                    ; Does it match the FCB'd          	;
2146: EDCE 78                     LD     A,B                  ; Get the Dir's  record count      	;
2147: EDCF CA D9 ED               JP     Z,OpenSetRecordCount ; If same EXT value, use it.       	;
2148: EDD2 3E 00                  LD     A,0                  ;   else prepare for RC = 0        	;
2149: EDD4 DA D9 ED               JP     C,OpenSetRecordCount ; If FCB EXT > Dir EXTr            	;
2150: EDD7 3E 80                  LD     A,RecordsPerExtent   ;   else max record count out      	;
2151: EDD9             OpenSetRecordCount:                      ;
2152: EDD9 2A C3 EA               LD     HL,(paramDE)         ; Get FCB's address                	;
2153: EDDC 11 0F 00               LD     DE,fcbRCIndex        ; Get record count index           	;
2154: EDDF 19                     ADD    HL,DE                ; FCB's record count               	;
2155: EDE0 77                     LD     (HL),A               ; Set the value                    	;
2156: EDE1 C9                     RET                         ;
2157: EDE2         ;----------------------------- Open File -----------------------------------;
2158: EDE2         ;---------------------------- Close Directory Entry ------------------------;
2159: EDE2             CloseDirEntry:                      ;
2160: EDE2 AF                     XOR    A                    ;
2161: EDE3 32 C5 EA               LD     (exitParameterByte),A ; Clear exit parameter              ;
2162: EDE6 CD FE EE               CALL   IsDiskWriteProtected ; Return Z set if writable          ;
2163: EDE9 C0                     RET    NZ                   ; Skip close if r/o disk            ;
2164: EDEA         ; check file write flag - 0 indicates written                               ;
2165: EDEA CD 8E EF               CALL   GetWriteFileFlagValue ; Get file's WriteFileFlag          ;
2166: EDED CB 7F                  BIT    7,A                  ;  Has it changed ?					;
2167: EDEF         ;	AND		writeFlagMask				; Apply the RO Flag for S2          ;
2168: EDEF C0                     RET    NZ                   ; Skip close if clean file          ;
2169: EDF0         ;
2170: EDF0 0E 0F                  LD     C,nameLength         ;
2171: EDF2 CD B4 EF               CALL   SearchForDirectoryRecord ; Find the file's directory record  ;
2172: EDF5 CD 50 F0               CALL   AtEndOfDirectory     ; If EOD then there is no more      ;
2173: EDF8 C8                     RET    Z                    ;  exit if at EOD                   ;
2174: EDF9         ;
2175: EDF9         ; merge the FCB's Disk Map with the Directory record Disk Map               ;
2176: EDF9 CD 59 F0               CALL   GetCurrentDirectoryRecord ; HL points to directory record     ;
2177: EDFC 01 10 00               LD     BC,fcbDiskMapIndex   ; Disk Alloc block map index        ;
2178: EDFF 09                     ADD    HL,BC                ;
2179: EE00 EB                     EX     DE,HL                ; DE = Directory Entry Map pointer  ;
2180: EE01 2A C3 EA               LD     HL,(paramDE)         ;
2181: EE04 09                     ADD    HL,BC                ; HL = FCB Map Pointer              ;
2182: EE05 0E 10                  LD     C,(fcbLength-fcbDiskMapIndex) ; Size Allocation Map              ;
2183: EE07         ;
2184: EE07             MergeAllocationMaps:                      ;
2185: EE07 3A 8E F5               LD     A,(byteAllocationFlag) ;
2186: EE0A B7                     OR     A                    ;
2187: EE0B CA 22 EE               JP     Z,MergeWordMaps      ; Process Word size Block Numbers   ;
2188: EE0E         ; process byte size Map	                                                    ;
2189: EE0E 7E                     LD     A,(HL)               ; FCB Block number                  ;
2190: EE0F B7                     OR     A                    ; Is it 0 ?                         ;
2191: EE10 1A                     LD     A,(DE)               ;  anticipate yes                   ;
2192: EE11 C2 15 EE               JP     NZ,MergeFCBisNot0    ;  Skip if no	                    ;
2193: EE14 77                     LD     (HL),A               ; Move Dir Entry Value to FCB		;
2194: EE15             MergeFCBisNot0:                      ;
2195: EE15 B7                     OR     A                    ; Is Dir Entry Value = 0 ?          ;
2196: EE16 C2 1B EE               JP     NZ,MergeDirEntryNot0 ; Skip if no                        ;
2197: EE19 7E                     LD     A,(HL)               ;  else move FCB map value          ;
2198: EE1A 12                     LD     (DE),A               ;  to Dir Entry Value 	            ;
2199: EE1B             MergeDirEntryNot0:                      ;
2200: EE1B BE                     CP     M                    ; Do FCB and Dir match values       ;
2201: EE1C C2 5D EE               JP     NZ,CloseDirEntryError ;  If not then report error         ;
2202: EE1F C3 37 EE               JP     MergeMapLoop         ; Go see if there is more           ;
2203: EE22         ;
2204: EE22             MergeWordMaps:                      ;
2205: EE22 CD 83 F1               CALL   Merge                ; If FCB map value = 0 move Dir's   ;
2206: EE25 EB                     EX     DE,HL                ;
2207: EE26 CD 83 F1               CALL   Merge                ; IF Dir Map value = 0 move FCB's   ;
2208: EE29 EB                     EX     DE,HL                ; HL = FCB Map pointer, DE = Dir's  ;
2209: EE2A 1A                     LD     A,(DE)               ; Does the FCB Map value            ;
2210: EE2B BE                     CP     M                    ;  = Dir record Map pointer ?       ;
2211: EE2C C2 5D EE               JP     NZ,CloseDirEntryError ;  If not then report error         ;
2212: EE2F 13                     INC    DE                   ;
2213: EE30 23                     INC    HL                   ; move on to the MSB                ;
2214: EE31 1A                     LD     A,(DE)               ;
2215: EE32 BE                     CP     M                    ; do the check for equality         ;
2216: EE33 C2 5D EE               JP     NZ,CloseDirEntryError ;  If not then report error         ;
2217: EE36 0D                     DEC    C                    ; Extra count for 2 bytes           ;
2218: EE37             MergeMapLoop:                      ;
2219: EE37 13                     INC    DE                   ; Advance to the next positions     ;
2220: EE38 23                     INC    HL                   ; in The Maps                       ;
2221: EE39 0D                     DEC    C                    ; Are we done ?                     ;
2222: EE3A C2 07 EE               JP     NZ,MergeAllocationMaps ;  No, do it again                  ;
2223: EE3D         ;
2224: EE3D         ; Check the EXT                                                             ;
2225: EE3D 01 EC FF               LD     BC,-(fcbLength-fcbExtIndex) ;Adjust to get Ext pointer          ;
2226: EE40 09                     ADD    HL,BC                ;
2227: EE41 EB                     EX     DE,HL                ; HL = Directory Entry EXT pointer  ;
2228: EE42 09                     ADD    HL,BC                ; DE = FCB EXT Pointer              ;
2229: EE43 1A                     LD     A,(DE)               ; FCB's extent number               ;
2230: EE44 BE                     CP     M                    ; Is it < Dir Record EXT ?          ;
2231: EE45 DA 51 EE               JP     C,CloseDirEntryEnd   ;  we are done if yes               ;
2232: EE48 77                     LD     (HL),A               ; Else replace the Dir Record EXT   ;
2233: EE49         ; Update directory record count field                                       ;
2234: EE49 01 03 00               LD     BC,fcbRCIndex-fcbExtIndex ; Need to adjust to the record Count;
2235: EE4C 09                     ADD    HL,BC                ;
2236: EE4D EB                     EX     DE,HL                ; DE = = Directory Entry EXT pointer;
2237: EE4E 09                     ADD    HL,BC                ; HL = FCB EXT Pointer              ;
2238: EE4F 7E                     LD     A,(HL)               ; Copy the FCB RC to                ;
2239: EE50 12                     LD     (DE),A               ;  the Directory Record RC          ;
2240: EE51         ;
2241: EE51             CloseDirEntryEnd:                      ;
2242: EE51 3E FF                  LD     A,TRUE               ;
2243: EE53 32 86 F5               LD     (fcbCopiedFlag),A    ;Set copied flag as true            ;
2244: EE56         ;/	CALL	SeekCopy					; ok to "Write Dir" here            ;
2245: EE56 CD C8 F1               CALL   SeekDir              ; Set up parameters for a Disk I/O  ;
2246: EE59 C3 31 F0               JP     WriteDir             ; Write the directory element       ;
2247: EE5C C9                     RET                         ;
2248: EE5D         ;
2249: EE5D             CloseDirEntryError:                      ;
2250: EE5D 21 C5 EA               LD     HL,exitParameterByte ;
2251: EE60 35                     DEC    M                    ; Set Exit value to 0FFH            ;
2252: EE61 C9                     RET                         ;
2253: EE62         ;---------------------------- Close Directory Entry ------------------------;
2254: EE62         ;----------------------------------- Make new File -------------------------;
2255: EE62         ;create a new file by creating a directory entry then opening the file      ;
2256: EE62             MakeNewFile:                      ;
2257: EE62 CD 33 F1               CALL   CheckWrite           ; Terminate with error if Disk R/O  ;
2258: EE65 2A C3 EA               LD     HL,(paramDE)         ; Get the FCB                       ;
2259: EE68 E5                     PUSH   HL                   ; FCB                               ;
2260: EE69 21 60 F5               LD     HL,emptyFCB          ;
2261: EE6C 22 C3 EA               LD     (paramDE),HL         ; Find the first empty dir record   ;
2262: EE6F 0E 01                  LD     C,1                  ;
2263: EE71 CD B4 EF               CALL   SearchForDirectoryRecord ; 0F5H in first position            ;
2264: EE74 CD 50 F0               CALL   AtEndOfDirectory     ; Check if at end of directory      ;
2265: EE77 E1                     POP    HL                   ; Recall the FCB pointer            ;
2266: EE78 22 C3 EA               LD     (paramDE),HL         ;  in case we return here           ;
2267: EE7B C8                     RET    Z                    ; Exit with No Dir space error      ;
2268: EE7C         ; fill Allocation Map with Zeros	                                        ;
2269: EE7C 11 0F 00               LD     DE,nameLength        ;
2270: EE7F 19                     ADD    HL,DE                ; Start of fill                     ;
2271: EE80 36 00                  LD     (HL),00              ; Prime the values                  ;
2272: EE82 E5                     PUSH   HL                   ;
2273: EE83 D1                     POP    DE                   ; Copy to DE                        ;
2274: EE84 13                     INC    DE                   ; adjust the to pointer             ;
2275: EE85 01 10 00               LD     BC,fcbLength-nameLength-1 ; number of bytes to fill           ;
2276: EE88 ED B0                  LDIR                        ;
2277: EE8A         ;
2278: EE8A 2A C3 EA               LD     HL,(paramDE)         ; get FCB                           ;
2279: EE8D 11 0D 00               LD     DE,fcbS1Index        ; Get the S1 index                  ;
2280: EE90 19                     ADD    HL,DE                ; Point to S1                       ;
2281: EE91 36 00                  LD     (HL),0               ; Set to 0                          ;
2282: EE93 CD 67 F0               CALL   SetDirectoryEntry    ; Update directory entry            ;
2283: EE96 CD 47 F1               CALL   CopyFCB              ; Update dir entry to Disk          ;
2284: EE99         ; and set the file write flag to "1"                                        ;
2285: EE99 C3 97 EF               JP     SetFileWriteFlag     ; Set the clean entry flag          ;
2286: EE9C         ;----------------------------------- Make new File -------------------------;
2287: EE9C
2288: EE9C         ; DIO
2289: EE9C         ;  +++++ ;
2290: EE9C
2291: EE9C         ;---------------
2292: EE9C         ; set a "1" value in currentDisk position of BC
2293: EE9C         ; return in HL
2294: EE9C             SetCurrentDiskBit:
2295: EE9C C5                     PUSH   BC                   ; save input parameter
2296: EE9D 3A 5F F5               LD     A,(currentDisk)
2297: EEA0 4F                     LD     C,A                  ; ready parameter for shift
2298: EEA1 21 01 00               LD     HL,1                 ; number to shift
2299: EEA4 CD 99 F4               CALL   ShiftLeftHLbyC       ; HL = mask to integrate
2300: EEA7 C1                     POP    BC                   ; original mask
2301: EEA8 79                     LD     A,C
2302: EEA9 B5                     OR     L
2303: EEAA 6F                     LD     L,A
2304: EEAB 78                     LD     A,B
2305: EEAC B4                     OR     H
2306: EEAD 67                     LD     H,A                  ; HL = mask or rol(1,currentDisk)
2307: EEAE C9                     RET
2308: EEAF         ;--------------
2309: EEAF
2310: EEAF         ;--------------------------- Scan      Map ----------------------------------;
2311: EEAF         ;-----------------------------------
2312: EEAF         ; byte value from ALLOC is in register A, with shift count
2313: EEAF         ; in register C (to place bit back into position), and
2314: EEAF         ; target ALLOC position in registers HL, rotate and replace
2315: EEAF             RotateAndReplace:
2316: EEAF 0F                     RRCA
2317: EEB0 15                     DEC    D
2318: EEB1 C2 AF EE               JP     NZ,RotateAndReplace  ; back into position
2319: EEB4 77                     LD     (HL),A               ; back to ALLOC
2320: EEB5 C9                     RET
2321: EEB6         ;-----------------------------------
2322: EEB6
2323: EEB6         ;*****************************************************************
2324: EEB6
2325: EEB6         ;*****************************************************************
2326: EEB6         ;=========================== Disk Utilities ================================;
2327: EEB6         ;--------------------------- Home The Current Disk ------------------------;
2328: EEB6         ;move to home position, then offset to start of dir                        ;
2329: EEB6             Home:                           ;
2330: EEB6 CD 18 F6               CALL   bcHome               ; Sets Track to 0, and checks      ;
2331: EEB9         ; if Buffer needs to be written    ;
2332: EEB9 21 82 F5               LD     HL,dpbOFF            ; Number of tracks before directory;
2333: EEBC 4E                     LD     C,(HL)               ;
2334: EEBD 23                     INC    HL                   ;
2335: EEBE 46                     LD     B,(HL)               ;
2336: EEBF CD 1E F6               CALL   bcSettrk             ; Point at 1st directory position  ;
2337: EEC2         ;
2338: EEC2         ; Set Current Track and Sector to 00                                       ;
2339: EEC2 AF                     XOR    A                    ; set ACC to 00                    ;
2340: EEC3 2A 69 F5               LD     HL,(caTrack)         ;
2341: EEC6 77                     LD     (HL),A               ;
2342: EEC7 23                     INC    HL                   ;
2343: EEC8 77                     LD     (HL),A               ;
2344: EEC9 2A 6B F5               LD     HL,(caSector)        ;
2345: EECC 77                     LD     (HL),A               ;
2346: EECD 23                     INC    HL                   ;
2347: EECE 77                     LD     (HL),A               ;
2348: EECF C9                     RET                         ;
2349: EED0         ;
2350: EED0         ;--------------------------- Home The Current Disk ------------------------;
2351: EED0         ;--------------------------- Set DMAs -------------------------------------;
2352: EED0             SetDataDMA:                      ;
2353: EED0 21 65 F5               LD     HL,initDAMAddress    ;
2354: EED3 18 03                  JR     SetDMA               ; Skip to complete the call        ;
2355: EED5         ;	LD		BC,initDAMAddress                                              ;
2356: EED5         ;	JP		bcSetdma					; Call BIOS to set                 ;
2357: EED5         ;
2358: EED5             SetDirDMA:                      ;
2359: EED5 21 6D F5               LD     HL,caDirectoryDMA    ; Load current directory Buffer    ;
2360: EED8         ;	LD		BC,caDirectoryDMA			; Load current directory Buffer    ;
2361: EED8         ;	JP		bcSetdma					; Call BIOS to set                 ;
2362: EED8         ;
2363: EED8             SetDMA:                         ;
2364: EED8 4E                     LD     C,(HL)               ;
2365: EED9 23                     INC    HL                   ;
2366: EEDA 46                     LD     B,(HL)               ; parameter ready              ;
2367: EEDB C3 24 F6               JP     bcSetdma             ; call bios to set             ;
2368: EEDE         ;--------------------------- Set DMAs -------------------------------------;
2369: EEDE         ;--------------------------- Read Buffer ----------------------------------;
2370: EEDE         ;reads into current DMA, using current Disk,Track and Sector               ;
2371: EEDE             ReadBuffer:                      ;
2372: EEDE CD 27 F6               CALL   bcRead               ; Do the read at the BIOS level    ;
2373: EEE1 B7                     OR     A                    ; Check status                     ;
2374: EEE2 C2 F3 F4               JP     NZ,erPermanentNoWait ; Report if Status not OK          ;
2375: EEE5 C9                     RET                         ;
2376: EEE6         ;--------------------------- Read Buffer ----------------------------------;
2377: EEE6         ;--------------------------- Set Current Disk Read Only --------------------;
2378: EEE6         ;set current disk to read only                                              ;
2379: EEE6             SetDiskReadOnly:                      ;
2380: EEE6 2A 61 F5               LD     HL,(readOnlyVector)  ; Get the Vector                    ;
2381: EEE9         ;
2382: EEE9 3A 5F F5               LD     A,(currentDisk)      ; Get the current disk              ;
2383: EEEC 47                     LD     B,A                  ; Move into B                       ;
2384: EEED CD B0 F4               CALL   SetVectorBit         ; Set the bit	                    ;
2385: EEF0 22 61 F5               LD     (readOnlyVector),HL  ; Update the Vector                 ;
2386: EEF3         ;
2387: EEF3 2A 7C F5               LD     HL,(dpbDRM)          ; Directory Max Value               ;
2388: EEF6 EB                     EX     DE,HL                ;
2389: EEF7 2A 67 F5               LD     HL,(caDirMaxValue)   ; HL = .Directory max value         ;
2390: EEFA 73                     LD     (HL),E               ;
2391: EEFB 23                     INC    HL                   ;
2392: EEFC 72                     LD     (HL),D               ;
2393: EEFD C9                     RET                         ;
2394: EEFE         ;--------------------------- Set disk Read Only ----------------------------;
2395: EEFE         ;--------------------------- Is Disk Write Protected -----------------------;
2396: EEFE         ;Returns:	Z flag	= Set if not Write Protected	(Z)                     ;
2397: EEFE         ;					= reset if Write Protected		(NZ)					;
2398: EEFE             IsDiskWriteProtected:                      ;
2399: EEFE 2A 61 F5               LD     HL,(readOnlyVector)  ; Get Read Only Vector              ;
2400: EF01 3A 5F F5               LD     A,(currentDisk)      ; Get current disk                  ;
2401: EF04 47                     LD     B,A                  ;
2402: EF05 CD A0 F4               CALL   IsBitSet             ; Check the bit                     ;
2403: EF08 C9                     RET                         ; NZ if Disk is RO                  ;
2404: EF09         ;--------------------------- Is Disk Write Protected -----------------------;
2405: EF09
2406: EF09         ;------------------------- Reselect Disk if Necessary ----------------------;
2407: EF09         ;check current fcb to see if reselection necessary                         ;
2408: EF09             ReselectDisk:                      ;
2409: EF09 3E FF                  LD     A,TRUE               ;
2410: EF0B 32 8F F5               LD     (fResel),A           ; Mark as possible reselect         ;
2411: EF0E 2A C3 EA               LD     HL,(paramDE)         ; Point at current FCB              ;
2412: EF11 7E                     LD     A,(HL)               ; Load disk drive (0 = current)     ;
2413: EF12 E6 1F                  AND    01FH                 ; Mask out user Number ??           ;
2414: EF14 3D                     DEC    A                    ; Normalized to 0..29, or 255       ;
2415: EF15 32 C2 EA               LD     (paramE),A           ; Save drive code                   ;
2416: EF18 FE 1E                  CP     30                   ;
2417: EF1A D2 2D EF               JP     NC,NoSelect          ; Skip drive >= 30                  ;
2418: EF1D         ;
2419: EF1D 3A 5F F5               LD     A,(currentDisk)      ; Determine the current drive       ;
2420: EF20 32 90 F5               LD     (entryDisk),A        ; Save it                           ;
2421: EF23 7E                     LD     A,(HL)               ;
2422: EF24 32 91 F5               LD     (fcbDisk),A          ; Get calling disk                  ;
2423: EF27 E6 E0                  AND    11100000B            ;
2424: EF29 77                     LD     (HL),A               ; Preserve User Number              ;
2425: EF2A CD BC EC               CALL   SelectCurrent        ; Select the new disk               ;
2426: EF2D         ;
2427: EF2D             NoSelect:                       ;
2428: EF2D 3A 5E F5               LD     A,(currentUserNumber) ; Get user code 0...31              ;
2429: EF30 2A C3 EA               LD     HL,(paramDE)         ; Point at disk number              ;
2430: EF33 B6                     OR     M                    ; Combine                           ;
2431: EF34 77                     LD     (HL),A               ; FCB[0] = user number & disk       ;
2432: EF35 C9                     RET                         ;
2433: EF36         ;------------------------- Reselect Disk if Necessary ----------------------;
2434: EF36
2435: EF36
2436: EF36         ;=========================== Disk Utilities ================================;
2437: EF36
2438: EF36         ;=========================== File Utilities ================================;
2439: EF36         ;--------------------------- Set Record Variables -------------------------;
2440: EF36         ;set variables from currently FCB - Current Record, RC, EXM                ;
2441: EF36             SetRecordVars:                      ;
2442: EF36 CD 4D EF               CALL   GetFcbRecordDetails  ; DE = .RecordCount                ;
2443: EF39         ;  and HL => .CurrentRecord        ;
2444: EF39 7E                     LD     A,(HL)               ;
2445: EF3A 32 94 F5               LD     (currentFileRecord),A ; Save current record              ;
2446: EF3D EB                     EX     DE,HL                ;
2447: EF3E 7E                     LD     A,(HL)               ;
2448: EF3F 32 92 F5               LD     (fcbRecordCount),A   ; Save the FCBs RC                 ;
2449: EF42 CD 5A EF               CALL   GetExtentAddress     ; HL=.FCB(fcbExtIndex)             ;
2450: EF45 3A 79 F5               LD     A,(dpbEXM)           ; Extent mask                      ;
2451: EF48 A6                     AND    M                    ; Remove unwanted bits             ;
2452: EF49 32 93 F5               LD     (extentValue),A      ; Store the value                  ;
2453: EF4C C9                     RET                         ;
2454: EF4D         ;--------------------------- Set Record Variables -------------------------;
2455: EF4D         ;----------------------Get File Record Count and Current Record------------;
2456: EF4D         ; returns with DE pointing at RC from FCB                                  ;
2457: EF4D         ;         with HL pointing at Current Record                               ;
2458: EF4D             GetFcbRecordDetails:                      ;
2459: EF4D 2A C3 EA               LD     HL,(paramDE)         ; Get FCB start                    ;
2460: EF50 11 0F 00               LD     DE,fcbRCIndex        ; Offset to Record Count           ;
2461: EF53 19                     ADD    HL,DE                ;
2462: EF54 EB                     EX     DE,HL                ; DE Points to Record Count        ;
2463: EF55 21 11 00               LD     HL,NEXT_RECORD-fcbRCIndex ;
2464: EF58 19                     ADD    HL,DE                ; HL Points to Current Record      ;
2465: EF59 C9                     RET                         ;
2466: EF5A         ;----------------------Get File Record Count and Current Record------------;
2467: EF5A         ;----------------------Get FileExtent--------------------------------------;
2468: EF5A         ;get current extent field address to (HL)                                 ;
2469: EF5A             GetExtentAddress:                      ;
2470: EF5A 2A C3 EA               LD     HL,(paramDE)         ; Get FCB                          ;
2471: EF5D 11 0C 00               LD     DE,fcbExtIndex       ; Get EXT offset                   ;
2472: EF60 19                     ADD    HL,DE                ; HL=.fcb(fcbExtIndex)             ;
2473: EF61 C9                     RET                         ;
2474: EF62         ;----------------------Get FileExtent--------------------------------------;
2475: EF62         ;--------------------- Set/Reset Disk Map Allocation Bit ------------------;
2476: EF62         ; At Entry:	BC Contains to the Block to be modified                        ;
2477: EF62         ;			E  = TRUE if bit is to be set                                  ;
2478: EF62         ;			E  <> TRUE if bit is to be reset                               ;
2479: EF62         ; At Exit:  The target bit in the target Octet will be set/reset	       ;
2480: EF62             SetResetMapBit:                      ;
2481: EF62         ;
2482: EF62 21 00 00               LD     HL,0000H             ; Move the block number from BC    ;
2483: EF65 09                     ADD    HL,BC                ;  to HL                           ;
2484: EF66 4B                     LD     C,E                  ; Move the flag to E               ;
2485: EF67         ;
2486: EF67 7D                     LD     A,L                  ; LSB of the Block Number          ;
2487: EF68 E6 07                  AND    07H                  ; Calculate Mod(Block,8)           ;
2488: EF6A F5                     PUSH   AF                   ; Save the OctetBit                ;
2489: EF6B 06 03                  LD     B,3                  ;
2490: EF6D CD 71 F1               CALL   ShiftRightHLbyB      ; Calculate Block / 8              ;
2491: EF70 ED 5B 73 F5               LD     DE,(caAllocVector)   ; Start Of Map                     ;
2492: EF74 19                     ADD    HL,DE                ; Address of targeted Octet        ;
2493: EF75 F1                     POP    AF                   ;
2494: EF76 47                     LD     B,A                  ; Get the bit                      ;
2495: EF77         ;
2496: EF77 04                     INC    B                    ; Adjust for looping               ;
2497: EF78 C5                     PUSH   BC                   ; Will need this later             ;
2498: EF79             Left:                           ;
2499: EF79 CB 16                  RL     (HL)                 ; Rotate the Octet                 ;
2500: EF7B 10 FC                  DJNZ   Left                 ;  to move target bit to bit 0     ;
2501: EF7D C1                     POP    BC                   ; Restore loop limit and           ;
2502: EF7E 37                     SCF                         ;  set/reset flag                  ;
2503: EF7F 0C                     INC    C                    ; was C = TRUE                     ;
2504: EF80 28 01                  JR     Z,Right              ; Skip if Set                      ;
2505: EF82 3F                     CCF                         ; Set for Reset                    ;
2506: EF83             Right:                          ;
2507: EF83 CB 1E                  RR     (HL)                 ; Move the Octet back              ;
2508: EF85 10 FC                  DJNZ   Right                ;  to its original alignment       ;
2509: EF87 C9                     RET                         ;
2510: EF88         ;--------------------- Set/Reset Disk Map Allocation Bit ------------------;
2511: EF88         ;--------------------- Initialize Extent Number MSB -----------------------;
2512: EF88         ;clear the Extent number field for user open/make (S2)                    ;
2513: EF88             InitializeExtentNumberMSB:                      ;
2514: EF88 CD 8E EF               CALL   GetExtentNumberMSB   ;
2515: EF8B 36 00                  LD     (HL),0               ; Set it to = 0            ;
2516: EF8D C9                     RET                         ;
2517: EF8E         ;--------------------- Initialize Extent Number MSB -----------------------;
2518: EF8E         ;--------------------- Get Extent Number MSB| Write Protect ---------------;
2519: EF8E         ; Get S2 value                                                             ;
2520: EF8E         ;  Returns:	A = S2 Value (bit 7 write protect, bits 0-6 Ext MSB)           ;
2521: EF8E         ;			HL = Address of S2 for the FCB pointed to by paramDE           ;
2522: EF8E             GetWriteFileFlagValue:                      ; S2 bit 7                 ;
2523: EF8E             GetExtentNumberMSB:                      ; S2 bits 0-6              ;
2524: EF8E 2A C3 EA               LD     HL,(paramDE)         ; FCB address              ;
2525: EF91 11 0E 00               LD     DE,fcbS2Index        ; Index to value           ;
2526: EF94 19                     ADD    HL,DE                ; Address of value         ;
2527: EF95 7E                     LD     A,(HL)               ; load into ACC            ;
2528: EF96 C9                     RET                         ;
2529: EF97         ;--------------------- Get Extent Number MSB| Write Protect ---------------;
2530: EF97         ;--------------------------- Set File Write Flag----------------------------;
2531: EF97         ;Set file write flag in FCB in (paramDE)									;
2532: EF97         ; Used to indicate the FCB is clean. No need to write on close				;
2533: EF97             SetFileWriteFlag:                      ;
2534: EF97 CD 8E EF               CALL   GetWriteFileFlagValue ; A= Value, HL = Address of fcbS2   ;
2535: EF9A CB FE                  SET    7,(HL)               ; Set the FileWriteFlag				;
2536: EF9C C9                     RET                         ;
2537: EF9D         ;?	OR		writeFlagMask				; Set the flag , bit 7 of S2        ;
2538: EF9D         ;?	LD		(HL),A						; Put into FCB                      ;
2539: EF9D         ;?	RET	                                                                    ;
2540: EF9D         ;--------------------------- Set File Write Flag----------------------------;
2541: EF9D         ;--------------------------- Reset File Write Flag--------------------------;
2542: EF9D         ;Reset file write flag in FCB in (paramDE)									;
2543: EF9D         ; Used to indicate the FCB is dirty. Need to write on close					;
2544: EF9D             ResetFileWriteFlag:                      ;
2545: EF9D CD 8E EF               CALL   GetWriteFileFlagValue ; A= Value, HL = Address of fcbS2   ;
2546: EFA0 CB BE                  RES    7,(HL)               ; Reset the FileWriteFlag			;
2547: EFA2 C9                     RET                         ;
2548: EFA3         ;?	AND		0FFH-writeFlagMask			; Remove the flag bit		        ;
2549: EFA3         ;?	LD		(HL),A						; Put into FCB                      ;
2550: EFA3         ;?	RET	                                                                    ;
2551: EFA3         ;--------------------------- Reset File Write Flag--------------------------;
2552: EFA3         ;-------------------------- Compare FCB Extents ----------------------------;
2553: EFA3         ; Enters:	A containing Target FCB EXT value								;
2554: EFA3         ;			HL Points at Possible FCB EXT value								;
2555: EFA3         ;compare extent# in A with that in C, return nonzero if they do not match	;
2556: EFA3             CompareExtents:                      ;
2557: EFA3 C5                     PUSH   BC                   ; Save Callers Registers			;
2558: EFA4 F5                     PUSH   AF                   ; Save Target FCB EXT value    		;
2559: EFA5 3A 79 F5               LD     A,(dpbEXM)           ; Load the Extent Mask         		;
2560: EFA8 2F                     CPL                         ; Complement for And           		;
2561: EFA9 47                     LD     B,A                  ; Put negated Mask into B      		;
2562: EFAA 7E                     LD     A,(HL)               ; Get Possible FCBs EXT        		;
2563: EFAB A0                     AND    B                    ; Apply the Mask               		;
2564: EFAC 4F                     LD     C,A                  ; Low bits removed from C      		;
2565: EFAD F1                     POP    AF                   ; Restore Target FCB EXT value 		;
2566: EFAE A0                     AND    B                    ; Apply the Mask               		;
2567: EFAF 91                     SUB    C                    ; Test if Equal ( Z Flag)      		;
2568: EFB0 E6 1F                  AND    maxExtValue          ; Limit Size ?                 		;
2569: EFB2 C1                     POP    BC                   ; Restore Callers Registers    		;
2570: EFB3 C9                     RET                         ;
2571: EFB4         ;-------------------------- Compare FCB Extents ----------------------------;
2572: EFB4         ;---------------------Search for Directory Record --------------------------;
2573: EFB4         ;  Search for directory record of length C.									;
2574: EFB4         ; Target is pointed to by paramDE. The whole directory is searched.			;
2575: EFB4         ; If not found then dirEntryIndex is set to -1, else it points to the		;
2576: EFB4         ; matched directory record													;
2577: EFB4         ; Entry:	C = Search Length                                               ;
2578: EFB4         ; Exit		dirEntryIndex  =	Matched directory index, if found			;
2579: EFB4         ;								-1 (EOD) if there is no match				;
2580: EFB4             SearchForDirectoryRecord:                      ;
2581: EFB4 3E FF                  LD     A,0FFH               ;
2582: EFB6 32 88 F5               LD     (directoryIndex),A   ; Initialize directory Index        ;
2583: EFB9 21 8B F5               LD     HL,searchLength      ;
2584: EFBC 71                     LD     (HL),C               ; Save Search Length                ;
2585: EFBD 2A C3 EA               LD     HL,(paramDE)         ; Active FCB                        ;
2586: EFC0 22 8C F5               LD     (searchAddress),HL   ; Start of search                   ;
2587: EFC3 CD 49 F0               CALL   SetEndDirectory      ; DirEntryIndex = -1                ;
2588: EFC6 CD B6 EE               CALL   Home                 ; Reset Disk,Track, & Sector        ;
2589: EFC9         ;
2590: EFC9             GetNextDirectoryRecord:                      ;
2591: EFC9 0E 00                  LD     C,FALSE              ;
2592: EFCB CD 9A F1               CALL   ReadDirectory        ; Read next Dir Record              ;
2593: EFCE CD 50 F0               CALL   AtEndOfDirectory     ;
2594: EFD1 CA 28 F0               JP     Z,NoDirRecordsMatch  ; Done if at EOD                ;
2595: EFD4         ;
2596: EFD4 2A 8C F5               LD     HL,(searchAddress)   ; Get Current Dir Entry             ;
2597: EFD7 EB                     EX     DE,HL                ; DE=beginning of Directory Entry   ;
2598: EFD8 1A                     LD     A,(DE)               ; User Number                       ;
2599: EFD9 FE E5                  CP     emptyDir             ; Is Dir entry is empty             ;
2600: EFDB CA E6 EF               JP     Z,GetNextDirectoryRecord1 ; Skip if empty                     ;
2601: EFDE         ;
2602: EFDE         ; Check to be sure we are sill in the Directory                             ;
2603: EFDE D5                     PUSH   DE                   ; Save search address               ;
2604: EFDF CD 70 F0               CALL   StillInDirectory     ; Still in the directorY            ;
2605: EFE2 D1                     POP    DE                   ; Recall address                    ;
2606: EFE3 D2 28 F0               JP     NC,NoDirRecordsMatch ; Get out if past directory			;
2607: EFE6         ;
2608: EFE6             GetNextDirectoryRecord1:                      ;
2609: EFE6 CD 59 F0               CALL   GetCurrentDirectoryRecord ; Point at next directory record    ;
2610: EFE9 3A 8B F5               LD     A,(searchLength)     ;
2611: EFEC 4F                     LD     C,A                  ; SearchLength to c (down)          ;
2612: EFED 06 00                  LD     B,0                  ; Character Index (up)              ;
2613: EFEF         ;
2614: EFEF             TestNextPosition:                      ;
2615: EFEF 1A                     LD     A,(DE)               ;
2616: EFF0 FE 3F                  CP     QMARK                ; ? is always a char match          ;
2617: EFF2 CA 10 F0               JP     Z,SetNextPosition    ; Done with this if it is ?		;
2618: EFF5         ;
2619: EFF5 78                     LD     A,B                  ;
2620: EFF6 FE 0D                  CP     fcbS1Index           ; At File S1 position ?             ;
2621: EFF8 CA 10 F0               JP     Z,SetNextPosition    ; Done with this if it is ?		;
2622: EFFB         ; not the fcbS1Index field, extent field?                                  ;
2623: EFFB FE 0C                  CP     fcbExtIndex          ; Past File Type position ?         ;
2624: EFFD 1A                     LD     A,(DE)               ; Get next character                ;
2625: EFFE CA 0A F0               JP     Z,CheckExtents       ; Skip to search extent             ;
2626: F001 96                     SUB    M                    ; Do they match ?                   ;
2627: F002 E6 7F                  AND    07FH                 ; Strip MSBit                       ;
2628: F004 C2 C9 EF               JP     NZ,GetNextDirectoryRecord ; Skip if not matched               ;
2629: F007 C3 10 F0               JP     SetNextPosition      ; Matched the character             ;
2630: F00A         ;                                                                           ;
2631: F00A             CheckExtents:                      ;
2632: F00A CD A3 EF               CALL   CompareExtents       ; Matching EXTs is work             ;
2633: F00D C2 C9 EF               JP     NZ,GetNextDirectoryRecord ; Get out if not matched            ;
2634: F010         ;
2635: F010             SetNextPosition:                      ;
2636: F010 13                     INC    DE                   ; Pointer to Looking FOR            ;
2637: F011 23                     INC    HL                   ; Pointer to Looking IN             ;
2638: F012 04                     INC    B                    ; Character Index in FCB            ;
2639: F013 0D                     DEC    C                    ; Length of search                  ;
2640: F014 C2 EF EF               JP     NZ,TestNextPosition  ;
2641: F017         ; Match Found, entire name matches                                          ;
2642: F017 3A 99 F5               LD     A,(dirEntryIndex)    ; Get current Directory Index       ;
2643: F01A E6 03                  AND    dirEntryMask         ; Apply the mask                    ;
2644: F01C 32 C5 EA               LD     (exitParameterByte),A ; Put 0...3. Match FOund            ;
2645: F01F         ;
2646: F01F 21 88 F5               LD     HL,directoryIndex    ; Point at Directory Flag           ;
2647: F022 7E                     LD     A,(HL)               ; Get value                         ;
2648: F023 17                     RLA                         ; Set Carry if Flag = -1            ;
2649: F024 D0                     RET    NC                   ; Return with flag still -1         ;
2650: F025         ;
2651: F025 AF                     XOR    A                    ; Else Clear the flag               ;
2652: F026 77                     LD     (HL),A               ;
2653: F027 C9                     RET                         ;  and exit                         ;
2654: F028         ;------                                                                     ;
2655: F028             NoDirRecordsMatch:                      ;
2656: F028 CD 49 F0               CALL   SetEndDirectory      ; Set End of Directory -1           ;
2657: F02B 3E FF                  LD     A,-1                 ; Put Failure Code                  ;
2658: F02D 32 C5 EA               LD     (exitParameterByte),A ;  into return parameter            ;
2659: F030 C9                     RET                         ;
2660: F031         ;---------------------Search for Directory Record --------------------------;
2661: F031         ;---------------------------- Write Current Directory Entry ----------------;
2662: F031             WriteDir:                       ;
2663: F031         ;	CALL	NewCheckSum						; initialize entry              ;
2664: F031 0E FF                  LD     C,TRUE               ;
2665: F033 CD 13 F2               CALL   CheckSumUtility      ; Set New CheckSum              ;
2666: F036         ;
2667: F036 CD D5 EE               CALL   SetDirDMA            ; Directory DMA                 ;
2668: F039 0E 01                  LD     C,WriteDirectory     ; Write type                    ;
2669: F03B CD 41 F0               CALL   WriteBuffer          ; Write the buffer              ;
2670: F03E C3 D0 EE               JP     SetDataDMA           ; Reset DMA to default			;
2671: F041         ;
2672: F041         ;---------------------------- Write Current Directory Entry ----------------;
2673: F041         ;----------------------------------- Write Buffer --------------------------;
2674: F041         ; Write buffer and check condition. Current drive,Track, Sector and DMA     ;
2675: F041         ; Are set up prior to calling this routine                                  ;
2676: F041         ;                                                                           ;
2677: F041         ; On Entry: C = 0 => normal write operation		WriteAllocated              ;
2678: F041         ;				1 => directory write operation	WriteDirectory              ;
2679: F041         ;				2 => start of new block			WriteCleanBuffer			;
2680: F041             WriteBuffer:                      ;
2681: F041 CD 2A F6               CALL   bcWrite              ; Call into BIOS                    ;
2682: F044 B7                     OR     A                    ; Get return code                   ;
2683: F045 C2 F3 F4               JP     NZ,erPermanentNoWait ; Error if not 00                   ;
2684: F048 C9                     RET                         ;
2685: F049         ;----------------------------------- Write Buffer --------------------------;
2686: F049         ; FU
2687: F049         ;=========================== File Utilities ================================;
2688: F049
2689: F049         ;=========================== Directory Utilities ===========================;
2690: F049         ;--------------------------- Set End of Directory indicator ----------------;
2691: F049             SetEndDirectory:                      ;
2692: F049 21 FF FF               LD     HL,EOD               ; Put -1 (0FFFFH) in index          ;
2693: F04C 22 99 F5               LD     (dirEntryIndex),HL   ;
2694: F04F C9                     RET                         ;
2695: F050         ;--------------------------- Set End of Directory indicator ----------------;
2696: F050         ;--------------------------- Are we at End Of Directory --------------------;
2697: F050         ; Tests to see if we are at the End Of the Directory                        ;
2698: F050         ;                                                                           ;
2699: F050         ; exits With Z Flag Set if at EOD (dirEntryIndex = -1)                      ;
2700: F050         ;			 Z Flag reset if still in directory                             ;
2701: F050         ;
2702: F050             AtEndOfDirectory:                      ;
2703: F050 21 99 F5               LD     HL,dirEntryIndex     ; Point at LSB of Dir index         ;
2704: F053 7E                     LD     A,(HL)               ; Get it                            ;
2705: F054 23                     INC    HL                   ; Point at MSB	of Dir Index		;
2706: F055 BE                     CP     M                    ; LSB = MSB ?                       ;
2707: F056 C0                     RET    NZ                   ;  exit if not if different         ;
2708: F057         ; Same.  are they = 0ffh?           ;
2709: F057 3C                     INC    A                    ;  if yes, A= 0, set Z flag         ;
2710: F058 C9                     RET                         ;
2711: F059         ;--------------------------- Are we at End Of Directory --------------------;
2712: F059         ;--------------------------- Get Directory Element -------------------------;
2713: F059         ; compute the address of a directory element in Directory Buffer            ;
2714: F059         ; Returns:  HL = Address of the specific directory Record                   ;
2715: F059             GetCurrentDirectoryRecord:                      ;
2716: F059 C5                     PUSH   BC                   ; Save BC                           ;
2717: F05A 2A 6D F5               LD     HL,(caDirectoryDMA)  ; Get the Directory Buffer base     ;
2718: F05D 3A 98 F5               LD     A,(dirBlockIndex)    ; Get the index value               ;
2719: F060 4F                     LD     C,A                  ;
2720: F061 AF                     XOR    A                    ; Set to Zero and reset CY          ;
2721: F062 47                     LD     B,A                  ;
2722: F063 ED 4A                  ADC    HL,BC                ; Compute the Entry Location        ;
2723: F065 C1                     POP    BC                   ; Restore	                        ;
2724: F066 C9                     RET                         ;
2725: F067         ;--------------------------- Get Directory Element -------------------------;
2726: F067         ;--------------------------- Set Directory Entry ---------------------------;
2727: F067         ; Will update directory if not in the directory                             ;
2728: F067         ;
2729: F067             SetDirectoryEntry:                      ;
2730: F067 CD 70 F0               CALL   StillInDirectory     ;
2731: F06A D8                     RET    C                    ; Exit if still in the Directory  	;
2732: F06B         ;
2733: F06B         ; StillInDirectory will return with:                                        ;
2734: F06B         ;									DE = Directory entry number             ;
2735: F06B         ;									HL = Address of entry number + 1        ;
2736: F06B 13                     INC    DE                   ;
2737: F06C 72                     LD     (HL),D               ;
2738: F06D 2B                     DEC    HL                   ;
2739: F06E 73                     LD     (HL),E               ;
2740: F06F C9                     RET                         ;
2741: F070         ;--------------------------- Set Directory Entry ---------------------------;
2742: F070         ;--------------------------- Are we sill in the Directory ------------------;
2743: F070         ;Returns	:                                                               ;
2744: F070         ;			CY Set   if dirEntryIndex <= Directory Max Value                ;
2745: F070         ;			CY Reset if dirEntryIndex  > Directory Max Value                ;
2746: F070         ;			HL = (address of Index Value) + 1                               ;
2747: F070         ;			DE = Directory Index Value                                      ;
2748: F070             StillInDirectory:                      ;
2749: F070 2A 99 F5               LD     HL,(dirEntryIndex)   ;
2750: F073 EB                     EX     DE,HL                ; DE = directory counter            ;
2751: F074 2A 67 F5               LD     HL,(caDirMaxValue)   ; HL = caDirMaxValue              	;
2752: F077 7B                     LD     A,E                  ;
2753: F078 96                     SUB    M                    ;
2754: F079 23                     INC    HL                   ;
2755: F07A 7A                     LD     A,D                  ;
2756: F07B 9E                     SBC    A,(HL)               ; Set CY if dirEntryIndex           ;
2757: F07C C9                     RET                         ;  <= Directory Max Value       ;
2758: F07D         ;--------------------------- Are we sill in the Directory ------------------;
2759: F07D         ;--------------------------- Scan Disk Map ---------------------------------;
2760: F07D         ; Will Set/Reset the Allocation Map bit(s) for the current directory entry. ;
2761: F07D         ;                                                                           ;
2762: F07D         ; On Entry  C = TRUE	Set the Map bits for each block found in FCB        ;
2763: F07D         ;           C = FALSE	reset the Map bits for each block found in FCB      ;
2764: F07D         ;
2765: F07D             ScanDiskMap:                      ;
2766: F07D C5                     PUSH   BC                   ; Save the Set/Reset Info           ;
2767: F07E CD 59 F0               CALL   GetCurrentDirectoryRecord ; HL points at the directory record ;
2768: F081 11 10 00               LD     DE,fcbDiskMapIndex   ; DE is the index to the FCBs Map   ;
2769: F084 19                     ADD    HL,DE                ; HL is now at start of the MAP     ;
2770: F085 0E 11                  LD     C,fcbLength-fcbDiskMapIndex+1 ; Size of Disk Allocation Map + 1  ;
2771: F087         ;
2772: F087             ScanDiskMap0:                      ;
2773: F087 D1                     POP    DE                   ; Recall the set/reset Info         ;
2774: F088 0D                     DEC    C                    ;
2775: F089 C8                     RET    Z                    ; Loop once for each disk map entry ;
2776: F08A         ;
2777: F08A D5                     PUSH   DE                   ; Save the Set/Reset Info           ;
2778: F08B 3A 8E F5               LD     A,(byteAllocationFlag) ; Is Map Byte or Word sized         ;
2779: F08E B7                     OR     A                    ;
2780: F08F 28 07                  JR     Z,ScanDiskMapWord    ; Skip if Word Sized                ;
2781: F091         ;  Byte Allocation scan operation                                           ;
2782: F091 C5                     PUSH   BC                   ; Save counter                      ;
2783: F092 E5                     PUSH   HL                   ; Save map address                  ;
2784: F093 4E                     LD     C,(HL)               ;
2785: F094 06 00                  LD     B,0                  ; BC=block# for Byte                ;
2786: F096 18 06                  JR     ScanDiskMap2         ;
2787: F098         ; Word scan operation                                                       ;
2788: F098             ScanDiskMapWord:                      ;
2789: F098 0D                     DEC    C                    ; Adjust counter for 2 bytes        ;
2790: F099 C5                     PUSH   BC                   ; Save counter                      ;
2791: F09A 46                     LD     B,(HL)               ;
2792: F09B 23                     INC    HL                   ;
2793: F09C 4E                     LD     C,(HL)               ; BC=block# for Word                ;
2794: F09D E5                     PUSH   HL                   ; Save map address                  ;
2795: F09E         ;
2796: F09E         ; Arrive here with BC=block#, E=0/1	                                        ;
2797: F09E             ScanDiskMap2:                      ;
2798: F09E 79                     LD     A,C                  ;
2799: F09F B0                     OR     B                    ; Skip if = 0000 (No Block)         ;
2800: F0A0 C4 62 EF               CALL   NZ,SetResetMapBit    ; bit set to 0/1 its in C           ;
2801: F0A3 E1                     POP    HL                   ;
2802: F0A4 23                     INC    HL                   ; to next bit position              ;
2803: F0A5 C1                     POP    BC                   ; recall counter                    ;
2804: F0A6 C3 87 F0               JP     ScanDiskMap0         ; for another item                  ;
2805: F0A9         ;
2806: F0A9         ;--------------------------- Scan Disk Map ---------------------------------;
2807: F0A9         ;--------------------------- Get Closest Disk Block ------------------------;
2808: F0A9         ; Find the closest available disk block, and mark in Map as allocated       ;
2809: F0A9         ; Enter	BC	= Block number to base the search on                            ;
2810: F0A9         ; Exit	HL	= 0000 if There are no available open blocks                    ;
2811: F0A9         ;			= block number of available and marked block                    ;
2812: F0A9         ;
2813: F0A9             GetClosestBlock:                      ;
2814: F0A9 C5                     PUSH   BC                   ; save the starting Block #         ;
2815: F0AA         ;
2816: F0AA 2A 7A F5               LD     HL,(dpbDSM)          ; Maximum allocation value          ;
2817: F0AD CD 6F F1               CALL   DivideHLby8          ; Length of Map	                    ;
2818: F0B0 EB                     EX     DE,HL                ; put size into DE			        ;
2819: F0B1 E1                     POP    HL                   ; Block number into HL              ;
2820: F0B2 CD 6F F1               CALL   DivideHLby8          ; Length of Map                     ;
2821: F0B5 EB                     EX     DE,HL                ; Size in HL, Start in DE           ;
2822: F0B6 AF                     XOR    A                    ; Reset CY                          ;
2823: F0B7 ED 52                  SBC    HL,DE                ; Size for right                    ;
2824: F0B9         ; DE = Start Index                                                          ;
2825: F0B9         ; DE = Left Size                                                            ;
2826: F0B9         ; HL	= Right Size                                                        ;
2827: F0B9 E5                     PUSH   HL                   ; Save right size                   ;
2828: F0BA D5                     PUSH   DE                   ; Save left size & Start Index      ;
2829: F0BB 3E FF                  LD     A,0FFH               ; Full Octet                        ;
2830: F0BD         ;
2831: F0BD 2A 73 F5               LD     HL,(caAllocVector)   ; Start of Map                      ;
2832: F0C0 19                     ADD    HL,DE                ; Determine initial Octet			;
2833: F0C1         ; Set up Left side                                                          ;
2834: F0C1 C1                     POP    BC                   ; Left size                         ;
2835: F0C2 03                     INC    BC                   ; adjust                            ;
2836: F0C3 E5                     PUSH   HL                   ; Save initial Octet                ;
2837: F0C4 11 FF FF               LD     DE,-1                ; Flag as Left register set         ;
2838: F0C7         ; HL = Initial Octet                                                        ;
2839: F0C7         ; BC = Left Size                                                            ;
2840: F0C7 D9                     EXX                         ; Use alternate registers           ;
2841: F0C8 11 00 00               LD     DE,0000H             ; Flag as Right register set        ;
2842: F0CB E1                     POP    HL                   ; Get Initial Octet                 ;
2843: F0CC C1                     POP    BC                   ; Get Right Size                    ;
2844: F0CD 03                     INC    BC                   ; adjust                            ;
2845: F0CE             LookRight:                      ;
2846: F0CE ED A1                  CPI                         ; UnSet Bit?                        ;
2847: F0D0 20 28                  JR     NZ,FoundFreeOctet    ;  Then get out of search           ;
2848: F0D2 E2 EB F0               JP     PO,NoMoreRight       ; Exhausted Map to the right        ;
2849: F0D5         ;
2850: F0D5 D9                     EXX                         ; Switch to the Left                ;
2851: F0D6 ED A9                  CPD                         ; UnSet Bit?                        ;
2852: F0D8 20 20                  JR     NZ,FoundFreeOctet    ;  Then get out of search           ;
2853: F0DA E2 E0 F0               JP     PO,NoMoreLeft        ; Exhausted Map to the right        ;
2854: F0DD D9                     EXX                         ; switch to right                   ;
2855: F0DE 18 EE                  JR     LookRight            ; Keep on looking                   ;
2856: F0E0         ;			----------------			                                    ;
2857: F0E0             NoMoreLeft:                      ;
2858: F0E0 D9                     EXX                         ; Switch to Right                   ;
2859: F0E1             NoMoreLeftLoop:                      ;
2860: F0E1 ED A1                  CPI                         ;
2861: F0E3 20 15                  JR     NZ,FoundFreeOctet    ;  Then get out of search           ;
2862: F0E5 E2 F6 F0               JP     PO,NoFreeBlocks      ; Exhausted Map to the right		;
2863: F0E8 18 F7                  JR     NoMoreLeftLoop       ; Keep looking                      ;
2864: F0EA 76                     HALT                        ;
2865: F0EB             NoMoreRight:                      ;
2866: F0EB D9                     EXX                         ; Switch to Left                    ;
2867: F0EC             NoMoreRightLoop:                      ;
2868: F0EC ED A9                  CPD                         ;
2869: F0EE 20 0A                  JR     NZ,FoundFreeOctet    ;  Then get out of search           ;
2870: F0F0 E2 F6 F0               JP     PO,NoFreeBlocks      ; Exhausted Map to the right        ;
2871: F0F3 18 F7                  JR     NoMoreRightLoop      ; Keep looking                      ;
2872: F0F5 76                     HALT                        ;
2873: F0F6             NoFreeBlocks:                      ;
2874: F0F6 21 00 00               LD     HL,0000H             ; Return 0000 in HL                 ;
2875: F0F9 C9                     RET                         ;
2876: F0FA         ;			----------------			                                    ;
2877: F0FA             FoundFreeOctet:                      ;
2878: F0FA BB                     CP     E                    ; Left or Right                     ;
2879: F0FB 28 03                  JR     Z,FoundFreeOctet1    ;  it was left                      ;
2880: F0FD 2B                     DEC    HL                   ; Adjust for direction              ;
2881: F0FE 18 01                  JR     FoundFreeOctet2      ;
2882: F100         ;
2883: F100             FoundFreeOctet1:                      ;
2884: F100 23                     INC    HL                   ; Adjust for direction              ;
2885: F101             FoundFreeOctet2:                      ;
2886: F101 01 00 00               LD     BC,00                ; need to keep track of bit         ;
2887: F104             FoundFreeOctet3:                      ;
2888: F104 CB 06                  RLC    (HL)                 ;
2889: F106 03                     INC    BC                   ;
2890: F107 38 FB                  JR     C,FoundFreeOctet3    ; Loop if Bit 7 set                 ;
2891: F109 CB C6                  SET    0,(HL)               ; Make map bit set                  ;
2892: F10B 41                     LD     B,C                  ; Put count in B                    ;
2893: F10C             FoundFreeOctet4:                      ;
2894: F10C CB 0E                  RRC    (HL)                 ;
2895: F10E 10 FC                  DJNZ   FoundFreeOctet4      ; Restore the Octet                 ;
2896: F110 0B                     DEC    BC                   ; adjust for Zero based value       ;
2897: F111 C5                     PUSH   BC                   ; Save the bit index                ;
2898: F112 ED 4B 73 F5               LD     BC,(caAllocVector)   ; Get Map start                     ;
2899: F116 AF                     XOR    A                    ; Clear CY                          ;
2900: F117 ED 42                  SBC    HL,BC                ; Get how far in the map            ;
2901: F119 CD 79 F1               CALL   MultiplyHLby8        ; Calculate the Octet           ;
2902: F11C C1                     POP    BC                   ; Restore index into Octet          ;
2903: F11D 09                     ADD    HL,BC                ; This is the Block Number          ;
2904: F11E C9                     RET                         ;
2905: F11F         ;--------------------------- Get Closest Disk Block ------------------------;
2906: F11F         ;---------------------------- Copy Dir Entry To User's Buffer --------------;
2907: F11F             CopyDirEntryToUserDMA:                      ;
2908: F11F 2A 6D F5               LD     HL,(caDirectoryDMA)  ; Point at Directory buffer         ;
2909: F122 ED 5B 65 F5               LD     DE,(initDAMAddress)  ; Point at User's Buffer            ;
2910: F126 01 80 00               LD     BC,cpmRecordSize     ; The entire record                 ;
2911: F129 ED B0                  LDIR                        ; Move it                           ;
2912: F12B C9                     RET                         ;
2913: F12C         ;---------------------------- Copy Dir Entry To User's Buffer --------------;
2914: F12C         ;--------------------- Return last Directory Index to Caller ---------------;
2915: F12C             DirLocationToReturnLoc:                      ;
2916: F12C 3A 88 F5               LD     A,(directoryIndex)   ; Get last directory Index          ;
2917: F12F 32 C5 EA               LD     (exitParameterByte),A ; Save for return to Caller         ;
2918: F132 C9                     RET                         ;
2919: F133         ;--------------------- Return last Directory Index to Caller ---------------;
2920: F133         ;--------------------------- Check OK to Write to Disk ---------------------;
2921: F133             CheckWrite:                      ;
2922: F133 CD FE EE               CALL   IsDiskWriteProtected ; Is this disk Write Protected?     ;
2923: F136 C8                     RET    Z                    ; OK to write                       ;
2924: F137 C3 D4 F4               JP     errReadOnlyDisk      ; Report read only disk error		;
2925: F13A         ;--------------------------- Check OK to Write to Disk ---------------------;
2926: F13A         ;--------------------------- Check File Write Protect Status ---------------;
2927: F13A             CheckRODirectory:                      ;
2928: F13A CD 59 F0               CALL   GetCurrentDirectoryRecord ; Use Entry in Directory Buffer     ;
2929: F13D         ; Use HL as the directory entry in Question                                 ;
2930: F13D             CheckROFile:                      ;
2931: F13D 11 09 00               LD     DE,fcbROfileIndex    ; Index into FC for RO              ;
2932: F140 19                     ADD    HL,DE                ; point at the byte                 ;
2933: F141 7E                     LD     A,(HL)               ;
2934: F142 17                     RLA                         ; Set CY if RO bit set              ;
2935: F143 D0                     RET    NC                   ; Return OK                         ;
2936: F144 C3 DA F4               JP     errReadOnlyFile      ; Report to read only File          ;
2937: F147         ;--------------------------- Check File Write Protect Status ---------------;
2938: F147         ;------------------------- Copy FCB To Directory record --------------------;
2939: F147         ; On Entry:                                                                 ;
2940: F147         ;			C = Starting position                                           ;
2941: F147         ;			E = length of copy                                              ;
2942: F147         ;copy the whole file control block                                          ;
2943: F147             CopyFCB:                        ;
2944: F147 0E 00                  LD     C,0                  ;
2945: F149 1E 20                  LD     E,fcbLength          ; Copy all of the FCB		    ;
2946: F14B         ; On Entry:                                                                 ;
2947: F14B         ;			C = Starting position                                           ;
2948: F14B         ;			E = length of copy                                              ;
2949: F14B             CopyDir:                        ;
2950: F14B 16 00                  LD     D,0                  ; Make length a word value      ;
2951: F14D D5                     PUSH   DE                   ; Length                        ;
2952: F14E 06 00                  LD     B,0                  ; Make index a word             ;
2953: F150 2A C3 EA               LD     HL,(paramDE)         ; HL = source for data          ;
2954: F153 09                     ADD    HL,BC                ;
2955: F154 EB                     EX     DE,HL                ;
2956: F155 CD 59 F0               CALL   GetCurrentDirectoryRecord ; HL pointer to Dir Record      ;
2957: F158 EB                     EX     DE,HL                ;
2958: F159 C1                     POP    BC                   ; Length                        ;
2959: F15A ED B0                  LDIR                        ;
2960: F15C CD C8 F1               CALL   SeekDir              ; Seek to the dir entry         ;
2961: F15F C3 31 F0               JP     WriteDir             ; Write the directory element   ;
2962: F162         ;------------------------- Copy FCB from Directory record ------------------;
2963: F162
2964: F162         ;=========================== Directory Utilities ===========================;
2965: F162         ; DU
2966: F162
2967: F162         ;=========================== General   Utilities ===========================;
2968: F162
2969: F162         ;--------------------------- Rotate HL right by value in C ----------------;
2970: F162         ;
2971: F162         ; HL = Value to be rotated Right                                           ;
2972: F162         ;  B = Amount to shift                                                     ;
2973: F162             RotateRightHLbyB:                      ;
2974: F162 37                     SCF                         ; Set carry flag, expect LSBit = 1 ;
2975: F163 CB 45                  BIT    0,L                  ; is LSB set?                      ;
2976: F165 20 01                  JR     NZ,RotateRightHLbyB1 ; Skip if LSB set              ;
2977: F167 3F                     CCF                         ; else Clear Carry flag            ;
2978: F168             RotateRightHLbyB1:                      ;
2979: F168 CB 1C                  RR     H                    ; Shift thru CY                    ;
2980: F16A CB 1D                  RR     L                    ; ditto                            ;
2981: F16C 10 F4                  DJNZ   RotateRightHLbyB     ;
2982: F16E C9                     RET                         ;
2983: F16F         ;
2984: F16F         ;--------------------------- Rotate HL right by value in C ----------------;
2985: F16F         ;---------Divide HL by 8  &&  Shift HL right by value in C ----------------;
2986: F16F         ; HL = Value to be shifted Right                                           ;
2987: F16F             DivideHLby8:                      ;
2988: F16F 06 03                  LD     B,3                  ; 8 = 2**3						   ;
2989: F171         ;  B = Amount to shift                                                     ;
2990: F171             ShiftRightHLbyB:                      ;
2991: F171 AF                     XOR    A                    ; else Clear Carry flag            ;
2992: F172 CB 1C                  RR     H                    ; Shift thru CY                    ;
2993: F174 CB 1D                  RR     L                    ; ditto                            ;
2994: F176 10 F9                  DJNZ   ShiftRightHLbyB      ;
2995: F178 C9                     RET                         ;
2996: F179         ;---------Divide HL by 8  &&  Shift HL right by value in C ----------------;
2997: F179         ;---------Multiply HL by 8  &&  Shift HL left by value in C ---------------;
2998: F179         ; HL = Value to be shifted Left                                            ;
2999: F179             MultiplyHLby8:                      ;
3000: F179 06 03                  LD     B,3                  ; 8 = 2**3						   ;
3001: F17B         ;  B = Amount to shift                                                     ;
3002: F17B             ShiftLeftHLbyB:                      ;
3003: F17B AF                     XOR    A                    ; else Clear Carry flag            ;
3004: F17C CB 15                  RL     L                    ; Shift thru CY                    ;
3005: F17E CB 14                  RL     H                    ; ditto                            ;
3006: F180 10 F9                  DJNZ   ShiftLeftHLbyB       ;
3007: F182 C9                     RET                         ;
3008: F183         ;---------Multiply HL by 8  &&  Shift HL left by value in C ---------------;
3009: F183         ;----------------------------- Merge ---------------------------------------;
3010: F183         ; Merge Map Block Numbers between FCB and directory record                  ;
3011: F183         ; HL has pointer to map for either dir record or FCB,                       ;
3012: F183         ; DE has the other pointer. If HL is pointing to a non empty block, then    ;
3013: F183         ; it just returns, Else it copies the block number to where DE is pointing  ;
3014: F183         ;
3015: F183             Merge:                          ;
3016: F183 7E                     LD     A,(HL)               ; Get the first byte                ;
3017: F184 23                     INC    HL                   ;
3018: F185 B6                     OR     M                    ; OR it with the second byte        ;
3019: F186 2B                     DEC    HL                   ; Restore HL to start               ;
3020: F187 C0                     RET    NZ                   ; Exit if both are 0s               ;
3021: F188         ; HL points to a non Zero value	                                            ;
3022: F188 1A                     LD     A,(DE)               ; Get the first byte                ;
3023: F189 77                     LD     (HL),A               ; Move it                           ;
3024: F18A 13                     INC    DE                   ;
3025: F18B 23                     INC    HL                   ; Increment both pointers           ;
3026: F18C 1A                     LD     A,(DE)               ; Get the second byte               ;
3027: F18D 77                     LD     (HL),A               ; Move it                           ;
3028: F18E 1B                     DEC    DE                   ;
3029: F18F 2B                     DEC    HL                   ; Restore HL & DE to start          ;
3030: F190 C9                     RET                         ;
3031: F191         ;----------------------------- Merge ---------------------------------------;
3032: F191
3033: F191         ; GU
3034: F191
3035: F191         ;=========================== General   Utilities ===========================;
3036: F191
3037: F191         ;--------------------------- Read Directory Record -------------------------;
3038: F191         ; read a directory entry into the directory buffer                          ;
3039: F191             ReadDirRecord:                      ;
3040: F191 CD D5 EE               CALL   SetDirDMA            ; System Assigned Buffer            ;
3041: F194 CD DE EE               CALL   ReadBuffer           ; Go to BIOS for the read           ;
3042: F197 C3 D0 EE               JP     SetDataDMA           ; Restore DMA                       ;
3043: F19A         ;--------------------------- Read Directory Record -------------------------;
3044: F19A
3045: F19A         ;--------------------------- Read Directory --------------------------------;
3046: F19A         ; Read next directory entry                                                 ;
3047: F19A         ; Enter :                                                                   ;
3048: F19A         ;		C =  TRUE initializing and setting CheckSum                         ;
3049: F19A         ;		  <> TRUE Checking existing CheckSum                                ;
3050: F19A             ReadDirectory:                      ;
3051: F19A ED 5B 7C F5               LD     DE,(dpbDRM)          ; Number of Dir Entries-1           ;
3052: F19E 2A 99 F5               LD     HL,(dirEntryIndex)   ; Prior Directory Index             ;
3053: F1A1 23                     INC    HL                   ; Increment the Index               ;
3054: F1A2 22 99 F5               LD     (dirEntryIndex),HL   ; Save current directory index      ;
3055: F1A5 AF                     XOR    A                    ; Clear the CY flag                 ;
3056: F1A6 ED 52                  SBC    HL,DE                ; Are we at end Of the directory    ;
3057: F1A8 20 04                  JR     NZ,ReadDirectory0    ;  No the process                   ;
3058: F1AA CD 49 F0               CALL   SetEndDirectory      ;  else we are done                 ;
3059: F1AD C9                     RET                         ;
3060: F1AE         ;
3061: F1AE         ; Calculate the entry index Position in Buffer                              ;
3062: F1AE             ReadDirectory0:                      ;
3063: F1AE 3A 99 F5               LD     A,(dirEntryIndex)    ; Get the index                     ;
3064: F1B1 E6 03                  AND    dirEntryMask         ; Determine Entry number            ;
3065: F1B3 06 05                  LD     B,fcbShift           ; Shift value for Record Size       ;
3066: F1B5             ReadDirectory1:                      ;
3067: F1B5 87                     ADD    A,A                  ;
3068: F1B6 10 FD                  DJNZ   ReadDirectory1       ;
3069: F1B8 32 98 F5               LD     (dirBlockIndex),A    ; Now save the Index into to buffer ;
3070: F1BB B7                     OR     A                    ; Is this the 1st entry?            ;
3071: F1BC C0                     RET    NZ                   ;  return if not.                   ;
3072: F1BD         ;
3073: F1BD C5                     PUSH   BC                   ; Save init Flag (CheckSum)         ;
3074: F1BE CD C8 F1               CALL   SeekDir              ; Set up for Directory Read         ;
3075: F1C1 CD 91 F1               CALL   ReadDirRecord        ; Read the directory record         ;
3076: F1C4 C1                     POP    BC                   ; Recall initialization flag        ;
3077: F1C5 C3 13 F2               JP     CheckSumUtility      ; Checksum the directory            ;
3078: F1C8         ;--------------------------- Read Directory --------------------------------;
3079: F1C8         ;--------------------------- Seek Directory --------------------------------;
3080: F1C8         ;seek the record containing the current directory entry					;
3081: F1C8             SeekDir:                        ;
3082: F1C8 2A 99 F5               LD     HL,(dirEntryIndex)   ; Directory Entry Index             ;
3083: F1CB 06 02                  LD     B,dirEntryShift      ; 4 entries per record              ;
3084: F1CD CD 71 F1               CALL   ShiftRightHLbyB      ;
3085: F1D0 22 96 F5               LD     (absoluteCPMRecord),HL ;
3086: F1D3 22 9B F5               LD     (dirRecord),HL       ; Save                              ;
3087: F1D6 C3 D9 F1               JP     Seek                 ;
3088: F1D9         ;--------------------------- Seek Directory --------------------------------;
3089: F1D9         ;--------------------------- Seek ------------------------------------------;
3090: F1D9             Seek:                           ;
3091: F1D9 01 FF FF               LD     BC,0FFFFH            ; Initialize the track counter      ;
3092: F1DC 2A 96 F5               LD     HL,(absoluteCPMRecord) ; Get the record in question        ;
3093: F1DF ED 5B 75 F5               LD     DE,(dpbSPT)          ; Get Sectors Per track             ;
3094: F1E3         ;
3095: F1E3             Seek0:                          ;
3096: F1E3 03                     INC    BC                   ; Divide the record                 ;
3097: F1E4 AF                     XOR    A                    ;  by the sectors per track         ;
3098: F1E5 ED 52                  SBC    HL,DE                ;
3099: F1E7 30 FA                  JR     NC,Seek0             ;  to get the gross track number    ;
3100: F1E9         ;
3101: F1E9         ;
3102: F1E9 19                     ADD    HL,DE                ; Gets the sector in the track      ;
3103: F1EA E5                     PUSH   HL                   ; Save Index Sector                 ;
3104: F1EB         ;
3105: F1EB DD 2A 69 F5               LD     IX,(caTrack)         ;
3106: F1EF DD 71 00               LD     (IX+0),C             ;
3107: F1F2 DD 70 01               LD     (IX+1),B             ; Save the Gross Track              ;
3108: F1F5         ;
3109: F1F5 EB                     EX     DE,HL                ; Take the index from the record    ;
3110: F1F6 2A 96 F5               LD     HL,(absoluteCPMRecord) ;
3111: F1F9 AF                     XOR    A                    ;
3112: F1FA ED 52                  SBC    HL,DE                ;  and you get the Block start      ;
3113: F1FC         ;
3114: F1FC DD 2A 6B F5               LD     IX,(caSector)        ;
3115: F200 DD 75 00               LD     (IX+0),L             ;
3116: F203 DD 74 01               LD     (IX+1),H             ; Save the Block Start              ;
3117: F206         ;
3118: F206 2A 82 F5               LD     HL,(dpbOFF)          ; Get directory Offset (tracks)		;
3119: F209 09                     ADD    HL,BC                ;  to add to the gross Track        ;
3120: F20A E5                     PUSH   HL                   ;  which yields the net or          ;
3121: F20B C1                     POP    BC                   ;  actual track for the record      ;
3122: F20C CD 1E F6               CALL   bcSettrk             ; Set the net (actual) track        ;
3123: F20F         ;
3124: F20F C1                     POP    BC                   ; Get the sector within the track   ;
3125: F210 C3 21 F6               JP     bcSetsec             ;  and set it for the seek          ;
3126: F213         ;
3127: F213         ;--------------------------- Seek ------------------------------------------;
3128: F213         ;--------------------------- Check Sum Utility -----------------------------;
3129: F213         ; At entry                                                                  ;
3130: F213         ;			C  = TRUE	-  Set the Checksum values in Vector                ;
3131: F213         ;			C <> TRUE	-  Validate Checksum value in Vector                ;
3132: F213         ;
3133: F213             CheckSumUtility:                      ;
3134: F213 2A 80 F5               LD     HL,(dpbCKS)          ;
3135: F216 ED 5B 9B F5               LD     DE,(dirRecord)       ;
3136: F21A AF                     XOR    A                    ;
3137: F21B ED 52                  SBC    HL,DE                ; Skip if past the Directory    ;
3138: F21D D8                     RET    C                    ;  Entries                      ;
3139: F21E         ;
3140: F21E C5                     PUSH   BC                   ; Save New/Validate Flag        ;
3141: F21F         ;
3142: F21F         ; CheckSum = MOD( SUM(all bytes in The Record), 0FFH)                       ;
3143: F21F             ComputeCheckSum:                      ;
3144: F21F 06 80                  LD     B,cpmRecordSize      ;
3145: F221 2A 6D F5               LD     HL,(caDirectoryDMA)  ;
3146: F224 EE 00                  XOR                         ;
3147: F226             ComputeCheckSum1:                      ;
3148: F226 86                     ADD    A,(HL)               ;
3149: F227 23                     INC    HL                   ;
3150: F228 10 FC                  DJNZ   ComputeCheckSum1     ;
3151: F22A         ; Checksum is in ACC	                                                    ;
3152: F22A         ;
3153: F22A 2A 71 F5               LD     HL,(caCheckSum)      ; Address of check sum vector       ;
3154: F22D ED 5B 9B F5               LD     DE,(dirRecord)       ; Index to this record              ;
3155: F231 19                     ADD    HL,DE                ; Address of this record in vector  ;
3156: F232 C1                     POP    BC                   ; Retrieve New/Validate Flag        ;
3157: F233 0C                     INC    C                    ;
3158: F234 CA 41 F2               JP     Z,SetNewCheckSum     ; Set the Value if Flag was TRUE    ;
3159: F237         ;
3160: F237 BE                     CP     M                    ; Else we are checking the value    ;
3161: F238 C8                     RET    Z                    ; Exit if OK                        ;
3162: F239         ; possible checksum error, are we beyond the end of the disk?               ;
3163: F239 CD 70 F0               CALL   StillInDirectory     ;
3164: F23C D0                     RET    NC                   ; OK, if not in the directory       ;
3165: F23D CD E6 EE               CALL   SetDiskReadOnly      ;  else the checksums don't match   ;
3166: F240 C9                     RET                         ;  Set disk RO before returning     ;
3167: F241         ;
3168: F241         ;initializing the checksum                                                 ;
3169: F241             SetNewCheckSum:                      ;
3170: F241 77                     LD     (HL),A               ;
3171: F242 C9                     RET                         ;
3172: F243         ;--------------------------- Check Sum Utility -----------------------------;
3173: F243
3174: F243
3175: F243         ;---------------------
3176: F243         ;update variables from I/O in  fcb
3177: F243             UpdateRecordVars:
3178: F243 CD 4D EF               CALL   GetFcbRecordDetails  ; DE => fcbRCIndex(RC) , HL => NEXT_RECORD
3179: F246 3A 89 F5               LD     A,(seqReadFlag)
3180: F249 4F                     LD     C,A                  ; =1 if sequential i/o
3181: F24A 3A 94 F5               LD     A,(currentFileRecord) ; get NEXT_RECORD
3182: F24D 81                     ADD    A,C
3183: F24E 77                     LD     (HL),A               ; fcb(NEXT_RECORD)=current File Record+seqReadFlag
3184: F24F EB                     EX     DE,HL
3185: F250 3A 92 F5               LD     A,(fcbRecordCount)
3186: F253 77                     LD     (HL),A               ; fcb(fcbRCIndex)=fcbRecordCount
3187: F254 C9                     RET
3188: F255         ;---------------------
3189: F255         ;set file Attributes for current fcb
3190: F255             SetAttributes:
3191: F255 0E 0C                  LD     C,fcbExtIndex
3192: F257 CD B4 EF               CALL   SearchForDirectoryRecord ; through file type
3193: F25A             SetAttributes1:
3194: F25A CD 50 F0               CALL   AtEndOfDirectory
3195: F25D C8                     RET    Z                    ; exit at end of dir
3196: F25E 0E 00                  LD     C,0
3197: F260 1E 0C                  LD     E,fcbExtIndex        ;copy name
3198: F262 CD 4B F1               CALL   CopyDir
3199: F265 CD C9 EF               CALL   GetNextDirectoryRecord
3200: F268 C3 5A F2               JP     SetAttributes1
3201: F26B         ;
3202: F26B         ;*****************************************************************
3203: F26B
3204: F26B         ;*****************************************************************
3205: F26B         ;********************** File  Routines ***************************
3206: F26B         ;-----------------------------------------------------------------
3207: F26B         ;-----------------------------------------------------------------
3208: F26B         ;read sequential
3209: F26B         ;IN  - (DE) FCB address
3210: F26B         ;OUT - (A) 00 = success and data available. else no read and no data
3211: F26B             vReadSeq:                       ; func20: (20 - 14) read sequential
3212: F26B CD 09 EF               CALL   ReselectDisk
3213: F26E CD 82 F2               CALL   ReadSeq
3214: F271 C9                     RET
3215: F272         ;-----------------------------------------------------------------
3216: F272         ;write sequential
3217: F272         ;IN  - (DE) FCB address
3218: F272         ;OUT - (A) 00 = success and data available. else no read and no data
3219: F272             vWriteSeq:                      ; func21 (21 - 15) write sequention
3220: F272 CD 09 EF               CALL   ReselectDisk
3221: F275 CD C5 F2               CALL   DiskWriteSeq
3222: F278 C9                     RET
3223: F279         ;-----------------------------------------------------------------
3224: F279         ;-----------------------------------------------------------------
3225: F279         ; Rename file
3226: F279         ; In - (DE)	FCB Address
3227: F279         ; OUT - (A)	Directory Code
3228: F279         ;	0-3 = success ; 0FFH = File Not Found
3229: F279             vRenameFile:                      ; func23 (23 - 17) Rename File
3230: F279 CD 09 EF               CALL   ReselectDisk
3231: F27C CD F0 F3               CALL   Rename
3232: F27F C3 2C F1               JP     DirLocationToReturnLoc
3233: F282         ;-----------------------------------------------------------------
3234: F282         ;-----------------------------------------------------------------
3235: F282         ;*****************************************************************
3236: F282
3237: F282         ;-----------------------------------------------------------------
3238: F282         ;sequential disk read operation
3239: F282             ReadSeq:
3240: F282 3E 01                  LD     A,1
3241: F284 32 89 F5               LD     (seqReadFlag),A      ; set flag for seqential read
3242: F287         ;---
3243: F287         ; read the disk
3244: F287         ; read the next record from the current fcb
3245: F287             DiskRead:
3246: F287 3E FF                  LD     A,TRUE
3247: F289 32 87 F5               LD     (readModeFlag),A     ; read mode flag = true (OpenNextExt)
3248: F28C
3249: F28C CD 36 EF               CALL   SetRecordVars        ; sets current File Record, fcbRecordCount and EXM
3250: F28F 3A 94 F5               LD     A,(currentFileRecord)
3251: F292 21 92 F5               LD     HL,fcbRecordCount
3252: F295 BE                     CP     M                    ; current File Record-fcbRecordCount
3253: F296         ; skip if  current File Record < fcbRecordCount
3254: F296 DA AC F2               JP     C,RecordOK
3255: F299         ; not enough records in the extent
3256: F299 FE 80                  CP     RecordsPerExtent     ; current File Record = 128?   *** Records in an Extent
3257: F29B C2 C2 F2               JP     NZ,DiskEOF           ; skip if current File Record<>128
3258: F29E CD 8D F3               CALL   OpenNextExt          ; go to next extent if so
3259: F2A1 AF                     XOR    A
3260: F2A2 32 94 F5               LD     (currentFileRecord),A ; current File Record=00
3261: F2A5         ; now check for open ok
3262: F2A5 3A C5 EA               LD     A,(exitParameterByte)
3263: F2A8 B7                     OR     A
3264: F2A9 C2 C2 F2               JP     NZ,DiskEOF
3265: F2AC         ; stop at eof
3266: F2AC         ; arrive with fcb addressing a record to read
3267: F2AC             RecordOK:                       ; recordok:
3268: F2AC CD 15 F4               CALL   GetBlockNumber       ; save it in Absolute CPM Record
3269: F2AF CD 22 F4               CALL   IsAllocated          ; Absolute CPM Record=0000?
3270: F2B2 CA C2 F2               JP     Z,DiskEOF            ; get out if not allocated already
3271: F2B5
3272: F2B5 CD 28 F4               CALL   SetActualRecordAdd   ; Absolute CPM Record now a record value
3273: F2B8 CD D9 F1               CALL   Seek                 ; to proper track,sector
3274: F2BB CD DE EE               CALL   ReadBuffer           ; to dma address
3275: F2BE CD 43 F2               CALL   UpdateRecordVars     ; update variables from I/O in  fcb
3276: F2C1 C9                     RET
3277: F2C2             DiskEOF:                        ; diskeof:
3278: F2C2 C3 41 F4               JP     SetLowReturnTo1      ; exitParameterByte = 1
3279: F2C5         ;ret
3280: F2C5         ;-----------------------------------------------------------------
3281: F2C5         ;sequential disk write
3282: F2C5             DiskWriteSeq:
3283: F2C5 3E 01                  LD     A,1
3284: F2C7 32 89 F5               LD     (seqReadFlag),A
3285: F2CA         ;--------
3286: F2CA         ;disk write
3287: F2CA             DiskWrite:
3288: F2CA 3E 00                  LD     A,FALSE
3289: F2CC 32 87 F5               LD     (readModeFlag),A
3290: F2CF         ; write record to currently selected file
3291: F2CF CD 33 F1               CALL   CheckWrite           ; in case write protected
3292: F2D2 2A C3 EA               LD     HL,(paramDE)         ; HL = .fcb(0)
3293: F2D5 CD 3D F1               CALL   CheckROFile          ; may be a read-only file
3294: F2D8 CD 36 EF               CALL   SetRecordVars        ; set local Record parameters
3295: F2DB 3A 94 F5               LD     A,(currentFileRecord)
3296: F2DE FE 80                  CP     highestRecordNumber+1 ; Still in the same extent?
3297: F2E0 DA E7 F2               JP     C,DiskWrite1         ; skip if in the same Extent
3298: F2E3 CD 41 F4               CALL   SetLowReturnTo1
3299: F2E6 C9                     RET                         ; Exit ???????????
3300: F2E7
3301: F2E7         ; can write the next record, so continue
3302: F2E7             DiskWrite1:
3303: F2E7 CD 15 F4               CALL   GetBlockNumber       ; sets up actual block number
3304: F2EA CD 22 F4               CALL   IsAllocated
3305: F2ED 0E 00                  LD     C,WriteAllocated     ; assume a normal write operation for WriteBuffer
3306: F2EF C2 3D F3               JP     NZ,DiskWrite3
3307: F2F2         ; not allocated -
3308: F2F2         ; the argument to getblock is the starting position for the disk search
3309: F2F2         ; and should be the last allocated block for this file,
3310: F2F2         ; or the value 0 if no space has been allocated
3311: F2F2
3312: F2F2 CD 47 F4               CALL   GetDiskMapIndex      ; return with Disk Map index in Acc
3313: F2F5 32 8A F5               LD     (diskMapIndex),A     ; save for later
3314: F2F8 01 00 00               LD     BC,0000h             ; may use block zero
3315: F2FB B7                     OR     A
3316: F2FC CA 06 F3               JP     Z,FirstBlock         ; skip if no previous block
3317: F2FF         ; previous block exists
3318: F2FF 4F                     LD     C,A
3319: F300 0B                     DEC    BC                   ; previous block # in BC
3320: F301 CD 67 F4               CALL   GetDiskMapValue      ; previous block # to HL
3321: F304 44                     LD     B,H
3322: F305 4D                     LD     C,L                  ; BC=prev block#
3323: F306         ; BC = 0000, or previous block #
3324: F306             FirstBlock:
3325: F306         ;	CALL	GetClosestBlockXX					; block # to HL
3326: F306 CD A9 F0               CALL   GetClosestBlock
3327: F309         ; arrive here with block# or zero
3328: F309 7D                     LD     A,L
3329: F30A B4                     OR     H
3330: F30B C2 14 F3               JP     NZ,BlockOK
3331: F30E         ; cannot find a block to allocate
3332: F30E 3E 02                  LD     A,2
3333: F310 32 C5 EA               LD     (exitParameterByte),A
3334: F313 C9                     RET                         ; exitParameterByte=2
3335: F314
3336: F314             BlockOK:
3337: F314 22 96 F5               LD     (absoluteCPMRecord),HL ; allocated block number is in HL
3338: F317 EB                     EX     DE,HL                ; block number to DE
3339: F318 2A C3 EA               LD     HL,(paramDE)
3340: F31B 01 10 00               LD     BC,fcbDiskMapIndex
3341: F31E 09                     ADD    HL,BC                ; HL=.fcb(fcbDiskMapIndex)
3342: F31F 3A 8E F5               LD     A,(byteAllocationFlag)
3343: F322 B7                     OR     A                    ; set flags for byteAllocationFlag byte dm
3344: F323 3A 8A F5               LD     A,(diskMapIndex)     ; recall dm index
3345: F326 CA 30 F3               JP     Z,Allocate16Bit      ; skip if allocating word
3346: F329         ; else allocate using a byte value
3347: F329 CD 80 F4               CALL   AddAtoHL
3348: F32C 73                     LD     (HL),E               ; byteAllocationFlag byte alloc
3349: F32D C3 38 F3               JP     DiskWrite2           ; to continue
3350: F330
3351: F330             Allocate16Bit:                      ; allocate a word value
3352: F330
3353: F330 4F                     LD     C,A
3354: F331 06 00                  LD     B,0                  ; double(diskMapIndex)
3355: F333 09                     ADD    HL,BC
3356: F334 09                     ADD    HL,BC                ; HL=.fcb(diskMapIndex*2)
3357: F335 72                     LD     (HL),D
3358: F336 23                     INC    HL
3359: F337 73                     LD     (HL),E               ; double wd
3360: F338         ; disk write to previously unallocated block
3361: F338             DiskWrite2:
3362: F338 0E 02                  LD     C,WriteCleanBuffer   ; marked as unallocated write
3363: F33A CD 9D EF               CALL   ResetFileWriteFlag
3364: F33D         ; continue the write operation of no allocation error
3365: F33D         ; C = 0 if normal write, 1 if directory write, 2 if to prev unalloc block
3366: F33D
3367: F33D             DiskWrite3:
3368: F33D 3A C5 EA               LD     A,(exitParameterByte)
3369: F340 B7                     OR     A
3370: F341 C0                     RET    NZ                   ; stop if non zero returned value
3371: F342
3372: F342 C5                     PUSH   BC                   ; save write flag ( in C see above)
3373: F343 CD 28 F4               CALL   SetActualRecordAdd   ; Absolute CPM Record set to actual record number
3374: F346 CD D9 F1               CALL   Seek                 ; to proper file position
3375: F349 C1                     POP    BC                   ; get write flag
3376: F34A C5                     PUSH   BC                   ; restore/save write flag (C=2 if new block)
3377: F34B CD 41 F0               CALL   WriteBuffer          ; written to disk
3378: F34E C1                     POP    BC                   ; C = 2 if a new block was allocated, 0 if not
3379: F34F         ; increment record count if fcbRecordCount<=current File Record
3380: F34F 3A 94 F5               LD     A,(currentFileRecord)
3381: F352 21 92 F5               LD     HL,fcbRecordCount
3382: F355 BE                     CP     M                    ; current File Record-fcbRecordCount
3383: F356 DA 5D F3               JP     C,DiskWrite4
3384: F359         ; fcbRecordCount <= current File Record
3385: F359 77                     LD     (HL),A
3386: F35A 34                     INC    M                    ; fcbRecordCount = current File Record+1
3387: F35B 0E 02                  LD     C,2                  ; mark as record count incremented
3388: F35D             DiskWrite4:
3389: F35D         ; A has current File Record, C=2 if new block or new record#
3390: F35D 0D                     DEC    C
3391: F35E 0D                     DEC    C
3392: F35F C2 6A F3               JP     NZ,DiskWrite5
3393: F362 F5                     PUSH   AF                   ; save current File Record value
3394: F363 CD 8E EF               CALL   GetExtentNumberMSB   ; HL=.fcb(fcbS2Index), A=fcb(fcbS2Index)
3395: F366         ; reset the file write flag to mark as written fcb
3396: F366 E6 7F                  AND    7FH                  ; not writeFlagMask
3397: F368 77                     LD     (HL),A               ; fcb(fcbS2Index) = fcb(fcbS2Index) and 7fh
3398: F369 F1                     POP    AF                   ; restore current File Record
3399: F36A             DiskWrite5:
3400: F36A         ; check for end of extent, if found attempt to open next extent in preparation for next write
3401: F36A FE 7F                  CP     highestRecordNumber  ; current File Record=highestRecordNumber?
3402: F36C C2 8A F3               JP     NZ,DiskWrite7        ; skip if not
3403: F36F         ; may be random access write, if so we are done
3404: F36F 3A 89 F5               LD     A,(seqReadFlag)
3405: F372 B7                     OR     A
3406: F373 CA 8A F3               JP     Z,DiskWrite7         ; skip next extent open op
3407: F376         ; update current fcb before going to next extent
3408: F376 CD 43 F2               CALL   UpdateRecordVars     ;update variables from I/O in  fcb
3409: F379 CD 8D F3               CALL   OpenNextExt          ; readModeFlag=false
3410: F37C         ; current File Record remains at highestRecordNumber causing eof if no more directory space is available
3411: F37C 21 C5 EA               LD     HL,exitParameterByte
3412: F37F 7E                     LD     A,(HL)
3413: F380 B7                     OR     A
3414: F381 C2 88 F3               JP     NZ,DiskWrite6        ; no space
3415: F384         ; space available, set current File Record=255
3416: F384 3D                     DEC    A
3417: F385 32 94 F5               LD     (currentFileRecord),A ; goes to 00 next time
3418: F388             DiskWrite6:
3419: F388 36 00                  LD     (HL),0               ; exitParameterByte = 00 for returned value
3420: F38A             DiskWrite7:
3421: F38A C3 43 F2               JP     UpdateRecordVars     ; update variables from I/O in  fcb
3422: F38D         ;ret
3423: F38D         ;-----------------------------------------------------------------
3424: F38D         ;close the current extent  and open the next one if possible.
3425: F38D         ;readModeFlag is true if in read mode
3426: F38D             OpenNextExt:                      ; open$reel
3427: F38D AF                     XOR    A
3428: F38E 32 86 F5               LD     (fcbCopiedFlag),A    ; set true if actually copied
3429: F391 CD E2 ED               CALL   CloseDirEntry        ; close current extent
3430: F394         ; exitParameterByte remains at enddir if we cannot open the next ext
3431: F394 CD 50 F0               CALL   AtEndOfDirectory
3432: F397 C8                     RET    Z                    ; return if end
3433: F398 2A C3 EA               LD     HL,(paramDE)         ; increment extent number
3434: F39B 01 0C 00               LD     BC,fcbExtIndex
3435: F39E 09                     ADD    HL,BC                ; HL=.fcb(fcbExtIndex)
3436: F39F 7E                     LD     A,(HL)
3437: F3A0 3C                     INC    A
3438: F3A1 E6 1F                  AND    maxExtValue
3439: F3A3 77                     LD     (HL),A               ; fcb(fcbExtIndex)=++1
3440: F3A4 CA B6 F3               JP     Z,OpenNextModule     ; move to next module if zero
3441: F3A7         ; may be in the same extent group
3442: F3A7 47                     LD     B,A
3443: F3A8 3A 79 F5               LD     A,(dpbEXM)
3444: F3AB A0                     AND    B
3445: F3AC         ; if result is zero, then not in the same group
3446: F3AC 21 86 F5               LD     HL,fcbCopiedFlag     ; true if the fcb was copied to directory
3447: F3AF A6                     AND    M                    ; produces a 00 in accumulator if not written
3448: F3B0 CA C1 F3               JP     Z,OpenNextExt1       ; go to next physical extent
3449: F3B3         ; result is non zero, so we must be in same logical ext
3450: F3B3 C3 DF F3               JP     OpenNextExt2         ; to copy fcb information
3451: F3B6         ; extent number overflow, go to next module
3452: F3B6
3453: F3B6             OpenNextModule:
3454: F3B6 01 02 00               LD     BC,fcbS2Index-fcbExtIndex ;RATS
3455: F3B9 09                     ADD    HL,BC                ; HL=.fcb(fcbS2Index)
3456: F3BA 34                     INC    M                    ; fcb(fcbS2Index)=++1
3457: F3BB         ; module number incremented, check for overflow
3458: F3BB 7E                     LD     A,(HL)
3459: F3BC E6 0F                  AND    moduleMask           ; mask high order bits
3460: F3BE CA EA F3               JP     Z,OpenNextExtError   ; cannot overflow to zero
3461: F3C1         ; otherwise, ok to continue with new module
3462: F3C1
3463: F3C1             OpenNextExt1:
3464: F3C1 0E 0F                  LD     C,nameLength
3465: F3C3 CD B4 EF               CALL   SearchForDirectoryRecord ; next extent found?
3466: F3C6 CD 50 F0               CALL   AtEndOfDirectory
3467: F3C9 C2 DF F3               JP     NZ,OpenNextExt2
3468: F3CC         ; end of file encountered
3469: F3CC 3A 87 F5               LD     A,(readModeFlag)
3470: F3CF 3C                     INC    A                    ; 0ffh becomes 00 if read
3471: F3D0 CA EA F3               JP     Z,OpenNextExtError   ; sets exitParameterByte = 1
3472: F3D3         ; try to extend the current file
3473: F3D3 CD 62 EE               CALL   MakeNewFile
3474: F3D6         ; cannot be end of directory
3475: F3D6 CD 50 F0               CALL   AtEndOfDirectory
3476: F3D9 CA EA F3               JP     Z,OpenNextExtError   ; with exitParameterByte = 1
3477: F3DC C3 E2 F3               JP     OpenNextExt3
3478: F3DF
3479: F3DF         ; not end of file, open
3480: F3DF             OpenNextExt2:
3481: F3DF CD A8 ED               CALL   CopyDirRecordToFCB
3482: F3E2             OpenNextExt3:
3483: F3E2 CD 36 EF               CALL   SetRecordVars        ; Set Record parameters
3484: F3E5 AF                     XOR    A
3485: F3E6 32 C5 EA               LD     (exitParameterByte),A ; exitParameterByte = 0
3486: F3E9 C9                     RET                         ; with exitParameterByte = 0
3487: F3EA
3488: F3EA         ; cannot move to next extent of this file
3489: F3EA             OpenNextExtError:
3490: F3EA CD 41 F4               CALL   SetLowReturnTo1      ; exitParameterByte = 1
3491: F3ED C3 97 EF               JP     SetFileWriteFlag     ; ensure that it will not be closed
3492: F3F0         ;-----------------------------------------------------------------
3493: F3F0         ;rename the file described by the first half of the currently addressed FCB.
3494: F3F0         ;the new name is contained in the last half of the FCB. The file name and type
3495: F3F0         ;are changed, but the reel number is ignored.  the user number is identical
3496: F3F0             Rename:
3497: F3F0 CD 33 F1               CALL   CheckWrite           ; may be write protected
3498: F3F3         ; search up to the extent field
3499: F3F3 0E 0C                  LD     C,fcbExtIndex        ; extent number field index
3500: F3F5 CD B4 EF               CALL   SearchForDirectoryRecord
3501: F3F8         ; copy position 0
3502: F3F8 2A C3 EA               LD     HL,(paramDE)
3503: F3FB 7E                     LD     A,(HL)               ; HL=.fcb(0), A=fcb(0)
3504: F3FC 11 10 00               LD     DE,fcbDiskMapIndex
3505: F3FF 19                     ADD    HL,DE                ; HL=.fcb(fcbDiskMapIndex)
3506: F400 77                     LD     (HL),A               ; fcb(fcbDiskMapIndex)=fcb(0)
3507: F401         ; assume the same disk drive for new named file
3508: F401             Rename1:
3509: F401 CD 50 F0               CALL   AtEndOfDirectory
3510: F404 C8                     RET    Z                    ; stop at end of dir
3511: F405         ; not end of directory, rename next element
3512: F405 CD 3A F1               CALL   CheckRODirectory     ; may be read-only file
3513: F408 0E 10                  LD     C,fcbDiskMapIndex
3514: F40A 1E 0C                  LD     E,fcbExtIndex
3515: F40C CD 4B F1               CALL   CopyDir
3516: F40F         ; element renamed, move to next
3517: F40F CD C9 EF               CALL   GetNextDirectoryRecord
3518: F412 C3 01 F4               JP     Rename1
3519: F415         ;-----------------------------------------------------------------
3520: F415         ;-----------------------------------------------------------------
3521: F415
3522: F415         ;-----------------------------------------------------------------
3523: F415         ;-----------------------------------------------------------------
3524: F415
3525: F415
3526: F415         ;-----------------------------------------------------------------
3527: F415         ;compute disk block number from current fcb
3528: F415             GetBlockNumber:
3529: F415 CD 47 F4               CALL   GetDiskMapIndex      ; 0...15 in register A
3530: F418 4F                     LD     C,A
3531: F419 06 00                  LD     B,0
3532: F41B CD 67 F4               CALL   GetDiskMapValue      ; return value in HL
3533: F41E 22 96 F5               LD     (absoluteCPMRecord),HL ; save for later
3534: F421 C9                     RET
3535: F422         ;-----------------------------------------------------------------
3536: F422         ;is  block allocated
3537: F422             IsAllocated:
3538: F422 2A 96 F5               LD     HL,(absoluteCPMRecord)
3539: F425 7D                     LD     A,L
3540: F426 B4                     OR     H
3541: F427 C9                     RET
3542: F428         ;-----------------------------------------------------------------
3543: F428         ;compute actual record address
3544: F428         ; result = absolute CPMRecord * ( 2**BSH)
3545: F428             SetActualRecordAdd:
3546: F428 3A 77 F5               LD     A,(dpbBSH)           ; Block Shift  to reg A
3547: F42B 2A 96 F5               LD     HL,(absoluteCPMRecord)
3548: F42E
3549: F42E             SetActualRecordAdd1:
3550: F42E 29                     ADD    HL,HL
3551: F42F 3D                     DEC    A                    ; shl(absolute CPMRecord,dpbBSH)
3552: F430 C2 2E F4               JP     NZ,SetActualRecordAdd1
3553: F433         ; HL has Record number for start of the block;
3554: F433 3A 78 F5               LD     A,(dpbBLM)           ; get block mask
3555: F436 4F                     LD     C,A                  ; to get current File Record mod Block
3556: F437 3A 94 F5               LD     A,(currentFileRecord) ; get index into block
3557: F43A A1                     AND    C                    ; masked value in A
3558: F43B B5                     OR     L
3559: F43C 6F                     LD     L,A                  ; to HL
3560: F43D 22 96 F5               LD     (absoluteCPMRecord),HL ; Absolute CPM Record=HL or (current File Record and dpbBLM)
3561: F440         ; *** Absolute CPM Record now has current record number - Starting record number + index into block
3562: F440 C9                     RET
3563: F441         ;-----------------------------------------------------------------
3564: F441         ;---------------------------------- Is Bit Set ------------------------------;
3565: F441
3566: F441
3567: F441
3568: F441         ;---------------------
3569: F441         ;set exitParameterByte to 1
3570: F441             SetLowReturnTo1:
3571: F441 3E 01                  LD     A,1
3572: F443 32 C5 EA               LD     (exitParameterByte),A
3573: F446 C9                     RET
3574: F447         ;---------------------
3575: F447         ;---------------------
3576: F447         ;Return the  disk map Index for current File Record in the ACC
3577: F447         ;  account for multiple extents in 1 physical Directory entry
3578: F447             GetDiskMapIndex:                      ; dm$position
3579: F447 21 77 F5               LD     HL,dpbBSH            ; get block shift value
3580: F44A 4E                     LD     C,(HL)               ; shift count to C
3581: F44B 3A 94 F5               LD     A,(currentFileRecord) ; current virtual record to A
3582: F44E             GetDiskMapIndex1:
3583: F44E B7                     OR     A                    ; reset the carry flag
3584: F44F 1F                     RRA
3585: F450 0D                     DEC    C
3586: F451 C2 4E F4               JP     NZ,GetDiskMapIndex1
3587: F454         ; A = shr(current File Record,dpbBSH) = current File Record/2**(sect/block)
3588: F454         ; A has the relative position in the block.
3589: F454 47                     LD     B,A                  ; save it for later addition
3590: F455 3E 08                  LD     A,8
3591: F457 96                     SUB    M                    ; 8-dpbBSH to accumulator
3592: F458 4F                     LD     C,A                  ; extent shift count in register c
3593: F459 3A 93 F5               LD     A,(extentValue)      ; extent value ani extmsk
3594: F45C             GetDiskMapIndex2:                      ; dmpos1:
3595: F45C         ; dpbBSH = 3,4,5,6,7, C=5,4,3,2,1
3596: F45C         ; shift is 4,3,2,1,0
3597: F45C 0D                     DEC    C
3598: F45D CA 65 F4               JP     Z,GetDiskMapIndex3
3599: F460 B7                     OR     A                    ; clear the carry flag
3600: F461 17                     RLA
3601: F462 C3 5C F4               JP     GetDiskMapIndex2
3602: F465
3603: F465         ; The ACC has the Block Number for this record
3604: F465             GetDiskMapIndex3:
3605: F465         ; arrive here with A = shl(ext and extmsk,7-dpbBSH)
3606: F465 80                     ADD    A,B                  ; add the previous shr(current File Record,dpbBSH) value
3607: F466         ; A is one of the following values, depending upon alloc
3608: F466         ; bks dpbBSH
3609: F466         ; 1k   3     v/8 + extentValue * 16
3610: F466         ; 2k   4     v/16+ extentValue * 8
3611: F466         ; 4k   5     v/32+ extentValue * 4
3612: F466         ; 8k   6     v/64+ extentValue * 2
3613: F466         ; 16k  7     v/128+extentValue * 1
3614: F466 C9                     RET                         ; with disk map position in A
3615: F467         ;---------------------
3616: F467         ; Enter with Disk Map Index in BG
3617: F467         ; Return disk map value  in HL
3618: F467             GetDiskMapValue:
3619: F467 2A C3 EA               LD     HL,(paramDE)         ; base address of file control block
3620: F46A 11 10 00               LD     DE,fcbDiskMapIndex   ; offset to the disk map
3621: F46D 19                     ADD    HL,DE                ; HL =.diskmap
3622: F46E 09                     ADD    HL,BC                ; index by a  byte value
3623: F46F 3A 8E F5               LD     A,(byteAllocationFlag) ;  byte map entry?
3624: F472 B7                     OR     A
3625: F473 CA 7A F4               JP     Z,GetDiskMap16Bit    ; get disk map  byte
3626: F476 6E                     LD     L,(HL)
3627: F477 26 00                  LD     H,0
3628: F479 C9                     RET                         ; with HL=00bb
3629: F47A             GetDiskMap16Bit:                      ; getdmd:
3630: F47A 09                     ADD    HL,BC                ; HL=.fcb(dm+i*2)
3631: F47B         ; double precision value returned
3632: F47B 56                     LD     D,(HL)
3633: F47C 23                     INC    HL
3634: F47D 5E                     LD     E,(HL)
3635: F47E EB                     EX     DE,HL
3636: F47F C9                     RET
3637: F480         ;---------------------
3638: F480         ;---------------------
3639: F480         ;*****************************************************************
3640: F480         ;************************ Utilities ******************************
3641: F480         ;*****************************************************************
3642: F480             AddAtoHL:
3643: F480 85                     ADD    A,L
3644: F481 6F                     LD     L,A
3645: F482 D0                     RET    NC
3646: F483 24                     INC    H
3647: F484 C9                     RET
3648: F485         ;----------
3649: F485             DEminusHL2HL:
3650: F485 7B                     LD     A,E
3651: F486 95                     SUB    L
3652: F487 6F                     LD     L,A
3653: F488 7A                     LD     A,D
3654: F489 9C                     SBC    A,H
3655: F48A 67                     LD     H,A
3656: F48B C9                     RET
3657: F48C         ;-------------
3658: F48C             ShiftRightHLbyC:
3659: F48C 0C                     INC    C
3660: F48D             ShiftRightHLbyC0:
3661: F48D 0D                     DEC    C
3662: F48E C8                     RET    Z
3663: F48F 7C                     LD     A,H
3664: F490 B7                     OR     A
3665: F491 1F                     RRA
3666: F492 67                     LD     H,A
3667: F493 7D                     LD     A,L
3668: F494 1F                     RRA
3669: F495 6F                     LD     L,A
3670: F496 C3 8D F4               JP     ShiftRightHLbyC0
3671: F499         ;-------
3672: F499             ShiftLeftHLbyC:
3673: F499 0C                     INC    C
3674: F49A             ShiftLeftHLbyC0:
3675: F49A 0D                     DEC    C
3676: F49B C8                     RET    Z                    ; exit when done
3677: F49C 29                     ADD    HL,HL
3678: F49D C3 9A F4               JP     ShiftLeftHLbyC0
3679: F4A0         ;*****************************************************************
3680: F4A0         ;? ;move data length of length C from source DE to HL
3681: F4A0         ;? MoveX:
3682: F4A0         ;?	INC		C
3683: F4A0         ;? MoveX0:
3684: F4A0         ;?	DEC		C
3685: F4A0         ;?	RET	Z
3686: F4A0         ;?	LD	A,(DE)
3687: F4A0         ;?	LD		(HL),A
3688: F4A0         ;?	INC		DE
3689: F4A0         ;?	INC		HL
3690: F4A0         ;?	JP		MoveX0
3691: F4A0         ;?
3692: F4A0         ;********** Console OUT Routines*******************??????
3693: F4A0
3694: F4A0         ;---------------------------------- Is Bit Set ------------------------------;
3695: F4A0         ; Enter HL  contains the bit map                                             ;
3696: F4A0         ;       B   Has the bit number (0...F)                                       ;
3697: F4A0         ; Return ZFlag = 1 if bit is reset (0)                                       ;
3698: F4A0         ;              = 0 if bit is set (1)                                         ;
3699: F4A0             IsBitSet:                       ;
3700: F4A0 04                     INC    B                    ;
3701: F4A1             IsBitSetLoop:                      ;
3702: F4A1 37                     SCF                         ; Set carry flag, expect LSBit = 1   ;
3703: F4A2 CB 45                  BIT    0,L                  ; is LSB set?                        ;
3704: F4A4 20 01                  JR     NZ,IsBitSet1         ; Skip if LSB set                ;
3705: F4A6 3F                     CCF                         ; else Clear Carry flag              ;
3706: F4A7             IsBitSet1:                      ;
3707: F4A7 CB 1C                  RR     H                    ; Shift thru CY                      ;
3708: F4A9 CB 1D                  RR     L                    ; ditto                              ;
3709: F4AB 10 F4                  DJNZ   IsBitSetLoop         ;
3710: F4AD CB 7C                  BIT    7,H                  ; Bit moved from L LSBit to H MSBit	 ;
3711: F4AF C9                     RET                         ;
3712: F4B0         ;---------------------------------- Is Bit Set ------------------------------;
3713: F4B0
3714: F4B0         ;============================ Set/Reset Vector Bit ==========================;
3715: F4B0         ;---------------------------------- Set Vector Bit -------------------------;;
3716: F4B0         ; Enter  HL  contains the bit map vector                                    ;;
3717: F4B0         ;        B   Has the bit number (0...F)                                     ;;
3718: F4B0         ; Return HL  Contains the modified bit map vector                           ;;
3719: F4B0             SetVectorBit:                      ;;
3720: F4B0 C5                     PUSH   BC                   ; Save the Bit Number               ;;
3721: F4B1 CD A0 F4               CALL   IsBitSet             ; Put the bit in the LSBit          ;;
3722: F4B4         ;;
3723: F4B4 C1                     POP    BC                   ; Get the bit position              ;;
3724: F4B5 CB FC                  SET    7,H                  ;;
3725: F4B7 18 07                  JR     ReAlignVector        ;                                    ;
3726: F4B9         ;---------------------------------- Set Vector Bit -------------------------;;
3727: F4B9         ;---------------------------------- Reset Vector Bit -----------------------;;
3728: F4B9         ; Enter  HL  contains the bit map vector                                    ;;
3729: F4B9         ;        B   Has the bit number (0...F)                                     ;;
3730: F4B9         ; Return HL  Contains the modified bit map vector                           ;;
3731: F4B9             ResetVectorBit:                      ;;
3732: F4B9 C5                     PUSH   BC                   ; Save the Bit Number               ;;
3733: F4BA CD A0 F4               CALL   IsBitSet             ; Put the bit in the LSBit          ;;
3734: F4BD         ;;
3735: F4BD C1                     POP    BC                   ; Get the bit position              ;;
3736: F4BE CB BC                  RES    7,H                  ;;
3737: F4C0         ; Fall thru to ReAlignVector                                                 ;
3738: F4C0         ;---------------------------------- Reset Vector Bit -----------------------;;
3739: F4C0         ;---------------------------------- Set VectorBit --------------------------;;
3740: F4C0         ; Adjusts the HL register to its Original Alignment after IsBitSet           ;
3741: F4C0         ;
3742: F4C0             ReAlignVector:                      ;
3743: F4C0 04                     INC    B                    ;
3744: F4C1             ReAlignMapLoop:                      ;
3745: F4C1 37                     SCF                         ; Set carry flag, expect LSBit = 1   ;
3746: F4C2 CB 7C                  BIT    7,H                  ; is LSB set?                        ;
3747: F4C4 20 01                  JR     NZ,ReAlignMap1       ; Skip if LSB set                ;
3748: F4C6 3F                     CCF                         ; else Clear Carry flag              ;
3749: F4C7             ReAlignMap1:                      ;
3750: F4C7 CB 15                  RL     L                    ; Shift thru CY                      ;
3751: F4C9 CB 14                  RL     H                    ; ditto                              ;
3752: F4CB 10 F4                  DJNZ   ReAlignMapLoop       ;
3753: F4CD C9                     RET                         ;
3754: F4CE         ;============================ Set/Reset Vector Bit ==========================;
3755: F4CE         ;************Error message World*************************
3756: F4CE             errSelect:
3757: F4CE 21 ED F4               LD     HL,evSelection
3758: F4D1 C3 E6 F4               JP     GoToError
3759: F4D4             errReadOnlyDisk:
3760: F4D4 21 EF F4               LD     HL,evReadOnlyDisk
3761: F4D7 C3 E6 F4               JP     GoToError
3762: F4DA             errReadOnlyFile:
3763: F4DA 21 F1 F4               LD     HL,evReadOnlyFile
3764: F4DD C3 E6 F4               JP     GoToError
3765: F4E0             errPermanent:
3766: F4E0 21 EB F4               LD     HL,evPermanent
3767: F4E3 C3 E6 F4               JP     GoToError
3768: F4E6         ;************Error message handler **********************
3769: F4E6             GoToError:
3770: F4E6         ;HL = .errorhandler, call subroutine
3771: F4E6 5E                     LD     E,(HL)
3772: F4E7 23                     INC    HL
3773: F4E8 56                     LD     D,(HL)               ; address of routine in DE
3774: F4E9 EB                     EX     DE,HL
3775: F4EA E9                     JP     (HL)                 ; vector to subroutine
3776: F4EB         ;************ Error Vectors *****************************
3777: F4EB F9 F4       evPermanent: DW     erPermanent          ; pererr permanent error subroutine
3778: F4ED 05 F5       evSelection: DW     erSelection          ; selerr select error subroutine
3779: F4EF 0B F5       evReadOnlyDisk: DW     erReadOnlyDisk       ; roderr ro disk error subroutine
3780: F4F1 11 F5       evReadOnlyFile: DW     erReadOnlyFile       ; roferr ro file error subroutine
3781: F4F3         ;************Error Routines ******************************
3782: F4F3             erPermanentNoWait:
3783: F4F3 21 43 F5               LD     HL,emPermanent
3784: F4F6 C3 E6 F4               JP     GoToError
3785: F4F9             erPermanent:
3786: F4F9 21 43 F5               LD     HL,emPermanent
3787: F4FC CD 1A F5               CALL   displayAndWait       ; to report the error
3788: F4FF FE 03                  CP     CTRL_C
3789: F501 CA 00 00               JP     Z,WarmBoot           ; reboot if response is CTRL_C
3790: F504 C9                     RET                         ; and ignore the error
3791: F505         ;
3792: F505             erSelection:
3793: F505 21 4E F5               LD     HL,emSelection
3794: F508 C3 14 F5               JP     waitB4boot           ; wait console before boot
3795: F50B         ;
3796: F50B             erReadOnlyDisk:
3797: F50B 21 5A F5               LD     HL,emReadOnlyDisk
3798: F50E C3 14 F5               JP     waitB4boot           ; wait console before boot
3799: F511         ;
3800: F511             erReadOnlyFile:
3801: F511 21 55 F5               LD     HL,emReadOnlyFile    ; drop through to wait for console
3802: F514         ;
3803: F514         ; wait for response before boot
3804: F514             waitB4boot:
3805: F514 CD 1A F5               CALL   displayAndWait
3806: F517 C3 00 00               JP     WarmBoot
3807: F51A
3808: F51A         ;report error to console, message address in HL
3809: F51A             displayAndWait:
3810: F51A E5                     PUSH   HL                   ; save message pointer
3811: F51B CD D6 E9               CALL   showCRLF             ; stack mssg address, new line
3812: F51E 3A 5F F5               LD     A,(currentDisk)
3813: F521 C6 41                  ADD    A,ASCII_A
3814: F523 32 3F F5               LD     (emDisk),A           ; Problem disk name
3815: F526 01 33 F5               LD     BC,emDisk0
3816: F529 CD 3B E9               CALL   Print                ; the error message
3817: F52C C1                     POP    BC
3818: F52D CD 3B E9               CALL   Print                ; error mssage tail
3819: F530 C3 21 E9               JP     ConIn                ; to get the input character
3820: F533         ;ret
3821: F533         ;**************Error Messages*******************************
3822: F533 42 64 6F 73 20 45 72 72 20 4F 6E 20     emDisk0:   DB     'Bdos Err On '
3823: F53F 20 3A 20 24     emDisk:    DB     ' : $'
3824: F543 42 61 64 20 53 65 63 74 6F 72 24     emPermanent: DB     'Bad Sector$'
3825: F54E 53 65 6C 65 63 74 24     emSelection: DB     'Select$'
3826: F555 46 69 6C 65 20     emReadOnlyFile: DB     'File '
3827: F55A 52 2F 4F 24     emReadOnlyDisk: DB     'R/O$'
3828: F55E         ;*****************************************************************
3829: F55E
3830: F55E         ;********* file control block (fcb) constants ********************
3831: F55E             fcbLength  EQU    20H                  ;32				; fcblen file control block size
3832: F55E             fcbROfileIndex EQU    09H                  ; high order of first type char
3833: F55E             fcbHiddenfileIndex EQU    0AH                  ;10				; invisible file in dir command
3834: F55E             fcbExtIndex EQU    0CH                  ;12				; extent number field index
3835: F55E             fcbS1Index EQU    0DH                  ;13				; S1 index
3836: F55E             fcbS2Index EQU    0EH                  ;14				; S2 data module number index
3837: F55E             fcbRCIndex EQU    0FH                  ;15				; record count field index
3838: F55E             fcbDiskMapIndex EQU    10H                  ;16				; dskmap disk map field
3839: F55E
3840: F55E             fcbCurrentRecord EQU    21H                  ;33
3841: F55E
3842: F55E             highestRecordNumber EQU    RecordsPerExtent - 1 ; last record# in extent
3843: F55E
3844: F55E             dirEntriesPerRecord EQU    cpmRecordSize/fcbLength ; directory elts / record
3845: F55E             dirEntryShift EQU    2                    ; log2(dirEntriesPerRecord)
3846: F55E             dirEntryMask EQU    dirEntriesPerRecord-1
3847: F55E             fcbShift   EQU    5                    ; log2(fcbLength)
3848: F55E         ;
3849: F55E
3850: F55E
3851: F55E
3852: F55E             maxExtValue EQU    31                   ; largest extent number
3853: F55E             moduleMask EQU    15                   ; limits module number value
3854: F55E             writeFlagMask EQU    80h                  ; file write flag is high order fcbS2Index
3855: F55E             nameLength EQU    15                   ; namlen name length
3856: F55E
3857: F55E             emptyDir   EQU    0E5H                 ; empty empty directory entry
3858: F55E             NEXT_RECORD EQU    fcbLength            ; nxtrec
3859: F55E             RANDOM_REC_FIELD EQU    NEXT_RECORD + 1      ;ranrec random record field (2 bytes)
3860: F55E         ;
3861: F55E         ;	reserved file indicators
3862: F55E         ;	equ	11				; reserved
3863: F55E         ;*****************************************************************
3864: F55E         ;*****************************************************************
3865: F55E
3866: F55E         ;***common values shared between bdosi and bdos******************
3867: F55E 00          currentUserNumber: DB     0                    ; usrcode current user number
3868: F55F         ; paramDE:			DS	2					; ParamsDE information address
3869: F55F         ; exitParameterByte:
3870: F55F         ; exitParameterWord:	DS	2					; address value to return
3871: F55F FF          currentDisk: DB     -1                   ; curdsk current disk number
3872: F560         ; exitParameterByte		EQU	exitParameterWord	; lret low(exitParameterWord)
3873: F560
3874: F560         ;********************* Local Variables ***************************
3875: F560         ;     ************************
3876: F560         ;     *** Initialized Data ***
3877: F560
3878: F560 E5          emptyFCB:  DB     emptyDir             ; efcb 0E5 = available dir entry
3879: F561 00 00       readOnlyVector: DW     0                    ; rodsk read only disk vector
3880: F563 00 00       loggedDisks: DW     0                    ; dlog	 logged-in disks
3881: F565 80 00       initDAMAddress: DW     DMABuffer            ; dmaad tbuff initial dma address
3882: F567
3883: F567         ;     *** Current Disk attributes ****
3884: F567         ; These are set upon disk select
3885: F567         ; data must be adjacent, do not insert variables
3886: F567         ; address of translate vector, not used
3887: F567         ; ca - currentAddress
3888: F567
3889: F567 00 00       caDirMaxValue: DW     0000H                ; cdrmaxa pointer to cur dir max value
3890: F569 00 00       caTrack:   DW     0000H                ; curtrka current track address
3891: F56B 00 00       caSector:  DW     0000H                ; current Sector
3892: F56D             caListSizeStart:
3893: F56D 00 00       caDirectoryDMA: DW     0000H                ; buffa pointer to directory dma address
3894: F56F 00 00       caDiskParamBlock: DW     0000H                ; dpbaddr current disk parameter block address
3895: F571 00 00       caCheckSum: DW     0000H                ; checka current checksum vector address
3896: F573 00 00       caAllocVector: DW     0000H                ; alloca current allocation vector address
3897: F575             caListSizeEnd:
3898: F575             caListSize EQU    caListSizeEnd - caListSizeStart
3899: F575
3900: F575         ;     ***** Disk Parameter Block *******
3901: F575         ; data must be adjacent, do not insert variables
3902: F575         ; dpb - Disk Parameter Block
3903: F575             dpbStart:
3904: F575 00 00       dpbSPT:    DW     0000H                ; sectpt sectors per track
3905: F577 00          dpbBSH:    DB     0000H                ; blkshf block shift factor
3906: F578 00          dpbBLM:    DB     00H                  ; blkmsk block mask
3907: F579 00          dpbEXM:    DB     00H                  ; extmsk extent mask
3908: F57A 00 00       dpbDSM:    DW     0000H                ; Maximum allocation number
3909: F57C 00 00       dpbDRM:    DW     0000H                ; dirmax largest directory number
3910: F57E 00 00       dpbDABM:   DW     0000H                ; dirblk reserved allocation bits for directory
3911: F580 00 00       dpbCKS:    DW     0000H                ; chksiz size of checksum vector
3912: F582 00 00       dpbOFF:    DW     0000H                ; offset offset tracks at beginning
3913: F584             dpbEnd:
3914: F584             dpbSize    EQU    dpbEnd - dpbStart
3915: F584         ;
3916: F584
3917: F584         ;     ************************
3918: F584
3919: F584 00 00       caSkewTable: DW     0000H                ; tranv address of translate vector
3920: F586 00          fcbCopiedFlag: DB     00H                  ; fcb$copied set true if CopyFCB called
3921: F587 00          readModeFlag: DB     00H                  ; rmf read mode flag for OpenNextExt
3922: F588 00          directoryIndex: DB     00H                  ; dirloc directory flag in rename, etc.
3923: F589 00          seqReadFlag: DB     00H                  ; seqio  1 if sequential i/o
3924: F58A 00          diskMapIndex: DB     00H                  ; dminx  local for DiskWrite
3925: F58B 00          searchLength: DB     00H                  ; searchl search length
3926: F58C 00 00       searchAddress: DW     0000H                ; searcha search address
3927: F58E         ;tinfo:	ds	word							; temp for info in "make"
3928: F58E 00          byteAllocationFlag: DB     00H                  ; set true if single byte allocation map
3929: F58F 00          fResel:    DB     00H                  ; resel reselection flag
3930: F590 00          entryDisk: DB     00H                  ; olddsk disk on entry to bdos
3931: F591 00          fcbDisk:   DB     00H                  ; fcbdsk disk named in fcb
3932: F592 00          fcbRecordCount: DB     00H                  ; record count from current FCB
3933: F593 00          extentValue: DB     00H                  ; extent number and dpbEXM from current fcb
3934: F594 00 00       currentFileRecord: DW     0000H                ; Current File Record - fcbCurrentRecord
3935: F596 00 00       absoluteCPMRecord: DW     0000H                ; Raw record ( 4 records / Sector)( 4 Sectors per block)
3936: F598         ;
3937: F598         ;	local variables for directory access
3938: F598 00          dirBlockIndex: DB     00H                  ; directory block Index 0,1,2,3
3939: F599 00 00       dirEntryIndex: DW     00H                  ; directory entry Index  0,1,...,dpbDRM
3940: F59B 00 00       dirRecord: DW     00H                  ; drec:	ds	word	;directory record 0,1,...,dpbDRM/4
3941: F59D
3942: F59D         ;********************** data areas ******************************
3943: F59D
3944: F59D
3945: F59D         ;---------------------------------- Stack Area--------------------------------;
3946: F59D             stackBottom: DS     STACK_SIZE * 2       ; stack size                      ;
3947: F5DD             bdosStack:
3948: F5DD         ;
3949: F5DD         ;---------------------------------- Stack Area--------------------------------;
3950: F5DD         ;	end of Basic I/O System
3951: F5DD         ;-----------------------------------------------------------------;
3952: F5DD
3953: F5DD
3954: F5DD         ;
3955: F5DD             Z_HighestLocation:
3956: F5DD             Z_MemoryLeft EQU    (BIOSStart-1) - Z_HighestLocation
3957: F5DD
3958: F5DD
           ************************   Xref   ************************
0000: $               F5DD   0418 0448
3935: absoluteCPMRecord F596   3085 3092 3110 3337 3533 3538 3547 3560
3642: AddAtoHL        F480   3347
3351: Allocate16Bit   F330   3345
1045: AreWeAtEndOfBuffer EA3A   1041
0086: ASCII_A         0041   3813
0087: ASCII_C         0043
0088: ASCII_K         004B
0095: ASCII_LO_A      0061
0096: ASCII_LO_K      006B
0097: ASCII_LO_P      0070
0038: ASCII_MASK      007F   0988
0089: ASCII_N         004E
0090: ASCII_Q         0051
0091: ASCII_R         0052
0092: ASCII_W         0057
0093: ASCII_Y         0059
0073: ASCII_ZERO      0030
0067: ASTERISK        002A
2702: AtEndOfDirectory F050   1437 1862 2083 2114 2172 2264 2593 3194 3431 3466 3475 3509
1137: BackUp          EA9F   1065 1133
1142: BackUp1         EAA7   1138
0295: bcBoot          F600
0298: bcConin         F609   0618 0803 0914 0932
0299: bcConout        F60C   0610 0876 1140 1144 1150 1152
0297: bcConst         F606   0615 0910
0303: bcHome          F618   2330
0300: bcList          F60F   0583 0882
0310: bcListst        F62D
0301: bcPunch         F612   0568
0308: bcRead          F627   2372
0302: bcReader        F615   0549
0311: bcSectran       F630
0304: bcSeldsk        F61B   1986
0307: bcSetdma        F624   2367
0306: bcSetsec        F621   3125
0305: bcSettrk        F61E   2336 3122
0296: bcWboot         F603   0469
0309: bcWrite         F62A   2681
0153: BDOSBase        E800   0154 0156 0327
0122: BDOSE           0005   0123
0154: BDOSEntry       E800
0143: BDOSLength      0E00   0146 0156 0157
3947: bdosStack       F5DD   0343
0333: BdosStart       E800
0056: BELL            0007
0156: BIOSBase        F600
0144: BIOSLength      0A00   0146
0116: BIOSPAGE        0002
0157: BIOSStart       F600   0295 0296 0297 0298 0299 0300 0301 0302 0303 0304 0305 0306 0307 0308 0309 0310 0311 3956
3336: BlockOK         F314   3330
0253: BlockSize       0800   0275
1060: BSspaceBS       EA48   0999
0034: BYTE            0001   1173
3928: byteAllocationFlag F58E   2019 2185 2778 3342 3623
3896: caAllocVector   F573   1557 2039 2041 2066 2491 2831 2898
3895: caCheckSum      F571   3153
3893: caDirectoryDMA  F56D   2006 2359 2717 2908 3145
3889: caDirMaxValue   F567   1997 2073 2389 2751
3894: caDiskParamBlock F56F   1619 2011
3898: caListSize      0008   2007
3897: caListSizeEnd   F575   3898
3892: caListSizeStart F56D   3898
0094: CARET           005E   0842
0836: CaretOut        E948   1034 1115
3891: caSector        F56B   2003 2344 3114
3919: caSkewTable     F584   1995
3890: caTrack         F569   2000 2340 3105
0151: CCPEntry        E000   0153 0157
0142: CCPLength       0800   0146 0153 0157
0928: CheckCTL_S      E9AC   0917
2631: CheckExtents    F00A   2625
2927: CheckRODirectory F13A   1440 3512
2930: CheckROFile     F13D   3293
3133: CheckSumUtility F213   2665 3077
2921: CheckWrite      F133   1432 2257 3291 3497
2159: CloseDirEntry   EDE2   1287 1783 3429
2241: CloseDirEntryEnd EE51   2231
2249: CloseDirEntryError EE5D   2201 2211 2216
0074: COLON           003A
1171: columnPosition  EAC1   0861 0886 0951 0971 1129
0069: COMMA           002C
2556: CompareExtents  EFA3   2632
3143: ComputeCheckSum F21F
3147: ComputeCheckSum1 F226   3150
0128: ComTail         0080   0129
0130: ComTailChars    0082
0129: ComTailCount    0081   0130
0905: ConBreak        E98C   0729 0872
0938: ConBreak0       E9BA   0930
0940: ConBreak1       E9BD   0908
0796: ConIn           E921   0501 0987 3819
0869: ConsoleOut      E96B   0843 0855 0860 0948 0956 0963 0965 1057
2949: CopyDir         F14B   3198 3515
2907: CopyDirEntryToUserDMA F11F   1340 1405
2117: CopyDirRecordToFCB EDA8   3481
2943: CopyFCB         F147   2283
0230: cpmRecordSize   0080   0232 0235 0237 2910 3144 3844
0059: CR              000D   0809 0962 0992 1056
0042: CTRL_C          0003   0933 1039 3788
0043: CTRL_E          0005   1004
0044: CTRL_H          0008   0815 0998 1143
0045: CTRL_K          000B
0046: CTRL_L          000C
0047: CTRL_P          0010   0916 1007
0048: CTRL_R          0012   1016
0049: CTRL_S          0013   0929
0050: CTRL_U          0015   1013
0051: CTRL_X          0018   1010
0052: CTRL_Z          001A
3871: currentDisk     F55F   1208 1518 1954 1965 1971 1984 2296 2382 2400 2419 3812
3934: currentFileRecord F594   2445 3181 3250 3260 3295 3380 3417 3556 3581
3867: currentUserNumber F55E   0780 0786 2091 2428
0070: DASH            002D
0264: DataBlocks      02C7   0274
0263: DataSectors     0B1C   0264
1431: DeleteFile      EB23   1428
1436: DeleteFileLoop  EB2B   1447
1124: DeleteTheLine   EA8E   1011
1127: DeleteTheLine1  EA8F   1134
3649: DEminusHL2HL    F485
3938: dirBlockIndex   F598   2718 3069
0235: DirBuffSize     0080
0250: DirectoryBlockCount 0002   0275
0237: DirectoryEntryPerRecord 0004   0278
3922: directoryIndex  F588   2582 2646 2916
3844: dirEntriesPerRecord 0004   3846
3939: dirEntryIndex   F599   2642 2693 2703 2749 3052 3054 3063 3082
3846: dirEntryMask    0003   2643 3064
3845: dirEntryShift   0002   3083
0234: DirEntrySize    0020   0237 0275
2915: DirLocationToReturnLoc F12C   1429 1948 3232
3940: dirRecord       F59B   3086 3135 3154
0222: DiskCommandBlock 0046
0221: DiskControlByte 0045
0224: DiskControlTable 0040
3277: DiskEOF         F2C2   3257 3264 3270
0418: diskf           000B
3924: diskMapIndex    F58A   3313 3344
3245: DiskRead        F287   1712
0226: DiskReadCode    0001
0231: diskSectorSize  0200   0232 0253 0261
0220: DiskStatusLocation 0043
3287: DiskWrite       F2CA   1719
3302: DiskWrite1      F2E7   3297
3361: DiskWrite2      F338   3349
3367: DiskWrite3      F33D   3306
3388: DiskWrite4      F35D   3383
3399: DiskWrite5      F36A   3392
3418: DiskWrite6      F388   3414
3420: DiskWrite7      F38A   3402 3406
0227: DiskWriteCode   0002
3282: DiskWriteSeq    F2C5   3221
3809: displayAndWait  F51A   3787 3805
2987: DivideHLby8     F16F   2034 2817 2820
0133: DMABuffer       0080   1210 3881
0063: DOLLAR          0024   0824 2097
0276: dpb3hdAL0       00C0
0277: dpb3hdAL1       0000
0272: dpb3hdBLM       000F
0271: dpb3hdBSH       0004
0278: dpb3hdCKS       0020
0275: dpb3hdDRM       007F   0278
0274: dpb3hdDSM       02C6
0273: dpb3hdEXM       0000
0280: dpb3hdNOH       0002
0279: dpb3hdOFF       0001
0270: dpb3hdSPT       0090
3906: dpbBLM          F578   3554
3905: dpbBSH          F577   3546 3579
3911: dpbCKS          F580   3134
3910: dpbDABM         F57E   2064
3909: dpbDRM          F57C   2387 3051
3908: dpbDSM          F57A   2017 2033 2049 2816
3913: dpbEnd          F584   3914
3907: dpbEXM          F579   2450 2559 3443
3912: dpbOFF          F582   2332 3118
3914: dpbSize         000F   2013
3904: dpbSPT          F575   3093
3903: dpbStart        F575   2012 3914
0450: DUMMY           E8A9   0445 0446
3823: emDisk          F53F   3814
3822: emDisk0         F533   3815
3824: emPermanent     F543   3783 3786
3857: emptyDir        00E5   1442 2087 2599 3878
3878: emptyFCB        F560   2260
3827: emReadOnlyDisk  F55A   3797
3826: emReadOnlyFile  F555   3801
3825: emSelection     F54E   3793
0137: END_OF_FILE     001A
0040: EndOfMessage    0000
1050: EndRead         EA3E   0993 0996
3930: entryDisk       F590   0391 2420
0292: EOD             FFFF   2692
0078: EQUAL_SIGN      003D
3785: erPermanent     F4F9   3777
3782: erPermanentNoWait F4F3   2374 2683
3796: erReadOnlyDisk  F50B   3779
3800: erReadOnlyFile  F511   3780
3765: errPermanent    F4E0
3759: errReadOnlyDisk F4D4   2924
3762: errReadOnlyFile F4DA   2936
3756: errSelect       F4CE   1964
3792: erSelection     F505   3778
3777: evPermanent     F4EB   3766
3779: evReadOnlyDisk  F4EF   3760
3780: evReadOnlyFile  F4F1   3763
3778: evSelection     F4ED   3757
0061: EXCLAIM_POINT   0021
1175: exitParameterByte EAC5   0510 0619 0730 0756 0781 1519 1787 1797 1808 1815 1828 2101 2161 2250 2644 2658 2917 3262 3333 3368 3411 3485 3572
1176: exitParameterWord EAC5   0347 0398 0550 0639 1496 1558 1604 1620
3933: extentValue     F593   2452 3593
0029: FALSE           0000   0923 1095 1443 1717 2023 2591 3288
0125: FCB1            005C   0126
0126: FCB2            006C
3920: fcbCopiedFlag   F586   2243 3428 3446
3840: fcbCurrentRecord 0021
3931: fcbDisk         F591   0349 0386 2422
3838: fcbDiskMapIndex 0010   2177 2182 2768 2770 3340 3504 3513 3620
3834: fcbExtIndex     000C   1433 1766 1790 1849 1901 2132 2225 2234 2471 2623 3191 3197 3434 3454 3499 3514
0015: fcbExtIndexLSB  000C
0016: fcbExtIndexMSB  000E
3833: fcbHiddenfileIndex 000A
3831: fcbLength       0020   2126 2182 2225 2275 2770 2945 3844 3858
3837: fcbRCIndex      000F   1866 2135 2153 2234 2460 2463
3932: fcbRecordCount  F592   2448 3185 3251 3381
3832: fcbROfileIndex  0009   2931
3835: fcbS1Index      000D   2279 2620
3836: fcbS2Index      000E   1772 1793 1918 2525 3454
3847: fcbShift        0005   3065
0170: fCloseFile      0010
0161: fConsoleIn      0001
0162: fConsoleOut     0002
0173: fDeleteFile     0013
0165: fGetConsoleStatus 000B
0179: fGetCurrentDisk 0019
0178: fGetLoginVector 0018
0181: fGetSetUserNumber 0020
0166: fGetVersion     000C
3324: FirstBlock      F306   3316
0176: fMakeFile       0016
0169: fOpenFile       000F
2877: FoundFreeOctet  F0FA   2847 2852 2861 2869
2883: FoundFreeOctet1 F100   2879
2885: FoundFreeOctet2 F101   2881
2887: FoundFreeOctet3 F104   2890
2893: FoundFreeOctet4 F10C   2895
0163: fPrintString    0009
0174: fReadSeq        0014
0164: fReadString     000A
0177: fRenameFile     0017
3929: fResel          F58F   0350 0380 2410
0167: fResetSystem    000D
0171: fSearchFirst    0011
0172: fSearchNext     0012
0168: fSelectDisk     000E
0180: fSetDMA         001A
0448: functionCount   0028   0359
0405: functionTable   E857   0364 0418 0448
0175: fWriteSeq       0015
3528: GetBlockNumber  F415   3268 3303
2813: GetClosestBlock F0A9   3326
2715: GetCurrentDirectoryRecord F059   1441 1865 2086 2122 2176 2609 2767 2928 2956
3629: GetDiskMap16Bit F47A   3625
3578: GetDiskMapIndex F447   3312 3529
3582: GetDiskMapIndex1 F44E   3586
3594: GetDiskMapIndex2 F45C   3601
3604: GetDiskMapIndex3 F465   3598
3618: GetDiskMapValue F467   3320 3532
2469: GetExtentAddress EF5A   2118 2449
2523: GetExtentNumberMSB EF8E   1822 2514 3394
2458: GetFcbRecordDetails EF4D   2442 3178
1848: GetFileSize     EC4A   1683
1861: GetFileSize1    EC5C   1889
1887: GetFileSize2    EC7E   1880
1890: GetFileSizeExit EC84   1863
2590: GetNextDirectoryRecord EFC9   1404 1446 1888 2628 2633 3199 3517
2608: GetNextDirectoryRecord1 EFE6   2600
1895: GetRandomRecordPosition EC86   1837 1867
2522: GetWriteFileFlagValue EF8E   2165 2534 2545
3769: GoToError       F4E6   3758 3761 3764 3767 3784
0079: GREATER_THAN    003E
0062: HASH_TAG        0023   0947
3842: highestRecordNumber 007F   3296 3401
2329: Home            EEB6   2072 2588
1147: IgnoreTheLine   EAAC   1014
3881: initDAMAddress  F565   1211 1540 2353 2909
2032: InitDisk        ED2F   1977
2079: InitDisk1       ED74   2089 2107
2102: InitDisk2       ED95   2093 2098
2513: InitializeExtentNumberMSB EF88   1254 1334 1469
0117: IOBYTE          0003   0638 0658
3537: IsAllocated     F422   3269 3304
3699: IsBitSet        F4A0   1968 2402 3721 3733
3706: IsBitSet1       F4A7   3704
3701: IsBitSetLoop    F4A1   3709
2398: IsDiskWriteProtected EEFE   2162 2922
1012: IsItDeleteTheLineU EA19
1009: IsItDeleteTheLineX EA14
1006: IsItPrintToggle EA0F
1096: IsItPrintToggle1 EA70   1094
1000: IsItRubout      EA05
1003: IsPhysicalEOL   EA0A
0808: IsPrintableASCII E92C   0502 0838
1081: ItIsPhysicalEOL EA5D   1005
1088: ItIsPrintToggle EA65   1008
1069: ItIsRubout      EA52   1002
1165: keyboardByte    EABE   0797 0906 0939
0065: L_PAREN         0028
2498: Left            EF79   2500
0082: LEFT_ARROW      005F
0098: LEFT_CURLY      007B
0146: LengthInBytes   2000   0147 0151 0261
0147: LengthInK       0009
0077: LESS_THAN       003C
0058: LF              000A   0811 0892 0964 0994
1110: LL1             EA7E   1118
0032: LO_NIBBLE_MASK  000F   0785 1914
3880: loggedDisks     F563   1206 1495 1967 1973 1975
2845: LookRight       F0CE   2855
2256: MakeNewFile     EE62   1471 1806 3473
2062: Mark4Directory  ED5C   2054
3852: maxExtValue     001F   2568 3438
0149: MemorySize      0040   0151
3015: Merge           F183   2205 2207
2184: MergeAllocationMaps EE07   2222
2199: MergeDirEntryNot0 EE1B   2196
2194: MergeFCBisNot0  EE15   2192
2218: MergeMapLoop    EE37   2202
2204: MergeWordMaps   EE22   2187
3853: moduleMask      000F   3459
2999: MultiplyHLby8   F179   2048 2901
0262: myOffset        0001   0263 0279
3855: nameLength      000F   1336 2112 2170 2269 2275 3464
3858: NEXT_RECORD     0020   1761 1836 2463 3859
2655: NoDirRecordsMatch F028   2594 2606
2873: NoFreeBlocks    F0F6   2862 2870
2857: NoMoreLeft      F0E0   2853
2859: NoMoreLeftLoop  F0E1   2863
2865: NoMoreRight     F0EB   2848
2867: NoMoreRightLoop F0EC   2871
2427: NoSelect        EF2D   2417
0935: NothingWaiting  E9B8   0926
0054: NULL            0000
0246: NumberOfHeads   0002   0257 0259 0270 0280
0243: NumberOfLogicalDisks 0004
0031: OFF             0000
0030: ON              FFFF
2111: OpenFile        ED9F   1256 1796
3426: OpenNextExt     F38D   3258 3409
3463: OpenNextExt1    F3C1   3448
3480: OpenNextExt2    F3DF   3450 3467
3482: OpenNextExt3    F3E2   3477
3489: OpenNextExtError F3EA   3460 3471 3476
3453: OpenNextModule  F3B6   3440
2151: OpenSetRecordCount EDD9   2147 2149
1174: paramDE         EAC3   0338 0384 0681 0973 1052 1107 1328 1402 1539 1730 1835 1852 2125 2152 2180 2258 2261 2266 2278 2411 2429 2459 2470 2524 2585 2953 3292 3339 3433 3502 3619
1173: paramE          EAC2   0340 0392 0777 1953 2415
0064: PERCENT         0025
0071: PERIOD          002E
0120: Pg0CurentDisk   0004
0119: Pg0CurentUser   0004   0120
0068: PLUS_SIGN       002B
0822: Print           E93B   0684 0831 3816 3818
1167: printEchoFlag   EABF   0880 0919 1091
0080: QMARK           003F   1330 2616
1338: QMarkFind       EB05   1331
0066: R_PAREN         0029
0113: RAM             0000   0115 0116 0117 0119 0122 0125 0128 0133 0135
3859: RANDOM_REC_FIELD 0021   1732 1838 1853
1709: RandomDiskRead  EB94   1664
1716: RandomDiskWrite EB9D   1676
1726: RandomSeek      EBA6   1711 1718
1780: RandomSeekClose EBEA   1770
1825: RandomSeekError EC2F   1759
1818: RandomSeekErrorBadSeek EC28   1789 1805 1810
1812: RandomSeekExit  EC22   1779 1799
2371: ReadBuffer      EEDE   3041 3274
3050: ReadDirectory   F19A   2082 2592
3062: ReadDirectory0  F1AE   3057
3066: ReadDirectory1  F1B5   3068
3039: ReadDirRecord   F191   3075
1030: ReadEchoRubOut  EA26   1078
3921: readModeFlag    F587   3247 3289 3469
0983: ReadNext        E9ED   1047 1073 1099 1121
0986: ReadNext0       E9EF   1066 1085
3879: readOnlyVector  F561   1205 1603 2380 2385 2399
3239: ReadSeq         F282   3213
0970: ReadString      E9E0   0714 1131 1153
3749: ReAlignMap1     F4C7   3747
3744: ReAlignMapLoop  F4C1   3752
3742: ReAlignVector   F4C0   3725
3267: RecordOK        F2AC   3254
0255: RecordsPerBlock 0010
0239: RecordsPerExtent 0080   2150 3256 3842
0232: recordsPerSector 0004   0255 0270
3496: Rename          F3F0   3231
3508: Rename1         F401   3518
1102: RepeatLine      EA75   1017
2408: ReselectDisk    EF09   1255 1286 1335 1403 1427 1470 1663 1675 1682 1946 3212 3220 3230
2544: ResetFileWriteFlag EF9D   3363
3731: ResetVectorBit  F4B9
0379: ReturnToCaller  E832   0353
0395: ReturnToCaller1 E84D   0382 0388 0617
2506: Right           EF83   2504 2508
2315: RotateAndReplace EEAF   2318
2973: RotateRightHLbyB F162   2981
2978: RotateRightHLbyB1 F168   2976
0083: RUBOUT          007F   1001
2765: ScanDiskMap     F07D   1444 2105
2772: ScanDiskMap0    F087   2804
2797: ScanDiskMap2    F09E   2786
2788: ScanDiskMapWord F098   2780
3926: searchAddress   F58C   1401 2586 2596
2580: SearchForDirectoryRecord EFB4   1339 1434 1850 2113 2171 2263 3192 3465 3500
3925: searchLength    F58B   2583 2610
0284: SectorMask      0003
0249: SectorsPerBlock 0004   0253 0255 0258 0264 0284
0259: SectorsPerCylinder 0024   0262 0263
0248: SectorsPerTrack 0012   0257 0259 0270
3090: Seek            F1D9   3087 3273 3374
3095: Seek0           F1E3   3099
3081: SeekDir         F1C8   2245 2960 3074
1962: Select          ECC8   1213 1958
1952: SelectCurrent   ECBC   0393 1237 2425
1983: SelectDisk      ECE9   1963
2026: SelectDisk1     ED2B   2022
0076: SEMICOLON       003B
3923: seqReadFlag     F589   1728 3179 3241 3284 3404
3545: SetActualRecordAdd F428   3272 3373
3549: SetActualRecordAdd1 F42E   3552
3190: SetAttributes   F255   1947
3193: SetAttributes1  F25A   3200
2057: SetBitLoop      ED57   2060
2294: SetCurrentDiskBit EE9C
2352: SetDataDMA      EED0   1212 1541 2670 3042
2358: SetDirDMA       EED5   2667 3040
2729: SetDirectoryEntry F067   2106 2282
2379: SetDiskReadOnly EEE6   1585 3165
2363: SetDMA          EED8   2354
2691: SetEndDirectory F049   2077 2587 2656 3058
2533: SetFileWriteFlag EF97   1830 2130 2285 3491
3570: SetLowReturnTo1 F441   3278 3298 3490
3169: SetNewCheckSum  F241   3158
2635: SetNextPosition F010   2617 2621 2629
1834: SetRandomRecord EC37   1689
2441: SetRecordVars   EF36   3249 3294 3483
2480: SetResetMapBit  EF62   2800
0784: SetUserNumber   E91B   0779
3719: SetVectorBit    F4B0   1974 2384
3002: ShiftLeftHLbyB  F17B   3006
3672: ShiftLeftHLbyC  F499   2299
3674: ShiftLeftHLbyC0 F49A   3678
2990: ShiftRightHLbyB F171   2490 2994 3084
3658: ShiftRightHLbyC F48C
3660: ShiftRightHLbyC0 F48D   3670
0961: showCRLF        E9D6   0949 1084 3811
0946: showHashCRLF    E9C0   1105 1148
0950: showHashCRLF1   E9C8   0957
0072: SLASH           002F
0055: SOH             0001
0060: SPACE           0020   0817 0859 0889 0955 1139 1149 1151
0291: STACK_SIZE      0020   3946
3946: stackBottom     F59D
1170: startingColumn  EAC0   0952 0972 1128
2748: StillInDirectory F070   2604 2730 3163
0261: SystemSectors   0011   0262
0057: TAB             0009   0813 0854
0852: TabOut          E958   0507 0529 0829 0839
0858: TabOut0         E95E   0863
2614: TestNextPosition EFEF   2640
0924: ToggleFlag1     E9A9   0922
0123: TopRAM          0007
0258: TotalNumberOfBlocks 02D0
0257: TotalNumberOfSectors 0B40   0258 0263
0135: TPA             0100
0247: TracksPerHead   0050   0257
0028: TRUE            FFFF   0920 0941 1092 1710 2020 2027 2081 2104 2242 2409 2664 3246
0081: UNDER_SCORE     005F
3177: UpdateRecordVars F243   3275 3408 3421
1163: usersStack      EABC   0342 0396
1285: vCloseFile      EAEC   0423
1681: vComputeFileSize EB8A   0442
0500: vConsoleIn      E8AD   0407
0528: vConsoleOut     E8BE   0408
1426: vDeleteFile     EB1A   0426
0605: vDirectConIO    E8D1   0412
0614: vDirectConIO1   E8D9   0608
0290: VERSION         0020   0755
1326: vFindFirst      EAF2   0424
1400: vFindNext       EB0B   0425
1556: vGetAllocAddr   EB65   0434
0728: vGetConsoleStatus E900   0417
1517: vGetCurrentDisk EB55   0432
1618: vGetDiskParamBlock EB76   0438
0637: vGetIOBYTE      E8E7   0413
1494: vGetLoginVector EB4E   0431
1602: vGetReadOnlyMap EB6F   0436
0776: vGetSetUserNumber E90D   0439
0754: vGetVersion     E907   0419
0582: vListOut        E8CD   0411
1468: vMakeFile       EB45   0429
1253: vOpenFile       EAE3   0422
0680: vPrintString    E8F3   0415
0567: vPunchOut       E8C9   0410
0548: vReaderIn       E8C2   0409
1662: vReadRandom     EB7E   0440
3211: vReadSeq        F26B   0427
0713: vReadString     E8FC   0416
3229: vRenameFile     F279   0430
1646: vResetDrive     EB7D   0444
1203: vResetSystem    EAC7   0420
1236: vSelectDisk     EAE0   0421
1538: vSetDMA         EB5C   0433
1945: vSetFileAttributes ECB3   0437
0657: vSetIOBYTE      E8EE   0414
1688: vSetRandomRecord EB90   0443
0468: vSystemReset    E8AA   0406
1584: vWriteProtectDisk EB6C   0435
1674: vWriteRandom    EB84   0441
1702: vWriteRandom0Fill EB93   0447
3219: vWriteSeq       F272   0428
3804: waitB4boot      F514   3794 3798
0115: WarmBoot        0000   0934 1043 3789 3806
0035: WORD            0002   1174 1176
0195: WriteAllocated  0000   3305
2680: WriteBuffer     F041   2669 3377
0197: WriteCleanBuffer 0002   3362
2662: WriteDir        F031   1445 2246 2961
0196: WriteDirectory  0001   2668
3854: writeFlagMask   0080
3955: Z_HighestLocation F5DD   3956
3956: Z_MemoryLeft    0022
0039: ZERO            0000
