0001: E800         ;     File created by MakeZ80Source on Tue Sep 18 12:41:03 EDT 2018 from:
0002: E800         ;     C:\Users\admin\Dropbox\Resources\CPM\CurrentOS\8080\BDOSX.asm
0003: E800         ; BDOS.Z80
0004: E800
0005: E800
0006: E800         ; 2019-01-11 - BDOS 0.B  - Function 0-A Refactored to Z80 idiom
0007: E800         ; 2018-12-28 Started to refactor to Z80 idiom
0008: E800         ; 2018-03-31 added vector for BDOS Call 5 -ListOut
0009: E800         ; 2018-03-02 Refactored the CP/M Suite
0010: E800         ; 2018-02-12 fixed allocate 16 bit problem
0011: E800         ; 2014-01-16 extended from part of newOS (newBDOS)
0012: E800         ; 2014-03-14  :  Frank Martyn
0013: E800
0014: E800
0015: E800                        Include ./stdHeader.Z80
0016: E800         ;<<<<<<<<<<<<<<<<<<<<<<< Include >>>>>>>>>>>>>>>>
0017: E800         ;     File created by MakeZ80Source on Mon Sep 17 16:25:01 EDT 2018 from:
0018: E800         ;     C:\Users\admin\Dropbox\Resources\CPM\CurrentOS\8080\stdHeader.asm
0019: E800         ; stdHeader.asm
0020: E800         ; standard equates
0021: E800
0022: E800         ; 2017-03-02 Refactored the CP/M Suite
0023: E800
0024: E800
0025: E800             TRUE       EQU    -1                   ; not false
0026: E800             FALSE      EQU    0000H
0027: E800             ON         EQU    -1
0028: E800             OFF        EQU    0000H
0029: E800             LO_NIBBLE_MASK EQU    0FH                  ; mask used to obtain the bytes low four bits
0030: E800
0031: E800             BYTE       EQU    1                    ; number of bytes for "byte" type
0032: E800             WORD       EQU    2                    ; number of bytes for "word" type
0033: E800
0034: E800
0035: E800             ASCII_MASK EQU    7FH                  ; Ascii mask 7 bits
0036: E800             ZERO       EQU    00H                  ; Zero
0037: E800             EndOfMessage EQU    00H
0038: E800
0039: E800             CTRL_C     EQU    03H                  ; ETX
0040: E800             CTRL_E     EQU    05H                  ; physical eol
0041: E800             CTRL_H     EQU    08H                  ; backspace
0042: E800             CTRL_K     EQU    0BH                  ; VT - Vertical tab
0043: E800             CTRL_L     EQU    0CH                  ; FF - Form feed
0044: E800             CTRL_P     EQU    10H                  ; prnt toggle
0045: E800             CTRL_R     EQU    12H                  ; repeat line
0046: E800             CTRL_S     EQU    13H                  ; X-OFF stop/start screen
0047: E800             CTRL_U     EQU    15H                  ; line delete
0048: E800             CTRL_X     EQU    18H                  ; =ctl-u
0049: E800             CTRL_Z     EQU    1AH                  ; end of file
0050: E800
0051: E800             NULL       EQU    00H                  ; Null
0052: E800             SOH        EQU    01H                  ; Start of Heading
0053: E800             BELL       EQU    07H                  ; Bell
0054: E800             TAB        EQU    09H                  ; Tab
0055: E800             LF         EQU    0AH                  ; Line Feed
0056: E800             CR         EQU    0DH                  ; Carriage Return
0057: E800             SPACE      EQU    20H                  ; Space
0058: E800             EXCLAIM_POINT EQU    21H                  ; Exclamtion Point
0059: E800             HASH_TAG   EQU    23H                  ; Sharp sign #
0060: E800             DOLLAR     EQU    24H                  ; Dollar Sign
0061: E800             PERCENT    EQU    25H                  ; Percent Sign
0062: E800             L_PAREN    EQU    28H                  ; Left Paenthesis (
0063: E800             R_PAREN    EQU    29H                  ; Right Paenthesis )
0064: E800             ASTERISK   EQU    2AH                  ; Asterisk *
0065: E800             PLUS_SIGN  EQU    2BH                  ; Plus sign +
0066: E800             COMMA      EQU    2CH                  ; Comma
0067: E800             DASH       EQU    2DH                  ; Dash Hyphen -
0068: E800             PERIOD     EQU    2EH                  ; Period
0069: E800             SLASH      EQU    2FH                  ; /
0070: E800             ASCII_ZERO EQU    30H                  ; zero
0071: E800             COLON      EQU    3AH                  ; Colon
0072: E800
0073: E800             SEMICOLON  EQU    3BH                  ; Semi Colon
0074: E800             LESS_THAN  EQU    3CH                  ; Less Than <
0075: E800             EQUAL_SIGN EQU    3DH                  ; Equal Sign
0076: E800             GREATER_THAN EQU    3EH                  ; Greater Than >
0077: E800             QMARK      EQU    3FH                  ; Question Mark
0078: E800             UNDER_SCORE EQU    5FH                  ; under score _
0079: E800             LEFT_ARROW EQU    5FH                  ; Left Arrow ?
0080: E800             RUBOUT     EQU    7FH                  ; Delete Key
0081: E800
0082: E800
0083: E800             ASCII_A    EQU    'A'
0084: E800             ASCII_C    EQU    'C'
0085: E800             ASCII_K    EQU    'K'
0086: E800             ASCII_N    EQU    'N'
0087: E800             ASCII_Q    EQU    'Q'
0088: E800             ASCII_R    EQU    'R'
0089: E800             ASCII_W    EQU    'W'
0090: E800             ASCII_Y    EQU    'Y'
0091: E800             CARET      EQU    '^'
0092: E800             ASCII_LO_A EQU    'a'
0093: E800             ASCII_LO_K EQU    'k'
0094: E800             ASCII_LO_P EQU    'p'
0095: E800             LEFT_CURLY EQU    '{'                  ; Left curly Bracket
0096: E800
0097: E800         ;<<<<<<<<<<<<<<<<<<<<<<< Include >>>>>>>>>>>>>>>>
0098: E800                        Include ./osHeader.Z80
0099: E800         ;<<<<<<<<<<<<<<<<<<<<<<< Include >>>>>>>>>>>>>>>>
0100: E800         ;     File created by MakeZ80Source on Mon Sep 17 16:25:47 EDT 2018 from:
0101: E800         ;     C:\Users\admin\Dropbox\Resources\CPM\CurrentOS\8080\osHeader.asm
0102: E800         ; osHeader.Z80
0103: E800
0104: E800         ; 2018-12-28 Changed BDOSEntry to remove dead space in BDOS
0105: E800         ; 2017-03-02 Refactored the CP/M Suite
0106: E800
0107: E800         ; Contains the Equates used by the CP/M system
0108: E800
0109: E800         ;------------------------Page Zero Constants ---------------------------------
0110: E800             RAM        EQU    0                    ; Start of RAM ( and the Base page)
0111: E800
0112: E800             WarmBoot   EQU    RAM + 0              ; Contains a JMP instruction to warm boot in BIOS
0113: E800             BIOSPAGE   EQU    RAM + 2              ; BIOS Jump Vector Page
0114: E800             IOBYTE     EQU    RAM + 3              ; Input/Output redirection byte
0115: E800
0116: E800             Pg0CurentUser EQU    RAM + 4              ; Current user ( bits 7-4)
0117: E800             Pg0CurentDisk EQU    Pg0CurentUser        ; Default logical disk (bits 0-3)
0118: E800
0119: E800             BDOSE      EQU    RAM + 5              ; Contains a JMP to BDOS entry
0120: E800             TopRAM     EQU    BDOSE+2              ; Top page of usable RAM
0121: E800
0122: E800             FCB1       EQU    RAM + 05CH           ; File Control Block #1
0123: E800             FCB2       EQU    FCB1 + 16            ; File Control Block #2
0124: E800
0125: E800             ComTail    EQU    RAM + 080H           ; Complete command tail
0126: E800             ComTailCount EQU    ComTail + 1          ; Count of the number of char in tail
0127: E800             ComTailChars EQU    ComTailCount + 1     ; Complete Command tail up-cased, w/o trailing CR
0128: E800         ;-----------------------------------------------------------------------
0129: E800
0130: E800             DMABuffer  EQU    RAM + 080H           ; Default "DMA" address used as buffer
0131: E800         ;-----------------------------------------------------------------------
0132: E800             TPA        EQU    RAM + 0100H          ; Start of Transient program Area
0133: E800         ;-----------------------------------------------------------------------
0134: E800             END_OF_FILE EQU    1AH                  ; end of file
0135: E800         ;-----------------------------------------------------------------------
0136: E800
0137: E800         ;--------------- CP/M Constants -----------------------------------------
0138: E800
0139: E800             CCPLength  EQU    0800H                ; Constant
0140: E800             BDOSLength EQU    0E00H                ; Constant 0E00H
0141: E800             BIOSLength EQU    0A00H                ; Constant 0900H
0142: E800
0143: E800             LengthInBytes EQU    CCPLength + BDOSLength + BIOSLength
0144: E800             LengthInK  EQU    (LengthInBytes/1024) + 1
0145: E800
0146: E800             MemorySize EQU    64
0147: E800
0148: E800             CCPEntry   EQU    (MemorySize * 1024) - LengthInBytes
0149: E800
0150: E800             BDOSBase   EQU    CCPEntry + CCPLength
0151: E800             BDOSEntry  EQU    BDOSBase
0152: E800
0153: E800             BIOSBase   EQU    BDOSBase + BDOSLength
0154: E800             BIOSStart  EQU    CCPEntry + CCPLength + BDOSLength
0155: E800         ;-----------------------------------------------------------------------
0156: E800
0157: E800         ;------------------- BDOS System Call Equates --------------------------
0158: E800             fConsoleIn EQU    01H                  ; rcharf - Console Input
0159: E800             fConsoleOut EQU    02H                  ; pcharf - Console Output
0160: E800             fPrintString EQU    09H                  ; pbuff	- Print String
0161: E800             fReadString EQU    0AH                  ; rbuff	- Read Console String
0162: E800             fGetConsoleStatus EQU    0BH                  ; breakf - Get Console Status
0163: E800             fGetVersion EQU    0CH                  ; liftf	- Return Version Number
0164: E800             fResetSystem EQU    0DH                  ; initf	- Reset Disk System
0165: E800             fSelectDisk EQU    0EH                  ; self	- Select Disk
0166: E800             fOpenFile  EQU    0FH                  ; openf	- Open File
0167: E800             fCloseFile EQU    10H                  ; closef - Close File
0168: E800             fSearchFirst EQU    11H                  ; searf	- Search For First
0169: E800             fSearchNext EQU    12H                  ; searnf - Search for Next
0170: E800             fDeleteFile EQU    13H                  ; delf - Delete File
0171: E800             fReadSeq   EQU    14H                  ; dreadf - Read Sequential
0172: E800             fWriteSeq  EQU    15H                  ; dwritf - Write Sequential
0173: E800             fMakeFile  EQU    16H                  ; makef	- Make File
0174: E800             fRenameFile EQU    17H                  ; renf	- Rename File
0175: E800             fGetLoginVector EQU    18H                  ; logf	- Return Login Vector
0176: E800             fGetCurrentDisk EQU    19H                  ; cself	- Return Current Disk
0177: E800             fSetDMA    EQU    1AH                  ; dmaf	- Set DMA address
0178: E800             fGetSetUserNumber EQU    20H                  ; userf	- Set/Get User Code
0179: E800         ;-----------------------------------------------------------------------
0180: E800
0181: E800
0182: E800
0183: E800
0184: E800
0185: E800         ;*******************************************************************************
0186: E800         ; These are the values handed over by the BDOS when it calls the Writer operation
0187: E800         ; The allocated.unallocated indicates whether the BDOS is set to write to an
0188: E800         ; unallocated allocation block (it only indicates this for the first 128 byte
0189: E800         ; sector write) or to an allocation block that has already been allocated to a
0190: E800         ; file. The BDOS also indicates if it is set to write to the file directory
0191: E800         ;*******************************************************************************
0192: E800             WriteAllocated EQU    00H
0193: E800             WriteDirectory EQU    01H
0194: E800             WriteCleanBuffer EQU    02H
0195: E800
0196: E800
0197: E800         ;<<<<<<<<<<<<<<<<<<<<<<< Include >>>>>>>>>>>>>>>>
0198: E800                        Include ./diskHeader.Z80
0199: E800         ;<<<<<<<<<<<<<<<<<<<<<<< Include >>>>>>>>>>>>>>>>
0200: E800         ;     File created by MakeZ80Source on Mon Sep 17 16:26:22 EDT 2018 from:
0201: E800         ;     C:\Users\admin\Dropbox\Resources\CPM\CurrentOS\8080\diskHeader.asm
0202: E800         ; diskHeader.asm
0203: E800
0204: E800         ; 2017-03-02 Refactored the CP/M Suite
0205: E800
0206: E800         ; needs osHeader.asm declared before this is used !!!!!!!
0207: E800
0208: E800         ; Contains the Equates used by the CP/M system to handle disks
0209: E800
0210: E800
0211: E800         ;*******************************************************************************
0212: E800         ;
0213: E800         ;     Disk related values
0214: E800         ;
0215: E800         ;
0216: E800         ;*******************************************************************************
0217: E800             DiskStatusLocation EQU    043H                 ; status after disk I/O placed here
0218: E800             DiskControlByte EQU    045H                 ; control byte for disk I/O
0219: E800             DiskCommandBlock EQU    046H                 ; Control Table Pointer
0220: E800         ; for boot
0221: E800             DiskControlTable EQU    0040H
0222: E800
0223: E800             DiskReadCode EQU    01H                  ; Code for Read
0224: E800             DiskWriteCode EQU    02H                  ; Code for Write
0225: E800
0226: E800
0227: E800             cpmRecordSize EQU    080H                 ; (128) record size that CP/M uses
0228: E800             diskSectorSize EQU    200H                 ; (512) size of physical disk I/O
0229: E800             recordsPerSector EQU    diskSectorSize/cpmRecordSize
0230: E800
0231: E800             DirEntrySize EQU    20H                  ; (32)
0232: E800             DirBuffSize EQU    cpmRecordSize
0233: E800
0234: E800             DirectoryEntryPerRecord EQU    cpmRecordSize / DirEntrySize
0235: E800
0236: E800             RecordsPerExtent EQU    080H                 ; extent Record capacity
0237: E800
0238: E800
0239: E800         ;-------------------------------------------------------------------------------------
0240: E800             NumberOfLogicalDisks EQU    4                    ; max number of disk in this system
0241: E800
0242: E800         ;----------------------3.5 Double Density Disk Geometry----------------------------------------
0243: E800             NumberOfHeads EQU    02H                  ; number of heads
0244: E800             TracksPerHead EQU    50H                  ; 80
0245: E800             SectorsPerTrack EQU    12H                  ; 18 -  1 head only
0246: E800             SectorsPerBlock EQU    04H                  ; 2048 bytes
0247: E800             DirectoryBlockCount EQU    02H                  ;
0248: E800         ;-----------------------------------------------------------------------
0249: E800
0250: E800             BlockSize  EQU    SectorsPerBlock * 	diskSectorSize ; Size in Bytes
0251: E800
0252: E800             RecordsPerBlock EQU    recordsPerSector * SectorsPerBlock
0253: E800
0254: E800             TotalNumberOfSectors EQU    SectorsPerTrack * TracksPerHead * NumberOfHeads
0255: E800             TotalNumberOfBlocks EQU    TotalNumberOfSectors / SectorsPerBlock
0256: E800             SectorsPerCylinder EQU    SectorsPerTrack * NumberOfHeads
0257: E800
0258: E800             SystemSectors EQU    LengthInBytes / diskSectorSize + 1 ; need to account for boot sector
0259: E800             myOffset   EQU    (SystemSectors / SectorsPerCylinder) + 1 ;
0260: E800             DataSectors EQU    TotalNumberOfSectors - (SectorsPerCylinder * myOffset)
0261: E800             DataBlocks EQU    DataSectors / 	SectorsPerBlock
0262: E800
0263: E800         ;-----------------------------------------------------------------------
0264: E800         ;; Disk block parameters for F3HD - 3.5 HD   1.44 MB Diskette
0265: E800         ;-----------------------------------------------------------------------
0266: E800         ;dpb3hdSPT				EQU		0090H			; cpmRecords per track- (144)
0267: E800             dpb3hdSPT  EQU    recordsPerSector * SectorsPerTrack * NumberOfHeads ; SPT - records per Clynder
0268: E800             dpb3hdBSH  EQU    04H                  ; Block Shift Factor - BlockSize = 128 * (2**BSH)											; BSH = Log2(BlockSize/cpmRecordSize)
0269: E800             dpb3hdBLM  EQU    0FH                  ; BlockMask = (2**BSH) -1
0270: E800             dpb3hdEXM  EQU    00H                  ; Extent mask = (PhysicalExtents/LogicalExtents) - 1
0271: E800             dpb3hdDSM  EQU    DataBlocks -1        ; Maximum allocation block number (710)
0272: E800             dpb3hdDRM  EQU    ((BlockSize *  DirectoryBlockCount)	/	DirEntrySize) -1 ; DRM Number of directory entries - 1 (127)
0273: E800             dpb3hdAL0  EQU    0C0H                 ; Bit map for reserving 1 alloc. block
0274: E800             dpb3hdAL1  EQU    00H                  ;  for each file directory
0275: E800             dpb3hdCKS  EQU    (dpb3hdDRM +1)/ DirectoryEntryPerRecord ; Disk change work area size (32)
0276: E800             dpb3hdOFF  EQU    myOffset             ; Number of tracks before directory
0277: E800             dpb3hdNOH  EQU    NumberOfHeads
0278: E800
0279: E800         ;*******************************************************************************
0280: E800
0281: E800             SectorMask EQU    SectorsPerBlock - 1
0282: E800
0283: E800         ;***************************************************************************
0284: E800
0285: E800         ;<<<<<<<<<<<<<<<<<<<<<<< Include >>>>>>>>>>>>>>>>
0286: E800
0287: E800             VERSION    EQU    20H                  ; Version 2.0
0288: E800             STACK_SIZE EQU    20H                  ; Make stack big enough
0289: E800             EOD        EQU    -1                   ; End of Directory
0290: E800
0291: E800         ;************************ BIOS Function Constants ***************************;
0292: E800             bcBoot     EQU    BIOSStart+3*0        ; Cold Boot function	             ;
0293: E800             bcWboot    EQU    BIOSStart+3*1        ; Warm Boot function                 ;
0294: E800             bcConst    EQU    BIOSStart+3*2        ; Console Status function            ;
0295: E800             bcConin    EQU    BIOSStart+3*3        ; Console Input function             ;
0296: E800             bcConout   EQU    BIOSStart+3*4        ; Console Output function            ;
0297: E800             bcList     EQU    BIOSStart+3*5        ; List Output function               ;
0298: E800             bcPunch    EQU    BIOSStart+3*6        ; Punch Output function              ;
0299: E800             bcReader   EQU    BIOSStart+3*7        ; Reader Input function              ;
0300: E800             bcHome     EQU    BIOSStart+3*8        ; Disk Home function                 ;
0301: E800             bcSeldsk   EQU    BIOSStart+3*9        ; Select Disk function               ;
0302: E800             bcSettrk   EQU    BIOSStart+3*10       ; Set Track function                 ;
0303: E800             bcSetsec   EQU    BIOSStart+3*11       ; Set Sector function                ;
0304: E800             bcSetdma   EQU    BIOSStart+3*12       ; Set DMA function                   ;
0305: E800             bcRead     EQU    BIOSStart+3*13       ; Read Disk function                 ;
0306: E800             bcWrite    EQU    BIOSStart+3*14       ; Write Disk function                ;
0307: E800             bcListst   EQU    BIOSStart+3*15       ; List Status function               ;
0308: E800             bcSectran  EQU    BIOSStart+3*16       ; Sector Translate                   ;
0309: E800         ;************************ BIOS Function Constants ***************************;
0310: E800
0311: E800         ;============================================================================;
0312: E800         ;	BDOS                                                                     ;
0313: E800         ; Calling into   :                                                           ;
0314: E800         ;					Register  C - Contains BDOS Function Code                ;
0315: E800         ;					Register  A - Holds the Byte argument if any             ;
0316: E800         ;					Register DE - Holds the Word argument if any             ;
0317: E800         ; Returning from :                                                           ;
0318: E800         ;					Register  A - The Byte return value if any               ;
0319: E800         ;					Register HL - The Word return value if any               ;
0320: E800         ;                   ( Register A=L and B=H)                                  ;
0321: E800         ;============================================================================;
0322: E800
0323: E800
0324: E800                        ORG    BDOSBase
0325: E800
0326: E800         ;===========================BDOS Entry=======================================;
0327: E800         ;BDOSEntry:                                                                  ;
0328: E800         ;
0329: E800         ;
0330: E800             BdosStart:                      ;
0331: E800         ;	LD		A,C                                                              ;
0332: E800         ; 	LD		(FunctionValue),A			; Save the function number           ;
0333: E800         ;
0334: E800         ; Save Calling Arguments                                                     ;
0335: E800 ED 53 C0 EA               LD     (paramDE),DE         ; Save the Word Argument             ;
0336: E804 7B                     LD     A,E                  ;
0337: E805 32 BF EA               LD     (paramE),A           ; Save the Byte argument             ;
0338: E808         ; Save users Stack pointer                                                   ;
0339: E808 ED 73 B9 EA               LD     (usersStack),SP      ; We will use our own stack          ;
0340: E80C         ;
0341: E80C         ; initialize variables                                                       ;
0342: E80C 21 00 00               LD     HL,0000H             ;
0343: E80F 22 C2 EA               LD     (exitParameterWord),HL ; Assume all is well for return      ;
0344: E812 AF                     XOR    A                    ;
0345: E813 32 69 F5               LD     (fcbDisk),A          ; Initialize to 00                   ;
0346: E816 32 67 F5               LD     (fResel),A           ; Clear re selection flag            ;
0347: E819         ;
0348: E819         ; Set up for return to caller when Function Completes                        ;
0349: E819 21 2F E8               LD     HL,ReturnToCaller    ;
0350: E81C E5                     PUSH   HL                   ;Set up to ReturnToCaller            ;
0351: E81D         ;
0352: E81D         ; is it a valid function number ?	                                         ;
0353: E81D         ;	LD		A,(FunctionValue)			; Get the Function Number            ;
0354: E81D 79                     LD     A,C                  ;
0355: E81E FE 28                  CP     functionCount        ; make sure its a good number        ;
0356: E820 D0                     RET    NC                   ; exit if not a valid function       ;
0357: E821         ;
0358: E821         ; Calculate the index and get vector to go to	                             ;
0359: E821 4B                     LD     C,E                  ; Assume byte argument               ;
0360: E822 21 54 E8               LD     HL,functionTable     ; Get table base                     ;
0361: E825 5F                     LD     E,A                  ; Function number in E               ;
0362: E826 16 00                  LD     D,0                  ;
0363: E828 19                     ADD    HL,DE                ; Have byte location                 ;
0364: E829 19                     ADD    HL,DE                ;  but we want a Word offset         ;
0365: E82A 5E                     LD     E,(HL)               ; Get LSB of vector                  ;
0366: E82B 23                     INC    HL                   ;
0367: E82C 56                     LD     D,(HL)               ; Get MSB of vector                  ;
0368: E82D EB                     EX     DE,HL                ; Vector now in HL                   ;
0369: E82E         ;
0370: E82E         ; Vector to Function is in HL                                                ;
0371: E82E E9                     JP     (HL)                 ; Put it into the Program Counter    ;
0372: E82F         ;===========================BDOS Entry=======================================;
0373: E82F         ;===========================BDOS Exit =======================================;
0374: E82F         ;arrive here at end of processing to return to user                          ;
0375: E82F             ReturnToCaller:                      ;
0376: E82F 3A 67 F5               LD     A,(fResel)           ; get re-selection flag              ;
0377: E832 B7                     OR     A                    ; is it set?                         ;
0378: E833 28 15                  JR     Z,ReturnToCaller1    ;
0379: E835         ;re-selection  may have taken place                                         ;
0380: E835 2A C0 EA               LD     HL,(paramDE)         ;
0381: E838 36 00                  LD     (HL),0               ;
0382: E83A 3A 69 F5               LD     A,(fcbDisk)          ;
0383: E83D B7                     OR     A                    ; Disk = 0?                          ;
0384: E83E 28 0A                  JR     Z,ReturnToCaller1    ; exit if yes                  		 ;
0385: E840         ;
0386: E840 77                     LD     (HL),A               ;
0387: E841 3A 68 F5               LD     A,(entryDisk)        ; get back original Disk             ;
0388: E844 32 BF EA               LD     (paramE),A           ; and select it                      ;
0389: E847 CD 4E EC               CALL   SelectCurrent        ;
0390: E84A         ;
0391: E84A             ReturnToCaller1:                      ;
0392: E84A 2A B9 EA               LD     HL,(usersStack)      ;
0393: E84D F9                     LD     SP,HL                ; restore callers stack              ;
0394: E84E 2A C2 EA               LD     HL,(exitParameterWord) ;
0395: E851 7D                     LD     A,L                  ;
0396: E852 44                     LD     B,H                  ; BA = exitParameterWord             ;
0397: E853 C9                     RET                         ;
0398: E854         ;===========================BDOS Exit =======================================;
0399: E854
0400: E854         ;++++++++++++++++++++++++++++ Function Vector Table +++++++++++++++++++++++++;
0401: E854             functionTable:                      ;
0402: E854 A7 E8                  DW     vSystemReset         ;   0 - System Reset                 ;
0403: E856 AA E8                  DW     vConsoleIn           ;   1 - Console Input                ;
0404: E858 BB E8                  DW     vConsoleOut          ;   2 - Console Output               ;
0405: E85A BF E8                  DW     vReaderIn            ;   3 - Reader Input                 ;
0406: E85C C6 E8                  DW     vPunchOut            ;   4 - Punch Output                 ;
0407: E85E CA E8                  DW     vListOut             ;   5 - List Output                  ;
0408: E860 CE E8                  DW     vDirectConIO         ;   6 - Direct Console I/O           ;
0409: E862 E4 E8                  DW     vGetIOBYTE           ;   7 - Get I/O Byte                 ;
0410: E864 EB E8                  DW     vSetIOBYTE           ;   8 - Set I/O Byte                 ;
0411: E866 F0 E8                  DW     vPrintString         ;   9 - Print String                 ;
0412: E868 F9 E8                  DW     vReadString          ;   A - Read Console String          ;
0413: E86A FD E8                  DW     vGetConsoleStatus    ;   B - Get Console Status           ;
0414: E86C             diskf      EQU    ($-functionTable)/2  ; disk functions                     ;
0415: E86C 04 E9                  DW     vGetVersion          ;   C - Return Version Number        ;
0416: E86E C4 EA                  DW     vResetSystem         ;   D - Reset Disk System            ;
0417: E870 0A EB                  DW     vSelectDisk          ;   E - Select Disk                  ;
0418: E872 3A EF                  DW     vOpenFile            ;   F - Open File                    ;
0419: E874 43 EF                  DW     vCloseFile           ;  10 - Close File                   ;
0420: E876 49 EF                  DW     vFindFirst           ;  11 - Search For First             ;
0421: E878 62 EF                  DW     vFindNext            ;  12 - Search for Next              ;
0422: E87A 71 EF                  DW     vDeleteFile          ;  13 - Delete File                  ;
0423: E87C 7A EF                  DW     vReadSeq             ;  14 - Read Sequential              ;
0424: E87E 81 EF                  DW     vWriteSeq            ;  15 - Write Sequential             ;
0425: E880 88 EF                  DW     vMakeFile            ;  16 - Make File                    ;
0426: E882 91 EF                  DW     vRenameFile          ;  17 - Rename File                  ;
0427: E884 DD EA                  DW     vGetLoginVector      ;  18 - Return Login Vector          ;
0428: E886 E4 EA                  DW     vGetCurrentDisk      ;  19 - Return Current Disk          ;
0429: E888 EB EA                  DW     vSetDMA              ;  1A - Set DMA address              ;
0430: E88A F4 EA                  DW     vGetAllocAddr        ;  1B - Get ADDR (ALLOC)             ;
0431: E88C 42 EC                  DW     vWriteProtectDisk    ;  1C - Write Protect Disk           ;
0432: E88E FB EA                  DW     vGetReadOnlyMap      ;  1D - Get Read/Only MAP	         ;
0433: E890 45 EC                  DW     vSetFileAttributes   ;  1E - Set File Attributes ??       ;
0434: E892 02 EB                  DW     vGetDiskParamBlock   ;  1F - Get ADDR (Disk Parameters)   ;
0435: E894 0A E9                  DW     vGetSetUserNumber    ;  20 - Set/Get User Code            ;
0436: E896 0D EB                  DW     vReadRandom          ;  21 - Read Random                  ;
0437: E898 13 EB                  DW     vWriteRandom         ;  22 - Write Random                 ;
0438: E89A 19 EB                  DW     vComputeFileSize     ;  23 - Compute File Size            ;
0439: E89C 1F EB                  DW     vSetRandomRecord     ;  24 - Set Random Record            ;
0440: E89E 09 EB                  DW     vResetDrive          ;  25 - Reset Drive                  ;
0441: E8A0 A6 E8                  DW     DUMMY                ;  26 - Access Drive (not supported) ;
0442: E8A2 A6 E8                  DW     DUMMY                ;  27 - Free Drive (not supported)   ;
0443: E8A4 22 EB                  DW     vWriteRandom0Fill    ;  28 - Write random w/Fill          ;
0444: E8A6             functionCount EQU    ($-functionTable)/2  ; Number of  functions               ;
0445: E8A6         ;
0446: E8A6             DUMMY:                          ;
0447: E8A6 76                     HALT                        ;
0448: E8A7         ;++++++++++++++++++++++++++++ Function Vector Table +++++++++++++++++++++++++;
0449: E8A7
0450: E8A7         ;-------------------------- System Reset - 0 (0) ----------------------------;
0451: E8A7         ;  The system reset function makes CP/M do a complete reset, exactly the     ;
0452: E8A7         ; same as the warm boot function invoked when you transfer control to the    ;
0453: E8A7         ; WARMBOOT point. In addition to resetting the BDOS, this function reloads   ;
0454: E8A7         ; the CCP, rebuilds the allocation vectors for the currently logged disks,   ;
0455: E8A7         ; sets the DMA address (used byCP/M to address the disk read/write buffer)   ;
0456: E8A7         ; to 80H, marks all disks as being Read/Write status, and transfers control  ;
0457: E8A7         ; to the  CCP. The CCP then outputs its prompt to the console.               ;
0458: E8A7         ;																			 ;
0459: E8A7         ;			Function Code	 :	C = 00H                                      ;
0460: E8A7         ;			Entry Parameters:	None                                         ;
0461: E8A7         ;			Exit Parameters :	Does Not Return								 ;
0462: E8A7         ;																			 ;
0463: E8A7         ;-------------------------- System Reset - 0 (0) ----------------------------;
0464: E8A7             vSystemReset:
0465: E8A7 C3 03 F6               JP     bcWboot              ; do a Warm Boot
0466: E8AA
0467: E8AA         ;****************************************************************************;
0468: E8AA         ;								IOByte device I/O							 ;
0469: E8AA         ;****************************************************************************;
0470: E8AA
0471: E8AA
0472: E8AA         ;-------------------------- Read Console Byte - 1 (1) -----------------------;
0473: E8AA         ;  This function reads the next byte of data from the console keyboard and   ;
0474: E8AA         ; puts it into register A. If the character input is a graphic character, it ;
0475: E8AA         ; will be echoed back to the console. The only control characters that are   ;
0476: E8AA         ; echoed are  CARRIAGE RETURN, LINE FEED, BACKSPACE, and TAB. In the case    ;
0477: E8AA         ; of a TAB character, the BDOS outputs as many spaces as are required to     ;
0478: E8AA         ; move the cursor to the next multiple of eight columns. All of the other    ;
0479: E8AA         ; control characters, including CONTROL-C, are input but are not echoed.     ;
0480: E8AA         ;  This function also checks for CONTROL-S (XOFF) to see if console output   ;
0481: E8AA         ; should be suspended, and for CONTROL-P (printer echo toggle) to see if     ;
0482: E8AA         ; console output should also be sent to the list device. If CONTROL-S is     ;
0483: E8AA         ; found, further output will be suspended until you type another character.  ;
0484: E8AA         ; CONTROL-P will enable the echoing of console output the first time it is   ;
0485: E8AA         ; pressed and disable it the second time. If there is no incoming data       ;
0486: E8AA         ; character, this function will wait until there is one.                     ;
0487: E8AA         ;                                                                            ;
0488: E8AA         ; This is a blocking function                                                ;
0489: E8AA         ;																			 ;
0490: E8AA         ;																			 ;
0491: E8AA         ;			Function Code	:	C = 01H                                      ;
0492: E8AA         ;			Entry Parameters:	None                                         ;
0493: E8AA         ;			Exit Parameters :	A = Data byte from console					 ;
0494: E8AA         ;																			 ;
0495: E8AA         ;-------------------------- Read Console Byte - 1 (1) -----------------------;
0496: E8AA             vConsoleIn:
0497: E8AA CD 1E E9               CALL   ConIn                ; Don't come back without input
0498: E8AD CD 29 E9               CALL   IsPrintableASCII     ; CR,LF,TAB,BACK_SPACE or GE SPACE
0499: E8B0 D8                     RET    C                    ; return nothing to echo
0500: E8B1
0501: E8B1 F5                     PUSH   AF                   ; Save printable character
0502: E8B2 4F                     LD     C,A
0503: E8B3 CD 55 E9               CALL   TabOut               ; Send to console. if TAB expand
0504: E8B6 F1                     POP    AF                   ; retrieve exit value
0505: E8B7
0506: E8B7 32 C2 EA               LD     (exitParameterByte),A
0507: E8BA C9                     RET
0508: E8BB
0509: E8BB         ;------------------------- Write Console Byte - 2 (2) -----------------------;
0510: E8BB         ;  This function outputs the data byte in register E to the console. As with ;
0511: E8BB         ; function 1, if the data byte is a TAB character, it will be expanded by    ;
0512: E8BB         ; the BDOS to the next column that is a multiple of eight. The BDOS also     ;
0513: E8BB         ; checks to see if there is an incoming character, and if there is,          ;
0514: E8BB         ; checks to see if it is a CONTROL-S ,in which case console output is        ;
0515: E8BB         ; suspended or CONTROL-P, in which case echoing of console output to the     ;
0516: E8BB         ; printer is  toggled on or off                                              ;
0517: E8BB         ;																			 ;
0518: E8BB         ;			Function Code	:	C = 02H                                      ;
0519: E8BB         ;			Entry Parameters:	E = Data byte to be output					 ;
0520: E8BB         ;			Exit Parameters :	None										 ;
0521: E8BB         ;																			 ;
0522: E8BB         ;------------------------- Write Console Byte - 2 (2) -----------------------;
0523: E8BB         ;BDOS put parameter in C before entering this routine
0524: E8BB             vConsoleOut:
0525: E8BB CD 55 E9               CALL   TabOut
0526: E8BE C9                     RET
0527: E8BF
0528: E8BF         ;--------------------------- Read Reader Byte - 3 (3) -----------------------;
0529: E8BF         ;   function reads the next character from the logical "reader" device into  ;
0530: E8BF         ; register A. In practice, the physical device that is accessed depends      ;
0531: E8BF         ; entirely on how your BIOS is configured. In some systems, there is no      ;
0532: E8BF         ; reader at all; this function will return some arbitrary value such as lAH  ;
0533: E8BF         ; (the ASCII CONTROL-Z character, used by CP/M to denote "End of File').     ;
0534: E8BF         ; Control is not returned to the calling program until a character has been  ;
0535: E8BF         ; read.                                                                      ;
0536: E8BF         ;                                                                            ;
0537: E8BF         ; This is a blocking function                                                ;
0538: E8BF         ;																			 ;
0539: E8BF         ;			Function Code	:	C = 03H                                      ;
0540: E8BF         ;			Entry Parameters:	None										 ;
0541: E8BF         ;			Exit Parameters :	A = Character Input							 ;
0542: E8BF         ;																			 ;
0543: E8BF         ;--------------------------- Read Reader Byte - 3 (3) -----------------------;
0544: E8BF             vReaderIn:
0545: E8BF CD 15 F6               CALL   bcReader
0546: E8C2 32 C2 EA               LD     (exitParameterWord),A
0547: E8C5 C9                     RET
0548: E8C6
0549: E8C6         ;--------------------------- Write Punch Byte - 4 (4) -----------------------;
0550: E8C6         ;  This function is a counterpart to the Read "Reader" Byte It outputs the   ;
0551: E8C6         ; specified character from register E to the logical punch device. Again,    ;
0552: E8C6         ; the actual physical device used, if any, is determined by the BIOS.        ;
0553: E8C6         ; There is no set standard for this device; in some systems the punch        ;
0554: E8C6         ; device is a "bit bucket," so called because it absorbs all data that you   ;
0555: E8C6         ; output to it.                                                              ;
0556: E8C6         ;																			 ;
0557: E8C6         ;			Function Code	:	C = 04H                                      ;
0558: E8C6         ;			Entry Parameters:	E = Data byte to be output					 ;
0559: E8C6         ;			Exit Parameters :	None										 ;
0560: E8C6         ;																			 ;
0561: E8C6         ;--------------------------- Write Punch Byte - 4 (4) -----------------------;
0562: E8C6         ;BDOS put parameter in C before entering this routine
0563: E8C6             vPunchOut:
0564: E8C6 CD 12 F6               CALL   bcPunch
0565: E8C9 C9                     RET
0566: E8CA
0567: E8CA         ;---------------------------- Write List Byte - 5 (5) -----------------------;
0568: E8CA         ;  This function outputs the specified byte in register E to the logical     ;
0569: E8CA         ; list device. As with the reader and the punch, the physical device used    ;
0570: E8CA         ; depends entirely on the BIOS.                                              ;
0571: E8CA         ;																			 ;
0572: E8CA         ;			Function Code	:	C = 05H                                      ;
0573: E8CA         ;			Entry Parameters:	E = Data byte to be output					 ;
0574: E8CA         ;			Exit Parameters :	None										 ;
0575: E8CA         ;																			 ;
0576: E8CA         ;---------------------------- Write List Byte - 5 (5) -----------------------;
0577: E8CA         ;BDOS put parameter in C before entering this routine
0578: E8CA             vListOut:                       ; func5 (05 - 05) List Output
0579: E8CA CD 0F F6               CALL   bcList               ; direct call to BIOS
0580: E8CD C9                     RET
0581: E8CE
0582: E8CE         ;--------------------------- Direct Console I/O - 6 (6) ---------------------;
0583: E8CE         ;  This function serves double duty: it both inputs and outputs characters   ;
0584: E8CE         ; from the console. However, it bypasses the normal control characters and   ;
0585: E8CE         ; line editing features (such as CONTROL-P and CONTROL-S) normally           ;
0586: E8CE         ; associated with console I( O. Hence the name "direct" (or "unadorned" as   ;
0587: E8CE         ; Digital Research describes it). If the value in register E is not OFFH,    ;
0588: E8CE         ; then E contains a valid ASCII character that is output to the console.     ;
0589: E8CE         ;  This function works well provided you never have to send a value ofOFFH   ;
0590: E8CE         ; or expect to receive a value ofOOH. If you do need to send or receive pure ;
0591: E8CE         ; binary data, you cannot use this function, since these values are likely   ;
0592: E8CE         ; to be part of the data stream.                                             ;
0593: E8CE         ;                                                                            ;
0594: E8CE         ;			Function Code	:	C = 06H                                      ;
0595: E8CE         ;			Entry Parameters:	E = 0FFH for Input					  		 ;
0596: E8CE         ;								E = Other than 0FFH for Output				 ;
0597: E8CE         ;			Exit Parameters :	A = Input byte or status					 ;
0598: E8CE         ;																			 ;
0599: E8CE         ;--------------------------- Direct Console I/O - 6 (6) ---------------------;
0600: E8CE         ;BDOS put parameter in C before entering this routine
0601: E8CE             vDirectConIO:
0602: E8CE 79                     LD     A,C
0603: E8CF 3C                     INC    A
0604: E8D0 28 04                  JR     Z,vDirectConIO1      ; 0ffh => 00h, means input mode
0605: E8D2         ; send byte to console
0606: E8D2 CD 0C F6               CALL   bcConout             ; Send the byte to the console
0607: E8D5 C9                     RET
0608: E8D6
0609: E8D6         ;read byte/status from console
0610: E8D6             vDirectConIO1:
0611: E8D6 CD 06 F6               CALL   bcConst              ; Check Status
0612: E8D9 B7                     OR     A                    ; 00 means not data ready
0613: E8DA CA 4A E8               JP     Z,ReturnToCaller1    ; If no data return  00 to caller
0614: E8DD CD 09 F6               CALL   bcConin              ; Data is available, get it to A
0615: E8E0 32 C2 EA               LD     (exitParameterByte),A ; Save it
0616: E8E3 C9                     RET
0617: E8E4
0618: E8E4         ;--------------------------- Get IOBYTE Setting - 7 (7) ---------------------;
0619: E8E4         ; This function places the current value of the IOBYTE in register A.        ;
0620: E8E4         ;                                                                            ;
0621: E8E4         ; The IOBYTE structure:                                                      ;
0622: E8E4         ;								+-------+-------+-------+-------+            ;
0623: E8E4         ;						Bit No. | 7 : 6 | 5 : 4 | 3 : 2 | 1 : 0 |            ;
0624: E8E4         ;								+-------+-------+-------+-------+            ;
0625: E8E4         ;				Logical Device     List | Punch | Reader|Console             ;
0626: E8E4         ;                                                                            ;
0627: E8E4         ;                                                                            ;
0628: E8E4         ;			Function Code	:	C = 07H                                      ;
0629: E8E4         ;			Entry Parameters:	None					  		  			 ;
0630: E8E4         ;			Exit Parameters :	A = Current IOBYTE value					 ;
0631: E8E4         ;																			 ;
0632: E8E4         ;--------------------------- Get IOBYTE Setting - 7 (7) ---------------------;
0633: E8E4             vGetIOBYTE:
0634: E8E4 3A 03 00               LD     A,(IOBYTE)           ; Get the IOBYTE
0635: E8E7 32 C2 EA               LD     (exitParameterWord),A ; Return it to caller
0636: E8EA C9                     RET
0637: E8EB         ;--------------------------- Set IOBYTE Setting - 8 (8) ---------------------;
0638: E8EB         ; This function sets the IOBYTE         									 ;
0639: E8EB         ;                                                                            ;
0640: E8EB         ; The IOBYTE structure:                                                      ;
0641: E8EB         ;								+-------+-------+-------+-------+            ;
0642: E8EB         ;						Bit No. | 7 : 6 | 5 : 4 | 3 : 2 | 1 : 0 |            ;
0643: E8EB         ;								+-------+-------+-------+-------+            ;
0644: E8EB         ;				Logical Device     List | Punch | Reader|Console             ;
0645: E8EB         ;                                                                            ;
0646: E8EB         ;                                                                            ;
0647: E8EB         ;			Function Code	:	C = 08H                                      ;
0648: E8EB         ;			Entry Parameters:	E = New IOBYTE value	  		  			 ;
0649: E8EB         ;			Exit Parameters :	None                                         ;
0650: E8EB         ;																			 ;
0651: E8EB         ;--------------------------- Get IOBYTE Setting - 8 (8) ---------------------;
0652: E8EB         ;BDOS put parameter in C before entering this routine
0653: E8EB             vSetIOBYTE:
0654: E8EB 21 03 00               LD     HL,IOBYTE            ; point at The IOBYTE
0655: E8EE 71                     LD     (HL),C               ; Place new vale in it
0656: E8EF C9                     RET
0657: E8F0
0658: E8F0         ;---------------------- Display $ terminated String - 9 (9) -----------------;
0659: E8F0         ;  This function outputs a string of characters to the console device. The   ;
0660: E8F0         ; address of this string is in registers DE. You must make sure that the last;
0661: E8F0         ; character of the string is "$"; the BDOS uses this character as a marker   ;
0662: E8F0         ; for the end of the string.                                                 ;
0663: E8F0         ;  The "$" itself does not get output to the console.                        ;
0664: E8F0         ;                                                                            ;
0665: E8F0         ; While the BDOS is outputting the string, it expands tabs as previously     ;
0666: E8F0         ; described, checks to see if there is an incoming character, and checks for ;
0667: E8F0         ; CONTROL-S (XOFF, which stops the output until another character is entered);
0668: E8F0         ; or CONTROL-P (which turns on or off echoing of console characters to       ;
0669: E8F0         ; the printer).                                                              ;
0670: E8F0         ;                                                                            ;
0671: E8F0         ;			Function Code	:	C = 09H                                      ;
0672: E8F0         ;			Entry Parameters:	DE = Address of the first byte of the string ;
0673: E8F0         ;			Exit Parameters :	None							             ;
0674: E8F0         ;																			 ;
0675: E8F0         ;---------------------- Display $ terminated String - 9 (9) -----------------;
0676: E8F0             vPrintString:
0677: E8F0 2A C0 EA               LD     HL,(paramDE)         ; Get address of the string
0678: E8F3 4D                     LD     C,L
0679: E8F4 44                     LD     B,H                  ; Put it into BC for call
0680: E8F5 CD 38 E9               CALL   Print                ; out to console
0681: E8F8 C9                     RET
0682: E8F9
0683: E8F9         ;-------------------------- Read Console String - A (10) --------------------;
0684: E8F9         ;  This function reads a string of characters from the console device        ;
0685: E8F9         ; and stores them in a buffer (address in DE) that you define. Full line     ;
0686: E8F9         ; editing is possible: the operator can backspace, cancel the line and start ;
0687: E8F9         ; over, and use all the normal control functions. What you will ultimately   ;
0688: E8F9         ; see in the buffer is the final version of the character string entered,    ;
0689: E8F9         ; without any of the errors or control characters used to do the line editing;
0690: E8F9         ;                                                                            ;
0691: E8F9         ;  The buffer that you define has a special format. The first byte in the    ;
0692: E8F9         ; buffer tells the BDOS the maximum number of characters to be accepted.     ;
0693: E8F9         ; The second byte is reserved for the BDOS to tell you how many characters   ;
0694: E8F9         ; were actually placed in the buffer. The following bytes contain            ;
0695: E8F9         ; the characters of the string. Character input will cease either when a     ;
0696: E8F9         ; CARRIAGE RETURN is entered or when the maximum number of characters,       ;
0697: E8F9         ; as specified in the buffer, has been received. The CARRIAGE RETURN is not  ;
0698: E8F9         ; stored in the buffer as a character-it just serves as a terminator. If     ;
0699: E8F9         ; the first character entered is a CARRIAGE RETURN, then the BDOS sets       ;
0700: E8F9         ; the "characters input" byte to O. If you attempt to input more than the    ;
0701: E8F9         ; maximum number of characters, the "characters input" count will be the     ;
0702: E8F9         ; same as the maximum value allowed.                                         ;
0703: E8F9         ;                                                                            ;
0704: E8F9         ;			Function Code	:	C = 0AH                                      ;
0705: E8F9         ;			Entry Parameters:	DE = Address string buffer					 ;
0706: E8F9         ;			Exit Parameters :	String Buffer with console bytes in it       ;
0707: E8F9         ;																			 ;
0708: E8F9         ;-------------------------- Read Console String - A (10) --------------------;
0709: E8F9             vReadString:
0710: E8F9 CD DD E9               CALL   ReadString
0711: E8FC C9                     RET
0712: E8FD
0713: E8FD         ;------------------------- Read Console Status - B (11) ---------------------;
0714: E8FD         ; This function tells you whether a console input character is waiting to be ;
0715: E8FD         ;processed. Unlike the Console Input functions, which will wait until there  ;
0716: E8FD         ;is input,this function simply checks and returns immediately.               ;
0717: E8FD         ;                                                                            ;
0718: E8FD         ;			Function Code	:	C = 0BH                                      ;
0719: E8FD         ;			Entry Parameters:	None										 ;
0720: E8FD         ;			Exit Parameters :	A = 00H if no incoming Data					 ;
0721: E8FD         ;								A = FFH	if incoming Data					 ;
0722: E8FD         ;																			 ;
0723: E8FD         ;------------------------- Read Console Status - B (11) ---------------------;
0724: E8FD             vGetConsoleStatus:
0725: E8FD CD 89 E9               CALL   ConBreak
0726: E900 32 C2 EA               LD     (exitParameterByte),A
0727: E903 C9                     RET
0728: E904
0729: E904         ;--------------------------- Get CP/M Version - C (12) ----------------------;
0730: E904         ;  This function tells you which version of CP/M you are currently running.  ;
0731: E904         ; A two-byte value is returned:                                              ;
0732: E904         ;	H = OOH for CP/M, H = OlH for MP/M                                       ;
0733: E904         ;	L = OOH for all releases before CP/M 2.0                                 ;
0734: E904         ;	L = 20H for CP/M 2.0,21 H for 2.1, 22H for 2.2,                          ;
0735: E904         ;		and so on for any subsequent releases.                               ;
0736: E904         ;                                                                            ;
0737: E904         ; This information is of interest only if your program has some version      ;
0738: E904         ; specific logic built into it. For example, CP/M version 1.4 does not       ;
0739: E904         ; support the same Random File Input/ Output operations that CP/M 2.2 does.  ;
0740: E904         ; Therefore, if your program uses Random I/O, put this check at the          ;
0741: E904         ; beginning to ensure that it is indeed running under the appropriate        ;
0742: E904         ; version of CP/M.                                                           ;
0743: E904         ;                                                                            ;
0744: E904         ;			Function Code	:	C = 0CH                                      ;
0745: E904         ;			Entry Parameters:	None										 ;
0746: E904         ;			Exit Parameters :	HL =Version Number Code						 ;
0747: E904         ;								A = FFH	if incoming Data					 ;
0748: E904         ;																			 ;
0749: E904         ;--------------------------- Get CP/M Version - C (12) ----------------------;
0750: E904             vGetVersion:                      ; func12 (12 - 0C)	 Get Version
0751: E904 3E 20                  LD     A,VERSION
0752: E906 32 C2 EA               LD     (exitParameterByte),A ;exitParameterByte = VERSION
0753: E909 C9                     RET
0754: E90A
0755: E90A         ;--------------------------- Get/Set User Number - 20 (32) ------------------;
0756: E90A         ;  This subroutine either sets or gets the current user number. The current  ;
0757: E90A         ; user number determines which file directory entries are matched during all ;
0758: E90A         ; disk file operations. When you call this function, the contents of the     ;
0759: E90A         ; E register specify what action is to be taken. IfE=OFFH, then the function ;
0760: E90A         ; will return the current user number in the A register. If you set E to a   ;
0761: E90A         ; number in the range 0 to 15 (that is, a valid user number), the function   ;
0762: E90A         ; will set the current user number to this value.                            ;
0763: E90A         ;                                                                            ;
0764: E90A         ;			Function Code	:	C = 0CH                                      ;
0765: E90A         ;			Entry Parameters:	E = 0FFH to get User Number  				 ;
0766: E90A         ;								  = 0 to 15 to set User Number				 ;
0767: E90A         ;			Exit Parameters :	A = Current user Number if E was set to 0FFH ;
0768: E90A         ;								A = FFH	if incoming Data					 ;
0769: E90A         ;																			 ;
0770: E90A         ;                                                                            ;
0771: E90A         ;--------------------------- Get/Set User Number - 20 (32) ------------------;
0772: E90A             vGetSetUserNumber:
0773: E90A 3A BF EA               LD     A,(paramE)
0774: E90D FE FF                  CP     0FFH
0775: E90F 20 07                  JR     NZ,SetUserNumber     ; interrogate user code instead
0776: E911 3A 36 F5               LD     A,(currentUserNumber)
0777: E914 32 C2 EA               LD     (exitParameterByte),A ; exitParameterByte=currentUserNumber
0778: E917 C9                     RET
0779: E918
0780: E918             SetUserNumber:
0781: E918 E6 0F                  AND    LO_NIBBLE_MASK
0782: E91A 32 36 F5               LD     (currentUserNumber),A
0783: E91D C9                     RET
0784: E91E
0785: E91E         ;****************************************************************************;
0786: E91E         ;								Character Support Routines					 ;
0787: E91E         ;****************************************************************************;
0788: E91E
0789: E91E
0790: E91E         ;-------------------- Return a Character from the console -------------------;
0791: E91E         ;return byte from buffer or read from the console                            ;
0792: E91E             ConIn:                          ;
0793: E91E 21 BB EA               LD     HL,keyboardByte      ; is there a Byte waiting?           ;
0794: E921 7E                     LD     A,(HL)               ;
0795: E922 36 00                  LD     (HL),0               ;
0796: E924 B7                     OR     A                    ;
0797: E925 C0                     RET    NZ                   ;
0798: E926         ;
0799: E926 C3 09 F6               JP     bcConin              ; Go get byte from Console           ;
0800: E929         ;-------------------- Return a Character from the console -------------------;
0801: E929
0802: E929         ;----------- Is the Character ASCII printable, CR,LF,TAB,BACKSPACE ----------;
0803: E929         ; Resets Carry Flag if ASCII Printable, CR,LF,TAB,BackSpace or GE SPACE      ;
0804: E929             IsPrintableASCII:                      ;
0805: E929 FE 0D                  CP     CR                   ;
0806: E92B C8                     RET    Z                    ; carriage return?                                                  ;
0807: E92C FE 0A                  CP     LF                   ;
0808: E92E C8                     RET    Z                    ; line feed?                                                        ;
0809: E92F FE 09                  CP     TAB                  ;
0810: E931 C8                     RET    Z                    ; TAB?                                                              ;
0811: E932 FE 08                  CP     CTRL_H               ;
0812: E934 C8                     RET    Z                    ; backspace?                                                        ;
0813: E935 FE 20                  CP     SPACE                ; Reset Carry if ASCII printable         ;
0814: E937 C9                     RET                         ;
0815: E938         ;----------- Is the Character ASCII printable, CR,LF,TAB,BACKSPACE ----------;
0816: E938
0817: E938         ;------------------ Print character from (BC) until  $ found ----------------;
0818: E938             Print:                          ;
0819: E938 0A                     LD     A,(BC)               ; Get the next character             ;
0820: E939 FE 24                  CP     DOLLAR               ; Is it the end ?                    ;
0821: E93B C8                     RET    Z                    ;  exit if yes                       ;
0822: E93C 03                     INC    BC                   ; Update the pointer                 ;
0823: E93D C5                     PUSH   BC                   ; Save it                            ;
0824: E93E 4F                     LD     C,A                  ; Does Byte require                  ;
0825: E93F CD 55 E9               CALL   TabOut               ;  special attention - check         ;
0826: E942 C1                     POP    BC                   ; Retrieve the pointer				 ;
0827: E943 18 F3                  JR     Print                ; Loop back                          ;
0828: E945         ;------------------ Print character from (BC) until  $ found ----------------;
0829: E945
0830: E945         ;-- Send printable character to console. Precede with Caret if needed -------;
0831: E945         ; character is in Reg C                                                      ;
0832: E945             CaretOut:                       ;
0833: E945 79                     LD     A,C                  ;
0834: E946 CD 29 E9               CALL   IsPrintableASCII     ;
0835: E949 30 0A                  JR     NC,TabOut            ; Skip if Caret not needed           ;
0836: E94B         ; send preceding up arrow                                                    ;
0837: E94B F5                     PUSH   AF                   ; Save the character                 ;
0838: E94C 0E 5E                  LD     C,CARET              ;
0839: E94E CD 68 E9               CALL   ConsoleOut           ; Send Caret to Console              ;
0840: E951 F1                     POP    AF                   ; Get the character                  ;
0841: E952 F6 40                  OR     40H                  ; Make the graphic a letter          ;
0842: E954 4F                     LD     C,A                  ; Set up to print                    ;
0843: E955         ; fall thru to TabbOut                                                       ;
0844: E955         ;-- Send printable character to console. Precede with Caret if needed -------;
0845: E955
0846: E955         ;------------- Send printable character to console. Expand if TAB -----------;
0847: E955         ; character is in Reg C                                                      ;
0848: E955             TabOut:                         ;
0849: E955 79                     LD     A,C                  ;
0850: E956 FE 09                  CP     TAB                  ; Is it a TAB                        ;
0851: E958 C2 68 E9               JP     NZ,ConsoleOut        ; Go directly to ConsoleOut if not   ;
0852: E95B         ;
0853: E95B         ; TAB encountered                                                           ;
0854: E95B             TabOut0:                        ;
0855: E95B 0E 20                  LD     C,SPACE              ; Expand TABs with SPACEs            ;
0856: E95D CD 68 E9               CALL   ConsoleOut           ; Send to Console                    ;
0857: E960 3A BE EA               LD     A,(columnPosition)   ; Get Column position                ;
0858: E963 E6 07                  AND    111b                 ; (ColumnPosition mod 8) = 0 ?       ;
0859: E965 20 F4                  JR     NZ,TabOut0           ; Do again if not                    ;
0860: E967 C9                     RET                         ;
0861: E968         ;------------- Send printable character to console. Expand if TAB -----------;
0862: E968
0863: E968         ;-------------------------- Send character to console -----------------------;
0864: E968         ; C  = Character to be output                                                ;
0865: E968             ConsoleOut:                      ;
0866: E968         ; Look for CNTL_S from keyboard and save it in keyboardByte                  ;
0867: E968 C5                     PUSH   BC                   ; Save character and Count           ;
0868: E969 CD 89 E9               CALL   ConBreak             ; Check for screen stop key stroke   ;
0869: E96C C1                     POP    BC                   ;
0870: E96D C5                     PUSH   BC                   ; Get/save character                 ;
0871: E96E         ; Send character to Console	                                                 ;
0872: E96E CD 0C F6               CALL   bcConout             ; Send character to the console      ;
0873: E971 C1                     POP    BC                   ;
0874: E972 C5                     PUSH   BC                   ; Get/save character                 ;
0875: E973         ; is the data to be output to print device?                                  ;
0876: E973 3A BC EA               LD     A,(printEchoFlag)    ;
0877: E976 B7                     OR     A                    ;
0878: E977 C4 0F F6               CALL   NZ,bcList            ; Send it to printer, if so          ;
0879: E97A C1                     POP    BC                   ; Get the character                  ;
0880: E97B         ;
0881: E97B 79                     LD     A,C                  ; Put character to ACC               ;
0882: E97C 21 BE EA               LD     HL,columnPosition    ; A = char, HL = .columnPosition     ;
0883: E97F 34                     INC    M                    ; increment the ColumnPosition       ;
0884: E980         ;
0885: E980 FE 20                  CP     SPACE                ;
0886: E982 D0                     RET    NC                   ; Exit if ASCII printable            ;
0887: E983         ;
0888: E983 FE 0A                  CP     LF                   ;
0889: E985 C0                     RET    NZ                   ; Exit if not a Line Feed            ;
0890: E986         ;
0891: E986 36 00                  LD     (HL),0               ;  else force columnPosition = 0     ;
0892: E988 C9                     RET                         ;
0893: E989         ;-------------------------- Send character to console -----------------------;
0894: E989
0895: E989         ;--------------------  Check for Status and Control S or C ------------------;
0896: E989         ;  Returns:																	 ;
0897: E989         ;			ACC = 0FFH if Saved keyboard byte or CNTL_S entered from console ;
0898: E989         ;			ACC = 00   No data Pending										 ;
0899: E989         ;			DOES NOT RETURN if CTRL_C is entered from the keyboard           ;
0900: E989         ;                                                                            ;
0901: E989             ConBreak:                       ;
0902: E989 3A BB EA               LD     A,(keyboardByte)     ;
0903: E98C B7                     OR     A                    ; If there is a char waiting         ;
0904: E98D 20 2B                  JR     NZ,ConBreak1         ;  return with FF in ACC             ;
0905: E98F         ;
0906: E98F CD 06 F6               CALL   bcConst              ; Get status                         ;
0907: E992 FE 00                  CP     00H                  ; If 00 => No data pending	         ;
0908: E994 C8                     RET    Z                    ; Return 00 No data pending          ;
0909: E995         ;
0910: E995 CD 09 F6               CALL   bcConin              ; Read the byte                      ;
0911: E998         ;
0912: E998 FE 10                  CP     CTRL_P               ;
0913: E99A 20 0D                  JR     NZ,CheckCTL_S        ;
0914: E99C         ;<><><><><><><><><><><><><> Toggle Print Echo Flag<><><><><><><>             ;
0915: E99C 21 BC EA               LD     HL,printEchoFlag     ;
0916: E99F 3E FF                  LD     A,TRUE               ;
0917: E9A1 BE                     CP     (HL)                 ;
0918: E9A2 20 02                  JR     NZ,ToggleFlag1       ;
0919: E9A4 3E 00                  LD     A,FALSE              ;
0920: E9A6             ToggleFlag1:                      ;
0921: E9A6 77                     LD     (HL),A               ;
0922: E9A7 18 0C                  JR     NothingWaiting       ;
0923: E9A9         ;<><><><><><><><><><><><><> Toggle Print Echo Flag<><><><><><><>             ;
0924: E9A9             CheckCTL_S:                      ;
0925: E9A9 FE 13                  CP     CTRL_S               ; If it is not Stop Screen, save     ;
0926: E9AB 20 0A                  JR     NZ,ConBreak0         ;   and and return 0FFH              ;
0927: E9AD         ;
0928: E9AD CD 09 F6               CALL   bcConin              ; Else Read next byte                ;
0929: E9B0 FE 03                  CP     CTRL_C               ;
0930: E9B2 CA 00 00               JP     Z,WarmBoot           ; do WarmBoot if  CTRL_C             ;
0931: E9B5             NothingWaiting:                      ;
0932: E9B5 AF                     XOR    A                    ;
0933: E9B6 C9                     RET                         ; Set ACC = 0 and return             ;
0934: E9B7             ConBreak0:                      ;
0935: E9B7 32 BB EA               LD     (keyboardByte),A     ; save the byte                      ;
0936: E9BA             ConBreak1:                      ;
0937: E9BA 3E FF                  LD     A,TRUE               ; return with true set in ACC        ;
0938: E9BC C9                     RET                         ;
0939: E9BD         ;--------------------  Check for Status and Control S or C ------------------;
0940: E9BD
0941: E9BD         ;------------------------  Console Output Utilities -------------------------;
0942: E9BD             showHashCRLF:                      ;
0943: E9BD 0E 23                  LD     C,HASH_TAG           ;
0944: E9BF CD 68 E9               CALL   ConsoleOut           ; Send # to console                  ;
0945: E9C2 CD D3 E9               CALL   showCRLF             ;
0946: E9C5             showHashCRLF1:                      ;
0947: E9C5 3E BE                  LD     A,columnPosition     ;
0948: E9C7 21 BD EA               LD     HL,startingColumn    ;
0949: E9CA BF                     CP     A,M                  ;
0950: E9CB D0                     RET    NC                   ;
0951: E9CC 0E 20                  LD     C,SPACE              ;
0952: E9CE CD 68 E9               CALL   ConsoleOut           ;
0953: E9D1 18 F2                  JR     showHashCRLF1        ;
0954: E9D3         ;------------------------  Console Output Utilities -------------------------;
0955: E9D3
0956: E9D3         ;------------------------  Send Carriage Return and Line Feed ---------------;
0957: E9D3             showCRLF:                       ;
0958: E9D3 0E 0D                  LD     C,CR                 ;
0959: E9D5 CD 68 E9               CALL   ConsoleOut           ;
0960: E9D8 0E 0A                  LD     C,LF                 ;
0961: E9DA C3 68 E9               JP     ConsoleOut           ; exit via ConsoleOuts RET           ;
0962: E9DD         ;------------------------  Send Carriage Return and Line Feed ---------------;
0963: E9DD
0964: E9DD         ;------------------------- Read a $ terminated String -----------------------;
0965: E9DD         ;read to paramDE address (max length, current length, buffer)               ;
0966: E9DD             ReadString:                      ;
0967: E9DD 3A BE EA               LD     A,(columnPosition)   ;
0968: E9E0 32 BD EA               LD     (startingColumn),A   ; Save start for CTRL_X and CTRL_R   ;
0969: E9E3 2A C0 EA               LD     HL,(paramDE)         ; Get the start of the String        ;
0970: E9E6 4E                     LD     C,(HL)               ; Get Max Count  					 ;
0971: E9E7 23                     INC    HL                   ; Point at actual bytes read         ;
0972: E9E8 06 00                  LD     B,0                  ; Initialize Current Count           ;
0973: E9EA         ;
0974: E9EA         ; B = Current Count                                                      ;
0975: E9EA         ; C = Maximum characters                                                 ;
0976: E9EA         ; HL= Insertion Pointer                                                  ;
0977: E9EA         ;
0978: E9EA         ; read next character, BC, HL active                                        ;
0979: E9EA             ReadNext:                       ;
0980: E9EA C5                     PUSH   BC                   ; Save Current Index and Max Count   ;
0981: E9EB E5                     PUSH   HL                   ; Save pointer                       ;
0982: E9EC             ReadNext0:                      ;
0983: E9EC CD 1E E9               CALL   ConIn                ; Get the next Character             ;
0984: E9EF E6 7F                  AND    ASCII_MASK           ; Mask parity bit                    ;
0985: E9F1 E1                     POP    HL                   ; Restore Pointer					 ;
0986: E9F2 C1                     POP    BC                   ; Restore Current Index and Max Count;
0987: E9F3         ;Is It Carriage Return                                                       ;
0988: E9F3 FE 0D                  CP     CR                   ;
0989: E9F5 CA 3B EA               JP     Z,EndRead            ; End the read if yes                ;
0990: E9F8 FE 0A                  CP     LF                   ;
0991: E9FA         ;Is It Linefeed                                                              ;
0992: E9FA CA 3B EA               JP     Z,EndRead            ; End the read if yes                ;
0993: E9FD         ;Is It BackSpace                                                             ;
0994: E9FD FE 08                  CP     CTRL_H               ;
0995: E9FF CA 45 EA               JP     Z,BSspaceBS          ;
0996: EA02             IsItRubout:                      ;
0997: EA02 FE 7F                  CP     RUBOUT               ; Non destructive delete             ;
0998: EA04 CA 4F EA               JP     Z,ItIsRubout         ;
0999: EA07             IsPhysicalEOL:                      ;
1000: EA07 FE 05                  CP     CTRL_E               ;
1001: EA09 CA 5A EA               JP     Z,ItIsPhysicalEOL    ;
1002: EA0C             IsItPrintToggle:                      ;
1003: EA0C FE 10                  CP     CTRL_P               ;
1004: EA0E CA 62 EA               JP     Z,ItIsPrintToggle    ;
1005: EA11             IsItDeleteTheLineX:                      ;
1006: EA11 FE 18                  CP     CTRL_X               ;
1007: EA13 CA 8B EA               JP     Z,DeleteTheLine      ; If CTRL_X go delete the line       ;
1008: EA16             IsItDeleteTheLineU:                      ;
1009: EA16 FE 15                  CP     CTRL_U               ;
1010: EA18 CA A9 EA               JP     Z,IgnoreTheLine      ; If CTRL_U ignore the line          ;
1011: EA1B         ;Retype the line                                                             ;
1012: EA1B FE 12                  CP     CTRL_R               ;
1013: EA1D CA 72 EA               JP     Z,RepeatLine         ;
1014: EA20
1015: EA20         ;....................... Echo input back to the Console  ....................;
1016: EA20         ; Full Duplex								                                 ;
1017: EA20         ; A = Character to display	                                                 ;
1018: EA20         ; B = current char count                                                     ;
1019: EA20         ; C = maximum buffer length                                                  ;
1020: EA20         ; HL= buffer pointer                                                         ;
1021: EA20         ;ReadEcho                                                                    ;
1022: EA20 04                     INC    B                    ; Increment byte count		         ;
1023: EA21 23                     INC    HL                   ; Advance the Pointer                ;
1024: EA22 77                     LD     (HL),A               ; Put char in buffer                 ;
1025: EA23         ;
1026: EA23             ReadEchoRubOut:                      ;
1027: EA23 C5                     PUSH   BC                   ; Save index and length              ;
1028: EA24 E5                     PUSH   HL                   ; Save the Pointer                   ;
1029: EA25 4F                     LD     C,A                  ; Get char                           ;
1030: EA26 CD 45 E9               CALL   CaretOut             ; Output to Console (^ if needed)    ;
1031: EA29 E1                     POP    HL                   ; Restore the Pointer                ;
1032: EA2A C1                     POP    BC                   ; Restore index and length           ;
1033: EA2B 7E                     LD     A,(HL)               ; Recall char                        ;
1034: EA2C         ; check for Warm Boot                                                        ;
1035: EA2C FE 03                  CP     CTRL_C               ;
1036: EA2E 78                     LD     A,B                  ; Get Line position                  ;
1037: EA2F C2 37 EA               JP     NZ,AreWeAtEndOfBuffer ; Skip if not CTRL_C                 ;
1038: EA32 FE 01                  CP     1                    ; Beginning of the Line?             ;
1039: EA34 CA 00 00               JP     Z,WarmBoot           ;   if yes do the Boot               ;
1040: EA37         ; Check to see if we are at the end of the buffer                            ;
1041: EA37             AreWeAtEndOfBuffer:                      ;
1042: EA37 B9                     CP     C                    ; Over Max ?					     ;
1043: EA38 DA EA E9               JP     C,ReadNext           ;  no, Go for more				     ;
1044: EA3B         ;
1045: EA3B         ; At the end of read                                  					     ;
1046: EA3B             EndRead:                        ;
1047: EA3B         ; 	POP		HL                                                               ;
1048: EA3B 2A C0 EA               LD     HL,(paramDE)         ;
1049: EA3E 23                     INC    HL                   ;
1050: EA3F         ;
1051: EA3F 70                     LD     (HL),B               ; Actual length at Pos 0 of Buffer   ;
1052: EA40 0E 0D                  LD     C,CR                 ;
1053: EA42 C3 68 E9               JP     ConsoleOut           ; Send CR to the Console			 ;
1054: EA45         ;....................... Echo input back to the Console  ....................;
1055: EA45         ;.......................... Backspace SPACE BackSpace .......................;
1056: EA45             BSspaceBS:                      ;
1057: EA45 05                     DEC    B                    ;
1058: EA46 2B                     DEC    HL                   ;
1059: EA47 C5                     PUSH   BC                   ;
1060: EA48 E5                     PUSH   HL                   ;
1061: EA49 CD 9C EA               CALL   BackUp               ;
1062: EA4C C3 EC E9               JP     ReadNext0            ;
1063: EA4F         ;.......................... Backspace SPACE BackSpace .......................;
1064: EA4F         ;.......................... It is RubOut ....................................;
1065: EA4F             ItIsRubout:                      ;
1066: EA4F         ; RUBOUT if possible                                                         ;
1067: EA4F 78                     LD     A,B                  ; Are we at the start of the line    ;
1068: EA50 B7                     OR     A                    ;
1069: EA51 CA EA E9               JP     Z,ReadNext           ; then ignore and go for next char   ;
1070: EA54         ;adjust pointers back one                                                    ;
1071: EA54 7E                     LD     A,(HL)               ; ACC = current character            ;
1072: EA55 05                     DEC    B                    ; Adjust the index			    	 ;
1073: EA56 2B                     DEC    HL                   ; Adjust the pointer                 ;
1074: EA57 C3 23 EA               JP     ReadEchoRubOut       ; Echo back - Full Duplex            ;
1075: EA5A         ;.......................... It is RubOut ....................................;
1076: EA5A         ;.......................... It is PhysicalEOL ...............................;
1077: EA5A             ItIsPhysicalEOL:                      ;
1078: EA5A C5                     PUSH   BC                   ; Save Current Index and Max Count   ;
1079: EA5B E5                     PUSH   HL                   ; Save pointer                       ;
1080: EA5C CD D3 E9               CALL   showCRLF             ; Make new line                      ;
1081: EA5F C3 EC E9               JP     ReadNext0            ;   and go for next char   			 ;
1082: EA62         ;.......................... It is PhysicalEOL ...............................;
1083: EA62         ;.......................... It is PrintToggle ...............................;
1084: EA62             ItIsPrintToggle:
1085: EA62 E5                     PUSH   HL                   ; Save pointer                       ;
1086: EA63         ; Toggle the printEcho Flag                                                  ;
1087: EA63 21 BC EA               LD     HL,printEchoFlag     ; Point at the flag                  ;
1088: EA66 3E FF                  LD     A,TRUE               ; Load ACC with TRUE                 ;
1089: EA68 BE                     CP     (HL)                 ; Is the flag true?                  ;
1090: EA69 20 02                  JR     NZ,IsItPrintToggle1  ; Skip if not                        ;
1091: EA6B 3E 00                  LD     A,FALSE              ;   else. load ACC with FALSE        ;
1092: EA6D             IsItPrintToggle1:                      ;
1093: EA6D 77                     LD     (HL),A               ; Set the Flags new Value	         ;
1094: EA6E E1                     POP    HL                   ; Restore pointer                    ;
1095: EA6F C3 EA E9               JP     ReadNext             ;   and for another char             ;
1096: EA72         ;.......................... It is PrintToggle ...............................;
1097: EA72         ;.......................... RepeatLine ......................................;
1098: EA72             RepeatLine:                      ;
1099: EA72 C5                     PUSH   BC                   ; Save Current Index and Max Count   ;
1100: EA73 E5                     PUSH   HL                   ;  for exit                          ;
1101: EA74 CD BD E9               CALL   showHashCRLF         ; Display Hash, new Line			 ;
1102: EA77         ;
1103: EA77 2A C0 EA               LD     HL,(paramDE)         ; Get start of Buffer                ;
1104: EA7A 23                     INC    HL                   ; Skip past character count          ;
1105: EA7B         ;
1106: EA7B             LL1:                            ;
1107: EA7B 23                     INC    HL                   ; Point at next char to display      ;
1108: EA7C C5                     PUSH   BC                   ; Save counter, in B                 ;
1109: EA7D E5                     PUSH   HL                   ; Save buffer pointer                ;
1110: EA7E 4E                     LD     C,M                  ; Get the next character             ;
1111: EA7F CD 45 E9               CALL   CaretOut             ; Display it                         ;
1112: EA82 E1                     POP    HL                   ; Restore                            ;
1113: EA83 C1                     POP    BC                   ;  the counter and pointer           ;
1114: EA84 10 F5                  DJNZ   LL1                  ; loop if still more to show         ;
1115: EA86 E1                     POP    HL                   ; Restore values                     ;
1116: EA87 C1                     POP    BC                   ;  from routine entry                ;
1117: EA88 C3 EA E9               JP     ReadNext             ; Done here !                        ;
1118: EA8B         ;.......................... RepeatLine ......................................;
1119: EA8B         ;.......................... Delete The Line .................................;
1120: EA8B             DeleteTheLine:                      ;
1121: EA8B E1                     POP    HL                   ; Adjust Stack                       ;
1122: EA8C         ;                                             ;
1123: EA8C             DeleteTheLine1:                      ;
1124: EA8C 3A BD EA               LD     A,(startingColumn)   ;
1125: EA8F 21 BE EA               LD     HL,columnPosition    ;
1126: EA92 BE                     CP     M                    ; Start of line ?                    ;
1127: EA93 D2 DD E9               JP     NC,ReadString        ;  If yes get out and go for more    ;
1128: EA96 35                     DEC    M                    ; Adjust the ColumnPosition          ;
1129: EA97 CD 9C EA               CALL   BackUp               ; Clear 1 column                     ;
1130: EA9A 18 F0                  JR     DeleteTheLine1       ; Loop for more                      ;
1131: EA9C         ;.......................... Delete The Line .................................;
1132: EA9C         ;------------------------ Back-up one screen position -----------------------;
1133: EA9C             BackUp:                         ;
1134: EA9C CD A4 EA               CALL   BackUp1              ; Send Backspace                     ;
1135: EA9F 0E 20                  LD     C,SPACE              ; Overwrite with SPACE               ;
1136: EAA1 CD 0C F6               CALL   bcConout             ; Overwrite with SPACE				 ;
1137: EAA4         ;does not affect column count                                                ;
1138: EAA4             BackUp1:                        ;
1139: EAA4 0E 08                  LD     C,CTRL_H             ;
1140: EAA6 C3 0C F6               JP     bcConout             ; Send Backspace                     ;
1141: EAA9         ;------------------------ Back-up one screen position -----------------------;
1142: EAA9         ;.......................... Ignore The Line .................................;
1143: EAA9             IgnoreTheLine:                      ;
1144: EAA9 CD BD E9               CALL   showHashCRLF         ; Display Hash, new Line			 ;
1145: EAAC 0E 20                  LD     C,SPACE              ; We want to add a few spaces        ;
1146: EAAE CD 0C F6               CALL   bcConout             ;  to the console                    ;
1147: EAB1 0E 20                  LD     C,SPACE              ;
1148: EAB3 CD 0C F6               CALL   bcConout             ;
1149: EAB6 C3 DD E9               JP     ReadString           ; Start all over                     ;
1150: EAB9         ;.......................... Ignore The Line .................................;
1151: EAB9
1152: EAB9         ;------------------------- Read a $ terminated String -----------------------;
1153: EAB9
1154: EAB9         ;****************************************************************************
1155: EAB9         ;                           DATA AREA                                       *
1156: EAB9         ;****************************************************************************
1157: EAB9
1158: EAB9         ;------------------------------Non Disk Data Area ---------------------------;
1159: EAB9             usersStack: DS     2                    ; entry stack pointer                ;
1160: EABB         ;
1161: EABB 00          keyboardByte: DB     00                   ; Saved keyboard character           ;
1162: EABC         ;
1163: EABC 00          printEchoFlag: DB     00                   ; Controlled by ^P                   ;
1164: EABD         ;
1165: EABD         ; FunctionValue:DB	00H					; Reg C on BDOS Entry                ;
1166: EABD 00          startingColumn: DB     0                    ; Starting col pos after read        ;
1167: EABE 00          columnPosition: DB     0                    ; Current Column position            ;
1168: EABF         ;
1169: EABF             paramE:    DS     BYTE                 ; Byte Argument for BDOS Call        ;
1170: EAC0             paramDE:   DS     WORD                 ; Word Argument for BDOS Call	     ;
1171: EAC2             exitParameterByte:                      ; Byte returned Value                ;
1172: EAC2             exitParameterWord: DS     WORD                 ; Word                           ;
1173: EAC4         ;
1174: EAC4         ;
1175: EAC4         ;------------------------------------ Data Area -----------------------------;
1176: EAC4
1177: EAC4
1178: EAC4
1179: EAC4         ;****************************************************************************;
1180: EAC4         ;								Disk I/O									 ;
1181: EAC4         ;****************************************************************************;
1182: EAC4
1183: EAC4         ;---------------------------- Reset Disk System - D (13) --------------------;
1184: EAC4         ;  This function requests CP/M to completely reset the disk file system.     ;
1185: EAC4         ; CP/M then resets its internal tables, selects logical disk A as the        ;
1186: EAC4         ; default disk, resets the DMAaddress back to 0080H (the address of the      ;
1187: EAC4         ; buffer used by the BDOS to read and write to the disk), and marks all      ;
1188: EAC4         ; logical disks as having Read/Write status. The BDOS will then have to log  ;
1189: EAC4         ; in each logical disk as each disk is accessed. This involves reading the   ;
1190: EAC4         ; entire file directory for the disk and rebuilding the allocation vectors   ;
1191: EAC4         ; which keep track of which allocation blocks are free and which             ;
1192: EAC4         ; are used for file storage.                                                 ;
1193: EAC4         ;                                                                            ;
1194: EAC4         ;			Function Code	:	C = 0DH                                      ;
1195: EAC4         ;			Entry Parameters:	None										 ;
1196: EAC4         ;			Exit Parameters :	None										 ;
1197: EAC4         ;																			 ;
1198: EAC4         ;---------------------------- Reset Disk System - D (13) --------------------;
1199: EAC4             vResetSystem:
1200: EAC4 21 00 00               LD     HL,0
1201: EAC7 22 39 F5               LD     (ReadOnlyVector),HL  ; Clear the vectors for
1202: EACA 22 3B F5               LD     (loggedDisks),HL     ;   R/O and Logged Disks
1203: EACD AF                     XOR    A                    ; Clear the current disk
1204: EACE 32 37 F5               LD     (currentDisk),A
1205: EAD1         ; note that currentUserNumber remains unchanged
1206: EAD1 21 80 00               LD     HL,DMABuffer
1207: EAD4 22 3D F5               LD     (initDAMAddress),HL  ; initDAMAddress = DMABuffer
1208: EAD7 CD CD ED               CALL   SetDataDMA           ; to data dma address
1209: EADA C3 5A EC               JP     Select
1210: EADD         ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1211: EADD         ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1212: EADD         ;---------------------------- Get Active Disks - 18 (24) --------------------;
1213: EADD         ; This function returns a bit map, called the login vector, in register pair ;
1214: EADD         ; HL, indicating which logical disk drives have been selected since the last ;
1215: EADD         ; warm boot or Reset Disk function (code 13, ODH). The least significant bit ;
1216: EADD         ; of L corresponds to disk A, while the highest order bit in H maps disk P.  ;
1217: EADD         ; The bit corresponding to the specific logical disk is set to 1 if the      ;
1218: EADD         ; disk has been selected or to 0 if the disk is not currently on-line.       ;
1219: EADD         ;  Logical disks can be selected programmatically through any file operation ;
1220: EADD         ; that sets the drive field to a nonzero value, through the Select Disk      ;
1221: EADD         ; function (code 14, OEH), or by the operator entering an "X:" command       ;
1222: EADD         ; where "X" is equal to A, B, ... , P.                                       ;
1223: EADD         ;                                                                            ;
1224: EADD         ;			Function Code	:	C = 018H                                     ;
1225: EADD         ;			Entry Parameters:	None										 ;
1226: EADD         ;			Exit Parameters :	HL = Active disk map (login vector)			 ;
1227: EADD         ;																			 ;
1228: EADD         ;---------------------------- Get Active Disks - 18 (24) --------------------;
1229: EADD             vGetLoginVector:
1230: EADD 2A 3B F5               LD     HL,(loggedDisks)
1231: EAE0 22 C2 EA               LD     (exitParameterWord),HL
1232: EAE3 C9                     RET
1233: EAE4         ;---------------------------- Get Current Disk- 19 (25) ---------------------;
1234: EAE4         ;   This function returns the current default disk set by the last Select    ;
1235: EAE4         ; Disk function call (code 14, OEH) or by the operator entering the          ;
1236: EAE4         ; "X:"command (where "X" is A, B, ..., P) to the CCP.                        ;
1237: EAE4         ;                                                                            ;
1238: EAE4         ;  This function returns the current default disk in coded form.             ;
1239: EAE4         ; Register A= 0 if drive A is the current drive, I if drive B, and so on.    ;
1240: EAE4         ; If you need to convert this to the corresponding ASCII character, simply   ;
1241: EAE4         ; add 41H to register A. Use this function when you convert a file name and  ;
1242: EAE4         ; type in an FCB to an ASCII string in order to display it. If the first     ;
1243: EAE4         ; byte of the FCB is OOH, the current default drive is to be used.           ;
1244: EAE4         ; You must therefore use this function to determine the logical disk letter  ;
1245: EAE4         ; for the default drive.                                                     ;
1246: EAE4         ;                                                                            ;
1247: EAE4         ;			Function Code	:	C = 019H                                     ;
1248: EAE4         ;			Entry Parameters:	None										 ;
1249: EAE4         ;			Exit Parameters :	A = Current Disk (0=A,1=B...,F=P)			 ;
1250: EAE4         ;																			 ;
1251: EAE4         ;---------------------------- Get Current Disk- 19 (25) ---------------------;
1252: EAE4             vGetCurrentDisk:
1253: EAE4 3A 37 F5               LD     A,(currentDisk)
1254: EAE7 32 C2 EA               LD     (exitParameterByte),A
1255: EAEA C9                     RET
1256: EAEB         ;---------------------------- Set DMA Address - 1A (26) ---------------------;
1257: EAEB         ;  This function sets the BDOS's direct memory access (DMA) address to a new ;
1258: EAEB         ; value. The name is an historic relic dating back to the Intel Development  ;
1259: EAEB         ; System on which CP/M was originally developed. This machine, by virtue of  ;
1260: EAEB         ; its hardware, could read data from a diskette directly into memory or      ;
1261: EAEB         ; write data to a diskette directly from memory. The name DMA address now    ;
1262: EAEB         ; applies to the address of the buffer to and from which data is             ;
1263: EAEB         ; transferred whenever a diskette Read, Write, or directory operation is     ;
1264: EAEB         ; performed. Whenever CP/M first starts up (cold boot) m a warm boot or      ;
1265: EAEB         ; Reset Disk operation occurs, the DMA address is reset to its default       ;
1266: EAEB         ; value of 0080H.                                                            ;
1267: EAEB         ;                                                                            ;
1268: EAEB         ;			Function Code	:	C = 0A9H                                     ;
1269: EAEB         ;			Entry Parameters:	DE = DMA Address							 ;
1270: EAEB         ;			Exit Parameters :	None										 ;
1271: EAEB         ;																			 ;
1272: EAEB         ;---------------------------- Set DMA Address - 1A (26) ---------------------;
1273: EAEB             vSetDMA:
1274: EAEB 2A C0 EA               LD     HL,(paramDE)
1275: EAEE 22 3D F5               LD     (initDAMAddress),HL
1276: EAF1 C3 CD ED               JP     SetDataDMA
1277: EAF4         ;---------------------------- Get Allocation Vector - 1B (27) ---------------;
1278: EAF4         ;  This function returns the base, or starting, address of the allocation    ;
1279: EAF4         ; vector for the currently selected logical disk. This information,          ;
1280: EAF4         ; indicating which parts of the disk are assigned, is used by utility        ;
1281: EAF4         ; programs and the BDOS itself to determine how much unused space is on the  ;
1282: EAF4         ; logical disk, to locate an unused allocation block in order to extend      ;
1283: EAF4         ; a file, or to relinquish an allocation block when a file is deleted.       ;
1284: EAF4         ;                                                                            ;
1285: EAF4         ;			Function Code	:	C = 01BH                                     ;
1286: EAF4         ;			Entry Parameters:	None										 ;
1287: EAF4         ;			Exit Parameters :	HL = Address of allocation vector			 ;
1288: EAF4         ;																			 ;
1289: EAF4         ;---------------------------- Get Allocation Vector - 1B (27) ---------------;
1290: EAF4             vGetAllocAddr:
1291: EAF4 2A 4B F5               LD     HL,(caAllocVector)
1292: EAF7 22 C2 EA               LD     (exitParameterWord),HL
1293: EAFA C9                     RET
1294: EAFB         ;---------------------------- Get Read-Only Map - 1D (29) -------------------;
1295: EAFB         ;  This function returns a bit map in registers H and L showing which logical;
1296: EAFB         ; disks in the system have been set to Read-Only status, either by the       ;
1297: EAFB         ; Set Logical Disk to Read-Only function call (code 28, ICH), or by the      ;
1298: EAFB         ; BDOS itself, because it detected that a diskette had been changed.         ;
1299: EAFB         ;  The least significant bit of L corresponds to logical disk A, while the   ;
1300: EAFB         ; most significant bit of H corresponds to disk P. The bit corresponding to  ;
1301: EAFB         ; the specific logical disk is set to I if the disk has been set to          ;
1302: EAFB         ; Read-Only status.                                                          ;
1303: EAFB         ;                                                                            ;
1304: EAFB         ;			Function Code	:	C = 0DBH                                     ;
1305: EAFB         ;			Entry Parameters:	None										 ;
1306: EAFB         ;			Exit Parameters :	HL = Read-Only Map							 ;
1307: EAFB         ;																			 ;
1308: EAFB         ;---------------------------- Get Read-Only Map - 1D (29) -------------------;
1309: EAFB             vGetReadOnlyMap:
1310: EAFB 2A 39 F5               LD     HL,(ReadOnlyVector)
1311: EAFE 22 C2 EA               LD     (exitParameterWord),HL
1312: EB01 C9                     RET
1313: EB02         ;------------------ Get Disk Parameter Block Address - 1F (31) --------------;
1314: EB02         ;  This function returns the address of the disk parameter block (DPB) for   ;
1315: EB02         ; the last selected logical disk. The DPB describes the physical             ;
1316: EB02         ; characteristics of a specific logical disk-information mainly of interest  ;
1317: EB02         ; for system utility programs.                                               ;
1318: EB02         ;                                                                            ;
1319: EB02         ;			Function Code	:	C = 1FH                                     ;
1320: EB02         ;			Entry Parameters:	None										 ;
1321: EB02         ;			Exit Parameters :	HL = Address of Disk Parameter Block		 ;
1322: EB02         ;																			 ;
1323: EB02         ;------------------ Get Disk Parameter Block Address - 1F (31) --------------;
1324: EB02             vGetDiskParamBlock:                      ; func31 (31 - 1F)
1325: EB02 2A 47 F5               LD     HL,(caDiskParamBlock)
1326: EB05 22 C2 EA               LD     (exitParameterWord),HL
1327: EB08 C9                     RET
1328: EB09
1329: EB09         ;---------------------------- XXXXX YYYY ZZZZZZ - x (nn) --------------------;
1330: EB09         ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1331: EB09         ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1332: EB09         ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1333: EB09
1334: EB09         ;------------------------ Reset Logical Disk Drive - 25 (37) ----------------;
1335: EB09         ;  This function resets individual disk drives. It is a more precise version ;
1336: EB09         ; of the Reset Disk System function (code 13,ODH), in that you can set       ;
1337: EB09         ; specific logical; disks rather than all of them.                           ;
1338: EB09         ;  The bit map in DE shows which disks are to be reset. The least significant;
1339: EB09         ; bit of; E represents disk A, and the most significant bit of D, disk P.    ;
1340: EB09         ; The bits set to I indicate the disks to be reset.                          ;
1341: EB09         ;  Note that this function returns a zero value in A in order to maintain    ;
1342: EB09         ; compatibility with MP/ M.                                                  ;
1343: EB09         ;                                                                            ;
1344: EB09         ;			Function Code	:	C = 25H                                      ;
1345: EB09         ;			Entry Parameters:	DE = Logical Drive Bit Map					 ;
1346: EB09         ;			Exit Parameters :	A = 00H										 ;
1347: EB09         ;																			 ;
1348: EB09         ;------------------------ Reset Logical Disk Drive - 25 (37) ----------------;
1349: EB09         ;Reset Drive
1350: EB09         ;IN  - (DE) Drive Vector
1351: EB09         ;OUT - (A) 00
1352: EB09             vResetDrive:                      ; func37 (37 - 25) Reset Drive
1353: EB09         ; Not Yet Implemented   **************
1354: EB09 C9                     RET
1355: EB0A         ;*****************************************************************
1356: EB0A
1357: EB0A         ;-----------------------------------------------------------------
1358: EB0A         ;select disk in (E) paramDE
1359: EB0A         ; IN - (E) disk number -- 0=A  1=B ...15=P
1360: EB0A             vSelectDisk:                      ; func14 (14 - 0E)	Select Current Disk
1361: EB0A C3 4E EC               JP     SelectCurrent
1362: EB0D         ;ret ;jmp goba
1363: EB0D
1364: EB0D
1365: EB0D         ;*****************************************************************
1366: EB0D         ;random disk read
1367: EB0D         ;IN  - (DE) FCB address
1368: EB0D         ;OUT - (A) 01 = Reading unwritten data
1369: EB0D         ;	 02 = N/U
1370: EB0D         ;	 03 = Cannot close current extent
1371: EB0D         ;	 04 = Seek to unwriten Extent
1372: EB0D         ;	 05 = N/U
1373: EB0D         ;	 06 = Seek past Physical end of Disk
1374: EB0D             vReadRandom:                      ; func33 (33 - 21) Read Random record
1375: EB0D CD CF F2               CALL   Reselect
1376: EB10 C3 23 EB               JP     RandomDiskRead       ; to perform the disk read
1377: EB13         ;*****************************************************************
1378: EB13         ;write random record
1379: EB13         ;IN  - (DE) FCB address
1380: EB13         ;OUT - (A) 01 = Reading unwritten data
1381: EB13         ;	 02 = N/U
1382: EB13         ;	 03 = Cannot close current extent
1383: EB13         ;	 04 = Seek to unwriten Extent
1384: EB13         ;	 05 = Cannot create new Extent because of directory overflow
1385: EB13         ;	 06 = Seek past Physical end of Disk
1386: EB13             vWriteRandom:                      ; func34 (34 - 22) Write Random record
1387: EB13 CD CF F2               CALL   Reselect
1388: EB16 C3 2C EB               JP     RandomDiskWrite      ; to perform the disk write
1389: EB19         ;ret ;jmp goback
1390: EB19         ;*****************************************************************
1391: EB19         ;return file size (0-65536)
1392: EB19         ;IN  - (DE) FCB address
1393: EB19             vComputeFileSize:                      ; func35 (35 - 23) Compute File Size
1394: EB19 CD CF F2               CALL   Reselect
1395: EB1C C3 D9 EB               JP     GetFileSize
1396: EB1F         ;*****************************************************************
1397: EB1F         ;set random record
1398: EB1F         ;IN  - (DE) FCB address
1399: EB1F         ;OUT - Random Record Field is set
1400: EB1F             vSetRandomRecord:                      ; func36 (36 - 24) Set random Record
1401: EB1F C3 C6 EB               JP     SetRandomRecord
1402: EB22         ;? ;*****************************************************************
1403: EB22         ;? ;Reset Drive
1404: EB22         ;? ;IN  - (DE) Drive Vector
1405: EB22         ;? ;OUT - (A) 00
1406: EB22         ;? vResetDrive:								; func37 (37 - 25) Reset Drive
1407: EB22         ;? ; Not Yet Implemented   **************
1408: EB22         ;?	RET
1409: EB22         ;*****************************************************************
1410: EB22         ;*****************************************************************
1411: EB22         ;Write Random With Zero Fill
1412: EB22         ;IN  - (DE) FCB address
1413: EB22         ;OUT - (A) Return Code		see Function 34
1414: EB22             vWriteRandom0Fill:                      ; func40 (40 - 28) Reset Drive
1415: EB22         ; Not Yet Implemented   **************
1416: EB22 C9                     RET
1417: EB23         ;*****************************************************************
1418: EB23         ;******************< Random I/O Stuff ****************************
1419: EB23         ;*****************************************************************
1420: EB23         ;random disk read
1421: EB23             RandomDiskRead:                      ; randiskread
1422: EB23 0E FF                  LD     C,TRUE               ; marked as read operation
1423: EB25 CD 35 EB               CALL   RandomSeek
1424: EB28 CC C1 EF               CALL   Z,DiskRead           ; if seek successful
1425: EB2B C9                     RET
1426: EB2C         ;*****************************************************************
1427: EB2C         ;random disk write
1428: EB2C             RandomDiskWrite:                      ; randiskwrite
1429: EB2C 0E 00                  LD     C,FALSE              ; marked as read operation
1430: EB2E CD 35 EB               CALL   RandomSeek
1431: EB31 CC 04 F0               CALL   Z,DiskWrite          ; if seek successful
1432: EB34 C9                     RET
1433: EB35         ;*****************************************************************
1434: EB35         ;*****************************************************************
1435: EB35         ;random access seek operation, C=0ffh if read mode
1436: EB35         ;fcb is assumed to address an active file control block
1437: EB35         ;(fcbS2Index has been set to 11000000b if previous bad seek)
1438: EB35             RandomSeek:
1439: EB35 AF                     XOR    A
1440: EB36 32 61 F5               LD     (seqReadFlag),A      ; marked as random access operation
1441: EB39 C5                     PUSH   BC                   ; save r/w flag
1442: EB3A 2A C0 EA               LD     HL,(paramDE)
1443: EB3D EB                     EX     DE,HL                ; DE will hold base of fcb
1444: EB3E 21 21 00               LD     HL,RANDOM_REC_FIELD
1445: EB41 19                     ADD    HL,DE                ; HL=.fcb(RANDOM_REC_FIELD)
1446: EB42 7E                     LD     A,(HL)
1447: EB43 E6 7F                  AND    7FH
1448: EB45 F5                     PUSH   AF                   ; record number
1449: EB46 7E                     LD     A,(HL)
1450: EB47 17                     RLA                         ; cy=lsb of extent#
1451: EB48 23                     INC    HL
1452: EB49 7E                     LD     A,(HL)
1453: EB4A 17                     RLA
1454: EB4B E6 1F                  AND    11111B               ; A=ext#
1455: EB4D 4F                     LD     C,A                  ; C holds extent number, record stacked
1456: EB4E 7E                     LD     A,(HL)
1457: EB4F 1F                     RRA
1458: EB50 1F                     RRA
1459: EB51 1F                     RRA
1460: EB52 1F                     RRA
1461: EB53 E6 0F                  AND    1111B                ; mod#
1462: EB55 47                     LD     B,A                  ; B holds module#, C holds ext#
1463: EB56 F1                     POP    AF                   ; recall sought record #
1464: EB57         ;check to insure that high byte of ran rec = 00
1465: EB57 23                     INC    HL
1466: EB58 6E                     LD     L,(HL)               ; l=high byte (must be 00)
1467: EB59 2C                     INC    L
1468: EB5A 2D                     DEC    L
1469: EB5B 2E 06                  LD     L,06                 ; zero flag, l=6
1470: EB5D         ; produce error 6, seek past physical eod
1471: EB5D C2 BE EB               JP     NZ,RandomSeekError
1472: EB60         ; otherwise, high byte = 0, A = sought record
1473: EB60 21 20 00               LD     HL,NEXT_RECORD
1474: EB63 19                     ADD    HL,DE                ; HL = .fcb(NEXT_RECORD)
1475: EB64 77                     LD     (HL),A               ; sought rec# stored away
1476: EB65         ; arrive here with B=mod#, C=ext#, DE=.fcb, rec stored
1477: EB65         ; the r/w flag is still stacked.  compare fcb values
1478: EB65 21 0C 00               LD     HL,fcbExtIndex       ; extent number field
1479: EB68 19                     ADD    HL,DE
1480: EB69 79                     LD     A,C                  ; A=seek ext#
1481: EB6A 96                     SUB    M
1482: EB6B C2 79 EB               JP     NZ,RandomSeekClose   ; tests for = extents
1483: EB6E         ; extents match, check mod#
1484: EB6E 21 0E 00               LD     HL,fcbS2Index
1485: EB71 19                     ADD    HL,DE
1486: EB72 78                     LD     A,B                  ; B=seek mod#
1487: EB73         ; could be overflow at eof, producing module#
1488: EB73         ; of 90H or 10H, so compare all but fwf
1489: EB73 96                     SUB    M
1490: EB74 E6 7F                  AND    7FH
1491: EB76 CA B1 EB               JP     Z,RandomSeekExit     ; same?
1492: EB79             RandomSeekClose:
1493: EB79 C5                     PUSH   BC
1494: EB7A D5                     PUSH   DE                   ; save seek mod#,ext#, .fcb
1495: EB7B CD A4 F1               CALL   CloseDirEntry        ; current extent closed
1496: EB7E D1                     POP    DE
1497: EB7F C1                     POP    BC                   ; recall parameters and fill
1498: EB80 2E 03                  LD     L,03                 ; cannot close error #3
1499: EB82 3A C2 EA               LD     A,(exitParameterByte)
1500: EB85 3C                     INC    A
1501: EB86 CA B7 EB               JP     Z,RandomSeekErrorBadSeek
1502: EB89 21 0C 00               LD     HL,fcbExtIndex
1503: EB8C 19                     ADD    HL,DE
1504: EB8D 71                     LD     (HL),C               ; fcb(fcbExtIndex)=ext#
1505: EB8E 21 0E 00               LD     HL,fcbS2Index
1506: EB91 19                     ADD    HL,DE
1507: EB92 70                     LD     (HL),B               ; fcb(fcbS2Index)=mod#
1508: EB93 CD FC F2               CALL   OpenFile             ; is the file present?
1509: EB96 3A C2 EA               LD     A,(exitParameterByte)
1510: EB99 3C                     INC    A
1511: EB9A C2 B1 EB               JP     NZ,RandomSeekExit    ; open successful?
1512: EB9D         ; cannot open the file, read mode?
1513: EB9D C1                     POP    BC                   ; r/w flag to c (=0ffh if read)
1514: EB9E C5                     PUSH   BC                   ; everyone expects this item stacked
1515: EB9F 2E 04                  LD     L,04                 ; seek to unwritten extent #4
1516: EBA1 0C                     INC    C                    ; becomes 00 if read operation
1517: EBA2 CA B7 EB               JP     Z,RandomSeekErrorBadSeek ; skip to error if read operation
1518: EBA5 CD 4C F1               CALL   MakeNewFile          ; write operation, make new extent
1519: EBA8 2E 05                  LD     L,05                 ; cannot create new extent #5
1520: EBAA 3A C2 EA               LD     A,(exitParameterByte)
1521: EBAD 3C                     INC    A
1522: EBAE CA B7 EB               JP     Z,RandomSeekErrorBadSeek ; no dir space
1523: EBB1         ; file make operation successful
1524: EBB1             RandomSeekExit:                      ; seekok:
1525: EBB1 C1                     POP    BC                   ; discard r/w flag
1526: EBB2 AF                     XOR    A
1527: EBB3 32 C2 EA               LD     (exitParameterByte),A
1528: EBB6 C9                     RET                         ; with zero set
1529: EBB7
1530: EBB7             RandomSeekErrorBadSeek:
1531: EBB7         ; fcb no longer contains a valid fcb, mark with 11000000b in fcbS2Index field so that it
1532: EBB7         ; appears as overflow with file write flag set
1533: EBB7 E5                     PUSH   HL                   ; save error flag
1534: EBB8 CD C6 F2               CALL   GetModuleNum         ; HL = .fcbS2Index
1535: EBBB 36 C0                  LD     (HL),11000000B
1536: EBBD E1                     POP    HL                   ; and drop through
1537: EBBE             RandomSeekError:                      ; seekerr:
1538: EBBE C1                     POP    BC                   ; discard r/w flag
1539: EBBF 7D                     LD     A,L
1540: EBC0 32 C2 EA               LD     (exitParameterByte),A ; exitParameterByte=#, nonzero
1541: EBC3         ; SetFileWriteFlag returns non-zero accumulator for err
1542: EBC3 C3 CF F3               JP     SetFileWriteFlag     ; flag set, so subsequent close ok
1543: EBC6         ;ret
1544: EBC6         ;
1545: EBC6         ;*****************************************************************
1546: EBC6             SetRandomRecord:                      ; setrandom
1547: EBC6 2A C0 EA               LD     HL,(paramDE)
1548: EBC9 11 20 00               LD     DE,NEXT_RECORD       ; ready params for computesize
1549: EBCC CD 15 EC               CALL   GetRandomRecordPosition ; DE=paramDE, A=cy, BC=mmmm eeee errr rrrr
1550: EBCF 21 21 00               LD     HL,RANDOM_REC_FIELD
1551: EBD2 19                     ADD    HL,DE                ; HL = .FCB(RANDOM_REC_FIELD)
1552: EBD3 71                     LD     (HL),C
1553: EBD4 23                     INC    HL
1554: EBD5 70                     LD     (HL),B
1555: EBD6 23                     INC    HL
1556: EBD7 77                     LD     (HL),A               ; to RANDOM_REC_FIELD
1557: EBD8 C9                     RET
1558: EBD9         ;*****************************************************************
1559: EBD9         ;compute logical file size for current fcb
1560: EBD9             GetFileSize:                      ; getfilesize
1561: EBD9 0E 0C                  LD     C,fcbExtIndex
1562: EBDB CD 3F F3               CALL   Search4DirElement
1563: EBDE         ; zero the receiving Ramdom record field
1564: EBDE 2A C0 EA               LD     HL,(paramDE)
1565: EBE1 11 21 00               LD     DE,RANDOM_REC_FIELD
1566: EBE4 19                     ADD    HL,DE
1567: EBE5 E5                     PUSH   HL                   ; save position
1568: EBE6 72                     LD     (HL),D
1569: EBE7 23                     INC    HL
1570: EBE8 72                     LD     (HL),D
1571: EBE9 23                     INC    HL
1572: EBEA 72                     LD     (HL),D               ; =00 00 00
1573: EBEB             GetFileSize1:                      ; getsize:
1574: EBEB CD EF ED               CALL   EndOfDirectory
1575: EBEE CA 13 EC               JP     Z,GetFileSizeExit
1576: EBF1         ; current fcb addressed by dptr
1577: EBF1 CD E3 ED               CALL   GetDirElementAddress
1578: EBF4 11 0F 00               LD     DE,fcbRCIndex        ; ready for compute size
1579: EBF7 CD 15 EC               CALL   GetRandomRecordPosition
1580: EBFA         ; A=0000 000? BC = mmmm eeee errr rrrr compare with memory, larger?
1581: EBFA E1                     POP    HL
1582: EBFB E5                     PUSH   HL                   ; recall, replace .fcb(Random record Field)
1583: EBFC 5F                     LD     E,A                  ; save cy
1584: EBFD 79                     LD     A,C
1585: EBFE 96                     SUB    M
1586: EBFF 23                     INC    HL                   ; ls byte
1587: EC00 78                     LD     A,B
1588: EC01 9E                     SBC    A,(HL)
1589: EC02 23                     INC    HL                   ; middle byte
1590: EC03 7B                     LD     A,E
1591: EC04 9E                     SBC    A,(HL)               ; carry if .fcb(random record field) > directory
1592: EC05 DA 0D EC               JP     C,GetFileSize2       ; for another try
1593: EC08         ; fcb is less or equal, fill from directory
1594: EC08 73                     LD     (HL),E
1595: EC09 2B                     DEC    HL
1596: EC0A 70                     LD     (HL),B
1597: EC0B 2B                     DEC    HL
1598: EC0C 71                     LD     (HL),C
1599: EC0D             GetFileSize2:                      ; getnextsize:
1600: EC0D CD 57 F3               CALL   Search4NextDirElement
1601: EC10 C3 EB EB               JP     GetFileSize1
1602: EC13             GetFileSizeExit:                      ; setsize:
1603: EC13 E1                     POP    HL                   ; discard .fcb(random record field)
1604: EC14 C9                     RET
1605: EC15         ;-----------------------------------------------------------------
1606: EC15         ;compute random record position
1607: EC15             GetRandomRecordPosition:                      ; compute$rr
1608: EC15 EB                     EX     DE,HL
1609: EC16 19                     ADD    HL,DE
1610: EC17         ; DE=.buf(dptr) or .fcb(0), HL = .f(NEXT_RECORD/fcbRCIndex)
1611: EC17 4E                     LD     C,(HL)
1612: EC18 06 00                  LD     B,0                  ; BC = 0000 0000 ?rrr rrrr
1613: EC1A 21 0C 00               LD     HL,fcbExtIndex
1614: EC1D 19                     ADD    HL,DE
1615: EC1E 7E                     LD     A,(HL)
1616: EC1F 0F                     RRCA
1617: EC20 E6 80                  AND    80H                  ; A=e000 0000
1618: EC22 81                     ADD    A,C
1619: EC23 4F                     LD     C,A
1620: EC24 3E 00                  LD     A,0
1621: EC26 88                     ADC    A,B
1622: EC27 47                     LD     B,A
1623: EC28         ; BC = 0000 000? errrr rrrr
1624: EC28 7E                     LD     A,(HL)
1625: EC29 0F                     RRCA
1626: EC2A E6 0F                  AND    LO_NIBBLE_MASK
1627: EC2C 80                     ADD    A,B
1628: EC2D 47                     LD     B,A
1629: EC2E         ; BC = 000? eeee errrr rrrr
1630: EC2E 21 0E 00               LD     HL,fcbS2Index
1631: EC31 19                     ADD    HL,DE
1632: EC32 7E                     LD     A,(HL)               ; A=XXX? mmmm
1633: EC33 87                     ADD    A,A
1634: EC34 87                     ADD    A,A
1635: EC35 87                     ADD    A,A
1636: EC36 87                     ADD    A,A                  ; cy=? A=mmmm 0000
1637: EC37 F5                     PUSH   AF
1638: EC38 80                     ADD    A,B
1639: EC39 47                     LD     B,A
1640: EC3A         ; cy=?, BC = mmmm eeee errr rrrr
1641: EC3A F5                     PUSH   AF                   ; possible second carry
1642: EC3B E1                     POP    HL                   ; cy = lsb of L
1643: EC3C 7D                     LD     A,L                  ; cy = lsb of A
1644: EC3D E1                     POP    HL                   ; cy = lsb of L
1645: EC3E B5                     OR     L                    ; cy/cy = lsb of A
1646: EC3F E6 01                  AND    1                    ; A = 0000 000? possible carry-out
1647: EC41 C9                     RET
1648: EC42         ;-----------------------------------------------------------------
1649: EC42
1650: EC42
1651: EC42
1652: EC42         ;*****************************************************************
1653: EC42         ;********************** Disk  I/O ********************************
1654: EC42         ;*****************************************************************
1655: EC42         ;-----------------------------------------------------------------
1656: EC42         ;;write protect current disk
1657: EC42             vWriteProtectDisk:                      ; func28 (28 - 1C) Write protect disk
1658: EC42 C3 35 ED               JP     SetDiskReadOnly
1659: EC45         ;-----------------------------------------------------------------
1660: EC45         ;;set file Attributes
1661: EC45             vSetFileAttributes:                      ; func30 (30 - 1E) Set File Attributes
1662: EC45 CD CF F2               CALL   Reselect
1663: EC48 CD 24 EF               CALL   SetAttributes
1664: EC4B C3 B9 F2               JP     DirLocationToReturnLoc ; exitParameterByte=dirloc
1665: EC4E         ;-----------------------------------------------------------------
1666: EC4E
1667: EC4E             SelectCurrent:                      ; curselect
1668: EC4E 3A BF EA               LD     A,(paramE)
1669: EC51 21 37 F5               LD     HL,currentDisk
1670: EC54 BE                     CP     M
1671: EC55 C8                     RET    Z                    ; exit if parame = Current disk
1672: EC56 77                     LD     (HL),A
1673: EC57 C3 5A EC               JP     Select
1674: EC5A         ;*****************************************************************
1675: EC5A         ;--------------------------- Select Login Drive -----------------------------;
1676: EC5A         ; select Login Drive                                                        ;
1677: EC5A             Select:                         ;
1678: EC5A CD 7B EC               CALL   SelectDisk           ; Select the Disk                    ;
1679: EC5D CC A6 F4               CALL   Z,errSelect          ;
1680: EC60 21 37 F5               LD     HL,currentDisk       ;
1681: EC63 46                     LD     B,(HL)               ; Get Current Disk                   ;
1682: EC64 2A 3B F5               LD     HL,(loggedDisks)     ; Load Logged Disk MAP               ;
1683: EC67 CD 78 F4               CALL   IsBitSet             ;
1684: EC6A C0                     RET    NZ                   ; Exit if already logged in          ;
1685: EC6B         ;                                                                            ;
1686: EC6B 21 37 F5               LD     HL,currentDisk       ;
1687: EC6E 46                     LD     B,(HL)               ; Get Current Disk                   ;
1688: EC6F 2A 3B F5               LD     HL,(loggedDisks)     ; else log in a different disk	     ;
1689: EC72 CD 88 F4               CALL   SetMapBit            ;
1690: EC75 22 3B F5               LD     (loggedDisks),HL     ; Update the Map                     ;
1691: EC78         ;
1692: EC78 C3 C1 EC               JP     InitDisk             ;
1693: EC7B         ;--------------------------- Select Login Drive -----------------------------;
1694: EC7B
1695: EC7B         ;--------------------------- Select Disk ------------------------------------;
1696: EC7B         ;*****************************************************************          ;
1697: EC7B         ; select the disk drive given by currentDisk, and fill the base addresses   ;
1698: EC7B         ; caTrack - caAllocVector, then fill the values of the disk parameter block ;
1699: EC7B             SelectDisk:                      ;
1700: EC7B 3A 37 F5               LD     A,(currentDisk)      ; Get current disk (0=A,1=B...)      ;
1701: EC7E 4F                     LD     C,A                  ; Prepare for BIOS Call              ;
1702: EC7F CD 1B F6               CALL   bcSeldsk             ; Select the disk                    ;
1703: EC82 7C                     LD     A,H                  ; Return Pointer to                  ;
1704: EC83 B5                     OR     L                    ;  Disk Parameter Header             ;
1705: EC84 C8                     RET    Z                    ; exit if error, with HL = 0000      ;
1706: EC85         ;
1707: EC85 5E                     LD     E,(HL)               ;
1708: EC86 23                     INC    HL                   ;
1709: EC87 56                     LD     D,(HL)               ; Skew Table in DE                   ;
1710: EC88 23                     INC    HL                   ; HL = DPH + 2, Rel Pos for File     ;
1711: EC89 ED 53 5C F5               LD     (caSkewTable),DE     ; Move to Current Skew Table         ;
1712: EC8D         ;
1713: EC8D 22 3F F5               LD     (caDirMaxValue),HL   ; Move to Current Dir max            ;
1714: EC90 23                     INC    HL                   ;
1715: EC91 23                     INC    HL                   ; HL = Last Track #                  ;
1716: EC92 22 41 F5               LD     (caTrack),HL         ; Move to Current Track #            ;
1717: EC95 23                     INC    HL                   ;
1718: EC96 23                     INC    HL                   ; HL = Last Sector #                 ;
1719: EC97 22 43 F5               LD     (caSector),HL        ; Move to Current Sector #           ;
1720: EC9A 23                     INC    HL                   ;
1721: EC9B 23                     INC    HL                   ;
1722: EC9C 11 45 F5               LD     DE,caDirectoryDMA    ;
1723: EC9F 01 08 00               LD     BC,caListSize        ;
1724: ECA2 ED B0                  LDIR                        ;
1725: ECA4         ;
1726: ECA4         ; finish filling in address list                                             ;
1727: ECA4 2A 47 F5               LD     HL,(caDiskParamBlock) ; Point Disk Parameter Block         ;
1728: ECA7 11 4D F5               LD     DE,dpbStart          ; Point at BIOS DPB                  ;
1729: ECAA 01 0F 00               LD     BC,dpbSize           ;
1730: ECAD ED B0                  LDIR                        ; Move DPB to current                ;
1731: ECAF         ;
1732: ECAF         ; Determine if Byte or Word Allocation Table	                             ;
1733: ECAF 2A 52 F5               LD     HL,(dpbDSM)          ; Get max entry number               ;
1734: ECB2 7C                     LD     A,H                  ; If  its 00 then < 255              ;
1735: ECB3 21 66 F5               LD     HL,byteAllocationFlag ; Point at the  flag				 ;
1736: ECB6 36 FF                  LD     (HL),TRUE            ; Assume its less than 255           ;
1737: ECB8 B7                     OR     A                    ;  is the assumption confirmed ?     ;
1738: ECB9 28 02                  JR     Z,SelectDisk1        ;  skip if yes                       ;
1739: ECBB 36 00                  LD     (HL),FALSE           ; Fix assumption,set flag to false   ;
1740: ECBD         ;
1741: ECBD         ; Set Sign, reset Carry and Zero to indicate success                         ;
1742: ECBD             SelectDisk1:                      ;
1743: ECBD 3E FF                  LD     A,TRUE               ;
1744: ECBF B7                     OR     A                    ;
1745: ECC0 C9                     RET                         ;
1746: ECC1         ;--------------------------- Select Disk ------------------------------------;
1747: ECC1         ;--------------------------- Initialize Disk --------------------------------;
1748: ECC1             InitDisk:
1749: ECC1 2A 52 F5               LD     HL,(dpbDSM)          ; Maximum allocation value
1750: ECC4 06 03                  LD     B,3                  ; We want dpbDSM/8
1751: ECC6             InitDiskLoop1:
1752: ECC6 AF                     XOR    A                    ; Rest the CY flag
1753: ECC7 CB 1C                  RR     H
1754: ECC9 CB 1D                  RR     L                    ; Shift right
1755: ECCB 10 F9                  DJNZ   InitDiskLoop1        ; Loop till divide by 8
1756: ECCD E5                     PUSH   HL
1757: ECCE C1                     POP    BC                   ; BC = dpbDSM/8+1
1758: ECCF         ; Clear the Allocation Vector
1759: ECCF 2A 4B F5               LD     HL,(caAllocVector)   ; Allocation vector Start
1760: ECD2 36 00                  LD     (HL),0               ; Clear location
1761: ECD4 ED 5B 4B F5               LD     DE,(caAllocVector)
1762: ECD8 13                     INC    DE                   ; Allocation vector Start + 1
1763: ECD9 ED B0                  LDIR                        ; Cascade 00 thru Allocation Vector
1764: ECDB         ; Mark the reserved space for the directory
1765: ECDB 2A 56 F5               LD     HL,(dpbDABM)         ; Directory block reserved bits
1766: ECDE EB                     EX     DE,HL
1767: ECDF 2A 4B F5               LD     HL,(caAllocVector)   ; HL Start of Allocation Vector
1768: ECE2 73                     LD     (HL),E
1769: ECE3 23                     INC    HL
1770: ECE4 72                     LD     (HL),D               ; Put reserved blocks in Vector
1771: ECE5         ; home disk, and set current track and sector to 00
1772: ECE5 CD B3 ED               CALL   Home
1773: ECE8 2A 3F F5               LD     HL,(caDirMaxValue)
1774: ECEB 36 03                  LD     (HL),3
1775: ECED 23                     INC    HL
1776: ECEE 36 00                  LD     (HL),0               ; Current Max Dir Value = 0003
1777: ECF0 CD DC ED               CALL   SetEndDirectory      ; dirEntryIndex = EOD (-1)
1778: ECF3
1779: ECF3             InitDisk1:
1780: ECF3         ; Process the directory for
1781: ECF3 0E FF                  LD     C,TRUE               ; Set flag for setting CheckSum
1782: ECF5 CD 01 EE               CALL   ReadDirectory
1783: ECF8 CD EF ED               CALL   EndOfDirectory
1784: ECFB C8                     RET    Z                    ; Exit at end of directory
1785: ECFC         ; not end of directory, valid entry?
1786: ECFC CD E3 ED               CALL   GetDirElementAddress ; Calculate the location of the element
1787: ECFF 3E E5                  LD     A,emptyDir
1788: ED01 BE                     CP     M
1789: ED02 CA F3 EC               JP     Z,InitDisk1          ; go get another item
1790: ED05         ; not emptyDir, user code the same?
1791: ED05 3A 36 F5               LD     A,(currentUserNumber)
1792: ED08 BE                     CP     M
1793: ED09 C2 17 ED               JP     NZ,InitDisk2
1794: ED0C         ; same user code, check for '$' submit
1795: ED0C 23                     INC    HL
1796: ED0D 7E                     LD     A,(HL)               ; first character
1797: ED0E D6 24                  SUB    DOLLAR               ; dollar file?
1798: ED10 C2 17 ED               JP     NZ,InitDisk2
1799: ED13         ; dollar file found, mark in exitParameterByte
1800: ED13 3D                     DEC    A
1801: ED14 32 C2 EA               LD     (exitParameterByte),A ; exitParameterByte = 255
1802: ED17             InitDisk2:
1803: ED17         ; now scan the disk map for allocated blocks
1804: ED17 0E 01                  LD     C,1                  ; set to allocated
1805: ED19 CD 4C ED               CALL   ScanDiskMap
1806: ED1C CD D8 EE               CALL   SetDirectoryEntry    ; set DirMaxVAlue to dirEntryIndex
1807: ED1F C3 F3 EC               JP     InitDisk1            ; for another entry
1808: ED22         ;--------------------------- Initialize Disk --------------------------------;
1809: ED22         ;---------------
1810: ED22         ; set a "1" value in currentDisk position of BC
1811: ED22         ; return in HL
1812: ED22             SetCurrentDiskBit:
1813: ED22 C5                     PUSH   BC                   ; save input parameter
1814: ED23 3A 37 F5               LD     A,(currentDisk)
1815: ED26 4F                     LD     C,A                  ; ready parameter for shift
1816: ED27 21 01 00               LD     HL,1                 ; number to shift
1817: ED2A CD 67 F4               CALL   ShiftLeftHLbyC       ; HL = mask to integrate
1818: ED2D C1                     POP    BC                   ; original mask
1819: ED2E 79                     LD     A,C
1820: ED2F B5                     OR     L
1821: ED30 6F                     LD     L,A
1822: ED31 78                     LD     A,B
1823: ED32 B4                     OR     H
1824: ED33 67                     LD     H,A                  ; HL = mask or rol(1,currentDisk)
1825: ED34 C9                     RET
1826: ED35         ;--------------
1827: ED35         ;set current disk to read only
1828: ED35             SetDiskReadOnly:
1829: ED35 21 39 F5               LD     HL,ReadOnlyVector
1830: ED38 4E                     LD     C,(HL)
1831: ED39 23                     INC    HL
1832: ED3A 46                     LD     B,(HL)
1833: ED3B CD 22 ED               CALL   SetCurrentDiskBit    ; sets bit to 1
1834: ED3E 22 39 F5               LD     (ReadOnlyVector),HL
1835: ED41         ; high water mark in directory goes to max
1836: ED41 2A 54 F5               LD     HL,(dpbDRM)          ; directory max
1837: ED44 EB                     EX     DE,HL                ; DE = directory max
1838: ED45 2A 3F F5               LD     HL,(caDirMaxValue)   ; HL = .Directory max value
1839: ED48 73                     LD     (HL),E
1840: ED49 23                     INC    HL
1841: ED4A 72                     LD     (HL),D               ; cdrmax = dpbDRM
1842: ED4B C9                     RET
1843: ED4C
1844: ED4C         ;
1845: ED4C         ;-------------Scan the disk map for unallocated entry-----------------------------------
1846: ED4C         ; scan the disk map addressed by dptr for non-zero entries.  The allocation
1847: ED4C         ; vector entry corresponding to a non-zero entry is set to the value of C (0,1)
1848: ED4C             ScanDiskMap:
1849: ED4C CD E3 ED               CALL   GetDirElementAddress ; HL = buffa + dptr
1850: ED4F         ; HL addresses the beginning of the directory entry
1851: ED4F 11 10 00               LD     DE,fcbDiskMapIndex
1852: ED52 19                     ADD    HL,DE                ; hl now addresses the disk map
1853: ED53 C5                     PUSH   BC                   ; save the set/reset bit
1854: ED54 0E 11                  LD     C,fcbLength-fcbDiskMapIndex+1 ; size of Disk Allocation Map + 1
1855: ED56
1856: ED56             ScanDiskMap0:                      ; loop once for each disk map entry
1857: ED56 D1                     POP    DE                   ; recall the set/reset bit
1858: ED57 0D                     DEC    C
1859: ED58 C8                     RET    Z
1860: ED59
1861: ED59 D5                     PUSH   DE                   ; save the set/reset bit
1862: ED5A 3A 66 F5               LD     A,(byteAllocationFlag) ; byteAllocationFlag byte entry flag
1863: ED5D B7                     OR     A
1864: ED5E CA 69 ED               JP     Z,ScanDiskMap1       ; skip if two byte value
1865: ED61         ;  Byte Allocation scan operation
1866: ED61 C5                     PUSH   BC                   ; save counter
1867: ED62 E5                     PUSH   HL                   ; save map address
1868: ED63 4E                     LD     C,(HL)
1869: ED64 06 00                  LD     B,0                  ; BC=block#
1870: ED66 C3 6F ED               JP     ScanDiskMap2
1871: ED69         ; two byte scan operation
1872: ED69             ScanDiskMap1:
1873: ED69 0D                     DEC    C                    ; adjust counter for double byte
1874: ED6A C5                     PUSH   BC                   ; save counter
1875: ED6B         ;	MOV		C,M
1876: ED6B 46                     LD     B,(HL)
1877: ED6C 23                     INC    HL
1878: ED6D         ;	MOV		B,M								; BC=block#
1879: ED6D 4E                     LD     C,(HL)               ; BC=block#
1880: ED6E E5                     PUSH   HL                   ; save map address
1881: ED6F             ScanDiskMap2:                      ; arrive here with BC=block#, E=0/1
1882: ED6F 79                     LD     A,C
1883: ED70 B0                     OR     B                    ; skip if = 0000
1884: ED71 C4 A1 ED               CALL   NZ,SetAllocBit       ; bit set to 0/1 its in C
1885: ED74 E1                     POP    HL
1886: ED75 23                     INC    HL                   ; to next bit position
1887: ED76 C1                     POP    BC                   ; recall counter
1888: ED77 C3 56 ED               JP     ScanDiskMap0         ; for another item
1889: ED7A         ;
1890: ED7A         ;-----------------------------------
1891: ED7A         ;given allocation vector position BC, return with byte
1892: ED7A         ;containing BC shifted so that the least significant
1893: ED7A         ;bit is in the low order accumulator position.  HL is
1894: ED7A         ;the address of the byte for possible replacement in
1895: ED7A         ;memory upon return, and D contains the number of shifts
1896: ED7A         ;required to place the returned value back into position
1897: ED7A
1898: ED7A             GetAllocBit:                      ; getallocbit
1899: ED7A 79                     LD     A,C
1900: ED7B E6 07                  AND    111b
1901: ED7D 3C                     INC    A
1902: ED7E 5F                     LD     E,A
1903: ED7F 57                     LD     D,A
1904: ED80         ; d and e both contain the number of bit positions to shift
1905: ED80 79                     LD     A,C
1906: ED81 0F                     RRCA
1907: ED82 0F                     RRCA
1908: ED83 0F                     RRCA
1909: ED84 E6 1F                  AND    11111b
1910: ED86 4F                     LD     C,A                  ; C shr 3 to C
1911: ED87 78                     LD     A,B
1912: ED88 87                     ADD    A,A
1913: ED89 87                     ADD    A,A
1914: ED8A 87                     ADD    A,A
1915: ED8B 87                     ADD    A,A
1916: ED8C 87                     ADD    A,A                  ; B shl 5
1917: ED8D B1                     OR     C
1918: ED8E 4F                     LD     C,A                  ; bbbccccc to C
1919: ED8F 78                     LD     A,B
1920: ED90 0F                     RRCA
1921: ED91 0F                     RRCA
1922: ED92 0F                     RRCA
1923: ED93 E6 1F                  AND    11111b
1924: ED95 47                     LD     B,A                  ; BC shr 3 to BC
1925: ED96 2A 4B F5               LD     HL,(caAllocVector)   ; base address of allocation vector
1926: ED99 09                     ADD    HL,BC
1927: ED9A 7E                     LD     A,(HL)               ; byte to A, hl = .alloc(BC shr 3)
1928: ED9B         ;now move the bit to the low order position of A
1929: ED9B             GetAllocBitl:
1930: ED9B 07                     RLCA
1931: ED9C 1D                     DEC    E
1932: ED9D C2 9B ED               JP     NZ,GetAllocBitl
1933: EDA0 C9                     RET
1934: EDA1
1935: EDA1         ;-----------------------------------
1936: EDA1         ; BC is the bit position of ALLOC to set or reset.  The
1937: EDA1         ; value of the bit is in register E.
1938: EDA1             SetAllocBit:
1939: EDA1 D5                     PUSH   DE
1940: EDA2 CD 7A ED               CALL   GetAllocBit          ; shifted val A, count in D
1941: EDA5 E6 FE                  AND    11111110b            ; mask low bit to zero (may be set)
1942: EDA7 C1                     POP    BC
1943: EDA8 B1                     OR     C                    ; low bit of C is masked into A
1944: EDA9 C3 AC ED               JP     RotateAndReplace     ; to rotate back into proper position
1945: EDAC         ;ret
1946: EDAC         ;-----------------------------------
1947: EDAC         ; byte value from ALLOC is in register A, with shift count
1948: EDAC         ; in register C (to place bit back into position), and
1949: EDAC         ; target ALLOC position in registers HL, rotate and replace
1950: EDAC             RotateAndReplace:
1951: EDAC 0F                     RRCA
1952: EDAD 15                     DEC    D
1953: EDAE C2 AC ED               JP     NZ,RotateAndReplace  ; back into position
1954: EDB1 77                     LD     (HL),A               ; back to ALLOC
1955: EDB2 C9                     RET
1956: EDB3         ;-----------------------------------
1957: EDB3         ;--------------------------- Home The Current Disk -------------------------;
1958: EDB3         ;move to home position, then offset to start of dir                         ;
1959: EDB3             Home:                           ;
1960: EDB3 CD 18 F6               CALL   bcHome               ; Sets Track to 0, and checks       ;
1961: EDB6         ; if Buffer needs to be written     ;
1962: EDB6 21 5A F5               LD     HL,dpbOFF            ; Number of tracks before directory ;
1963: EDB9 4E                     LD     C,(HL)               ;
1964: EDBA 23                     INC    HL                   ;
1965: EDBB 46                     LD     B,(HL)               ;
1966: EDBC CD 1E F6               CALL   bcSettrk             ; Point at 1st directory position   ;
1967: EDBF         ;
1968: EDBF         ; Set Current Track and Sector to 00                                        ;
1969: EDBF AF                     XOR    A                    ; set ACC to 00                     ;
1970: EDC0 2A 41 F5               LD     HL,(caTrack)         ;
1971: EDC3 77                     LD     (HL),A               ;
1972: EDC4 23                     INC    HL                   ;
1973: EDC5 77                     LD     (HL),A               ;
1974: EDC6 2A 43 F5               LD     HL,(caSector)        ;
1975: EDC9 77                     LD     (HL),A               ;
1976: EDCA 23                     INC    HL                   ;
1977: EDCB 77                     LD     (HL),A               ;
1978: EDCC C9                     RET                         ;
1979: EDCD         ;
1980: EDCD         ;--------------------------- Home The Current Disk -------------------------;
1981: EDCD
1982: EDCD         ;*****************************************************************
1983: EDCD
1984: EDCD         ;*****************************************************************
1985: EDCD         ;--------------------------- Disk Utilities --------------------------------;
1986: EDCD             SetDataDMA:                      ;
1987: EDCD         ;	LD		HL,initDAMAddress                                               ;
1988: EDCD         ;	JR		SetDMA						; Skip to complete the call         ;
1989: EDCD 01 3D F5               LD     BC,initDAMAddress    ;
1990: EDD0 C3 24 F6               JP     bcSetdma             ; Call BIOS to set                  ;
1991: EDD3         ;
1992: EDD3             SetDirDMA:                      ;
1993: EDD3 21 45 F5               LD     HL,caDirectoryDMA    ; Load current directory Buffer     ;
1994: EDD6         ;	LD		BC,caDirectoryDMA			; Load current directory Buffer     ;
1995: EDD6         ;	JP		bcSetdma					; Call BIOS to set                  ;
1996: EDD6         ;
1997: EDD6         ;SetDMA:									                                ;
1998: EDD6 4E                     LD     C,(HL)               ;
1999: EDD7 23                     INC    HL                   ;
2000: EDD8 46                     LD     B,(HL)               ; parameter ready               ;
2001: EDD9 C3 24 F6               JP     bcSetdma             ; call bios to set              ;
2002: EDDC         ;
2003: EDDC         ;--------------------------- Disk Utilities --------------------------------;
2004: EDDC
2005: EDDC         ;--------------------------- File Utilities --------------------------------;
2006: EDDC         ;--------------------------- File Utilities --------------------------------;
2007: EDDC
2008: EDDC         ;--------------------------- Directory Utilities ---------------------------;
2009: EDDC         ; Set the directory index to 0FFFFH                                         ;
2010: EDDC             SetEndDirectory:                      ;
2011: EDDC 21 FF FF               LD     HL,EOD               ;
2012: EDDF 22 71 F5               LD     (dirEntryIndex),HL   ;
2013: EDE2 C9                     RET                         ;
2014: EDE3         ;
2015: EDE3         ; compute the address of a directory element in Directory Buffer            ;
2016: EDE3             GetDirElementAddress:                      ;
2017: EDE3 2A 45 F5               LD     HL,(caDirectoryDMA)  ; Get the Directory Buffer base     ;
2018: EDE6 3A 70 F5               LD     A,(dirBlockIndex)    ; Get the index value               ;
2019: EDE9 4F                     LD     C,A                  ;
2020: EDEA AF                     XOR    A                    ; Set to Zero and reset CY          ;
2021: EDEB 47                     LD     B,A                  ;
2022: EDEC ED 4A                  ADC    HL,BC                ; Compute the Entry Location        ;
2023: EDEE C9                     RET                         ;
2024: EDEF         ;
2025: EDEF         ;--------------------------- Directory Utilities ---------------------------;
2026: EDEF
2027: EDEF         ;---------------
2028: EDEF         ;---------------
2029: EDEF         ;---------------
2030: EDEF         ; return zero flag if at end of directory
2031: EDEF         ; non zero if not at end (end of dir if dirEntryIndex = 0ffffh)
2032: EDEF             EndOfDirectory:
2033: EDEF 21 71 F5               LD     HL,dirEntryIndex
2034: EDF2 7E                     LD     A,(HL)               ; may be 0ffh
2035: EDF3 23                     INC    HL
2036: EDF4 BE                     CP     M                    ; low(dirEntryIndex) = high(dirEntryIndex)?
2037: EDF5 C0                     RET    NZ                   ; non zero returned if different
2038: EDF6         ; high and low the same, = 0ffh?
2039: EDF6 3C                     INC    A                    ; 0ffh becomes 00 if so
2040: EDF7 C9                     RET
2041: EDF8         ;---------------
2042: EDF8         ;--------------------------- Read Directory Record --------------------------;
2043: EDF8         ; read a directory entry into the directory buffer
2044: EDF8             ReadDirRecord:
2045: EDF8 CD D3 ED               CALL   SetDirDMA            ; System Assigned Buffer
2046: EDFB CD 3D F2               CALL   ReadBuffer           ; directory record loaded
2047: EDFE C3 CD ED               JP     SetDataDMA           ; to data dma address
2048: EE01         ;ret
2049: EE01         ;--------------------------- Read Directory Record --------------------------;
2050: EE01
2051: EE01         ;--------------------------- Read Directory ---------------------------------;
2052: EE01         ; Read next directory entry, with C=true if initializing and setting CheckSum
2053: EE01             ReadDirectory:
2054: EE01 ED 5B 54 F5               LD     DE,(dpbDRM)          ; Number of Dir Entries-1
2055: EE05 2A 71 F5               LD     HL,(dirEntryIndex)   ; Prior Directory Index
2056: EE08 23                     INC    HL                   ; Increment the Index
2057: EE09 22 71 F5               LD     (dirEntryIndex),HL   ; Save current directory index
2058: EE0C AF                     XOR    A                    ; Clear the CY flag
2059: EE0D ED 52                  SBC    HL,DE                ; Are we at end Of the directory
2060: EE0F 20 04                  JR     NZ,ReadDirectory0    ;  No the process
2061: EE11 CD DC ED               CALL   SetEndDirectory      ;  else we are done
2062: EE14 C9                     RET
2063: EE15
2064: EE15         ; Calculate the entry index Position in Buffer
2065: EE15             ReadDirectory0:
2066: EE15 3A 71 F5               LD     A,(dirEntryIndex)    ; Get the index
2067: EE18 E6 03                  AND    dirEntryMask         ; Determine Entry number in the buffer
2068: EE1A 06 05                  LD     B,fcbShift           ; Shift value results in Record Size
2069: EE1C             ReadDirectory1:
2070: EE1C 87                     ADD    A,A
2071: EE1D 10 FD                  DJNZ   ReadDirectory1
2072: EE1F         ;	DEC		B
2073: EE1F         ;	JP	NZ,ReadDirectory1
2074: EE1F         ; A = (low(dirEntryIndex) and dirEntryMask) shl fcbShift
2075: EE1F 32 70 F5               LD     (dirBlockIndex),A    ; Now save the Index into to buffer
2076: EE22 B7                     OR     A                    ; Is this the 1st entry?
2077: EE23 C0                     RET    NZ                   ;  return if not
2078: EE24 C5                     PUSH   BC                   ; save Init Flag (CheckSum)
2079: EE25 CD 2F EE               CALL   SeekDir              ; seek$dir seek proper record
2080: EE28 CD F8 ED               CALL   ReadDirRecord        ; read the directory record
2081: EE2B C1                     POP    BC                   ; recall initialization flag
2082: EE2C C3 A3 EE               JP     CalculateCheckSum    ; checksum the directory elt
2083: EE2F         ;---------
2084: EE2F         ;--------------------------- Read Directory ---------------------------------;
2085: EE2F         ;seek the record containing the current dir entry
2086: EE2F             SeekDir:
2087: EE2F 2A 71 F5               LD     HL,(dirEntryIndex)   ; directory counter to HL
2088: EE32 0E 02                  LD     C,dirEntryShift      ; 4 entries per record
2089: EE34 CD 5A F4               CALL   ShiftRightHLbyC      ; value to HL
2090: EE37 22 6E F5               LD     (currentBlock),HL
2091: EE3A 22 73 F5               LD     (dirRecord),HL       ; ready for seek
2092: EE3D C3 40 EE               JP     Seek
2093: EE40         ;---------------------------
2094: EE40             Seek:                           ; seek
2095: EE40         ;seek the track given by currentBlock (actual record number)
2096: EE40
2097: EE40 21 6E F5               LD     HL,currentBlock      ; contains the cpm record number
2098: EE43 4E                     LD     C,(HL)               ; Actual Record Number Low
2099: EE44 23                     INC    HL
2100: EE45 46                     LD     B,(HL)               ; Actual Record Number High
2101: EE46 2A 43 F5               LD     HL,(caSector)        ; Current Sector
2102: EE49 5E                     LD     E,(HL)               ; Current Sector Number Low
2103: EE4A 23                     INC    HL
2104: EE4B 56                     LD     D,(HL)               ; Current Sector Number High
2105: EE4C 2A 41 F5               LD     HL,(caTrack)         ; Current track
2106: EE4F 7E                     LD     A,(HL)               ; Current track Number Low - temp
2107: EE50 23                     INC    HL
2108: EE51 66                     LD     H,(HL)               ; Current track Number High
2109: EE52 6F                     LD     L,A                  ; Current track Number Low
2110: EE53         ;(BC) - cpmRecord Number
2111: EE53         ;(DE) - Current Sector
2112: EE53         ;(HL) - Current Track
2113: EE53
2114: EE53         ;loop while currentBlock < currec   ?????
2115: EE53             Seek0:
2116: EE53 79                     LD     A,C                  ;   Current Sector
2117: EE54 93                     SUB    E                    ;
2118: EE55 78                     LD     A,B                  ; - cpmRecord Number
2119: EE56 9A                     SBC    A,D                  ;
2120: EE57 D2 69 EE               JP     NC,Seek1             ; skip if cpmRecord Number >= Current Sector
2121: EE5A
2122: EE5A E5                     PUSH   HL
2123: EE5B 2A 4D F5               LD     HL,(dpbSPT)
2124: EE5E 7B                     LD     A,E
2125: EE5F 95                     SUB    L
2126: EE60 5F                     LD     E,A
2127: EE61 7A                     LD     A,D
2128: EE62 9C                     SBC    A,H
2129: EE63 57                     LD     D,A
2130: EE64 E1                     POP    HL
2131: EE65 2B                     DEC    HL
2132: EE66 C3 53 EE               JP     Seek0
2133: EE69
2134: EE69             Seek1:
2135: EE69
2136: EE69 E5                     PUSH   HL                   ; Save Current Track
2137: EE6A 2A 4D F5               LD     HL,(dpbSPT)          ; records per track
2138: EE6D 19                     ADD    HL,DE                ; HL = Current Sector + sectorsPerClynder
2139: EE6E 79                     LD     A,C                  ;     cpmRecord Number
2140: EE6F 95                     SUB    L                    ;
2141: EE70 78                     LD     A,B                  ;  - HL (above)
2142: EE71 9C                     SBC    A,H                  ;
2143: EE72 DA 7B EE               JP     C,Seek2              ; skip if cpmRecord Number > HL (above)
2144: EE75
2145: EE75 EB                     EX     DE,HL
2146: EE76
2147: EE76 E1                     POP    HL
2148: EE77 23                     INC    HL
2149: EE78 C3 69 EE               JP     Seek1
2150: EE7B
2151: EE7B             Seek2:
2152: EE7B E1                     POP    HL                   ; retreive Current Track
2153: EE7C C5                     PUSH   BC                   ; save  cpmRecord Number
2154: EE7D D5                     PUSH   DE                   ; save  Current Sector
2155: EE7E E5                     PUSH   HL                   ; save CurrentTrack
2156: EE7F         ; stack contains CurrentTrack , Current Sector, cpmRecord Number
2157: EE7F EB                     EX     DE,HL                ; DE => CurrentTrack, HL => Current Sector
2158: EE80 2A 5A F5               LD     HL,(dpbOFF)          ; Block Zero starting Track
2159: EE83 19                     ADD    HL,DE                ; HL =  actual physical Track number
2160: EE84 44                     LD     B,H
2161: EE85 4D                     LD     C,L                  ; BC has physical Track number
2162: EE86 CD 1E F6               CALL   bcSettrk             ; track set up
2163: EE89         ; note that BC - curtrk is difference to move in bios
2164: EE89 D1                     POP    DE                   ; recall CurrentTrack
2165: EE8A 2A 41 F5               LD     HL,(caTrack)         ; point at current Track
2166: EE8D 73                     LD     (HL),E
2167: EE8E 23                     INC    HL
2168: EE8F 72                     LD     (HL),D               ; current Track updated
2169: EE90         ; now compute sector as currentBlock-currec
2170: EE90 D1                     POP    DE                   ; recall Current Sector
2171: EE91 2A 43 F5               LD     HL,(caSector)        ; point at current Sector
2172: EE94 73                     LD     (HL),E
2173: EE95 23                     INC    HL
2174: EE96 72                     LD     (HL),D               ; current sector updated / DE has currentSector
2175: EE97 C1                     POP    BC                   ; recall cpmRecord Number
2176: EE98 79                     LD     A,C                  ; cpmRecord Number
2177: EE99 93                     SUB    E
2178: EE9A 4F                     LD     C,A                  ; - currentSector
2179: EE9B 78                     LD     A,B
2180: EE9C 9A                     SBC    A,D
2181: EE9D 47                     LD     B,A                  ; back into BC
2182: EE9E C3 21 F6               JP     bcSetsec             ; sector selected
2183: EEA1         ;ret
2184: EEA1         ;************* CheckSum *******************************
2185: EEA1         ; compute current checksum record
2186: EEA1         ; if C = TRUE , update the allocation vector
2187: EEA1         ;
2188: EEA1         ; or check for = if not dirRecord < dpbCKS ????
2189: EEA1
2190: EEA1             NewCheckSum:
2191: EEA1 0E FF                  LD     C,TRUE
2192: EEA3
2193: EEA3             CalculateCheckSum:
2194: EEA3 2A 73 F5               LD     HL,(dirRecord)
2195: EEA6 EB                     EX     DE,HL
2196: EEA7 2A 58 F5               LD     HL,(dpbCKS)          ; size of checksum vector
2197: EEAA CD 53 F4               CALL   DEminusHL2HL         ; DE-HL
2198: EEAD D0                     RET    NC                   ; skip checksum if past checksum vector size
2199: EEAE C5                     PUSH   BC                   ; save init flag
2200: EEAF CD CB EE               CALL   ComputeCheckSum      ; check sum value to A
2201: EEB2 2A 49 F5               LD     HL,(caCheckSum)      ; address of check sum vector
2202: EEB5 EB                     EX     DE,HL
2203: EEB6 2A 73 F5               LD     HL,(dirRecord)       ; value of dirRecord
2204: EEB9 19                     ADD    HL,DE                ; HL = .check(dirRecord)
2205: EEBA C1                     POP    BC                   ; recall true=0ffh or false=00 to C
2206: EEBB 0C                     INC    C                    ; 0ffh produces zero flag
2207: EEBC CA C9 EE               JP     Z,SetNewCheckSum
2208: EEBF         ; not initializing, compare
2209: EEBF BE                     CP     M                    ; compute$cs=check(dirRecord)?
2210: EEC0 C8                     RET    Z                    ; no message if ok
2211: EEC1         ; possible checksum error, are we beyond the end of the disk?
2212: EEC1 CD E1 EE               CALL   StillInDirectory
2213: EEC4 D0                     RET    NC                   ; no message if so
2214: EEC5 CD 35 ED               CALL   SetDiskReadOnly      ; read/only disk set
2215: EEC8 C9                     RET
2216: EEC9
2217: EEC9         ;initializing the checksum
2218: EEC9             SetNewCheckSum:
2219: EEC9 77                     LD     (HL),A
2220: EECA C9                     RET
2221: EECB         ;------------------
2222: EECB         ;compute checksum for current directory buffer
2223: EECB             ComputeCheckSum:
2224: EECB 0E 80                  LD     C,cpmRecordSize      ; size of directory buffer
2225: EECD 2A 45 F5               LD     HL,(caDirectoryDMA)  ; current directory buffer
2226: EED0 AF                     XOR    A                    ; clear checksum value
2227: EED1             ComputeCheckSum0:
2228: EED1 86                     ADD    A,(HL)
2229: EED2 23                     INC    HL
2230: EED3 0D                     DEC    C                    ; cs=cs+buff(cpmRecordSize-C)
2231: EED4 C2 D1 EE               JP     NZ,ComputeCheckSum0
2232: EED7 C9                     RET                         ; with checksum in A
2233: EED8         ;*****************************************************************
2234: EED8         ;if not still in directory set max value
2235: EED8             SetDirectoryEntry:
2236: EED8 CD E1 EE               CALL   StillInDirectory
2237: EEDB D8                     RET    C
2238: EEDC         ; return if yes,otherwise, HL = DirMaxValue+1, DE = directoryCount
2239: EEDC
2240: EEDC 13                     INC    DE
2241: EEDD 72                     LD     (HL),D
2242: EEDE 2B                     DEC    HL
2243: EEDF 73                     LD     (HL),E
2244: EEE0 C9                     RET
2245: EEE1         ; return CY if entry is still in Directory
2246: EEE1             StillInDirectory:
2247: EEE1 2A 71 F5               LD     HL,(dirEntryIndex)
2248: EEE4 EB                     EX     DE,HL                ; DE = directory counter
2249: EEE5 2A 3F F5               LD     HL,(caDirMaxValue)   ; HL=caDirMaxValue
2250: EEE8 7B                     LD     A,E
2251: EEE9 96                     SUB    M                    ; low(dirEntryIndex) - low(cdrmax)
2252: EEEA 23                     INC    HL                   ; HL = .cdrmax+1
2253: EEEB 7A                     LD     A,D
2254: EEEC 9E                     SBC    A,(HL)               ; hi(dirEntryIndex) - hig(cdrmax)
2255: EEED         ;condition dirEntryIndex - cdrmax  produces cy if cdrmax>dirEntryIndex
2256: EEED C9                     RET
2257: EEEE         ;---------------------
2258: EEEE         ;compute fcbRCIndex and NEXT_RECORD addresses for get/setfcb
2259: EEEE         ; returns with DE pointing at RC from FCB
2260: EEEE         ;         with HL pointing at Next Record
2261: EEEE             GetFcbAddress:                      ; getfcba
2262: EEEE 2A C0 EA               LD     HL,(paramDE)
2263: EEF1 11 0F 00               LD     DE,fcbRCIndex
2264: EEF4 19                     ADD    HL,DE
2265: EEF5 EB                     EX     DE,HL                ; DE=.fcb(fcbRCIndex)
2266: EEF6 21 11 00               LD     HL,NEXT_RECORD-fcbRCIndex ;RATS
2267: EEF9 19                     ADD    HL,DE                ; HL=.fcb(NEXT_RECORD)
2268: EEFA C9                     RET
2269: EEFB         ;---------------------
2270: EEFB         ;set variables from currently fcb - NEXT_RECORD, RC, EXM
2271: EEFB             SetRecordVars:
2272: EEFB CD EE EE               CALL   GetFcbAddress        ; DE => fcbRCIndex(RC) , HL => NEXT_RECORD
2273: EEFE 7E                     LD     A,(HL)
2274: EEFF 32 6C F5               LD     (cpmRecord),A        ; cpmRecord=fcb(NEXT_RECORD)
2275: EF02 EB                     EX     DE,HL
2276: EF03 7E                     LD     A,(HL)
2277: EF04 32 6A F5               LD     (fcbRecordCount),A   ; fcbRecordCount=fcb(fcbRCIndex)
2278: EF07 CD C7 F3               CALL   GetExtentAddress     ; HL=.fcb(fcbExtIndex)
2279: EF0A 3A 51 F5               LD     A,(dpbEXM)           ; extent mask to a
2280: EF0D A6                     AND    M                    ; fcb(fcbExtIndex) and dpbEXM
2281: EF0E 32 6B F5               LD     (extentValue),A      ; save extent number
2282: EF11 C9                     RET
2283: EF12         ;---------------------
2284: EF12         ;update variables from I/O in  fcb
2285: EF12             UpdateRecordVars:
2286: EF12 CD EE EE               CALL   GetFcbAddress        ; DE => fcbRCIndex(RC) , HL => NEXT_RECORD
2287: EF15 3A 61 F5               LD     A,(seqReadFlag)
2288: EF18 4F                     LD     C,A                  ; =1 if sequential i/o
2289: EF19 3A 6C F5               LD     A,(cpmRecord)        ; get NEXT_RECORD
2290: EF1C 81                     ADD    A,C
2291: EF1D 77                     LD     (HL),A               ; fcb(NEXT_RECORD)=cpmRecord+seqReadFlag
2292: EF1E EB                     EX     DE,HL
2293: EF1F 3A 6A F5               LD     A,(fcbRecordCount)
2294: EF22 77                     LD     (HL),A               ; fcb(fcbRCIndex)=fcbRecordCount
2295: EF23 C9                     RET
2296: EF24         ;---------------------
2297: EF24         ;set file Attributes for current fcb
2298: EF24             SetAttributes:
2299: EF24 0E 0C                  LD     C,fcbExtIndex
2300: EF26 CD 3F F3               CALL   Search4DirElement    ; through file type
2301: EF29             SetAttributes1:
2302: EF29 CD EF ED               CALL   EndOfDirectory
2303: EF2C C8                     RET    Z                    ; exit at end of dir
2304: EF2D 0E 00                  LD     C,0
2305: EF2F 1E 0C                  LD     E,fcbExtIndex        ;copy name
2306: EF31 CD 00 F4               CALL   CopyDir
2307: EF34 CD 57 F3               CALL   Search4NextDirElement
2308: EF37 C3 29 EF               JP     SetAttributes1
2309: EF3A         ;
2310: EF3A         ;*****************************************************************
2311: EF3A
2312: EF3A         ;*****************************************************************
2313: EF3A         ;********************** File  Routines ***************************
2314: EF3A         ;*****************************************************************
2315: EF3A         ;open file
2316: EF3A         ; IN  - (DE)	FCB Address
2317: EF3A         ; OUT - (A)	Directory Code
2318: EF3A         ;	0-3 = success ; 0FFH = File Not Found
2319: EF3A             vOpenFile:                      ;
2320: EF3A CD C0 F2               CALL   ClearModuleNum       ; clear the module number
2321: EF3D CD CF F2               CALL   Reselect             ; do we need to reselect disk?
2322: EF40 C3 FC F2               JP     OpenFile
2323: EF43         ;ret ;jmp goback
2324: EF43         ;-----------------------------------------------------------------
2325: EF43         ;close file
2326: EF43             vCloseFile:                      ; func16: (16 - 10) Close File
2327: EF43 CD CF F2               CALL   Reselect
2328: EF46 C3 A4 F1               JP     CloseDirEntry
2329: EF49         ;-----------------------------------------------------------------
2330: EF49         ;search for first occurrence of a file
2331: EF49         ; In - (DE)	FCB Address
2332: EF49         ; OUT - (A)	Directory Code
2333: EF49         ;	0-3 = success ; 0FFH = File Not Found
2334: EF49             vFindFirst:                      ; func17: (17 - 11) Search for first
2335: EF49 0E 00                  LD     C,0                  ; length assuming '?' true
2336: EF4B 2A C0 EA               LD     HL,(paramDE)
2337: EF4E 7E                     LD     A,(HL)
2338: EF4F FE 3F                  CP     QMARK                ; no reselect if ?
2339: EF51 CA 5C EF               JP     Z,QMarkSelect        ; skip reselect if so
2340: EF54
2341: EF54 CD C0 F2               CALL   ClearModuleNum       ; module number zeroed
2342: EF57 CD CF F2               CALL   Reselect
2343: EF5A 0E 0F                  LD     C,nameLength
2344: EF5C             QMarkSelect:                      ; qselect:
2345: EF5C CD 3F F3               CALL   Search4DirElement
2346: EF5F C3 ED F3               JP     CopyDirEntryToUser   ; copy directory entry to user
2347: EF62         ;-----------------------------------------------------------------
2348: EF62         ;search for next occurrence of a file name
2349: EF62         ; OUT - (A)	Directory Code
2350: EF62         ;	0-3 = success ; 0FFH = File Not Found
2351: EF62             vFindNext:                      ; func18: (18 - 12) Search for next
2352: EF62 2A 64 F5               LD     HL,(searchAddress)
2353: EF65 22 C0 EA               LD     (paramDE),HL
2354: EF68 CD CF F2               CALL   Reselect
2355: EF6B CD 57 F3               CALL   Search4NextDirElement
2356: EF6E C3 ED F3               JP     CopyDirEntryToUser   ; copy directory entry to user
2357: EF71         ;-----------------------------------------------------------------
2358: EF71         ;search for next occurrence of a file name
2359: EF71         ; OUT - (A)	Directory Code
2360: EF71         ;delete a file
2361: EF71             vDeleteFile:                      ; func18: (19 - 13) Delete File
2362: EF71 CD CF F2               CALL   Reselect
2363: EF74 CD 82 F1               CALL   DeleteFile
2364: EF77 C3 B9 F2               JP     DirLocationToReturnLoc
2365: EF7A         ;-----------------------------------------------------------------
2366: EF7A         ;read sequential
2367: EF7A         ;IN  - (DE) FCB address
2368: EF7A         ;OUT - (A) 00 = success and data available. else no read and no data
2369: EF7A             vReadSeq:                       ; func20: (20 - 14) read sequential
2370: EF7A CD CF F2               CALL   Reselect
2371: EF7D CD BC EF               CALL   ReadSeq
2372: EF80 C9                     RET
2373: EF81         ;-----------------------------------------------------------------
2374: EF81         ;write sequential
2375: EF81         ;IN  - (DE) FCB address
2376: EF81         ;OUT - (A) 00 = success and data available. else no read and no data
2377: EF81             vWriteSeq:                      ; func21 (21 - 15) write sequention
2378: EF81 CD CF F2               CALL   Reselect
2379: EF84 CD FF EF               CALL   DiskWriteSeq
2380: EF87 C9                     RET
2381: EF88         ;-----------------------------------------------------------------
2382: EF88         ; Make file
2383: EF88         ; In - (DE)	FCB Address
2384: EF88         ; OUT - (A)	Directory Code
2385: EF88         ;	0-3 = success ; 0FFH = File Not Found
2386: EF88             vMakeFile:                      ; func22 (22 - 16) Make file
2387: EF88 CD C0 F2               CALL   ClearModuleNum       ; set S2 to Zero
2388: EF8B CD CF F2               CALL   Reselect
2389: EF8E C3 4C F1               JP     MakeNewFile
2390: EF91         ;-----------------------------------------------------------------
2391: EF91         ; Rename file
2392: EF91         ; In - (DE)	FCB Address
2393: EF91         ; OUT - (A)	Directory Code
2394: EF91         ;	0-3 = success ; 0FFH = File Not Found
2395: EF91             vRenameFile:                      ; func23 (23 - 17) Rename File
2396: EF91 CD CF F2               CALL   Reselect
2397: EF94 CD 27 F1               CALL   Rename
2398: EF97 C3 B9 F2               JP     DirLocationToReturnLoc
2399: EF9A         ;-----------------------------------------------------------------
2400: EF9A         ;-----------------------------------------------------------------
2401: EF9A         ;*****************************************************************
2402: EF9A         ;-----------------------------------------------------------------
2403: EF9A         ;check current directory element for read/only status
2404: EF9A             CheckRODirectory:
2405: EF9A CD E3 ED               CALL   GetDirElementAddress ; address of element
2406: EF9D         ;	JMP	CheckROFile
2407: EF9D         ;------------
2408: EF9D         ;check current buff(dptr) or fcb(0) for r/o status
2409: EF9D             CheckROFile:
2410: EF9D 11 09 00               LD     DE,fcbROfileIndex
2411: EFA0 19                     ADD    HL,DE                ; offset to ro bit
2412: EFA1 7E                     LD     A,(HL)
2413: EFA2 17                     RLA
2414: EFA3 D0                     RET    NC                   ; return if not set
2415: EFA4 C3 B2 F4               JP     errReadOnlyFile      ; exit to read only disk message
2416: EFA7         ;-----------------------------------------------------------------
2417: EFA7         ;check for write protected disk
2418: EFA7             CheckWrite:
2419: EFA7 CD AE EF               CALL   DoNotWrite
2420: EFAA C8                     RET    Z                    ; ok to write if not rodsk
2421: EFAB C3 AC F4               JP     errReadOnlyDisk      ; read only disk error
2422: EFAE         ;-----------------------------------------------------------------
2423: EFAE         ;return true if dir checksum difference occurred
2424: EFAE             DoNotWrite:
2425: EFAE 2A 39 F5               LD     HL,(ReadOnlyVector)
2426: EFB1 3A 37 F5               LD     A,(currentDisk)
2427: EFB4 4F                     LD     C,A
2428: EFB5 CD 5A F4               CALL   ShiftRightHLbyC
2429: EFB8 7D                     LD     A,L
2430: EFB9 E6 1B                  AND    1BH                  ; 01BH
2431: EFBB C9                     RET                         ; non zero if nowrite
2432: EFBC         ;-----------------------------------------------------------------
2433: EFBC         ;sequential disk read operation
2434: EFBC             ReadSeq:
2435: EFBC 3E 01                  LD     A,1
2436: EFBE 32 61 F5               LD     (seqReadFlag),A      ; set flag for seqential read
2437: EFC1         ;---
2438: EFC1         ; read the disk
2439: EFC1         ; read the next record from the current fcb
2440: EFC1             DiskRead:
2441: EFC1 3E FF                  LD     A,TRUE
2442: EFC3 32 5F F5               LD     (readModeFlag),A     ; read mode flag = true (OpenNextExt)
2443: EFC6
2444: EFC6 CD FB EE               CALL   SetRecordVars        ; sets cpmRecord, fcbRecordCount and EXM
2445: EFC9 3A 6C F5               LD     A,(cpmRecord)
2446: EFCC 21 6A F5               LD     HL,fcbRecordCount
2447: EFCF BE                     CP     M                    ; cpmRecord-fcbRecordCount
2448: EFD0         ; skip if  cpmRecord < fcbRecordCount
2449: EFD0 DA E6 EF               JP     C,RecordOK
2450: EFD3         ; not enough records in the extent
2451: EFD3 FE 80                  CP     RecordsPerExtent     ; cpmRecord = 128?   *** Records in an Extent
2452: EFD5 C2 FC EF               JP     NZ,DiskEOF           ; skip if cpmRecord<>128
2453: EFD8 CD C4 F0               CALL   OpenNextExt          ; go to next extent if so
2454: EFDB AF                     XOR    A
2455: EFDC 32 6C F5               LD     (cpmRecord),A        ; cpmRecord=00
2456: EFDF         ; now check for open ok
2457: EFDF 3A C2 EA               LD     A,(exitParameterByte)
2458: EFE2 B7                     OR     A
2459: EFE3 C2 FC EF               JP     NZ,DiskEOF
2460: EFE6         ; stop at eof
2461: EFE6         ; arrive with fcb addressing a record to read
2462: EFE6             RecordOK:                       ; recordok:
2463: EFE6 CD 8D F2               CALL   GetBlockNumber       ; save it in currentBlock
2464: EFE9 CD 9A F2               CALL   IsAllocated          ; currentBlock=0000?
2465: EFEC CA FC EF               JP     Z,DiskEOF            ; get out if not allocated already
2466: EFEF
2467: EFEF CD A0 F2               CALL   SetActualRecordAdd   ; currentBlock now a record value
2468: EFF2 CD 40 EE               CALL   Seek                 ; to proper track,sector
2469: EFF5 CD 3D F2               CALL   ReadBuffer           ; to dma address
2470: EFF8 CD 12 EF               CALL   UpdateRecordVars     ; update variables from I/O in  fcb
2471: EFFB C9                     RET
2472: EFFC             DiskEOF:                        ; diskeof:
2473: EFFC C3 D6 F3               JP     SetLowReturnTo1      ; exitParameterByte = 1
2474: EFFF         ;ret
2475: EFFF         ;-----------------------------------------------------------------
2476: EFFF         ;sequential disk write
2477: EFFF             DiskWriteSeq:
2478: EFFF 3E 01                  LD     A,1
2479: F001 32 61 F5               LD     (seqReadFlag),A
2480: F004         ;--------
2481: F004         ;disk write
2482: F004             DiskWrite:
2483: F004 3E 00                  LD     A,FALSE
2484: F006 32 5F F5               LD     (readModeFlag),A
2485: F009         ; write record to currently selected file
2486: F009 CD A7 EF               CALL   CheckWrite           ; in case write protected
2487: F00C 2A C0 EA               LD     HL,(paramDE)         ; HL = .fcb(0)
2488: F00F CD 9D EF               CALL   CheckROFile          ; may be a read-only file
2489: F012 CD FB EE               CALL   SetRecordVars        ; set local Record parameters
2490: F015 3A 6C F5               LD     A,(cpmRecord)
2491: F018 FE 80                  CP     highestRecordNumber+1 ; Still in the same extent?
2492: F01A DA 21 F0               JP     C,DiskWrite1         ; skip if in the same Extent
2493: F01D CD D6 F3               CALL   SetLowReturnTo1
2494: F020 C9                     RET                         ; Exit ???????????
2495: F021
2496: F021         ; can write the next record, so continue
2497: F021             DiskWrite1:
2498: F021 CD 8D F2               CALL   GetBlockNumber       ; sets up actual block number
2499: F024 CD 9A F2               CALL   IsAllocated
2500: F027 0E 00                  LD     C,WriteAllocated     ; assume a normal write operation for WriteBuffer
2501: F029 C2 74 F0               JP     NZ,DiskWrite3
2502: F02C         ; not allocated -
2503: F02C         ; the argument to getblock is the starting position for the disk search
2504: F02C         ; and should be the last allocated block for this file,
2505: F02C         ; or the value 0 if no space has been allocated
2506: F02C
2507: F02C CD 15 F4               CALL   GetDiskMapIndex      ; return with Disk Map index in Acc
2508: F02F 32 62 F5               LD     (diskMapIndex),A     ; save for later
2509: F032 01 00 00               LD     BC,0000h             ; may use block zero
2510: F035 B7                     OR     A
2511: F036 CA 40 F0               JP     Z,FirstBlock         ; skip if no previous block
2512: F039         ; previous block exists
2513: F039 4F                     LD     C,A
2514: F03A 0B                     DEC    BC                   ; previous block # in BC
2515: F03B CD 35 F4               CALL   GetDiskMapValue      ; previous block # to HL
2516: F03E 44                     LD     B,H
2517: F03F 4D                     LD     C,L                  ; BC=prev block#
2518: F040         ; BC = 0000, or previous block #
2519: F040             FirstBlock:
2520: F040 CD 53 F2               CALL   GetClosestBlock      ; block # to HL
2521: F043         ; arrive here with block# or zero
2522: F043 7D                     LD     A,L
2523: F044 B4                     OR     H
2524: F045 C2 4E F0               JP     NZ,BlockOK
2525: F048         ; cannot find a block to allocate
2526: F048 3E 02                  LD     A,2
2527: F04A 32 C2 EA               LD     (exitParameterByte),A
2528: F04D C9                     RET                         ; exitParameterByte=2
2529: F04E
2530: F04E             BlockOK:
2531: F04E 22 6E F5               LD     (currentBlock),HL    ; allocated block number is in HL
2532: F051 EB                     EX     DE,HL                ; block number to DE
2533: F052 2A C0 EA               LD     HL,(paramDE)
2534: F055 01 10 00               LD     BC,fcbDiskMapIndex
2535: F058 09                     ADD    HL,BC                ; HL=.fcb(fcbDiskMapIndex)
2536: F059 3A 66 F5               LD     A,(byteAllocationFlag)
2537: F05C B7                     OR     A                    ; set flags for byteAllocationFlag byte dm
2538: F05D 3A 62 F5               LD     A,(diskMapIndex)     ; recall dm index
2539: F060 CA 6A F0               JP     Z,Allocate16Bit      ; skip if allocating word
2540: F063         ; else allocate using a byte value
2541: F063 CD 4E F4               CALL   AddAtoHL
2542: F066 73                     LD     (HL),E               ; byteAllocationFlag byte alloc
2543: F067 C3 72 F0               JP     DiskWrite2           ; to continue
2544: F06A
2545: F06A             Allocate16Bit:                      ; allocate a word value
2546: F06A
2547: F06A 4F                     LD     C,A
2548: F06B 06 00                  LD     B,0                  ; double(diskMapIndex)
2549: F06D 09                     ADD    HL,BC
2550: F06E 09                     ADD    HL,BC                ; HL=.fcb(diskMapIndex*2)
2551: F06F 72                     LD     (HL),D
2552: F070 23                     INC    HL
2553: F071 73                     LD     (HL),E               ; double wd
2554: F072         ; disk write to previously unallocated block
2555: F072             DiskWrite2:
2556: F072 0E 02                  LD     C,WriteCleanBuffer   ; marked as unallocated write
2557: F074
2558: F074         ; continue the write operation of no allocation error
2559: F074         ; C = 0 if normal write, 1 if directory write, 2 if to prev unalloc block
2560: F074
2561: F074             DiskWrite3:
2562: F074 3A C2 EA               LD     A,(exitParameterByte)
2563: F077 B7                     OR     A
2564: F078 C0                     RET    NZ                   ; stop if non zero returned value
2565: F079
2566: F079 C5                     PUSH   BC                   ; save write flag ( in C see above)
2567: F07A CD A0 F2               CALL   SetActualRecordAdd   ; currentBlock set to actual record number
2568: F07D CD 40 EE               CALL   Seek                 ; to proper file position
2569: F080 C1                     POP    BC                   ; get write flag
2570: F081 C5                     PUSH   BC                   ; restore/save write flag (C=2 if new block)
2571: F082 CD 35 F2               CALL   WriteBuffer          ; written to disk
2572: F085 C1                     POP    BC                   ; C = 2 if a new block was allocated, 0 if not
2573: F086         ; increment record count if fcbRecordCount<=cpmRecord
2574: F086 3A 6C F5               LD     A,(cpmRecord)
2575: F089 21 6A F5               LD     HL,fcbRecordCount
2576: F08C BE                     CP     M                    ; cpmRecord-fcbRecordCount
2577: F08D DA 94 F0               JP     C,DiskWrite4
2578: F090         ; fcbRecordCount <= cpmRecord
2579: F090 77                     LD     (HL),A
2580: F091 34                     INC    M                    ; fcbRecordCount = cpmRecord+1
2581: F092 0E 02                  LD     C,2                  ; mark as record count incremented
2582: F094             DiskWrite4:
2583: F094         ; A has cpmRecord, C=2 if new block or new record#
2584: F094 0D                     DEC    C
2585: F095 0D                     DEC    C
2586: F096 C2 A1 F0               JP     NZ,DiskWrite5
2587: F099 F5                     PUSH   AF                   ; save cpmRecord value
2588: F09A CD C6 F2               CALL   GetModuleNum         ; HL=.fcb(fcbS2Index), A=fcb(fcbS2Index)
2589: F09D         ; reset the file write flag to mark as written fcb
2590: F09D E6 7F                  AND    7FH                  ; not writeFlagMask
2591: F09F 77                     LD     (HL),A               ; fcb(fcbS2Index) = fcb(fcbS2Index) and 7fh
2592: F0A0 F1                     POP    AF                   ; restore cpmRecord
2593: F0A1             DiskWrite5:
2594: F0A1         ; check for end of extent, if found attempt to open next extent in preparation for next write
2595: F0A1 FE 7F                  CP     highestRecordNumber  ; cpmRecord=highestRecordNumber?
2596: F0A3 C2 C1 F0               JP     NZ,DiskWrite7        ; skip if not
2597: F0A6         ; may be random access write, if so we are done
2598: F0A6 3A 61 F5               LD     A,(seqReadFlag)
2599: F0A9 B7                     OR     A
2600: F0AA CA C1 F0               JP     Z,DiskWrite7         ; skip next extent open op
2601: F0AD         ; update current fcb before going to next extent
2602: F0AD CD 12 EF               CALL   UpdateRecordVars     ;update variables from I/O in  fcb
2603: F0B0 CD C4 F0               CALL   OpenNextExt          ; readModeFlag=false
2604: F0B3         ; cpmRecord remains at highestRecordNumber causing eof if no more directory space is available
2605: F0B3 21 C2 EA               LD     HL,exitParameterByte
2606: F0B6 7E                     LD     A,(HL)
2607: F0B7 B7                     OR     A
2608: F0B8 C2 BF F0               JP     NZ,DiskWrite6        ; no space
2609: F0BB         ; space available, set cpmRecord=255
2610: F0BB 3D                     DEC    A
2611: F0BC 32 6C F5               LD     (cpmRecord),A        ; goes to 00 next time
2612: F0BF             DiskWrite6:
2613: F0BF 36 00                  LD     (HL),0               ; exitParameterByte = 00 for returned value
2614: F0C1             DiskWrite7:
2615: F0C1 C3 12 EF               JP     UpdateRecordVars     ; update variables from I/O in  fcb
2616: F0C4         ;ret
2617: F0C4         ;-----------------------------------------------------------------
2618: F0C4         ;close the current extent  and open the next one if possible.
2619: F0C4         ;readModeFlag is true if in read mode
2620: F0C4             OpenNextExt:                      ; open$reel
2621: F0C4 AF                     XOR    A
2622: F0C5 32 5E F5               LD     (fcbCopiedFlag),A    ; set true if actually copied
2623: F0C8 CD A4 F1               CALL   CloseDirEntry        ; close current extent
2624: F0CB         ; exitParameterByte remains at enddir if we cannot open the next ext
2625: F0CB CD EF ED               CALL   EndOfDirectory
2626: F0CE C8                     RET    Z                    ; return if end
2627: F0CF 2A C0 EA               LD     HL,(paramDE)         ; increment extent number
2628: F0D2 01 0C 00               LD     BC,fcbExtIndex
2629: F0D5 09                     ADD    HL,BC                ; HL=.fcb(fcbExtIndex)
2630: F0D6 7E                     LD     A,(HL)
2631: F0D7 3C                     INC    A
2632: F0D8 E6 1F                  AND    maxExtValue
2633: F0DA 77                     LD     (HL),A               ; fcb(fcbExtIndex)=++1
2634: F0DB CA ED F0               JP     Z,OpenNextModule     ; move to next module if zero
2635: F0DE         ; may be in the same extent group
2636: F0DE 47                     LD     B,A
2637: F0DF 3A 51 F5               LD     A,(dpbEXM)
2638: F0E2 A0                     AND    B
2639: F0E3         ; if result is zero, then not in the same group
2640: F0E3 21 5E F5               LD     HL,fcbCopiedFlag     ; true if the fcb was copied to directory
2641: F0E6 A6                     AND    M                    ; produces a 00 in accumulator if not written
2642: F0E7 CA F8 F0               JP     Z,OpenNextExt1       ; go to next physical extent
2643: F0EA         ; result is non zero, so we must be in same logical ext
2644: F0EA C3 16 F1               JP     OpenNextExt2         ; to copy fcb information
2645: F0ED         ; extent number overflow, go to next module
2646: F0ED
2647: F0ED             OpenNextModule:
2648: F0ED 01 02 00               LD     BC,fcbS2Index-fcbExtIndex ;RATS
2649: F0F0 09                     ADD    HL,BC                ; HL=.fcb(fcbS2Index)
2650: F0F1 34                     INC    M                    ; fcb(fcbS2Index)=++1
2651: F0F2         ; module number incremented, check for overflow
2652: F0F2 7E                     LD     A,(HL)
2653: F0F3 E6 0F                  AND    moduleMask           ; mask high order bits
2654: F0F5 CA 21 F1               JP     Z,OpenNextExtError   ; cannot overflow to zero
2655: F0F8         ; otherwise, ok to continue with new module
2656: F0F8
2657: F0F8             OpenNextExt1:
2658: F0F8 0E 0F                  LD     C,nameLength
2659: F0FA CD 3F F3               CALL   Search4DirElement    ; next extent found?
2660: F0FD CD EF ED               CALL   EndOfDirectory
2661: F100 C2 16 F1               JP     NZ,OpenNextExt2
2662: F103         ; end of file encountered
2663: F103 3A 5F F5               LD     A,(readModeFlag)
2664: F106 3C                     INC    A                    ; 0ffh becomes 00 if read
2665: F107 CA 21 F1               JP     Z,OpenNextExtError   ; sets exitParameterByte = 1
2666: F10A         ; try to extend the current file
2667: F10A CD 4C F1               CALL   MakeNewFile
2668: F10D         ; cannot be end of directory
2669: F10D CD EF ED               CALL   EndOfDirectory
2670: F110 CA 21 F1               JP     Z,OpenNextExtError   ; with exitParameterByte = 1
2671: F113 C3 19 F1               JP     OpenNextExt3
2672: F116
2673: F116         ; not end of file, open
2674: F116             OpenNextExt2:
2675: F116 CD 05 F3               CALL   OpenFileCopyFCB
2676: F119             OpenNextExt3:
2677: F119 CD FB EE               CALL   SetRecordVars        ; Set Record parameters
2678: F11C AF                     XOR    A
2679: F11D 32 C2 EA               LD     (exitParameterByte),A ; exitParameterByte = 0
2680: F120 C9                     RET                         ; with exitParameterByte = 0
2681: F121
2682: F121         ; cannot move to next extent of this file
2683: F121             OpenNextExtError:
2684: F121 CD D6 F3               CALL   SetLowReturnTo1      ; exitParameterByte = 1
2685: F124 C3 CF F3               JP     SetFileWriteFlag     ; ensure that it will not be closed
2686: F127         ;-----------------------------------------------------------------
2687: F127         ;rename the file described by the first half of the currently addressed FCB.
2688: F127         ;the new name is contained in the last half of the FCB. The file name and type
2689: F127         ;are changed, but the reel number is ignored.  the user number is identical
2690: F127             Rename:
2691: F127 CD A7 EF               CALL   CheckWrite           ; may be write protected
2692: F12A         ; search up to the extent field
2693: F12A 0E 0C                  LD     C,fcbExtIndex        ; extent number field index
2694: F12C CD 3F F3               CALL   Search4DirElement
2695: F12F         ; copy position 0
2696: F12F 2A C0 EA               LD     HL,(paramDE)
2697: F132 7E                     LD     A,(HL)               ; HL=.fcb(0), A=fcb(0)
2698: F133 11 10 00               LD     DE,fcbDiskMapIndex
2699: F136 19                     ADD    HL,DE                ; HL=.fcb(fcbDiskMapIndex)
2700: F137 77                     LD     (HL),A               ; fcb(fcbDiskMapIndex)=fcb(0)
2701: F138         ; assume the same disk drive for new named file
2702: F138             Rename1:
2703: F138 CD EF ED               CALL   EndOfDirectory
2704: F13B C8                     RET    Z                    ; stop at end of dir
2705: F13C         ; not end of directory, rename next element
2706: F13C CD 9A EF               CALL   CheckRODirectory     ; may be read-only file
2707: F13F 0E 10                  LD     C,fcbDiskMapIndex
2708: F141 1E 0C                  LD     E,fcbExtIndex
2709: F143 CD 00 F4               CALL   CopyDir
2710: F146         ; element renamed, move to next
2711: F146 CD 57 F3               CALL   Search4NextDirElement
2712: F149 C3 38 F1               JP     Rename1
2713: F14C         ;-----------------------------------------------------------------
2714: F14C         ;create a new file by creating a directory entry then opening the file
2715: F14C             MakeNewFile:
2716: F14C CD A7 EF               CALL   CheckWrite           ; may be write protected
2717: F14F 2A C0 EA               LD     HL,(paramDE)
2718: F152 E5                     PUSH   HL                   ; save fcb address, look for e5
2719: F153 21 38 F5               LD     HL,emptyFCB
2720: F156 22 C0 EA               LD     (paramDE),HL         ; paramDE = .empty
2721: F159 0E 01                  LD     C,1
2722: F15B CD 3F F3               CALL   Search4DirElement    ; length 1 match on empty entry
2723: F15E CD EF ED               CALL   EndOfDirectory       ; zero flag set if no space
2724: F161 E1                     POP    HL                   ; recall paramDE address
2725: F162 22 C0 EA               LD     (paramDE),HL         ; in case we return here
2726: F165 C8                     RET    Z                    ; return with error condition 255 if not found
2727: F166 EB                     EX     DE,HL                ; DE = paramDE address
2728: F167         ; clear the remainder of the fcb
2729: F167 21 0F 00               LD     HL,nameLength
2730: F16A 19                     ADD    HL,DE                ; HL=.fcb(nameLength)
2731: F16B 0E 11                  LD     C,fcbLength-nameLength ; number of bytes to fill
2732: F16D AF                     XOR    A                    ; clear accumulator to 00 for fill
2733: F16E             MakeNewFile1:
2734: F16E 77                     LD     (HL),A
2735: F16F 23                     INC    HL
2736: F170 0D                     DEC    C
2737: F171 C2 6E F1               JP     NZ,MakeNewFile1
2738: F174 21 0D 00               LD     HL,fcbS1Index
2739: F177 19                     ADD    HL,DE                ; HL = .fcb(fcbS1Index)
2740: F178 77                     LD     (HL),A               ; fcb(fcbS1Index) = 0
2741: F179 CD D8 EE               CALL   SetDirectoryEntry    ; may have extended the directory
2742: F17C         ; now copy entry to the directory
2743: F17C CD F9 F3               CALL   CopyFCB
2744: F17F         ; and set the file write flag to "1"
2745: F17F C3 CF F3               JP     SetFileWriteFlag
2746: F182         ;-----------------------------------------------------------------
2747: F182         ;delete the currently addressed file
2748: F182             DeleteFile:
2749: F182 CD A7 EF               CALL   CheckWrite           ; write protected ?
2750: F185 0E 0C                  LD     C,fcbExtIndex        ; extent number field
2751: F187 CD 3F F3               CALL   Search4DirElement    ; search through file type
2752: F18A             DeleteFile1:
2753: F18A         ; loop while directory matches
2754: F18A CD EF ED               CALL   EndOfDirectory
2755: F18D C8                     RET    Z                    ; exit if end
2756: F18E         ; set each non zero disk map entry to 0 in the allocation vector
2757: F18E CD 9A EF               CALL   CheckRODirectory     ; ro disk error if found
2758: F191 CD E3 ED               CALL   GetDirElementAddress ; HL=.buff(dptr)
2759: F194 36 E5                  LD     (HL),emptyDir
2760: F196 0E 00                  LD     C,0
2761: F198 CD 4C ED               CALL   ScanDiskMap          ; alloc elts set to 0
2762: F19B CD 27 F2               CALL   WriteDir             ; write the directory
2763: F19E CD 57 F3               CALL   Search4NextDirElement ; to next element
2764: F1A1 C3 8A F1               JP     DeleteFile1          ; for another record
2765: F1A4         ;-----------------------------------------------------------------
2766: F1A4         ;locate the directory element and re-write it
2767: F1A4             CloseDirEntry:
2768: F1A4 AF                     XOR    A
2769: F1A5 32 C2 EA               LD     (exitParameterByte),A
2770: F1A8 CD AE EF               CALL   DoNotWrite           ; return TRUE (0) if checksum change
2771: F1AB C0                     RET    NZ                   ; skip close if r/o disk
2772: F1AC         ; check file write flag - 0 indicates written
2773: F1AC CD C6 F2               CALL   GetModuleNum         ; fcb(fcbS2Index) in A
2774: F1AF E6 80                  AND    writeFlagMask
2775: F1B1 C0                     RET    NZ                   ; return if bit remains set
2776: F1B2 0E 0F                  LD     C,nameLength
2777: F1B4 CD 3F F3               CALL   Search4DirElement    ; locate file
2778: F1B7 CD EF ED               CALL   EndOfDirectory
2779: F1BA C8                     RET    Z                    ; return if not found
2780: F1BB         ; merge the disk map at paramDE with that at buff(dptr)
2781: F1BB 01 10 00               LD     BC,fcbDiskMapIndex
2782: F1BE CD E3 ED               CALL   GetDirElementAddress
2783: F1C1 09                     ADD    HL,BC
2784: F1C2 EB                     EX     DE,HL                ; DE is .buff(dptr+16)
2785: F1C3 2A C0 EA               LD     HL,(paramDE)
2786: F1C6 09                     ADD    HL,BC                ; DE=.buff(dptr+16), HL=.fcb(16)
2787: F1C7 0E 10                  LD     C,(fcbLength-fcbDiskMapIndex) ; length of  byte Allocation Map
2788: F1C9             CloseDirEntry1:
2789: F1C9 3A 66 F5               LD     A,(byteAllocationFlag)
2790: F1CC B7                     OR     A
2791: F1CD CA E4 F1               JP     Z,CloseDirEntry4     ; skip to double
2792: F1D0         ; this is a  byte map
2793: F1D0         ; if fcb(i) = 0 then fcb(i) = buff(i)
2794: F1D0         ; if buff(i) = 0 then buff(i) = fcb(i)
2795: F1D0         ; if fcb(i) <> buff(i) then error
2796: F1D0 7E                     LD     A,(HL)
2797: F1D1 B7                     OR     A
2798: F1D2 1A                     LD     A,(DE)
2799: F1D3 C2 D7 F1               JP     NZ,CloseDirEntry2
2800: F1D6         ; fcb(i) = 0
2801: F1D6 77                     LD     (HL),A               ; fcb(i) = buff(i)
2802: F1D7             CloseDirEntry2:
2803: F1D7 B7                     OR     A
2804: F1D8 C2 DD F1               JP     NZ,CloseDirEntry3
2805: F1DB         ; buff(i) = 0
2806: F1DB 7E                     LD     A,(HL)
2807: F1DC 12                     LD     (DE),AE              ; buff(i)=fcb(i)
2808: F1DD             CloseDirEntry3:
2809: F1DD BE                     CP     M
2810: F1DE C2 1C F2               JP     NZ,CloseDirEntryError ; fcb(i) = buff(i)?
2811: F1E1 C3 F9 F1               JP     CloseDirEntry5       ; if merge ok
2812: F1E4
2813: F1E4         ; this is a double byte merge operation
2814: F1E4             CloseDirEntry4:
2815: F1E4 CD 45 F2               CALL   Merge                ; buff = fcb if buff 0000
2816: F1E7 EB                     EX     DE,HL
2817: F1E8 CD 45 F2               CALL   Merge
2818: F1EB EB                     EX     DE,HL                ; fcb = buff if fcb 0000
2819: F1EC         ; they should be identical at this point
2820: F1EC 1A                     LD     A,(DE)
2821: F1ED BE                     CP     M
2822: F1EE C2 1C F2               JP     NZ,CloseDirEntryError ; low same?
2823: F1F1 13                     INC    DE
2824: F1F2 23                     INC    HL                   ; to high byte
2825: F1F3 1A                     LD     A,(DE)
2826: F1F4 BE                     CP     M
2827: F1F5 C2 1C F2               JP     NZ,CloseDirEntryError ; high same?
2828: F1F8         ;	merge operation ok for this pair
2829: F1F8 0D                     DEC    C                    ; extra count for double byte
2830: F1F9             CloseDirEntry5:
2831: F1F9 13                     INC    DE
2832: F1FA 23                     INC    HL                   ; to next byte position
2833: F1FB 0D                     DEC    C
2834: F1FC C2 C9 F1               JP     NZ,CloseDirEntry1    ; for more
2835: F1FF         ; end of disk map merge, check record count DE = .buff(dptr)+32, HL = .fcb(32)
2836: F1FF 01 EC FF               LD     BC,-(fcbLength-fcbExtIndex) ;RATS
2837: F202 09                     ADD    HL,BC
2838: F203 EB                     EX     DE,HL
2839: F204 09                     ADD    HL,BC
2840: F205         ; DE = .fcb(fcbExtIndex), HL = .buff(dptr+fcbExtIndex)
2841: F205 1A                     LD     A,(DE)               ; current user extent number
2842: F206         ; if fcb(ext) >= buff(fcb) then	buff(ext) := fcb(ext), buff(rec) := fcb(rec)
2843: F206 BE                     CP     M
2844: F207 DA 13 F2               JP     C,CloseDirEntryEnd
2845: F20A         ; fcb extent number >= dir extent number
2846: F20A 77                     LD     (HL),A               ; buff(ext) = fcb(ext)
2847: F20B         ; update directory record count field
2848: F20B 01 03 00               LD     BC,fcbRCIndex-fcbExtIndex ;RATS
2849: F20E 09                     ADD    HL,BC
2850: F20F EB                     EX     DE,HL
2851: F210 09                     ADD    HL,BC
2852: F211         ; DE=.buff(fcbRCIndex), HL=.fcb(fcbRCIndex)
2853: F211 7E                     LD     A,(HL)
2854: F212 12                     LD     (DE),AE              ; buff(fcbRCIndex)=fcb(fcbRCIndex)
2855: F213             CloseDirEntryEnd:
2856: F213 3E FF                  LD     A,TRUE
2857: F215 32 5E F5               LD     (fcbCopiedFlag),A    ; mark as copied
2858: F218 CD 21 F2               CALL   SeekCopy             ; ok to "WriteDir" here - 1.4 compat
2859: F21B C9                     RET
2860: F21C
2861: F21C         ; elements did not merge correctly
2862: F21C             CloseDirEntryError:
2863: F21C 21 C2 EA               LD     HL,exitParameterByte
2864: F21F 35                     DEC    M                    ; =255 non zero flag set
2865: F220 C9                     RET
2866: F221         ;-----------------------------------------------------------------
2867: F221         ;enter from CloseDirEntry to seek and copy current element
2868: F221             SeekCopy:
2869: F221 CD 2F EE               CALL   SeekDir              ; to the directory element
2870: F224 C3 27 F2               JP     WriteDir             ; write the directory element
2871: F227         ;ret
2872: F227         ;-----------------------------------------------------------------
2873: F227         ;write the current directory entry, set checksum
2874: F227             WriteDir:
2875: F227 CD A1 EE               CALL   NewCheckSum          ; initialize entry
2876: F22A CD D3 ED               CALL   SetDirDMA            ; directory dma
2877: F22D 0E 01                  LD     C,1                  ; indicates a write directory operation
2878: F22F CD 35 F2               CALL   WriteBuffer          ; write the buffer
2879: F232 C3 CD ED               JP     SetDataDMA           ; to data dma address
2880: F235         ;ret
2881: F235         ;-----------------------------------------------------------------
2882: F235         ;write buffer and check condition
2883: F235         ;write type (wrtype) is in register C
2884: F235         ;wrtype = 0 => normal write operation		WriteAllocated
2885: F235         ;wrtype = 1 => directory write operation	WriteDirectory
2886: F235         ;wrtype = 2 => start of new block			WriteCleanBuffer
2887: F235             WriteBuffer:
2888: F235 CD 2A F6               CALL   bcWrite              ; current drive, track, sector, dma
2889: F238 B7                     OR     A
2890: F239 C2 CB F4               JP     NZ,erPermanentNoWait ; error if not 00
2891: F23C C9                     RET
2892: F23D         ;-----------------------------------------------------------------
2893: F23D         ;read buffer and check condition
2894: F23D             ReadBuffer:
2895: F23D CD 27 F6               CALL   bcRead               ; current drive, track, sector, dma
2896: F240 B7                     OR     A
2897: F241 C2 CB F4               JP     NZ,erPermanentNoWait
2898: F244 C9                     RET
2899: F245         ;-----------------------------------------------------------------
2900: F245         ;HL = .fcb1(i), DE = .fcb2(i),
2901: F245         ;if fcb1(i) = 0 then fcb1(i) := fcb2(i)
2902: F245             Merge:
2903: F245 7E                     LD     A,(HL)
2904: F246 23                     INC    HL
2905: F247 B6                     OR     M
2906: F248 2B                     DEC    HL
2907: F249 C0                     RET    NZ                   ; return if = 0000
2908: F24A 1A                     LD     A,(DE)
2909: F24B 77                     LD     (HL),A
2910: F24C 13                     INC    DE
2911: F24D 23                     INC    HL                   ; low byte copied
2912: F24E 1A                     LD     A,(DE)
2913: F24F 77                     LD     (HL),A
2914: F250 1B                     DEC    DE
2915: F251 2B                     DEC    HL                   ; back to input form
2916: F252 C9                     RET
2917: F253         ;-----------------------------------------------------------------
2918: F253         ;compute closest disk block number from current block
2919: F253         ;given allocation vector position BC, find the zero bit closest to this position
2920: F253         ;by searching left and right.
2921: F253         ;if found, set the bit to one and return the bit position in hl.
2922: F253         ;if not found (i.e., we pass 0 on the left, or dpbDSM on the right), return 0000 in hl
2923: F253             GetClosestBlock:
2924: F253 50                     LD     D,B
2925: F254 59                     LD     E,C                  ; copy of starting position to de
2926: F255             TestLeft:
2927: F255 79                     LD     A,C
2928: F256 B0                     OR     B
2929: F257 CA 66 F2               JP     Z,TestRight          ; skip if left=0000
2930: F25A         ; left not at position zero, bit zero?
2931: F25A 0B                     DEC    BC
2932: F25B D5                     PUSH   DE
2933: F25C C5                     PUSH   BC                   ; left,right pushed
2934: F25D CD 7A ED               CALL   GetAllocBit
2935: F260 1F                     RRA
2936: F261 D2 81 F2               JP     NC,ReturnBlockNumber ; return block number if zero
2937: F264         ; bit is one, so try the right
2938: F264 C1                     POP    BC
2939: F265 D1                     POP    DE                   ; left, right restored
2940: F266             TestRight:
2941: F266 2A 52 F5               LD     HL,(dpbDSM)          ; value of maximum allocation#
2942: F269 7B                     LD     A,E
2943: F26A 95                     SUB    L
2944: F26B 7A                     LD     A,D
2945: F26C 9C                     SBC    A,H                  ; right=dpbDSM?
2946: F26D D2 89 F2               JP     NC,ReturnBlockZero   ; return block 0000 if so
2947: F270 13                     INC    DE
2948: F271 C5                     PUSH   BC
2949: F272 D5                     PUSH   DE                   ; left, right pushed
2950: F273 42                     LD     B,D
2951: F274 4B                     LD     C,E                  ; ready right for call
2952: F275 CD 7A ED               CALL   GetAllocBit
2953: F278 1F                     RRA
2954: F279 D2 81 F2               JP     NC,ReturnBlockNumber ; return block number if zero
2955: F27C D1                     POP    DE
2956: F27D C1                     POP    BC                   ; restore left and right pointers
2957: F27E C3 55 F2               JP     TestLeft             ; for another attempt
2958: F281             ReturnBlockNumber:
2959: F281 17                     RLA
2960: F282 3C                     INC    A                    ; bit back into position and set to 1
2961: F283         ; 	D contains the number of shifts required to reposition
2962: F283 CD AC ED               CALL   RotateAndReplace     ; move bit back to position and store
2963: F286 E1                     POP    HL
2964: F287 D1                     POP    DE                   ; HL returned value, DE discarded
2965: F288 C9                     RET
2966: F289
2967: F289         ; cannot find an available bit, return 0000
2968: F289             ReturnBlockZero:
2969: F289 21 00 00               LD     HL,0000H
2970: F28C C9                     RET
2971: F28D         ;-----------------------------------------------------------------
2972: F28D         ;compute disk block number from current fcb
2973: F28D             GetBlockNumber:
2974: F28D CD 15 F4               CALL   GetDiskMapIndex      ; 0...15 in register A
2975: F290 4F                     LD     C,A
2976: F291 06 00                  LD     B,0
2977: F293 CD 35 F4               CALL   GetDiskMapValue      ; return value in HL
2978: F296 22 6E F5               LD     (currentBlock),HL    ; save for later
2979: F299 C9                     RET
2980: F29A         ;-----------------------------------------------------------------
2981: F29A         ;is  block allocated
2982: F29A             IsAllocated:
2983: F29A 2A 6E F5               LD     HL,(currentBlock)
2984: F29D 7D                     LD     A,L
2985: F29E B4                     OR     H
2986: F29F C9                     RET
2987: F2A0         ;-----------------------------------------------------------------
2988: F2A0         ;compute actual record address
2989: F2A0         ; result = currentBlock * ( 2**BSH)
2990: F2A0             SetActualRecordAdd:
2991: F2A0 3A 4F F5               LD     A,(dpbBSH)           ; Block Shift  to reg A
2992: F2A3 2A 6E F5               LD     HL,(currentBlock)
2993: F2A6
2994: F2A6             SetActualRecordAdd1:
2995: F2A6 29                     ADD    HL,HL
2996: F2A7 3D                     DEC    A                    ; shl(currentBlock,dpbBSH)
2997: F2A8 C2 A6 F2               JP     NZ,SetActualRecordAdd1
2998: F2AB         ; HL has Record number for start of the block;
2999: F2AB 3A 50 F5               LD     A,(dpbBLM)           ; get block mask
3000: F2AE 4F                     LD     C,A                  ; to get cpmRecord mod Block
3001: F2AF 3A 6C F5               LD     A,(cpmRecord)        ; get index into block
3002: F2B2 A1                     AND    C                    ; masked value in A
3003: F2B3 B5                     OR     L
3004: F2B4 6F                     LD     L,A                  ; to HL
3005: F2B5 22 6E F5               LD     (currentBlock),HL    ; currentBlock=HL or (cpmRecord and dpbBLM)
3006: F2B8         ; *** currentBlock now has current record number - Starting record number + index into block
3007: F2B8 C9                     RET
3008: F2B9         ;-----------------------------------------------------------------
3009: F2B9         ;---------------------
3010: F2B9         ;copy directory location to exitParameterByte
3011: F2B9             DirLocationToReturnLoc:
3012: F2B9 3A 60 F5               LD     A,(directoryFlag)
3013: F2BC 32 C2 EA               LD     (exitParameterByte),A
3014: F2BF C9                     RET
3015: F2C0         ;---------------------
3016: F2C0         ;clear the module number field for user open/make (S2)
3017: F2C0             ClearModuleNum:
3018: F2C0 CD C6 F2               CALL   GetModuleNum
3019: F2C3 36 00                  LD     (HL),0               ; fcb(fcbS2Index)=0
3020: F2C5 C9                     RET
3021: F2C6         ;---------------------
3022: F2C6         ;get data module number (high order bit is fwf -file write flag)
3023: F2C6             GetModuleNum:
3024: F2C6 2A C0 EA               LD     HL,(paramDE)
3025: F2C9 11 0E 00               LD     DE,fcbS2Index
3026: F2CC 19                     ADD    HL,DE                ; HL=.fcb(fcbS2Index)
3027: F2CD 7E                     LD     A,(HL)
3028: F2CE C9                     RET                         ; A=fcb(fcbS2Index)
3029: F2CF         ;---------------------
3030: F2CF         ;check current fcb to see if reselection necessary
3031: F2CF             Reselect:
3032: F2CF 3E FF                  LD     A,TRUE
3033: F2D1 32 67 F5               LD     (fResel),A           ;mark possible reselect
3034: F2D4 2A C0 EA               LD     HL,(paramDE)
3035: F2D7 7E                     LD     A,(HL)               ; drive select code
3036: F2D8 E6 1F                  AND    00011111B            ; non zero is auto drive select
3037: F2DA 3D                     DEC    A                    ; drive code normalized to 0..30, or 255
3038: F2DB 32 BF EA               LD     (paramE),A           ; save drive code
3039: F2DE FE 1E                  CP     30
3040: F2E0 D2 F3 F2               JP     NC,NoSelect
3041: F2E3         ; auto select function, save currentDisk
3042: F2E3 3A 37 F5               LD     A,(currentDisk)
3043: F2E6 32 68 F5               LD     (entryDisk),A        ; entryDisk=currentDisk
3044: F2E9 7E                     LD     A,(HL)
3045: F2EA 32 69 F5               LD     (fcbDisk),A          ; save drive code
3046: F2ED E6 E0                  AND    11100000B
3047: F2EF 77                     LD     (HL),A               ; preserve hi bits
3048: F2F0 CD 4E EC               CALL   SelectCurrent
3049: F2F3             NoSelect:                       ; noselect:
3050: F2F3
3051: F2F3 3A 36 F5               LD     A,(currentUserNumber) ; set user code 0...31
3052: F2F6 2A C0 EA               LD     HL,(paramDE)
3053: F2F9 B6                     OR     M
3054: F2FA 77                     LD     (HL),A
3055: F2FB C9                     RET
3056: F2FC         ;---------------------
3057: F2FC         ;search for the directory entry, copy to fcb
3058: F2FC             OpenFile:
3059: F2FC 0E 0F                  LD     C,nameLength
3060: F2FE CD 3F F3               CALL   Search4DirElement
3061: F301 CD EF ED               CALL   EndOfDirectory
3062: F304 C8                     RET    Z                    ; return with exitParameterByte=255 if end
3063: F305
3064: F305         ; not end of directory, copy fcb information
3065: F305             OpenFileCopyFCB:
3066: F305 CD C7 F3               CALL   GetExtentAddress     ; HL=.fcb(fcbExtIndex)
3067: F308 7E                     LD     A,(HL)
3068: F309 F5                     PUSH   AF
3069: F30A E5                     PUSH   HL                   ; save extent#
3070: F30B CD E3 ED               CALL   GetDirElementAddress
3071: F30E EB                     EX     DE,HL                ; DE = .buff(dptr)
3072: F30F 2A C0 EA               LD     HL,(paramDE)         ; HL=.fcb(0)
3073: F312 0E 20                  LD     C,NEXT_RECORD        ; length of move operation
3074: F314 D5                     PUSH   DE                   ; save .buff(dptr)
3075: F315 CD 6E F4               CALL   Move                 ; from .buff(dptr) to .fcb(0)
3076: F318         ; note that entire fcb is copied, including indicators
3077: F318 CD CF F3               CALL   SetFileWriteFlag     ; sets file write flag
3078: F31B D1                     POP    DE
3079: F31C 21 0C 00               LD     HL,fcbExtIndex
3080: F31F 19                     ADD    HL,DE                ; HL=.buff(dptr+fcbExtIndex)
3081: F320 4E                     LD     C,(HL)               ; C = directory extent number
3082: F321 21 0F 00               LD     HL,fcbRCIndex        ; point at the record Count field
3083: F324 19                     ADD    HL,DE                ; HL=.buff(dptr+fcbRCIndex)
3084: F325 46                     LD     B,(HL)               ; B holds directory record count
3085: F326 E1                     POP    HL
3086: F327 F1                     POP    AF
3087: F328 77                     LD     (HL),A               ; restore extent number
3088: F329         ; HL = .user extent#, B = dir rec cnt, C = dir extent#
3089: F329         ; if user ext < dir ext then user := 128 records
3090: F329         ; if user ext = dir ext then user := dir records
3091: F329         ; if user ext > dir ext then user := 0 records
3092: F329 79                     LD     A,C
3093: F32A BE                     CP     M
3094: F32B 78                     LD     A,B                  ; ready dir fcbRCIndex
3095: F32C CA 36 F3               JP     Z,OpenRecordCount    ; if same, user gets dir fcbRCIndex
3096: F32F 3E 00                  LD     A,0
3097: F331 DA 36 F3               JP     C,OpenRecordCount    ; user is larger
3098: F334 3E 80                  LD     A,RecordsPerExtent   ; directory is larger >>>RecordsPerExtent
3099: F336             OpenRecordCount:                      ;Acc has record count to fill
3100: F336 2A C0 EA               LD     HL,(paramDE)
3101: F339 11 0F 00               LD     DE,fcbRCIndex
3102: F33C 19                     ADD    HL,DE
3103: F33D 77                     LD     (HL),A
3104: F33E C9                     RET
3105: F33F
3106: F33F         ;---------------------
3107: F33F         ;search for directory element of length C at info
3108: F33F             Search4DirElement:
3109: F33F 3E FF                  LD     A,0FFH
3110: F341 32 60 F5               LD     (directoryFlag),A    ; changed if actually found
3111: F344 21 63 F5               LD     HL,searchLength
3112: F347 71                     LD     (HL),C               ; searchLength = C
3113: F348 2A C0 EA               LD     HL,(paramDE)
3114: F34B 22 64 F5               LD     (searchAddress),HL   ; searchAddress = paramDE
3115: F34E CD DC ED               CALL   SetEndDirectory      ; dirEntryIndex = enddir
3116: F351 CD B3 ED               CALL   Home                 ; to start at the beginning
3117: F354 C3 57 F3               JP     Search4NextDirElement
3118: F357         ;---------------------
3119: F357         ;search for the next directory element, assuming a previous
3120: F357         ;call on search which sets searchAddress and searchLength
3121: F357             Search4NextDirElement:
3122: F357 0E 00                  LD     C,FALSE
3123: F359 CD 01 EE               CALL   ReadDirectory        ; read next dir element
3124: F35C CD EF ED               CALL   EndOfDirectory
3125: F35F CA BE F3               JP     Z,SearchDone         ; skip to end if so
3126: F362         ; not end of directory, scan for match
3127: F362 2A 64 F5               LD     HL,(searchAddress)
3128: F365 EB                     EX     DE,HL                ; DE=beginning of user fcb
3129: F366 1A                     LD     A,(DE)               ; first character
3130: F367 FE E5                  CP     emptyDir             ; keep scanning if Dir entry is empty
3131: F369 CA 74 F3               JP     Z,Search4NextDirElement1
3132: F36C         ; not emptyDir, may be end of logical directory
3133: F36C D5                     PUSH   DE                   ; save search address
3134: F36D CD E1 EE               CALL   StillInDirectory     ; past logical end?
3135: F370 D1                     POP    DE                   ; recall address
3136: F371 D2 BE F3               JP     NC,SearchDone        ; artificial stop
3137: F374             Search4NextDirElement1:
3138: F374 CD E3 ED               CALL   GetDirElementAddress ; HL = buffa+dptr
3139: F377 3A 63 F5               LD     A,(searchLength)
3140: F37A 4F                     LD     C,A                  ; length of search to c
3141: F37B 06 00                  LD     B,0                  ; bcounts up, c counts down
3142: F37D             Search4NextLoop:
3143: F37D 79                     LD     A,C
3144: F37E B7                     OR     A
3145: F37F CA AD F3               JP     Z,EndDirElementSearch
3146: F382 1A                     LD     A,(DE)
3147: F383 FE 3F                  CP     QMARK
3148: F385 CA A6 F3               JP     Z,Search4NextOK      ; ? matches all
3149: F388         ; scan next character if not fcbS1Index
3150: F388 78                     LD     A,B
3151: F389 FE 0D                  CP     fcbS1Index
3152: F38B CA A6 F3               JP     Z,Search4NextOK
3153: F38E         ; not the fcbS1Index field, extent field?
3154: F38E FE 0C                  CP     fcbExtIndex          ; may be extent field
3155: F390 1A                     LD     A,(DE)               ; fcb character
3156: F391 CA 9D F3               JP     Z,Search4Ext         ; skip to search extent
3157: F394 96                     SUB    M
3158: F395 E6 7F                  AND    07FH                 ; mask-out flags/extent modulus
3159: F397 C2 57 F3               JP     NZ,Search4NextDirElement ; skip if not matched
3160: F39A C3 A6 F3               JP     Search4NextOK        ;matched character
3161: F39D
3162: F39D         ; A has fcb character attempt an extent # match
3163: F39D             Search4Ext:
3164: F39D C5                     PUSH   BC                   ; save counters
3165: F39E 4E                     LD     C,(HL)               ; directory character to c
3166: F39F CD DC F3               CALL   CompareExtents       ; compare user/dir char
3167: F3A2 C1                     POP    BC                   ; recall counters
3168: F3A3 C2 57 F3               JP     NZ,Search4NextDirElement ; skip if no match
3169: F3A6
3170: F3A6         ; current character matches
3171: F3A6             Search4NextOK:
3172: F3A6 13                     INC    DE
3173: F3A7 23                     INC    HL
3174: F3A8 04                     INC    B
3175: F3A9 0D                     DEC    C
3176: F3AA C3 7D F3               JP     Search4NextLoop
3177: F3AD
3178: F3AD         ; entire name matches, return dir position
3179: F3AD             EndDirElementSearch:
3180: F3AD 3A 71 F5               LD     A,(dirEntryIndex)
3181: F3B0 E6 03                  AND    dirEntryMask
3182: F3B2 32 C2 EA               LD     (exitParameterByte),A
3183: F3B5         ; exitParameterByte = low(dirEntryIndex) and 11b
3184: F3B5 21 60 F5               LD     HL,directoryFlag
3185: F3B8 7E                     LD     A,(HL)
3186: F3B9 17                     RLA
3187: F3BA D0                     RET    NC                   ; directoryFlag=0ffh?
3188: F3BB         ; yes, change it to 0 to mark as found
3189: F3BB AF                     XOR    A
3190: F3BC 77                     LD     (HL),A               ; directoryFlag=0
3191: F3BD C9                     RET
3192: F3BE
3193: F3BE         ; end of directory, or empty name
3194: F3BE             SearchDone:
3195: F3BE CD DC ED               CALL   SetEndDirectory      ; may be artifical end
3196: F3C1 3E FF                  LD     A,0FFH
3197: F3C3 32 C2 EA               LD     (exitParameterByte),A
3198: F3C6 C9                     RET
3199: F3C7         ;---------------------
3200: F3C7         ;get current extent field address to (HL)
3201: F3C7             GetExtentAddress:
3202: F3C7 2A C0 EA               LD     HL,(paramDE)
3203: F3CA 11 0C 00               LD     DE,fcbExtIndex
3204: F3CD 19                     ADD    HL,DE                ;HL=.fcb(fcbExtIndex)
3205: F3CE C9                     RET
3206: F3CF         ;---------------------
3207: F3CF         ;Set file write flag
3208: F3CF             SetFileWriteFlag:
3209: F3CF CD C6 F2               CALL   GetModuleNum         ; HL=.fcb(fcbS2Index), A=fcb(fcbS2Index)
3210: F3D2 F6 80                  OR     writeFlagMask        ; set fwf (file write flag) to "1"
3211: F3D4 77                     LD     (HL),A               ; fcb(fcbS2Index)=fcb(fcbS2Index) or 80h
3212: F3D5 C9                     RET                         ; also returns non zero in accumulator
3213: F3D6         ;---------------------
3214: F3D6         ;set exitParameterByte to 1
3215: F3D6             SetLowReturnTo1:
3216: F3D6 3E 01                  LD     A,1
3217: F3D8 32 C2 EA               LD     (exitParameterByte),A
3218: F3DB C9                     RET
3219: F3DC         ;---------------------
3220: F3DC         ;compare extent# in A with that in C, return nonzero if they do not match
3221: F3DC             CompareExtents:
3222: F3DC C5                     PUSH   BC                   ; save C's original value
3223: F3DD F5                     PUSH   AF
3224: F3DE 3A 51 F5               LD     A,(dpbEXM)
3225: F3E1 2F                     CPL
3226: F3E2 47                     LD     B,A
3227: F3E3         ; B has negated form of extent mask
3228: F3E3 79                     LD     A,C
3229: F3E4 A0                     AND    B
3230: F3E5 4F                     LD     C,A                  ; low bits removed from C
3231: F3E6 F1                     POP    AF
3232: F3E7 A0                     AND    B                    ; low bits removed from A
3233: F3E8 91                     SUB    C
3234: F3E9 E6 1F                  AND    maxExtValue          ; set flags
3235: F3EB C1                     POP    BC                   ; restore original values
3236: F3EC C9                     RET
3237: F3ED         ;---------------------
3238: F3ED         ;copy the directory entry to the user buffer
3239: F3ED             CopyDirEntryToUser:
3240: F3ED 2A 45 F5               LD     HL,(caDirectoryDMA)
3241: F3F0 EB                     EX     DE,HL                ; source is directory buffer
3242: F3F1 2A 3D F5               LD     HL,(initDAMAddress)  ; destination is user dma address
3243: F3F4 0E 80                  LD     C,cpmRecordSize      ; copy entire record
3244: F3F6 C3 6E F4               JP     Move
3245: F3F9         ;---------------------
3246: F3F9         ;copy the whole file control block
3247: F3F9             CopyFCB:
3248: F3F9 0E 00                  LD     C,0
3249: F3FB 1E 20                  LD     E,fcbLength          ; start at 0, to fcblen-1
3250: F3FD C3 00 F4               JP     CopyDir
3251: F400         ;---------------------
3252: F400         ;copy fcb information starting at C for E bytes into the currently addressed directory entry
3253: F400             CopyDir:
3254: F400 D5                     PUSH   DE                   ; save length for later
3255: F401 06 00                  LD     B,0                  ; double index to BC
3256: F403 2A C0 EA               LD     HL,(paramDE)         ; HL = source for data
3257: F406 09                     ADD    HL,BC
3258: F407 EB                     EX     DE,HL                ; DE=.fcb(C), source for copy
3259: F408 CD E3 ED               CALL   GetDirElementAddress ; HL=.buff(dptr), destination
3260: F40B C1                     POP    BC                   ; DE=source, HL=dest, C=length
3261: F40C CD 6E F4               CALL   Move                 ; data moved
3262: F40F         ;enter from close to seek and copy current element
3263: F40F             SeekAndCopy:                      ; seek$copy:
3264: F40F CD 2F EE               CALL   SeekDir              ; seek$dir ;to the directory element
3265: F412 C3 27 F2               JP     WriteDir             ; write the directory element
3266: F415         ;---------------------
3267: F415         ;Return the  disk map Index for cpmRecord in the ACC
3268: F415         ;  account for multiple extents in 1 physical Directory entry
3269: F415             GetDiskMapIndex:                      ; dm$position
3270: F415 21 4F F5               LD     HL,dpbBSH            ; get block shift value
3271: F418 4E                     LD     C,(HL)               ; shift count to C
3272: F419 3A 6C F5               LD     A,(cpmRecord)        ; current virtual record to A
3273: F41C             GetDiskMapIndex1:
3274: F41C B7                     OR     A                    ; reset the carry flag
3275: F41D 1F                     RRA
3276: F41E 0D                     DEC    C
3277: F41F C2 1C F4               JP     NZ,GetDiskMapIndex1
3278: F422         ; A = shr(cpmRecord,dpbBSH) = cpmRecord/2**(sect/block)
3279: F422         ; A has the relative position in the block.
3280: F422 47                     LD     B,A                  ; save it for later addition
3281: F423 3E 08                  LD     A,8
3282: F425 96                     SUB    M                    ; 8-dpbBSH to accumulator
3283: F426 4F                     LD     C,A                  ; extent shift count in register c
3284: F427 3A 6B F5               LD     A,(extentValue)      ; extent value ani extmsk
3285: F42A             GetDiskMapIndex2:                      ; dmpos1:
3286: F42A         ; dpbBSH = 3,4,5,6,7, C=5,4,3,2,1
3287: F42A         ; shift is 4,3,2,1,0
3288: F42A 0D                     DEC    C
3289: F42B CA 33 F4               JP     Z,GetDiskMapIndex3
3290: F42E B7                     OR     A                    ; clear the carry flag
3291: F42F 17                     RLA
3292: F430 C3 2A F4               JP     GetDiskMapIndex2
3293: F433
3294: F433         ; The ACC has the Block Number for this record
3295: F433             GetDiskMapIndex3:
3296: F433         ; arrive here with A = shl(ext and extmsk,7-dpbBSH)
3297: F433 80                     ADD    A,B                  ; add the previous shr(cpmRecord,dpbBSH) value
3298: F434         ; A is one of the following values, depending upon alloc
3299: F434         ; bks dpbBSH
3300: F434         ; 1k   3     v/8 + extentValue * 16
3301: F434         ; 2k   4     v/16+ extentValue * 8
3302: F434         ; 4k   5     v/32+ extentValue * 4
3303: F434         ; 8k   6     v/64+ extentValue * 2
3304: F434         ; 16k  7     v/128+extentValue * 1
3305: F434 C9                     RET                         ; with disk map position in A
3306: F435         ;---------------------
3307: F435         ; Enter with Disk Map Index in BG
3308: F435         ; Return disk map value  in HL
3309: F435             GetDiskMapValue:
3310: F435 2A C0 EA               LD     HL,(paramDE)         ; base address of file control block
3311: F438 11 10 00               LD     DE,fcbDiskMapIndex   ; offset to the disk map
3312: F43B 19                     ADD    HL,DE                ; HL =.diskmap
3313: F43C 09                     ADD    HL,BC                ; index by a  byte value
3314: F43D 3A 66 F5               LD     A,(byteAllocationFlag) ;  byte map entry?
3315: F440 B7                     OR     A
3316: F441 CA 48 F4               JP     Z,GetDiskMap16Bit    ; get disk map  byte
3317: F444 6E                     LD     L,(HL)
3318: F445 26 00                  LD     H,0
3319: F447 C9                     RET                         ; with HL=00bb
3320: F448             GetDiskMap16Bit:                      ; getdmd:
3321: F448 09                     ADD    HL,BC                ; HL=.fcb(dm+i*2)
3322: F449         ; double precision value returned
3323: F449 56                     LD     D,(HL)
3324: F44A 23                     INC    HL
3325: F44B 5E                     LD     E,(HL)
3326: F44C EB                     EX     DE,HL
3327: F44D C9                     RET
3328: F44E         ;---------------------
3329: F44E         ;---------------------
3330: F44E         ;*****************************************************************
3331: F44E         ;************************ Utilities ******************************
3332: F44E         ;*****************************************************************
3333: F44E             AddAtoHL:
3334: F44E 85                     ADD    A,L
3335: F44F 6F                     LD     L,A
3336: F450 D0                     RET    NC
3337: F451 24                     INC    H
3338: F452 C9                     RET
3339: F453         ;----------
3340: F453             DEminusHL2HL:
3341: F453 7B                     LD     A,E
3342: F454 95                     SUB    L
3343: F455 6F                     LD     L,A
3344: F456 7A                     LD     A,D
3345: F457 9C                     SBC    A,H
3346: F458 67                     LD     H,A
3347: F459 C9                     RET
3348: F45A         ;-------------
3349: F45A             ShiftRightHLbyC:
3350: F45A 0C                     INC    C
3351: F45B             ShiftRightHLbyC0:
3352: F45B 0D                     DEC    C
3353: F45C C8                     RET    Z
3354: F45D 7C                     LD     A,H
3355: F45E B7                     OR     A
3356: F45F 1F                     RRA
3357: F460 67                     LD     H,A
3358: F461 7D                     LD     A,L
3359: F462 1F                     RRA
3360: F463 6F                     LD     L,A
3361: F464 C3 5B F4               JP     ShiftRightHLbyC0
3362: F467         ;-------
3363: F467             ShiftLeftHLbyC:
3364: F467 0C                     INC    C
3365: F468             ShiftLeftHLbyC0:
3366: F468 0D                     DEC    C
3367: F469 C8                     RET    Z                    ; exit when done
3368: F46A 29                     ADD    HL,HL
3369: F46B C3 68 F4               JP     ShiftLeftHLbyC0
3370: F46E         ;*****************************************************************
3371: F46E         ;move data length of length C from source DE to HL
3372: F46E             Move:
3373: F46E 0C                     INC    C
3374: F46F             Move0:
3375: F46F 0D                     DEC    C
3376: F470 C8                     RET    Z
3377: F471 1A                     LD     A,(DE)
3378: F472 77                     LD     (HL),A
3379: F473 13                     INC    DE
3380: F474 23                     INC    HL
3381: F475 C3 6F F4               JP     Move0
3382: F478
3383: F478         ;********** Console OUT Routines*******************??????
3384: F478
3385: F478         ;---------------------------------- Is Bit Set ------------------------------;
3386: F478         ; Enter HL  contains the bit map                                             ;
3387: F478         ;       B   Has the bit number (0...F)                                       ;
3388: F478         ; Return ZFlag = 1 if bit is reset (0)                                       ;
3389: F478         ;              = 0 if bit is set (1)                                         ;
3390: F478             IsBitSet:                       ;
3391: F478 04                     INC    B                    ;
3392: F479             IsBitSetLoop:                      ;
3393: F479 37                     SCF                         ; Set carry flag, expect LSBit = 1   ;
3394: F47A CB 45                  BIT    0,L                  ; is LSB set?                        ;
3395: F47C 20 01                  JR     NZ,IsBitSet1         ; Skip if LSB set                ;
3396: F47E 3F                     CCF                         ; else Clear Carry flag              ;
3397: F47F             IsBitSet1:                      ;
3398: F47F CB 1C                  RR     H                    ; Shift thru CY                      ;
3399: F481 CB 1D                  RR     L                    ; ditto                              ;
3400: F483 10 F4                  DJNZ   IsBitSetLoop         ;
3401: F485 CB 7C                  BIT    7,H                  ; Bit moved from L LSBit to H MSBit	 ;
3402: F487 C9                     RET                         ;
3403: F488         ;---------------------------------- Is Bit Set ------------------------------;
3404: F488
3405: F488         ;============================ Set/Reset Map Bit =============================;
3406: F488         ;---------------------------------- Set Map Bit ----------------------------;;
3407: F488         ; Enter  HL  contains the bit map                                           ;;
3408: F488         ;        B   Has the bit number (0...F)                                     ;;
3409: F488         ; Return HL  Contains the modified bit map                                  ;;
3410: F488             SetMapBit:                      ;;
3411: F488 C5                     PUSH   BC                   ; Save the Bit Number               ;;
3412: F489 CD 78 F4               CALL   IsBitSet             ; Put the bit in the LSBit          ;;
3413: F48C         ;;
3414: F48C C1                     POP    BC                   ; Get the bit position              ;;
3415: F48D CB FC                  SET    7,H                  ;;
3416: F48F 18 07                  JR     ReAlignMap           ;                                    ;
3417: F491         ;---------------------------------- Set Map Bit ----------------------------;;
3418: F491         ;---------------------------------- Reset Map Bit --------------------------;;
3419: F491         ; Enter  HL  contains the bit map                                           ;;
3420: F491         ;        B   Has the bit number (0...F)                                     ;;
3421: F491         ; Return HL  Contains the modified bit map                                  ;;
3422: F491             ResetMapBit:                      ;;
3423: F491 C5                     PUSH   BC                   ; Save the Bit Number               ;;
3424: F492 CD 78 F4               CALL   IsBitSet             ; Put the bit in the LSBit          ;;
3425: F495         ;;
3426: F495 C1                     POP    BC                   ; Get the bit position              ;;
3427: F496 CB BC                  RES    7,H                  ;;
3428: F498         ; Fall thru to ReAlignMap                                                    ;
3429: F498         ;---------------------------------- Reset Map Bit --------------------------;;
3430: F498         ;---------------------------------- Set Map Bit ----------------------------;;
3431: F498         ; Adjusts the HL register to its Original Alignment after IsBitSet           ;
3432: F498         ;
3433: F498             ReAlignMap:                      ;
3434: F498 04                     INC    B                    ;
3435: F499             ReAlignMapLoop:                      ;
3436: F499 37                     SCF                         ; Set carry flag, expect LSBit = 1   ;
3437: F49A CB 7C                  BIT    7,H                  ; is LSB set?                        ;
3438: F49C 20 01                  JR     NZ,ReAlignMap1       ; Skip if LSB set                ;
3439: F49E 3F                     CCF                         ; else Clear Carry flag              ;
3440: F49F             ReAlignMap1:                      ;
3441: F49F CB 15                  RL     L                    ; Shift thru CY                      ;
3442: F4A1 CB 14                  RL     H                    ; ditto                              ;
3443: F4A3 10 F4                  DJNZ   ReAlignMapLoop       ;
3444: F4A5 C9                     RET                         ;
3445: F4A6         ;============================ Set/Reset Map Bit =============================;
3446: F4A6
3447: F4A6
3448: F4A6         ;? ;********************************************************
3449: F4A6         ;? ;return version number
3450: F4A6         ;? vGetVersion:								; func12 (12 - 0C)	 Get Verson
3451: F4A6         ;?	LD		A,VERSION
3452: F4A6         ;?	LD		(exitParameterByte),A 				;exitParameterByte = VERSION (high = 00)
3453: F4A6         ;?	RET
3454: F4A6         ;************Error message World*************************
3455: F4A6             errSelect:
3456: F4A6 21 C5 F4               LD     HL,evSelection
3457: F4A9 C3 BE F4               JP     GoToError
3458: F4AC             errReadOnlyDisk:
3459: F4AC 21 C7 F4               LD     HL,evReadOnlyDisk
3460: F4AF C3 BE F4               JP     GoToError
3461: F4B2             errReadOnlyFile:
3462: F4B2 21 C9 F4               LD     HL,evReadOnlyFile
3463: F4B5 C3 BE F4               JP     GoToError
3464: F4B8             errPermanent:
3465: F4B8 21 C3 F4               LD     HL,evPermanent
3466: F4BB C3 BE F4               JP     GoToError
3467: F4BE         ;************Error message handler **********************
3468: F4BE             GoToError:
3469: F4BE         ;HL = .errorhandler, call subroutine
3470: F4BE 5E                     LD     E,(HL)
3471: F4BF 23                     INC    HL
3472: F4C0 56                     LD     D,(HL)               ; address of routine in DE
3473: F4C1 EB                     EX     DE,HL
3474: F4C2 E9                     JP     (HL)                 ; vector to subroutine
3475: F4C3         ;************ Error Vectors *****************************
3476: F4C3 D1 F4       evPermanent: DW     erPermanent          ; pererr permanent error subroutine
3477: F4C5 DD F4       evSelection: DW     erSelection          ; selerr select error subroutine
3478: F4C7 E3 F4       evReadOnlyDisk: DW     erReadOnlyDisk       ; roderr ro disk error subroutine
3479: F4C9 E9 F4       evReadOnlyFile: DW     erReadOnlyFile       ; roferr ro file error subroutine
3480: F4CB         ;************Error Routines ******************************
3481: F4CB             erPermanentNoWait:
3482: F4CB 21 1B F5               LD     HL,emPermanent
3483: F4CE C3 BE F4               JP     GoToError
3484: F4D1             erPermanent:
3485: F4D1 21 1B F5               LD     HL,emPermanent
3486: F4D4 CD F2 F4               CALL   displayAndWait       ; to report the error
3487: F4D7 FE 03                  CP     CTRL_C
3488: F4D9 CA 00 00               JP     Z,WarmBoot           ; reboot if response is CTRL_C
3489: F4DC C9                     RET                         ; and ignore the error
3490: F4DD         ;
3491: F4DD             erSelection:
3492: F4DD 21 26 F5               LD     HL,emSelection
3493: F4E0 C3 EC F4               JP     waitB4boot           ; wait console before boot
3494: F4E3         ;
3495: F4E3             erReadOnlyDisk:
3496: F4E3 21 32 F5               LD     HL,emReadOnlyDisk
3497: F4E6 C3 EC F4               JP     waitB4boot           ; wait console before boot
3498: F4E9         ;
3499: F4E9             erReadOnlyFile:
3500: F4E9 21 2D F5               LD     HL,emReadOnlyFile    ; drop through to wait for console
3501: F4EC         ;
3502: F4EC         ; wait for response before boot
3503: F4EC             waitB4boot:
3504: F4EC CD F2 F4               CALL   displayAndWait
3505: F4EF C3 00 00               JP     WarmBoot
3506: F4F2
3507: F4F2         ;report error to console, message address in HL
3508: F4F2             displayAndWait:
3509: F4F2 E5                     PUSH   HL                   ; save message pointer
3510: F4F3 CD D3 E9               CALL   showCRLF             ; stack mssg address, new line
3511: F4F6 3A 37 F5               LD     A,(currentDisk)
3512: F4F9 C6 41                  ADD    A,ASCII_A
3513: F4FB 32 17 F5               LD     (emDisk),A           ; Problem disk name
3514: F4FE 01 0B F5               LD     BC,emDisk0
3515: F501 CD 38 E9               CALL   Print                ; the error message
3516: F504 C1                     POP    BC
3517: F505 CD 38 E9               CALL   Print                ; error mssage tail
3518: F508 C3 1E E9               JP     ConIn                ; to get the input character
3519: F50B         ;ret
3520: F50B         ;**************Error Messages*******************************
3521: F50B 42 64 6F 73 20 45 72 72 20 4F 6E 20     emDisk0:   DB     'Bdos Err On '
3522: F517 20 3A 20 24     emDisk:    DB     ' : $'
3523: F51B 42 61 64 20 53 65 63 74 6F 72 24     emPermanent: DB     'Bad Sector$'
3524: F526 53 65 6C 65 63 74 24     emSelection: DB     'Select$'
3525: F52D 46 69 6C 65 20     emReadOnlyFile: DB     'File '
3526: F532 52 2F 4F 24     emReadOnlyDisk: DB     'R/O$'
3527: F536         ;*****************************************************************
3528: F536
3529: F536         ;********* file control block (fcb) constants ********************
3530: F536             fcbLength  EQU    32                   ; fcblen file control block size
3531: F536             fcbROfileIndex EQU    9                    ; high order of first type char
3532: F536             fcbHiddenfileIndex EQU    10                   ; invisible file in dir command
3533: F536             fcbExtIndex EQU    12                   ; extent number field index
3534: F536             fcbS1Index EQU    13                   ; S1 index
3535: F536             fcbS2Index EQU    14                   ; S2 data module number index
3536: F536             fcbRCIndex EQU    15                   ; record count field index
3537: F536             fcbDiskMapIndex EQU    16                   ; dskmap disk map field
3538: F536
3539: F536             highestRecordNumber EQU    RecordsPerExtent - 1 ; last record# in extent
3540: F536
3541: F536             dirEntriesPerRecord EQU    cpmRecordSize/fcbLength ; directory elts / record
3542: F536             dirEntryShift EQU    2                    ; log2(dirEntriesPerRecord)
3543: F536             dirEntryMask EQU    dirEntriesPerRecord-1
3544: F536             fcbShift   EQU    5                    ; log2(fcbLength)
3545: F536         ;
3546: F536
3547: F536
3548: F536
3549: F536             maxExtValue EQU    31                   ; largest extent number
3550: F536             moduleMask EQU    15                   ; limits module number value
3551: F536             writeFlagMask EQU    80h                  ; file write flag is high order fcbS2Index
3552: F536             nameLength EQU    15                   ; namlen name length
3553: F536
3554: F536             emptyDir   EQU    0E5H                 ; empty empty directory entry
3555: F536             NEXT_RECORD EQU    fcbLength            ; nxtrec
3556: F536             RANDOM_REC_FIELD EQU    NEXT_RECORD + 1      ;ranrec random record field (2 bytes)
3557: F536         ;
3558: F536         ;	reserved file indicators
3559: F536         ;	equ	11				; reserved
3560: F536         ;*****************************************************************
3561: F536         ;*****************************************************************
3562: F536
3563: F536         ;***common values shared between bdosi and bdos******************
3564: F536 00          currentUserNumber: DB     0                    ; usrcode current user number
3565: F537         ; paramDE:			DS	2					; ParamsDE information address
3566: F537         ; exitParameterByte:
3567: F537         ; exitParameterWord:	DS	2					; address value to return
3568: F537 FF          currentDisk: DB     -1                   ; curdsk current disk number
3569: F538         ; exitParameterByte		EQU	exitParameterWord	; lret low(exitParameterWord)
3570: F538
3571: F538         ;********************* Local Variables ***************************
3572: F538         ;     ************************
3573: F538         ;     *** Initialized Data ***
3574: F538
3575: F538 E5          emptyFCB:  DB     emptyDir             ; efcb 0E5 = available dir entry
3576: F539 00 00       ReadOnlyVector: DW     0                    ; rodsk read only disk vector
3577: F53B 00 00       loggedDisks: DW     0                    ; dlog	 logged-in disks
3578: F53D 80 00       initDAMAddress: DW     DMABuffer            ; dmaad tbuff initial dma address
3579: F53F
3580: F53F         ;     *** Current Disk attributes ****
3581: F53F         ; These are set upon disk select
3582: F53F         ; data must be adjacent, do not insert variables
3583: F53F         ; address of translate vector, not used
3584: F53F         ; ca - currentAddress
3585: F53F
3586: F53F 00 00       caDirMaxValue: DW     0000H                ; cdrmaxa pointer to cur dir max value
3587: F541 00 00       caTrack:   DW     0000H                ; curtrka current track address
3588: F543 00 00       caSector:  DW     0000H                ; current Sector
3589: F545             caListSizeStart:
3590: F545 00 00       caDirectoryDMA: DW     0000H                ; buffa pointer to directory dma address
3591: F547 00 00       caDiskParamBlock: DW     0000H                ; dpbaddr current disk parameter block address
3592: F549 00 00       caCheckSum: DW     0000H                ; checka current checksum vector address
3593: F54B 00 00       caAllocVector: DW     0000H                ; alloca current allocation vector address
3594: F54D             caListSizeEnd:
3595: F54D             caListSize EQU    caListSizeEnd - caListSizeStart
3596: F54D
3597: F54D         ;     ***** Disk Parameter Block *******
3598: F54D         ; data must be adjacent, do not insert variables
3599: F54D         ; dpb - Disk Parameter Block
3600: F54D             dpbStart:
3601: F54D 00 00       dpbSPT:    DW     0000H                ; sectpt sectors per track
3602: F54F 00          dpbBSH:    DB     0000H                ; blkshf block shift factor
3603: F550 00          dpbBLM:    DB     00H                  ; blkmsk block mask
3604: F551 00          dpbEXM:    DB     00H                  ; extmsk extent mask
3605: F552 00 00       dpbDSM:    DW     0000H                ; Maximum allocation number
3606: F554 00 00       dpbDRM:    DW     0000H                ; dirmax largest directory number
3607: F556 00 00       dpbDABM:   DW     0000H                ; dirblk reserved allocation bits for directory
3608: F558 00 00       dpbCKS:    DW     0000H                ; chksiz size of checksum vector
3609: F55A 00 00       dpbOFF:    DW     0000H                ; offset offset tracks at beginning
3610: F55C             dpbEnd:
3611: F55C             dpbSize    EQU    dpbEnd - dpbStart
3612: F55C         ;
3613: F55C
3614: F55C         ;     ************************
3615: F55C
3616: F55C 00 00       caSkewTable: DW     0000H                ; tranv address of translate vector
3617: F55E 00          fcbCopiedFlag: DB     00H                  ; fcb$copied set true if CopyFCB called
3618: F55F 00          readModeFlag: DB     00H                  ; rmf read mode flag for OpenNextExt
3619: F560 00          directoryFlag: DB     00H                  ; dirloc directory flag in rename, etc.
3620: F561 00          seqReadFlag: DB     00H                  ; seqio  1 if sequential i/o
3621: F562 00          diskMapIndex: DB     00H                  ; dminx  local for DiskWrite
3622: F563 00          searchLength: DB     00H                  ; searchl search length
3623: F564 00 00       searchAddress: DW     0000H                ; searcha search address
3624: F566         ;tinfo:	ds	word							; temp for info in "make"
3625: F566 00          byteAllocationFlag: DB     00H                  ; set true if single byte allocation map
3626: F567 00          fResel:    DB     00H                  ; resel reselection flag
3627: F568 00          entryDisk: DB     00H                  ; olddsk disk on entry to bdos
3628: F569 00          fcbDisk:   DB     00H                  ; fcbdsk disk named in fcb
3629: F56A 00          fcbRecordCount: DB     00H                  ; record count from current fcb
3630: F56B 00          extentValue: DB     00H                  ; extent number and dpbEXM from current fcb
3631: F56C 00 00       cpmRecord: DW     0000H                ; current virtual record - NEXT_RECORD
3632: F56E 00 00       currentBlock: DW     0000H                ; arecord current actual record
3633: F570         ;
3634: F570         ;	local variables for directory access
3635: F570 00          dirBlockIndex: DB     00H                  ; directory block Index 0,1,2,3
3636: F571 00 00       dirEntryIndex: DW     00H                  ; directory entry Index  0,1,...,dpbDRM
3637: F573 00 00       dirRecord: DW     00H                  ; drec:	ds	word	;directory record 0,1,...,dpbDRM/4
3638: F575
3639: F575         ;********************** data areas ******************************
3640: F575
3641: F575
3642: F575         ;---------------------------------- Stack Area--------------------------------;
3643: F575             stackBottom: DS     STACK_SIZE * 2       ; stack size                      ;
3644: F5B5             bdosStack:
3645: F5B5         ;
3646: F5B5         ;---------------------------------- Stack Area--------------------------------;
3647: F5B5         ;	end of Basic I/O System
3648: F5B5         ;-----------------------------------------------------------------;
3649: F5B5
3650: F5B5
3651: F5B5         ;
3652: F5B5             Z_HighestLocation:
3653: F5B5             Z_MemoryLeft EQU    (BIOSStart-1) - Z_HighestLocation
3654: F5B5
3655: F5B5
           ************************   Xref   ************************
0000: $               F5B5   0414 0444
3333: AddAtoHL        F44E   2541
2545: Allocate16Bit   F06A   2539
1041: AreWeAtEndOfBuffer EA37   1037
0083: ASCII_A         0041   3512
0084: ASCII_C         0043
0085: ASCII_K         004B
0092: ASCII_LO_A      0061
0093: ASCII_LO_K      006B
0094: ASCII_LO_P      0070
0035: ASCII_MASK      007F   0984
0086: ASCII_N         004E
0087: ASCII_Q         0051
0088: ASCII_R         0052
0089: ASCII_W         0057
0090: ASCII_Y         0059
0070: ASCII_ZERO      0030
0064: ASTERISK        002A
1133: BackUp          EA9C   1061 1129
1138: BackUp1         EAA4   1134
0292: bcBoot          F600
0295: bcConin         F609   0614 0799 0910 0928
0296: bcConout        F60C   0606 0872 1136 1140 1146 1148
0294: bcConst         F606   0611 0906
0300: bcHome          F618   1960
0297: bcList          F60F   0579 0878
0307: bcListst        F62D
0298: bcPunch         F612   0564
0305: bcRead          F627   2895
0299: bcReader        F615   0545
0308: bcSectran       F630
0301: bcSeldsk        F61B   1702
0304: bcSetdma        F624   1990 2001
0303: bcSetsec        F621   2182
0302: bcSettrk        F61E   1966 2162
0293: bcWboot         F603   0465
0306: bcWrite         F62A   2888
0150: BDOSBase        E800   0151 0153 0324
0119: BDOSE           0005   0120
0151: BDOSEntry       E800
0140: BDOSLength      0E00   0143 0153 0154
3644: bdosStack       F5B5
0330: BdosStart       E800
0053: BELL            0007
0153: BIOSBase        F600
0141: BIOSLength      0A00   0143
0113: BIOSPAGE        0002
0154: BIOSStart       F600   0292 0293 0294 0295 0296 0297 0298 0299 0300 0301 0302 0303 0304 0305 0306 0307 0308 3653
2530: BlockOK         F04E   2524
0250: BlockSize       0800   0272
1056: BSspaceBS       EA45   0995
0031: BYTE            0001   1169
3625: byteAllocationFlag F566   1735 1862 2536 2789 3314
3593: caAllocVector   F54B   1291 1759 1761 1767 1925
3592: caCheckSum      F549   2201
3590: caDirectoryDMA  F545   1722 1993 2017 2225 3240
3586: caDirMaxValue   F53F   1713 1773 1838 2249
3591: caDiskParamBlock F547   1325 1727
2193: CalculateCheckSum EEA3   2082
3595: caListSize      0008   1723
3594: caListSizeEnd   F54D   3595
3589: caListSizeStart F545   3595
0091: CARET           005E   0838
0832: CaretOut        E945   1030 1111
3588: caSector        F543   1719 1974 2101 2171
3616: caSkewTable     F55C   1711
3587: caTrack         F541   1716 1970 2105 2165
0148: CCPEntry        E000   0150 0154
0139: CCPLength       0800   0143 0150 0154
0924: CheckCTL_S      E9A9   0913
2404: CheckRODirectory EF9A   2706 2757
2409: CheckROFile     EF9D   2488
2418: CheckWrite      EFA7   2486 2691 2716 2749
3017: ClearModuleNum  F2C0   2320 2341 2387
2767: CloseDirEntry   F1A4   1495 2328 2623
2788: CloseDirEntry1  F1C9   2834
2802: CloseDirEntry2  F1D7   2799
2808: CloseDirEntry3  F1DD   2804
2814: CloseDirEntry4  F1E4   2791
2830: CloseDirEntry5  F1F9   2811
2855: CloseDirEntryEnd F213   2844
2862: CloseDirEntryError F21C   2810 2822 2827
0071: COLON           003A
1167: columnPosition  EABE   0857 0882 0947 0967 1125
0066: COMMA           002C
3221: CompareExtents  F3DC   3166
2223: ComputeCheckSum EECB   2200
2227: ComputeCheckSum0 EED1   2231
0125: ComTail         0080   0126
0127: ComTailChars    0082
0126: ComTailCount    0081   0127
0901: ConBreak        E989   0725 0868
0934: ConBreak0       E9B7   0926
0936: ConBreak1       E9BA   0904
0792: ConIn           E91E   0497 0983 3518
0865: ConsoleOut      E968   0839 0851 0856 0944 0952 0959 0961 1053
3253: CopyDir         F400   2306 2709 3250
3239: CopyDirEntryToUser F3ED   2346 2356
3247: CopyFCB         F3F9   2743
3631: cpmRecord       F56C   2274 2289 2445 2455 2490 2574 2611 3001 3272
0227: cpmRecordSize   0080   0229 0232 0234 2224 3243 3541
0056: CR              000D   0805 0958 0988 1052
0039: CTRL_C          0003   0929 1035 3487
0040: CTRL_E          0005   1000
0041: CTRL_H          0008   0811 0994 1139
0042: CTRL_K          000B
0043: CTRL_L          000C
0044: CTRL_P          0010   0912 1003
0045: CTRL_R          0012   1012
0046: CTRL_S          0013   0925
0047: CTRL_U          0015   1009
0048: CTRL_X          0018   1006
0049: CTRL_Z          001A
3632: currentBlock    F56E   2090 2097 2531 2978 2983 2992 3005
3568: currentDisk     F537   1204 1253 1669 1680 1686 1700 1814 2426 3042 3511
3564: currentUserNumber F536   0776 0782 1791 3051
0067: DASH            002D
0261: DataBlocks      02C7   0271
0260: DataSectors     0B1C   0261
2748: DeleteFile      F182   2363
2752: DeleteFile1     F18A   2764
1120: DeleteTheLine   EA8B   1007
1123: DeleteTheLine1  EA8C   1130
3340: DEminusHL2HL    F453   2197
3635: dirBlockIndex   F570   2018 2075
0232: DirBuffSize     0080
0247: DirectoryBlockCount 0002   0272
0234: DirectoryEntryPerRecord 0004   0275
3619: directoryFlag   F560   3012 3110 3184
3541: dirEntriesPerRecord 0004   3543
3636: dirEntryIndex   F571   2012 2033 2055 2057 2066 2087 2247 3180
3543: dirEntryMask    0003   2067 3181
3542: dirEntryShift   0002   2088
0231: DirEntrySize    0020   0234 0272
3011: DirLocationToReturnLoc F2B9   1664 2364 2398
3637: dirRecord       F573   2091 2194 2203
0219: DiskCommandBlock 0046
0218: DiskControlByte 0045
0221: DiskControlTable 0040
2472: DiskEOF         EFFC   2452 2459 2465
0414: diskf           000B
3621: diskMapIndex    F562   2508 2538
2440: DiskRead        EFC1   1424
0223: DiskReadCode    0001
0228: diskSectorSize  0200   0229 0250 0258
0217: DiskStatusLocation 0043
2482: DiskWrite       F004   1431
2497: DiskWrite1      F021   2492
2555: DiskWrite2      F072   2543
2561: DiskWrite3      F074   2501
2582: DiskWrite4      F094   2577
2593: DiskWrite5      F0A1   2586
2612: DiskWrite6      F0BF   2608
2614: DiskWrite7      F0C1   2596 2600
0224: DiskWriteCode   0002
2477: DiskWriteSeq    EFFF   2379
3508: displayAndWait  F4F2   3486 3504
0130: DMABuffer       0080   1206 3578
0060: DOLLAR          0024   0820 1797
2424: DoNotWrite      EFAE   2419 2770
0273: dpb3hdAL0       00C0
0274: dpb3hdAL1       0000
0269: dpb3hdBLM       000F
0268: dpb3hdBSH       0004
0275: dpb3hdCKS       0020
0272: dpb3hdDRM       007F   0275
0271: dpb3hdDSM       02C6
0270: dpb3hdEXM       0000
0277: dpb3hdNOH       0002
0276: dpb3hdOFF       0001
0267: dpb3hdSPT       0090
3603: dpbBLM          F550   2999
3602: dpbBSH          F54F   2991 3270
3608: dpbCKS          F558   2196
3607: dpbDABM         F556   1765
3606: dpbDRM          F554   1836 2054
3605: dpbDSM          F552   1733 1749 2941
3610: dpbEnd          F55C   3611
3604: dpbEXM          F551   2279 2637 3224
3609: dpbOFF          F55A   1962 2158
3611: dpbSize         000F   1729
3601: dpbSPT          F54D   2123 2137
3600: dpbStart        F54D   1728 3611
0446: DUMMY           E8A6   0441 0442
3522: emDisk          F517   3513
3521: emDisk0         F50B   3514
3523: emPermanent     F51B   3482 3485
3554: emptyDir        00E5   1787 2759 3130 3575
3575: emptyFCB        F538   2719
3526: emReadOnlyDisk  F532   3496
3525: emReadOnlyFile  F52D   3500
3524: emSelection     F526   3492
0134: END_OF_FILE     001A
3179: EndDirElementSearch F3AD   3145
2032: EndOfDirectory  EDEF   1574 1783 2302 2625 2660 2669 2703 2723 2754 2778 3061 3124
0037: EndOfMessage    0000
1046: EndRead         EA3B   0989 0992
3627: entryDisk       F568   0387 3043
0289: EOD             FFFF   2011
0075: EQUAL_SIGN      003D
3484: erPermanent     F4D1   3476
3481: erPermanentNoWait F4CB   2890 2897
3495: erReadOnlyDisk  F4E3   3478
3499: erReadOnlyFile  F4E9   3479
3464: errPermanent    F4B8
3458: errReadOnlyDisk F4AC   2421
3461: errReadOnlyFile F4B2   2415
3455: errSelect       F4A6   1679
3491: erSelection     F4DD   3477
3476: evPermanent     F4C3   3465
3478: evReadOnlyDisk  F4C7   3459
3479: evReadOnlyFile  F4C9   3462
3477: evSelection     F4C5   3456
0058: EXCLAIM_POINT   0021
1171: exitParameterByte EAC2   0506 0615 0726 0752 0777 1254 1499 1509 1520 1527 1540 1801 2457 2527 2562 2605 2679 2769 2863 3013 3182 3197 3217
1172: exitParameterWord EAC2   0343 0394 0546 0635 1231 1292 1311 1326
3630: extentValue     F56B   2281 3284
0026: FALSE           0000   0919 1091 1429 1739 2483 3122
0122: FCB1            005C   0123
0123: FCB2            006C
3617: fcbCopiedFlag   F55E   2622 2640 2857
3628: fcbDisk         F569   0345 0382 3045
3537: fcbDiskMapIndex 0010   1851 1854 2534 2698 2707 2781 2787 3311
3533: fcbExtIndex     000C   1478 1502 1561 1613 2299 2305 2628 2648 2693 2708 2750 2836 2848 3079 3154 3203
3532: fcbHiddenfileIndex 000A
3530: fcbLength       0020   1854 2731 2787 2836 3249 3541 3555
3536: fcbRCIndex      000F   1578 2263 2266 2848 3082 3101
3629: fcbRecordCount  F56A   2277 2293 2446 2575
3531: fcbROfileIndex  0009   2410
3534: fcbS1Index      000D   2738 3151
3535: fcbS2Index      000E   1484 1505 1630 2648 3025
3544: fcbShift        0005   2068
0167: fCloseFile      0010
0158: fConsoleIn      0001
0159: fConsoleOut     0002
0170: fDeleteFile     0013
0162: fGetConsoleStatus 000B
0176: fGetCurrentDisk 0019
0175: fGetLoginVector 0018
0178: fGetSetUserNumber 0020
0163: fGetVersion     000C
2519: FirstBlock      F040   2511
0173: fMakeFile       0016
0166: fOpenFile       000F
0160: fPrintString    0009
0171: fReadSeq        0014
0161: fReadString     000A
0174: fRenameFile     0017
3626: fResel          F567   0346 0376 3033
0164: fResetSystem    000D
0168: fSearchFirst    0011
0169: fSearchNext     0012
0165: fSelectDisk     000E
0177: fSetDMA         001A
0444: functionCount   0028   0355
0401: functionTable   E854   0360 0414 0444
0172: fWriteSeq       0015
1898: GetAllocBit     ED7A   1940 2934 2952
1929: GetAllocBitl    ED9B   1932
2973: GetBlockNumber  F28D   2463 2498
2923: GetClosestBlock F253   2520
2016: GetDirElementAddress EDE3   1577 1786 1849 2405 2758 2782 3070 3138 3259
3320: GetDiskMap16Bit F448   3316
3269: GetDiskMapIndex F415   2507 2974
3273: GetDiskMapIndex1 F41C   3277
3285: GetDiskMapIndex2 F42A   3292
3295: GetDiskMapIndex3 F433   3289
3309: GetDiskMapValue F435   2515 2977
3201: GetExtentAddress F3C7   2278 3066
2261: GetFcbAddress   EEEE   2272 2286
1560: GetFileSize     EBD9   1395
1573: GetFileSize1    EBEB   1601
1599: GetFileSize2    EC0D   1592
1602: GetFileSizeExit EC13   1575
3023: GetModuleNum    F2C6   1534 2588 2773 3018 3209
1607: GetRandomRecordPosition EC15   1549 1579
3468: GoToError       F4BE   3457 3460 3463 3466 3483
0076: GREATER_THAN    003E
0059: HASH_TAG        0023   0943
3539: highestRecordNumber 007F   2491 2595
1959: Home            EDB3   1772 3116
1143: IgnoreTheLine   EAA9   1010
3578: initDAMAddress  F53D   1207 1275 1989 3242
1748: InitDisk        ECC1   1692
1779: InitDisk1       ECF3   1789 1807
1802: InitDisk2       ED17   1793 1798
1751: InitDiskLoop1   ECC6   1755
0114: IOBYTE          0003   0634 0654
2982: IsAllocated     F29A   2464 2499
3390: IsBitSet        F478   1683 3412 3424
3397: IsBitSet1       F47F   3395
3392: IsBitSetLoop    F479   3400
1008: IsItDeleteTheLineU EA16
1005: IsItDeleteTheLineX EA11
1002: IsItPrintToggle EA0C
1092: IsItPrintToggle1 EA6D   1090
0996: IsItRubout      EA02
0999: IsPhysicalEOL   EA07
0804: IsPrintableASCII E929   0498 0834
1077: ItIsPhysicalEOL EA5A   1001
1084: ItIsPrintToggle EA62   1004
1065: ItIsRubout      EA4F   0998
1161: keyboardByte    EABB   0793 0902 0935
0062: L_PAREN         0028
0079: LEFT_ARROW      005F
0095: LEFT_CURLY      007B
0143: LengthInBytes   2000   0144 0148 0258
0144: LengthInK       0009
0074: LESS_THAN       003C
0055: LF              000A   0807 0888 0960 0990
1106: LL1             EA7B   1114
0029: LO_NIBBLE_MASK  000F   0781 1626
3577: loggedDisks     F53B   1202 1230 1682 1688 1690
2715: MakeNewFile     F14C   1518 2389 2667
2733: MakeNewFile1    F16E   2737
3549: maxExtValue     001F   2632 3234
0146: MemorySize      0040   0148
2902: Merge           F245   2815 2817
3550: moduleMask      000F   2653
3372: Move            F46E   3075 3244 3261
3374: Move0           F46F   3381
0259: myOffset        0001   0260 0276
3552: nameLength      000F   2343 2658 2729 2731 2776 3059
2190: NewCheckSum     EEA1   2875
3555: NEXT_RECORD     0020   1473 1548 2266 3073 3556
3049: NoSelect        F2F3   3040
0931: NothingWaiting  E9B5   0922
0051: NULL            0000
0243: NumberOfHeads   0002   0254 0256 0267 0277
0240: NumberOfLogicalDisks 0004
0028: OFF             0000
0027: ON              FFFF
3058: OpenFile        F2FC   1508 2322
3065: OpenFileCopyFCB F305   2675
2620: OpenNextExt     F0C4   2453 2603
2657: OpenNextExt1    F0F8   2642
2674: OpenNextExt2    F116   2644 2661
2676: OpenNextExt3    F119   2671
2683: OpenNextExtError F121   2654 2665 2670
2647: OpenNextModule  F0ED   2634
3099: OpenRecordCount F336   3095 3097
1170: paramDE         EAC0   0335 0380 0677 0969 1048 1103 1274 1442 1547 1564 2262 2336 2353 2487 2533 2627 2696 2717 2720 2725 2785 3024 3034 3052 3072 3100 3113 3202 3256 3310
1169: paramE          EABF   0337 0388 0773 1668 3038
0061: PERCENT         0025
0068: PERIOD          002E
0117: Pg0CurentDisk   0004
0116: Pg0CurentUser   0004   0117
0065: PLUS_SIGN       002B
0818: Print           E938   0680 0827 3515 3517
1163: printEchoFlag   EABC   0876 0915 1087
0077: QMARK           003F   2338 3147
2344: QMarkSelect     EF5C   2339
0063: R_PAREN         0029
0110: RAM             0000   0112 0113 0114 0116 0119 0122 0125 0130 0132
3556: RANDOM_REC_FIELD 0021   1444 1550 1565
1421: RandomDiskRead  EB23   1376
1428: RandomDiskWrite EB2C   1388
1438: RandomSeek      EB35   1423 1430
1492: RandomSeekClose EB79   1482
1537: RandomSeekError EBBE   1471
1530: RandomSeekErrorBadSeek EBB7   1501 1517 1522
1524: RandomSeekExit  EBB1   1491 1511
2894: ReadBuffer      F23D   2046 2469
2053: ReadDirectory   EE01   1782 3123
2065: ReadDirectory0  EE15   2060
2069: ReadDirectory1  EE1C   2071
2044: ReadDirRecord   EDF8   2080
1026: ReadEchoRubOut  EA23   1074
3618: readModeFlag    F55F   2442 2484 2663
0979: ReadNext        E9EA   1043 1069 1095 1117
0982: ReadNext0       E9EC   1062 1081
3576: ReadOnlyVector  F539   1201 1310 1829 1834 2425
2434: ReadSeq         EFBC   2371
0966: ReadString      E9DD   0710 1127 1149
3433: ReAlignMap      F498   3416
3440: ReAlignMap1     F49F   3438
3435: ReAlignMapLoop  F499   3443
2462: RecordOK        EFE6   2449
0252: RecordsPerBlock 0010
0236: RecordsPerExtent 0080   2451 3098 3539
0229: recordsPerSector 0004   0252 0267
2690: Rename          F127   2397
2702: Rename1         F138   2712
1098: RepeatLine      EA72   1013
3031: Reselect        F2CF   1375 1387 1394 1662 2321 2327 2342 2354 2362 2370 2378 2388 2396
3422: ResetMapBit     F491
2958: ReturnBlockNumber F281   2936 2954
2968: ReturnBlockZero F289   2946
0375: ReturnToCaller  E82F   0349
0391: ReturnToCaller1 E84A   0378 0384 0613
1950: RotateAndReplace EDAC   1944 1953 2962
0080: RUBOUT          007F   0997
1848: ScanDiskMap     ED4C   1805 2761
1856: ScanDiskMap0    ED56   1888
1872: ScanDiskMap1    ED69   1864
1881: ScanDiskMap2    ED6F   1870
3108: Search4DirElement F33F   1562 2300 2345 2659 2694 2722 2751 2777 3060
3163: Search4Ext      F39D   3156
3121: Search4NextDirElement F357   1600 2307 2355 2711 2763 3117 3159 3168
3137: Search4NextDirElement1 F374   3131
3142: Search4NextLoop F37D   3176
3171: Search4NextOK   F3A6   3148 3152 3160
3623: searchAddress   F564   2352 3114 3127
3194: SearchDone      F3BE   3125 3136
3622: searchLength    F563   3111 3139
0281: SectorMask      0003
0246: SectorsPerBlock 0004   0250 0252 0255 0261 0281
0256: SectorsPerCylinder 0024   0259 0260
0245: SectorsPerTrack 0012   0254 0256 0267
2094: Seek            EE40   2092 2468 2568
2115: Seek0           EE53   2132
2134: Seek1           EE69   2120 2149
2151: Seek2           EE7B   2143
3263: SeekAndCopy     F40F
2868: SeekCopy        F221   2858
2086: SeekDir         EE2F   2079 2869 3264
1677: Select          EC5A   1209 1673
1667: SelectCurrent   EC4E   0389 1361 3048
1699: SelectDisk      EC7B   1678
1742: SelectDisk1     ECBD   1738
0073: SEMICOLON       003B
3620: seqReadFlag     F561   1440 2287 2436 2479 2598
2990: SetActualRecordAdd F2A0   2467 2567
2994: SetActualRecordAdd1 F2A6   2997
1938: SetAllocBit     EDA1   1884
2298: SetAttributes   EF24   1663
2301: SetAttributes1  EF29   2308
1812: SetCurrentDiskBit ED22   1833
1986: SetDataDMA      EDCD   1208 1276 2047 2879
1992: SetDirDMA       EDD3   2045 2876
2235: SetDirectoryEntry EED8   1806 2741
1828: SetDiskReadOnly ED35   1658 2214
2010: SetEndDirectory EDDC   1777 2061 3115 3195
3208: SetFileWriteFlag F3CF   1542 2685 2745 3077
3215: SetLowReturnTo1 F3D6   2473 2493 2684
3410: SetMapBit       F488   1689
2218: SetNewCheckSum  EEC9   2207
1546: SetRandomRecord EBC6   1401
2271: SetRecordVars   EEFB   2444 2489 2677
0780: SetUserNumber   E918   0775
3363: ShiftLeftHLbyC  F467   1817
3365: ShiftLeftHLbyC0 F468   3369
3349: ShiftRightHLbyC F45A   2089 2428
3351: ShiftRightHLbyC0 F45B   3361
0957: showCRLF        E9D3   0945 1080 3510
0942: showHashCRLF    E9BD   1101 1144
0946: showHashCRLF1   E9C5   0953
0069: SLASH           002F
0052: SOH             0001
0057: SPACE           0020   0813 0855 0885 0951 1135 1145 1147
0288: STACK_SIZE      0020   3643
3643: stackBottom     F575
1166: startingColumn  EABD   0948 0968 1124
2246: StillInDirectory EEE1   2212 2236 3134
0258: SystemSectors   0011   0259
0054: TAB             0009   0809 0850
0848: TabOut          E955   0503 0525 0825 0835
0854: TabOut0         E95B   0859
2926: TestLeft        F255   2957
2940: TestRight       F266   2929
0920: ToggleFlag1     E9A6   0918
0120: TopRAM          0007
0255: TotalNumberOfBlocks 02D0
0254: TotalNumberOfSectors 0B40   0255 0260
0132: TPA             0100
0244: TracksPerHead   0050   0254
0025: TRUE            FFFF   0916 0937 1088 1422 1736 1743 1781 2191 2441 2856 3032
0078: UNDER_SCORE     005F
2285: UpdateRecordVars EF12   2470 2602 2615
1159: usersStack      EAB9   0339 0392
2326: vCloseFile      EF43   0419
1393: vComputeFileSize EB19   0438
0496: vConsoleIn      E8AA   0403
0524: vConsoleOut     E8BB   0404
2361: vDeleteFile     EF71   0422
0601: vDirectConIO    E8CE   0408
0610: vDirectConIO1   E8D6   0604
0287: VERSION         0020   0751
2334: vFindFirst      EF49   0420
2351: vFindNext       EF62   0421
1290: vGetAllocAddr   EAF4   0430
0724: vGetConsoleStatus E8FD   0413
1252: vGetCurrentDisk EAE4   0428
1324: vGetDiskParamBlock EB02   0434
0633: vGetIOBYTE      E8E4   0409
1229: vGetLoginVector EADD   0427
1309: vGetReadOnlyMap EAFB   0432
0772: vGetSetUserNumber E90A   0435
0750: vGetVersion     E904   0415
0578: vListOut        E8CA   0407
2386: vMakeFile       EF88   0425
2319: vOpenFile       EF3A   0418
0676: vPrintString    E8F0   0411
0563: vPunchOut       E8C6   0406
0544: vReaderIn       E8BF   0405
1374: vReadRandom     EB0D   0436
2369: vReadSeq        EF7A   0423
0709: vReadString     E8F9   0412
2395: vRenameFile     EF91   0426
1352: vResetDrive     EB09   0440
1199: vResetSystem    EAC4   0416
1360: vSelectDisk     EB0A   0417
1273: vSetDMA         EAEB   0429
1661: vSetFileAttributes EC45   0433
0653: vSetIOBYTE      E8EB   0410
1400: vSetRandomRecord EB1F   0439
0464: vSystemReset    E8A7   0402
1657: vWriteProtectDisk EC42   0431
1386: vWriteRandom    EB13   0437
1414: vWriteRandom0Fill EB22   0443
2377: vWriteSeq       EF81   0424
3503: waitB4boot      F4EC   3493 3497
0112: WarmBoot        0000   0930 1039 3488 3505
0032: WORD            0002   1170 1172
0192: WriteAllocated  0000   2500
2887: WriteBuffer     F235   2571 2878
0194: WriteCleanBuffer 0002   2556
2874: WriteDir        F227   2762 2870 3265
0193: WriteDirectory  0001
3551: writeFlagMask   0080   2774 3210
3652: Z_HighestLocation F5B5   3653
3653: Z_MemoryLeft    004A
0036: ZERO            0000
