0001: E800         ;     File created by MakeZ80Source on Tue Sep 18 12:41:03 EDT 2018 from:
0002: E800         ;     C:\Users\admin\Dropbox\Resources\CPM\CurrentOS\8080\BDOSX.asm
0003: E800         ; BDOS.Z80
0004: E800
0005: E800
0006: E800         ; 2019-01-11 - BDOS 0.B  - Function 0-A Refactored to Z80 idiom
0007: E800         ; 2018-12-28 Started to refactor to Z80 idiom
0008: E800         ; 2018-03-31 added vector for BDOS Call 5 -ListOut
0009: E800         ; 2018-03-02 Refactored the CP/M Suite
0010: E800         ; 2018-02-12 fixed allocate 16 bit problem
0011: E800         ; 2014-01-16 extended from part of newOS (newBDOS)
0012: E800         ; 2014-03-14  :  Frank Martyn
0013: E800
0014: E800
0015: E800                        Include ./stdHeader.Z80
0016: E800         ;<<<<<<<<<<<<<<<<<<<<<<< Include >>>>>>>>>>>>>>>>
0017: E800         ;     File created by MakeZ80Source on Mon Sep 17 16:25:01 EDT 2018 from:
0018: E800         ;     C:\Users\admin\Dropbox\Resources\CPM\CurrentOS\8080\stdHeader.asm
0019: E800         ; stdHeader.asm
0020: E800         ; standard equates
0021: E800
0022: E800         ; 2017-03-02 Refactored the CP/M Suite
0023: E800
0024: E800
0025: E800             TRUE       EQU    -1                   ; not false
0026: E800             FALSE      EQU    0000H
0027: E800             ON         EQU    -1
0028: E800             OFF        EQU    0000H
0029: E800             LO_NIBBLE_MASK EQU    0FH                  ; mask used to obtain the bytes low four bits
0030: E800
0031: E800             BYTE       EQU    1                    ; number of bytes for "byte" type
0032: E800             WORD       EQU    2                    ; number of bytes for "word" type
0033: E800
0034: E800
0035: E800             ASCII_MASK EQU    7FH                  ; Ascii mask 7 bits
0036: E800             ZERO       EQU    00H                  ; Zero
0037: E800             EndOfMessage EQU    00H
0038: E800
0039: E800             CTRL_C     EQU    03H                  ; ETX
0040: E800             CTRL_E     EQU    05H                  ; physical eol
0041: E800             CTRL_H     EQU    08H                  ; backspace
0042: E800             CTRL_K     EQU    0BH                  ; VT - Vertical tab
0043: E800             CTRL_L     EQU    0CH                  ; FF - Form feed
0044: E800             CTRL_P     EQU    10H                  ; prnt toggle
0045: E800             CTRL_R     EQU    12H                  ; repeat line
0046: E800             CTRL_S     EQU    13H                  ; X-OFF stop/start screen
0047: E800             CTRL_U     EQU    15H                  ; line delete
0048: E800             CTRL_X     EQU    18H                  ; =ctl-u
0049: E800             CTRL_Z     EQU    1AH                  ; end of file
0050: E800
0051: E800             NULL       EQU    00H                  ; Null
0052: E800             SOH        EQU    01H                  ; Start of Heading
0053: E800             BELL       EQU    07H                  ; Bell
0054: E800             TAB        EQU    09H                  ; Tab
0055: E800             LF         EQU    0AH                  ; Line Feed
0056: E800             CR         EQU    0DH                  ; Carriage Return
0057: E800             SPACE      EQU    20H                  ; Space
0058: E800             EXCLAIM_POINT EQU    21H                  ; Exclamtion Point
0059: E800             HASH_TAG   EQU    23H                  ; Sharp sign #
0060: E800             DOLLAR     EQU    24H                  ; Dollar Sign
0061: E800             PERCENT    EQU    25H                  ; Percent Sign
0062: E800             L_PAREN    EQU    28H                  ; Left Paenthesis (
0063: E800             R_PAREN    EQU    29H                  ; Right Paenthesis )
0064: E800             ASTERISK   EQU    2AH                  ; Asterisk *
0065: E800             PLUS_SIGN  EQU    2BH                  ; Plus sign +
0066: E800             COMMA      EQU    2CH                  ; Comma
0067: E800             DASH       EQU    2DH                  ; Dash Hyphen -
0068: E800             PERIOD     EQU    2EH                  ; Period
0069: E800             SLASH      EQU    2FH                  ; /
0070: E800             ASCII_ZERO EQU    30H                  ; zero
0071: E800             COLON      EQU    3AH                  ; Colon
0072: E800
0073: E800             SEMICOLON  EQU    3BH                  ; Semi Colon
0074: E800             LESS_THAN  EQU    3CH                  ; Less Than <
0075: E800             EQUAL_SIGN EQU    3DH                  ; Equal Sign
0076: E800             GREATER_THAN EQU    3EH                  ; Greater Than >
0077: E800             QMARK      EQU    3FH                  ; Question Mark
0078: E800             UNDER_SCORE EQU    5FH                  ; under score _
0079: E800             LEFT_ARROW EQU    5FH                  ; Left Arrow ?
0080: E800             RUBOUT     EQU    7FH                  ; Delete Key
0081: E800
0082: E800
0083: E800             ASCII_A    EQU    'A'
0084: E800             ASCII_C    EQU    'C'
0085: E800             ASCII_K    EQU    'K'
0086: E800             ASCII_N    EQU    'N'
0087: E800             ASCII_Q    EQU    'Q'
0088: E800             ASCII_R    EQU    'R'
0089: E800             ASCII_W    EQU    'W'
0090: E800             ASCII_Y    EQU    'Y'
0091: E800             CARET      EQU    '^'
0092: E800             ASCII_LO_A EQU    'a'
0093: E800             ASCII_LO_K EQU    'k'
0094: E800             ASCII_LO_P EQU    'p'
0095: E800             LEFT_CURLY EQU    '{'                  ; Left curly Bracket
0096: E800
0097: E800         ;<<<<<<<<<<<<<<<<<<<<<<< Include >>>>>>>>>>>>>>>>
0098: E800                        Include ./osHeader.Z80
0099: E800         ;<<<<<<<<<<<<<<<<<<<<<<< Include >>>>>>>>>>>>>>>>
0100: E800         ;     File created by MakeZ80Source on Mon Sep 17 16:25:47 EDT 2018 from:
0101: E800         ;     C:\Users\admin\Dropbox\Resources\CPM\CurrentOS\8080\osHeader.asm
0102: E800         ; osHeader.Z80
0103: E800
0104: E800         ; 2018-12-28 Changed BDOSEntry to remove dead space in BDOS
0105: E800         ; 2017-03-02 Refactored the CP/M Suite
0106: E800
0107: E800         ; Contains the Equates used by the CP/M system
0108: E800
0109: E800         ;------------------------Page Zero Constants ---------------------------------
0110: E800             RAM        EQU    0                    ; Start of RAM ( and the Base page)
0111: E800
0112: E800             WarmBoot   EQU    RAM + 0              ; Contains a JMP instruction to warm boot in BIOS
0113: E800             BIOSPAGE   EQU    RAM + 2              ; BIOS Jump Vector Page
0114: E800             IOBYTE     EQU    RAM + 3              ; Input/Output redirection byte
0115: E800
0116: E800             Pg0CurentUser EQU    RAM + 4              ; Current user ( bits 7-4)
0117: E800             Pg0CurentDisk EQU    Pg0CurentUser        ; Default logical disk (bits 0-3)
0118: E800
0119: E800             BDOSE      EQU    RAM + 5              ; Contains a JMP to BDOS entry
0120: E800             TopRAM     EQU    BDOSE+2              ; Top page of usable RAM
0121: E800
0122: E800             FCB1       EQU    RAM + 05CH           ; File Control Block #1
0123: E800             FCB2       EQU    FCB1 + 16            ; File Control Block #2
0124: E800
0125: E800             ComTail    EQU    RAM + 080H           ; Complete command tail
0126: E800             ComTailCount EQU    ComTail + 1          ; Count of the number of char in tail
0127: E800             ComTailChars EQU    ComTailCount + 1     ; Complete Command tail up-cased, w/o trailing CR
0128: E800         ;-----------------------------------------------------------------------
0129: E800
0130: E800             DMABuffer  EQU    RAM + 080H           ; Default "DMA" address used as buffer
0131: E800         ;-----------------------------------------------------------------------
0132: E800             TPA        EQU    RAM + 0100H          ; Start of Transient program Area
0133: E800         ;-----------------------------------------------------------------------
0134: E800             END_OF_FILE EQU    1AH                  ; end of file
0135: E800         ;-----------------------------------------------------------------------
0136: E800
0137: E800         ;--------------- CP/M Constants -----------------------------------------
0138: E800
0139: E800             CCPLength  EQU    0800H                ; Constant
0140: E800             BDOSLength EQU    0E00H                ; Constant 0E00H
0141: E800             BIOSLength EQU    0A00H                ; Constant 0900H
0142: E800
0143: E800             LengthInBytes EQU    CCPLength + BDOSLength + BIOSLength
0144: E800             LengthInK  EQU    (LengthInBytes/1024) + 1
0145: E800
0146: E800             MemorySize EQU    64
0147: E800
0148: E800             CCPEntry   EQU    (MemorySize * 1024) - LengthInBytes
0149: E800
0150: E800             BDOSBase   EQU    CCPEntry + CCPLength
0151: E800             BDOSEntry  EQU    BDOSBase
0152: E800
0153: E800             BIOSBase   EQU    BDOSBase + BDOSLength
0154: E800             BIOSStart  EQU    CCPEntry + CCPLength + BDOSLength
0155: E800         ;-----------------------------------------------------------------------
0156: E800
0157: E800         ;------------------- BDOS System Call Equates --------------------------
0158: E800             fConsoleIn EQU    01H                  ; rcharf - Console Input
0159: E800             fConsoleOut EQU    02H                  ; pcharf - Console Output
0160: E800             fPrintString EQU    09H                  ; pbuff	- Print String
0161: E800             fReadString EQU    0AH                  ; rbuff	- Read Console String
0162: E800             fGetConsoleStatus EQU    0BH                  ; breakf - Get Console Status
0163: E800             fGetVersion EQU    0CH                  ; liftf	- Return Version Number
0164: E800             fResetSystem EQU    0DH                  ; initf	- Reset Disk System
0165: E800             fSelectDisk EQU    0EH                  ; self	- Select Disk
0166: E800             fOpenFile  EQU    0FH                  ; openf	- Open File
0167: E800             fCloseFile EQU    10H                  ; closef - Close File
0168: E800             fSearchFirst EQU    11H                  ; searf	- Search For First
0169: E800             fSearchNext EQU    12H                  ; searnf - Search for Next
0170: E800             fDeleteFile EQU    13H                  ; delf - Delete File
0171: E800             fReadSeq   EQU    14H                  ; dreadf - Read Sequential
0172: E800             fWriteSeq  EQU    15H                  ; dwritf - Write Sequential
0173: E800             fMakeFile  EQU    16H                  ; makef	- Make File
0174: E800             fRenameFile EQU    17H                  ; renf	- Rename File
0175: E800             fGetLoginVector EQU    18H                  ; logf	- Return Login Vector
0176: E800             fGetCurrentDisk EQU    19H                  ; cself	- Return Current Disk
0177: E800             fSetDMA    EQU    1AH                  ; dmaf	- Set DMA address
0178: E800             fGetSetUserNumber EQU    20H                  ; userf	- Set/Get User Code
0179: E800         ;-----------------------------------------------------------------------
0180: E800
0181: E800
0182: E800
0183: E800
0184: E800
0185: E800         ;*******************************************************************************
0186: E800         ; These are the values handed over by the BDOS when it calls the Writer operation
0187: E800         ; The allocated.unallocated indicates whether the BDOS is set to write to an
0188: E800         ; unallocated allocation block (it only indicates this for the first 128 byte
0189: E800         ; sector write) or to an allocation block that has already been allocated to a
0190: E800         ; file. The BDOS also indicates if it is set to write to the file directory
0191: E800         ;*******************************************************************************
0192: E800             WriteAllocated EQU    00H
0193: E800             WriteDirectory EQU    01H
0194: E800             WriteCleanBuffer EQU    02H
0195: E800
0196: E800
0197: E800         ;<<<<<<<<<<<<<<<<<<<<<<< Include >>>>>>>>>>>>>>>>
0198: E800                        Include ./diskHeader.Z80
0199: E800         ;<<<<<<<<<<<<<<<<<<<<<<< Include >>>>>>>>>>>>>>>>
0200: E800         ;     File created by MakeZ80Source on Mon Sep 17 16:26:22 EDT 2018 from:
0201: E800         ;     C:\Users\admin\Dropbox\Resources\CPM\CurrentOS\8080\diskHeader.asm
0202: E800         ; diskHeader.asm
0203: E800
0204: E800         ; 2017-03-02 Refactored the CP/M Suite
0205: E800
0206: E800         ; needs osHeader.asm declared before this is used !!!!!!!
0207: E800
0208: E800         ; Contains the Equates used by the CP/M system to handle disks
0209: E800
0210: E800
0211: E800         ;*******************************************************************************
0212: E800         ;
0213: E800         ;     Disk related values
0214: E800         ;
0215: E800         ;
0216: E800         ;*******************************************************************************
0217: E800             DiskStatusLocation EQU    043H                 ; status after disk I/O placed here
0218: E800             DiskControlByte EQU    045H                 ; control byte for disk I/O
0219: E800             DiskCommandBlock EQU    046H                 ; Control Table Pointer
0220: E800         ; for boot
0221: E800             DiskControlTable EQU    0040H
0222: E800
0223: E800             DiskReadCode EQU    01H                  ; Code for Read
0224: E800             DiskWriteCode EQU    02H                  ; Code for Write
0225: E800
0226: E800
0227: E800             cpmRecordSize EQU    080H                 ; (128) record size that CP/M uses
0228: E800             diskSectorSize EQU    200H                 ; (512) size of physical disk I/O
0229: E800             recordsPerSector EQU    diskSectorSize/cpmRecordSize
0230: E800
0231: E800             DirEntrySize EQU    20H                  ; (32)
0232: E800             DirBuffSize EQU    cpmRecordSize
0233: E800
0234: E800             DirectoryEntryPerRecord EQU    cpmRecordSize / DirEntrySize
0235: E800
0236: E800             RecordsPerExtent EQU    080H                 ; extent Record capacity
0237: E800
0238: E800
0239: E800         ;-------------------------------------------------------------------------------------
0240: E800             NumberOfLogicalDisks EQU    4                    ; max number of disk in this system
0241: E800
0242: E800         ;----------------------3.5 Double Density Disk Geometry----------------------------------------
0243: E800             NumberOfHeads EQU    02H                  ; number of heads
0244: E800             TracksPerHead EQU    50H                  ; 80
0245: E800             SectorsPerTrack EQU    12H                  ; 18 -  1 head only
0246: E800             SectorsPerBlock EQU    04H                  ; 2048 bytes
0247: E800             DirectoryBlockCount EQU    02H                  ;
0248: E800         ;-----------------------------------------------------------------------
0249: E800
0250: E800             BlockSize  EQU    SectorsPerBlock * 	diskSectorSize ; Size in Bytes
0251: E800
0252: E800             RecordsPerBlock EQU    recordsPerSector * SectorsPerBlock
0253: E800
0254: E800             TotalNumberOfSectors EQU    SectorsPerTrack * TracksPerHead * NumberOfHeads
0255: E800             TotalNumberOfBlocks EQU    TotalNumberOfSectors / SectorsPerBlock
0256: E800             SectorsPerCylinder EQU    SectorsPerTrack * NumberOfHeads
0257: E800
0258: E800             SystemSectors EQU    LengthInBytes / diskSectorSize + 1 ; need to account for boot sector
0259: E800             myOffset   EQU    (SystemSectors / SectorsPerCylinder) + 1 ;
0260: E800             DataSectors EQU    TotalNumberOfSectors - (SectorsPerCylinder * myOffset)
0261: E800             DataBlocks EQU    DataSectors / 	SectorsPerBlock
0262: E800
0263: E800         ;-----------------------------------------------------------------------
0264: E800         ;; Disk block parameters for F3HD - 3.5 HD   1.44 MB Diskette
0265: E800         ;-----------------------------------------------------------------------
0266: E800         ;dpb3hdSPT				EQU		0090H			; cpmRecords per track- (144)
0267: E800             dpb3hdSPT  EQU    recordsPerSector * SectorsPerTrack * NumberOfHeads ; SPT - records per Clynder
0268: E800             dpb3hdBSH  EQU    04H                  ; Block Shift Factor - BlockSize = 128 * (2**BSH)											; BSH = Log2(BlockSize/cpmRecordSize)
0269: E800             dpb3hdBLM  EQU    0FH                  ; BlockMask = (2**BSH) -1
0270: E800             dpb3hdEXM  EQU    00H                  ; Extent mask = (PhysicalExtents/LogicalExtents) - 1
0271: E800             dpb3hdDSM  EQU    DataBlocks -1        ; Maximum allocation block number (710)
0272: E800             dpb3hdDRM  EQU    ((BlockSize *  DirectoryBlockCount)	/	DirEntrySize) -1 ; DRM Number of directory entries - 1 (127)
0273: E800             dpb3hdAL0  EQU    0C0H                 ; Bit map for reserving 1 alloc. block
0274: E800             dpb3hdAL1  EQU    00H                  ;  for each file directory
0275: E800             dpb3hdCKS  EQU    (dpb3hdDRM +1)/ DirectoryEntryPerRecord ; Disk change work area size (32)
0276: E800             dpb3hdOFF  EQU    myOffset             ; Number of tracks before directory
0277: E800             dpb3hdNOH  EQU    NumberOfHeads
0278: E800
0279: E800         ;*******************************************************************************
0280: E800
0281: E800             SectorMask EQU    SectorsPerBlock - 1
0282: E800
0283: E800         ;***************************************************************************
0284: E800
0285: E800         ;<<<<<<<<<<<<<<<<<<<<<<< Include >>>>>>>>>>>>>>>>
0286: E800
0287: E800             VERSION    EQU    20H                  ; Version 2.0
0288: E800             STACK_SIZE EQU    20H                  ; Make stack big enough
0289: E800             EOD        EQU    -1                   ; End of Directory
0290: E800
0291: E800         ;************************ BIOS Function Constants ***************************;
0292: E800             bcBoot     EQU    BIOSStart+3*0        ; Cold Boot function	             ;
0293: E800             bcWboot    EQU    BIOSStart+3*1        ; Warm Boot function                 ;
0294: E800             bcConst    EQU    BIOSStart+3*2        ; Console Status function            ;
0295: E800             bcConin    EQU    BIOSStart+3*3        ; Console Input function             ;
0296: E800             bcConout   EQU    BIOSStart+3*4        ; Console Output function            ;
0297: E800             bcList     EQU    BIOSStart+3*5        ; List Output function               ;
0298: E800             bcPunch    EQU    BIOSStart+3*6        ; Punch Output function              ;
0299: E800             bcReader   EQU    BIOSStart+3*7        ; Reader Input function              ;
0300: E800             bcHome     EQU    BIOSStart+3*8        ; Disk Home function                 ;
0301: E800             bcSeldsk   EQU    BIOSStart+3*9        ; Select Disk function               ;
0302: E800             bcSettrk   EQU    BIOSStart+3*10       ; Set Track function                 ;
0303: E800             bcSetsec   EQU    BIOSStart+3*11       ; Set Sector function                ;
0304: E800             bcSetdma   EQU    BIOSStart+3*12       ; Set DMA function                   ;
0305: E800             bcRead     EQU    BIOSStart+3*13       ; Read Disk function                 ;
0306: E800             bcWrite    EQU    BIOSStart+3*14       ; Write Disk function                ;
0307: E800             bcListst   EQU    BIOSStart+3*15       ; List Status function               ;
0308: E800             bcSectran  EQU    BIOSStart+3*16       ; Sector Translate                   ;
0309: E800         ;************************ BIOS Function Constants ***************************;
0310: E800
0311: E800         ;============================================================================;
0312: E800         ;	BDOS                                                                     ;
0313: E800         ; Calling into   :                                                           ;
0314: E800         ;					Register  C - Contains BDOS Function Code                ;
0315: E800         ;					Register  A - Holds the Byte argument if any             ;
0316: E800         ;					Register DE - Holds the Word argument if any             ;
0317: E800         ; Returning from :                                                           ;
0318: E800         ;					Register  A - The Byte return value if any               ;
0319: E800         ;					Register HL - The Word return value if any               ;
0320: E800         ;                   ( Register A=L and B=H)                                  ;
0321: E800         ;============================================================================;
0322: E800
0323: E800
0324: E800                        ORG    BDOSBase
0325: E800
0326: E800         ;===========================BDOS Entry=======================================;
0327: E800         ;BDOSEntry:                                                                  ;
0328: E800         ;
0329: E800         ;
0330: E800             BdosStart:                      ;
0331: E800         ;	LD		A,C                                                              ;
0332: E800         ; 	LD		(FunctionValue),A			; Save the function number           ;
0333: E800         ;
0334: E800         ; Save Calling Arguments                                                     ;
0335: E800 ED 53 C0 EA               LD     (paramDE),DE         ; Save the Word Argument             ;
0336: E804 7B                     LD     A,E                  ;
0337: E805 32 BF EA               LD     (paramE),A           ; Save the Byte argument             ;
0338: E808         ; Save users Stack pointer                                                   ;
0339: E808 ED 73 B9 EA               LD     (usersStack),SP      ; We will use our own stack          ;
0340: E80C         ;
0341: E80C         ; initialize variables                                                       ;
0342: E80C 21 00 00               LD     HL,0000H             ;
0343: E80F 22 C2 EA               LD     (exitParameterWord),HL ; Assume all is well for return      ;
0344: E812 AF                     XOR    A                    ;
0345: E813 32 49 F5               LD     (fcbDisk),A          ; Initialize to 00                   ;
0346: E816 32 47 F5               LD     (fResel),A           ; Clear re selection flag            ;
0347: E819         ;
0348: E819         ; Set up for return to caller when Function Completes                        ;
0349: E819 21 2F E8               LD     HL,ReturnToCaller    ;
0350: E81C E5                     PUSH   HL                   ;Set up to ReturnToCaller            ;
0351: E81D         ;
0352: E81D         ; is it a valid function number ?	                                         ;
0353: E81D         ;	LD		A,(FunctionValue)			; Get the Function Number            ;
0354: E81D 79                     LD     A,C                  ;
0355: E81E FE 28                  CP     functionCount        ; make sure its a good number        ;
0356: E820 D0                     RET    NC                   ; exit if not a valid function       ;
0357: E821         ;
0358: E821         ; Calculate the index and get vector to go to	                             ;
0359: E821 4B                     LD     C,E                  ; Assume byte argument               ;
0360: E822 21 54 E8               LD     HL,functionTable     ; Get table base                     ;
0361: E825 5F                     LD     E,A                  ; Function number in E               ;
0362: E826 16 00                  LD     D,0                  ;
0363: E828 19                     ADD    HL,DE                ; Have byte location                 ;
0364: E829 19                     ADD    HL,DE                ;  but we want a Word offset         ;
0365: E82A 5E                     LD     E,(HL)               ; Get LSB of vector                  ;
0366: E82B 23                     INC    HL                   ;
0367: E82C 56                     LD     D,(HL)               ; Get MSB of vector                  ;
0368: E82D EB                     EX     DE,HL                ; Vector now in HL                   ;
0369: E82E         ;
0370: E82E         ; Vector to Function is in HL                                                ;
0371: E82E E9                     JP     (HL)                 ; Put it into the Program Counter    ;
0372: E82F         ;===========================BDOS Entry=======================================;
0373: E82F         ;===========================BDOS Exit =======================================;
0374: E82F         ;arrive here at end of processing to return to user                          ;
0375: E82F             ReturnToCaller:                      ;
0376: E82F 3A 47 F5               LD     A,(fResel)           ; get re-selection flag              ;
0377: E832 B7                     OR     A                    ; is it set?                         ;
0378: E833 28 15                  JR     Z,ReturnToCaller1    ;
0379: E835         ;re-selection  may have taken place                                         ;
0380: E835 2A C0 EA               LD     HL,(paramDE)         ;
0381: E838 36 00                  LD     (HL),0               ;
0382: E83A 3A 49 F5               LD     A,(fcbDisk)          ;
0383: E83D B7                     OR     A                    ; Disk = 0?                          ;
0384: E83E 28 0A                  JR     Z,ReturnToCaller1    ; exit if yes                  		 ;
0385: E840         ;
0386: E840 77                     LD     (HL),A               ;
0387: E841 3A 48 F5               LD     A,(entryDisk)        ; get back original Disk             ;
0388: E844 32 BF EA               LD     (paramE),A           ; and select it                      ;
0389: E847 CD 4E EC               CALL   SelectCurrent        ;
0390: E84A         ;
0391: E84A             ReturnToCaller1:                      ;
0392: E84A 2A B9 EA               LD     HL,(usersStack)      ;
0393: E84D F9                     LD     SP,HL                ; restore callers stack              ;
0394: E84E 2A C2 EA               LD     HL,(exitParameterWord) ;
0395: E851 7D                     LD     A,L                  ;
0396: E852 44                     LD     B,H                  ; BA = exitParameterWord             ;
0397: E853 C9                     RET                         ;
0398: E854         ;===========================BDOS Exit =======================================;
0399: E854
0400: E854         ;++++++++++++++++++++++++++++ Function Vector Table +++++++++++++++++++++++++;
0401: E854             functionTable:                      ;
0402: E854 A7 E8                  DW     vSystemReset         ;   0 - System Reset                 ;
0403: E856 AA E8                  DW     vConsoleIn           ;   1 - Console Input                ;
0404: E858 BB E8                  DW     vConsoleOut          ;   2 - Console Output               ;
0405: E85A BF E8                  DW     vReaderIn            ;   3 - Reader Input                 ;
0406: E85C C6 E8                  DW     vPunchOut            ;   4 - Punch Output                 ;
0407: E85E CA E8                  DW     vListOut             ;   5 - List Output                  ;
0408: E860 CE E8                  DW     vDirectConIO         ;   6 - Direct Console I/O           ;
0409: E862 E4 E8                  DW     vGetIOBYTE           ;   7 - Get I/O Byte                 ;
0410: E864 EB E8                  DW     vSetIOBYTE           ;   8 - Set I/O Byte                 ;
0411: E866 F0 E8                  DW     vPrintString         ;   9 - Print String                 ;
0412: E868 F9 E8                  DW     vReadString          ;   A - Read Console String          ;
0413: E86A FD E8                  DW     vGetConsoleStatus    ;   B - Get Console Status           ;
0414: E86C             diskf      EQU    ($-functionTable)/2  ; disk functions                     ;
0415: E86C 04 E9                  DW     vGetVersion          ;   C - Return Version Number        ;
0416: E86E C4 EA                  DW     vResetSystem         ;   D - Reset Disk System            ;
0417: E870 0A EB                  DW     vSelectDisk          ;   E - Select Disk                  ;
0418: E872 28 EF                  DW     vOpenFile            ;   F - Open File                    ;
0419: E874 31 EF                  DW     vCloseFile           ;  10 - Close File                   ;
0420: E876 37 EF                  DW     vFindFirst           ;  11 - Search For First             ;
0421: E878 50 EF                  DW     vFindNext            ;  12 - Search for Next              ;
0422: E87A 5F EF                  DW     vDeleteFile          ;  13 - Delete File                  ;
0423: E87C 68 EF                  DW     vReadSeq             ;  14 - Read Sequential              ;
0424: E87E 6F EF                  DW     vWriteSeq            ;  15 - Write Sequential             ;
0425: E880 76 EF                  DW     vMakeFile            ;  16 - Make File                    ;
0426: E882 7F EF                  DW     vRenameFile          ;  17 - Rename File                  ;
0427: E884 DD EA                  DW     vGetLoginVector      ;  18 - Return Login Vector          ;
0428: E886 E4 EA                  DW     vGetCurrentDisk      ;  19 - Return Current Disk          ;
0429: E888 EB EA                  DW     vSetDMA              ;  1A - Set DMA address              ;
0430: E88A F4 EA                  DW     vGetAllocAddr        ;  1B - Get ADDR (ALLOC)             ;
0431: E88C 42 EC                  DW     vWriteProtectDisk    ;  1C - Write Protect Disk           ;
0432: E88E FB EA                  DW     vGetReadOnlyMap      ;  1D - Get Read/Only MAP	         ;
0433: E890 45 EC                  DW     vSetFileAttributes   ;  1E - Set File Attributes ??       ;
0434: E892 02 EB                  DW     vGetDiskParamBlock   ;  1F - Get ADDR (Disk Parameters)   ;
0435: E894 0A E9                  DW     vGetSetUserNumber    ;  20 - Set/Get User Code            ;
0436: E896 0D EB                  DW     vReadRandom          ;  21 - Read Random                  ;
0437: E898 13 EB                  DW     vWriteRandom         ;  22 - Write Random                 ;
0438: E89A 19 EB                  DW     vComputeFileSize     ;  23 - Compute File Size            ;
0439: E89C 1F EB                  DW     vSetRandomRecord     ;  24 - Set Random Record            ;
0440: E89E 09 EB                  DW     vResetDrive          ;  25 - Reset Drive                  ;
0441: E8A0 A6 E8                  DW     DUMMY                ;  26 - Access Drive (not supported) ;
0442: E8A2 A6 E8                  DW     DUMMY                ;  27 - Free Drive (not supported)   ;
0443: E8A4 22 EB                  DW     vWriteRandom0Fill    ;  28 - Write random w/Fill          ;
0444: E8A6             functionCount EQU    ($-functionTable)/2  ; Number of  functions               ;
0445: E8A6         ;
0446: E8A6             DUMMY:                          ;
0447: E8A6 76                     HALT                        ;
0448: E8A7         ;++++++++++++++++++++++++++++ Function Vector Table +++++++++++++++++++++++++;
0449: E8A7
0450: E8A7         ;-------------------------- System Reset - 0 (0) ----------------------------;
0451: E8A7         ;  The system reset function makes CP/M do a complete reset, exactly the     ;
0452: E8A7         ; same as the warm boot function invoked when you transfer control to the    ;
0453: E8A7         ; WARMBOOT point. In addition to resetting the BDOS, this function reloads   ;
0454: E8A7         ; the CCP, rebuilds the allocation vectors for the currently logged disks,   ;
0455: E8A7         ; sets the DMA address (used byCP/M to address the disk read/write buffer)   ;
0456: E8A7         ; to 80H, marks all disks as being Read/Write status, and transfers control  ;
0457: E8A7         ; to the  CCP. The CCP then outputs its prompt to the console.               ;
0458: E8A7         ;																			 ;
0459: E8A7         ;			Function Code	 :	C = 00H                                      ;
0460: E8A7         ;			Entry Parameters:	None                                         ;
0461: E8A7         ;			Exit Parameters :	Does Not Return								 ;
0462: E8A7         ;																			 ;
0463: E8A7         ;-------------------------- System Reset - 0 (0) ----------------------------;
0464: E8A7             vSystemReset:
0465: E8A7 C3 03 F6               JP     bcWboot              ; do a Warm Boot
0466: E8AA
0467: E8AA         ;****************************************************************************;
0468: E8AA         ;								IOByte device I/O							 ;
0469: E8AA         ;****************************************************************************;
0470: E8AA
0471: E8AA
0472: E8AA         ;-------------------------- Read Console Byte - 1 (1) -----------------------;
0473: E8AA         ;  This function reads the next byte of data from the console keyboard and   ;
0474: E8AA         ; puts it into register A. If the character input is a graphic character, it ;
0475: E8AA         ; will be echoed back to the console. The only control characters that are   ;
0476: E8AA         ; echoed are  CARRIAGE RETURN, LINE FEED, BACKSPACE, and TAB. In the case    ;
0477: E8AA         ; of a TAB character, the BDOS outputs as many spaces as are required to     ;
0478: E8AA         ; move the cursor to the next multiple of eight columns. All of the other    ;
0479: E8AA         ; control characters, including CONTROL-C, are input but are not echoed.     ;
0480: E8AA         ;  This function also checks for CONTROL-S (XOFF) to see if console output   ;
0481: E8AA         ; should be suspended, and for CONTROL-P (printer echo toggle) to see if     ;
0482: E8AA         ; console output should also be sent to the list device. If CONTROL-S is     ;
0483: E8AA         ; found, further output will be suspended until you type another character.  ;
0484: E8AA         ; CONTROL-P will enable the echoing of console output the first time it is   ;
0485: E8AA         ; pressed and disable it the second time. If there is no incoming data       ;
0486: E8AA         ; character, this function will wait until there is one.                     ;
0487: E8AA         ;                                                                            ;
0488: E8AA         ; This is a blocking function                                                ;
0489: E8AA         ;																			 ;
0490: E8AA         ;																			 ;
0491: E8AA         ;			Function Code	:	C = 01H                                      ;
0492: E8AA         ;			Entry Parameters:	None                                         ;
0493: E8AA         ;			Exit Parameters :	A = Data byte from console					 ;
0494: E8AA         ;																			 ;
0495: E8AA         ;-------------------------- Read Console Byte - 1 (1) -----------------------;
0496: E8AA             vConsoleIn:
0497: E8AA CD 1E E9               CALL   ConIn                ; Don't come back without input
0498: E8AD CD 29 E9               CALL   IsPrintableASCII     ; CR,LF,TAB,BACK_SPACE or GE SPACE
0499: E8B0 D8                     RET    C                    ; return nothing to echo
0500: E8B1
0501: E8B1 F5                     PUSH   AF                   ; Save printable character
0502: E8B2 4F                     LD     C,A
0503: E8B3 CD 55 E9               CALL   TabOut               ; Send to console. if TAB expand
0504: E8B6 F1                     POP    AF                   ; retrieve exit value
0505: E8B7
0506: E8B7 32 C2 EA               LD     (exitParameterByte),A
0507: E8BA C9                     RET
0508: E8BB
0509: E8BB         ;------------------------- Write Console Byte - 2 (2) -----------------------;
0510: E8BB         ;  This function outputs the data byte in register E to the console. As with ;
0511: E8BB         ; function 1, if the data byte is a TAB character, it will be expanded by    ;
0512: E8BB         ; the BDOS to the next column that is a multiple of eight. The BDOS also     ;
0513: E8BB         ; checks to see if there is an incoming character, and if there is,          ;
0514: E8BB         ; checks to see if it is a CONTROL-S ,in which case console output is        ;
0515: E8BB         ; suspended or CONTROL-P, in which case echoing of console output to the     ;
0516: E8BB         ; printer is  toggled on or off                                              ;
0517: E8BB         ;																			 ;
0518: E8BB         ;			Function Code	:	C = 02H                                      ;
0519: E8BB         ;			Entry Parameters:	E = Data byte to be output					 ;
0520: E8BB         ;			Exit Parameters :	None										 ;
0521: E8BB         ;																			 ;
0522: E8BB         ;------------------------- Write Console Byte - 2 (2) -----------------------;
0523: E8BB         ;BDOS put parameter in C before entering this routine
0524: E8BB             vConsoleOut:
0525: E8BB CD 55 E9               CALL   TabOut
0526: E8BE C9                     RET
0527: E8BF
0528: E8BF         ;--------------------------- Read Reader Byte - 3 (3) -----------------------;
0529: E8BF         ;   function reads the next character from the logical "reader" device into  ;
0530: E8BF         ; register A. In practice, the physical device that is accessed depends      ;
0531: E8BF         ; entirely on how your BIOS is configured. In some systems, there is no      ;
0532: E8BF         ; reader at all; this function will return some arbitrary value such as lAH  ;
0533: E8BF         ; (the ASCII CONTROL-Z character, used by CP/M to denote "End of File').     ;
0534: E8BF         ; Control is not returned to the calling program until a character has been  ;
0535: E8BF         ; read.                                                                      ;
0536: E8BF         ;                                                                            ;
0537: E8BF         ; This is a blocking function                                                ;
0538: E8BF         ;																			 ;
0539: E8BF         ;			Function Code	:	C = 03H                                      ;
0540: E8BF         ;			Entry Parameters:	None										 ;
0541: E8BF         ;			Exit Parameters :	A = Character Input							 ;
0542: E8BF         ;																			 ;
0543: E8BF         ;--------------------------- Read Reader Byte - 3 (3) -----------------------;
0544: E8BF             vReaderIn:
0545: E8BF CD 15 F6               CALL   bcReader
0546: E8C2 32 C2 EA               LD     (exitParameterWord),A
0547: E8C5 C9                     RET
0548: E8C6
0549: E8C6         ;--------------------------- Write Punch Byte - 4 (4) -----------------------;
0550: E8C6         ;  This function is a counterpart to the Read "Reader" Byte It outputs the   ;
0551: E8C6         ; specified character from register E to the logical punch device. Again,    ;
0552: E8C6         ; the actual physical device used, if any, is determined by the BIOS.        ;
0553: E8C6         ; There is no set standard for this device; in some systems the punch        ;
0554: E8C6         ; device is a "bit bucket," so called because it absorbs all data that you   ;
0555: E8C6         ; output to it.                                                              ;
0556: E8C6         ;																			 ;
0557: E8C6         ;			Function Code	:	C = 04H                                      ;
0558: E8C6         ;			Entry Parameters:	E = Data byte to be output					 ;
0559: E8C6         ;			Exit Parameters :	None										 ;
0560: E8C6         ;																			 ;
0561: E8C6         ;--------------------------- Write Punch Byte - 4 (4) -----------------------;
0562: E8C6         ;BDOS put parameter in C before entering this routine
0563: E8C6             vPunchOut:
0564: E8C6 CD 12 F6               CALL   bcPunch
0565: E8C9 C9                     RET
0566: E8CA
0567: E8CA         ;---------------------------- Write List Byte - 5 (5) -----------------------;
0568: E8CA         ;  This function outputs the specified byte in register E to the logical     ;
0569: E8CA         ; list device. As with the reader and the punch, the physical device used    ;
0570: E8CA         ; depends entirely on the BIOS.                                              ;
0571: E8CA         ;																			 ;
0572: E8CA         ;			Function Code	:	C = 05H                                      ;
0573: E8CA         ;			Entry Parameters:	E = Data byte to be output					 ;
0574: E8CA         ;			Exit Parameters :	None										 ;
0575: E8CA         ;																			 ;
0576: E8CA         ;---------------------------- Write List Byte - 5 (5) -----------------------;
0577: E8CA         ;BDOS put parameter in C before entering this routine
0578: E8CA             vListOut:                       ; func5 (05 - 05) List Output
0579: E8CA CD 0F F6               CALL   bcList               ; direct call to BIOS
0580: E8CD C9                     RET
0581: E8CE
0582: E8CE         ;--------------------------- Direct Console I/O - 6 (6) ---------------------;
0583: E8CE         ;  This function serves double duty: it both inputs and outputs characters   ;
0584: E8CE         ; from the console. However, it bypasses the normal control characters and   ;
0585: E8CE         ; line editing features (such as CONTROL-P and CONTROL-S) normally           ;
0586: E8CE         ; associated with console I( O. Hence the name "direct" (or "unadorned" as   ;
0587: E8CE         ; Digital Research describes it). If the value in register E is not OFFH,    ;
0588: E8CE         ; then E contains a valid ASCII character that is output to the console.     ;
0589: E8CE         ;  This function works well provided you never have to send a value ofOFFH   ;
0590: E8CE         ; or expect to receive a value ofOOH. If you do need to send or receive pure ;
0591: E8CE         ; binary data, you cannot use this function, since these values are likely   ;
0592: E8CE         ; to be part of the data stream.                                             ;
0593: E8CE         ;                                                                            ;
0594: E8CE         ;			Function Code	:	C = 06H                                      ;
0595: E8CE         ;			Entry Parameters:	E = 0FFH for Input					  		 ;
0596: E8CE         ;								E = Other than 0FFH for Output				 ;
0597: E8CE         ;			Exit Parameters :	A = Input byte or status					 ;
0598: E8CE         ;																			 ;
0599: E8CE         ;--------------------------- Direct Console I/O - 6 (6) ---------------------;
0600: E8CE         ;BDOS put parameter in C before entering this routine
0601: E8CE             vDirectConIO:
0602: E8CE 79                     LD     A,C
0603: E8CF 3C                     INC    A
0604: E8D0 28 04                  JR     Z,vDirectConIO1      ; 0ffh => 00h, means input mode
0605: E8D2         ; send byte to console
0606: E8D2 CD 0C F6               CALL   bcConout             ; Send the byte to the console
0607: E8D5 C9                     RET
0608: E8D6
0609: E8D6         ;read byte/status from console
0610: E8D6             vDirectConIO1:
0611: E8D6 CD 06 F6               CALL   bcConst              ; Check Status
0612: E8D9 B7                     OR     A                    ; 00 means not data ready
0613: E8DA CA 4A E8               JP     Z,ReturnToCaller1    ; If no data return  00 to caller
0614: E8DD CD 09 F6               CALL   bcConin              ; Data is available, get it to A
0615: E8E0 32 C2 EA               LD     (exitParameterByte),A ; Save it
0616: E8E3 C9                     RET
0617: E8E4
0618: E8E4         ;--------------------------- Get IOBYTE Setting - 7 (7) ---------------------;
0619: E8E4         ; This function places the current value of the IOBYTE in register A.        ;
0620: E8E4         ;                                                                            ;
0621: E8E4         ; The IOBYTE structure:                                                      ;
0622: E8E4         ;								+-------+-------+-------+-------+            ;
0623: E8E4         ;						Bit No. | 7 : 6 | 5 : 4 | 3 : 2 | 1 : 0 |            ;
0624: E8E4         ;								+-------+-------+-------+-------+            ;
0625: E8E4         ;				Logical Device     List | Punch | Reader|Console             ;
0626: E8E4         ;                                                                            ;
0627: E8E4         ;                                                                            ;
0628: E8E4         ;			Function Code	:	C = 07H                                      ;
0629: E8E4         ;			Entry Parameters:	None					  		  			 ;
0630: E8E4         ;			Exit Parameters :	A = Current IOBYTE value					 ;
0631: E8E4         ;																			 ;
0632: E8E4         ;--------------------------- Get IOBYTE Setting - 7 (7) ---------------------;
0633: E8E4             vGetIOBYTE:
0634: E8E4 3A 03 00               LD     A,(IOBYTE)           ; Get the IOBYTE
0635: E8E7 32 C2 EA               LD     (exitParameterWord),A ; Return it to caller
0636: E8EA C9                     RET
0637: E8EB         ;--------------------------- Set IOBYTE Setting - 8 (8) ---------------------;
0638: E8EB         ; This function sets the IOBYTE         									 ;
0639: E8EB         ;                                                                            ;
0640: E8EB         ; The IOBYTE structure:                                                      ;
0641: E8EB         ;								+-------+-------+-------+-------+            ;
0642: E8EB         ;						Bit No. | 7 : 6 | 5 : 4 | 3 : 2 | 1 : 0 |            ;
0643: E8EB         ;								+-------+-------+-------+-------+            ;
0644: E8EB         ;				Logical Device     List | Punch | Reader|Console             ;
0645: E8EB         ;                                                                            ;
0646: E8EB         ;                                                                            ;
0647: E8EB         ;			Function Code	:	C = 08H                                      ;
0648: E8EB         ;			Entry Parameters:	E = New IOBYTE value	  		  			 ;
0649: E8EB         ;			Exit Parameters :	None                                         ;
0650: E8EB         ;																			 ;
0651: E8EB         ;--------------------------- Get IOBYTE Setting - 8 (8) ---------------------;
0652: E8EB         ;BDOS put parameter in C before entering this routine
0653: E8EB             vSetIOBYTE:
0654: E8EB 21 03 00               LD     HL,IOBYTE            ; point at The IOBYTE
0655: E8EE 71                     LD     (HL),C               ; Place new vale in it
0656: E8EF C9                     RET
0657: E8F0
0658: E8F0         ;---------------------- Display $ terminated String - 9 (9) -----------------;
0659: E8F0         ;  This function outputs a string of characters to the console device. The   ;
0660: E8F0         ; address of this string is in registers DE. You must make sure that the last;
0661: E8F0         ; character of the string is "$"; the BDOS uses this character as a marker   ;
0662: E8F0         ; for the end of the string.                                                 ;
0663: E8F0         ;  The "$" itself does not get output to the console.                        ;
0664: E8F0         ;                                                                            ;
0665: E8F0         ; While the BDOS is outputting the string, it expands tabs as previously     ;
0666: E8F0         ; described, checks to see if there is an incoming character, and checks for ;
0667: E8F0         ; CONTROL-S (XOFF, which stops the output until another character is entered);
0668: E8F0         ; or CONTROL-P (which turns on or off echoing of console characters to       ;
0669: E8F0         ; the printer).                                                              ;
0670: E8F0         ;                                                                            ;
0671: E8F0         ;			Function Code	:	C = 09H                                      ;
0672: E8F0         ;			Entry Parameters:	DE = Address of the first byte of the string ;
0673: E8F0         ;			Exit Parameters :	None							             ;
0674: E8F0         ;																			 ;
0675: E8F0         ;---------------------- Display $ terminated String - 9 (9) -----------------;
0676: E8F0             vPrintString:
0677: E8F0 2A C0 EA               LD     HL,(paramDE)         ; Get address of the string
0678: E8F3 4D                     LD     C,L
0679: E8F4 44                     LD     B,H                  ; Put it into BC for call
0680: E8F5 CD 38 E9               CALL   Print                ; out to console
0681: E8F8 C9                     RET
0682: E8F9
0683: E8F9         ;-------------------------- Read Console String - A (10) --------------------;
0684: E8F9         ;  This function reads a string of characters from the console device        ;
0685: E8F9         ; and stores them in a buffer (address in DE) that you define. Full line     ;
0686: E8F9         ; editing is possible: the operator can backspace, cancel the line and start ;
0687: E8F9         ; over, and use all the normal control functions. What you will ultimately   ;
0688: E8F9         ; see in the buffer is the final version of the character string entered,    ;
0689: E8F9         ; without any of the errors or control characters used to do the line editing;
0690: E8F9         ;                                                                            ;
0691: E8F9         ;  The buffer that you define has a special format. The first byte in the    ;
0692: E8F9         ; buffer tells the BDOS the maximum number of characters to be accepted.     ;
0693: E8F9         ; The second byte is reserved for the BDOS to tell you how many characters   ;
0694: E8F9         ; were actually placed in the buffer. The following bytes contain            ;
0695: E8F9         ; the characters of the string. Character input will cease either when a     ;
0696: E8F9         ; CARRIAGE RETURN is entered or when the maximum number of characters,       ;
0697: E8F9         ; as specified in the buffer, has been received. The CARRIAGE RETURN is not  ;
0698: E8F9         ; stored in the buffer as a character-it just serves as a terminator. If     ;
0699: E8F9         ; the first character entered is a CARRIAGE RETURN, then the BDOS sets       ;
0700: E8F9         ; the "characters input" byte to O. If you attempt to input more than the    ;
0701: E8F9         ; maximum number of characters, the "characters input" count will be the     ;
0702: E8F9         ; same as the maximum value allowed.                                         ;
0703: E8F9         ;                                                                            ;
0704: E8F9         ;			Function Code	:	C = 0AH                                      ;
0705: E8F9         ;			Entry Parameters:	DE = Address string buffer					 ;
0706: E8F9         ;			Exit Parameters :	String Buffer with console bytes in it       ;
0707: E8F9         ;																			 ;
0708: E8F9         ;-------------------------- Read Console String - A (10) --------------------;
0709: E8F9             vReadString:
0710: E8F9 CD DD E9               CALL   ReadString
0711: E8FC C9                     RET
0712: E8FD
0713: E8FD         ;------------------------- Read Console Status - B (11) ---------------------;
0714: E8FD         ; This function tells you whether a console input character is waiting to be ;
0715: E8FD         ;processed. Unlike the Console Input functions, which will wait until there  ;
0716: E8FD         ;is input,this function simply checks and returns immediately.               ;
0717: E8FD         ;                                                                            ;
0718: E8FD         ;			Function Code	:	C = 0BH                                      ;
0719: E8FD         ;			Entry Parameters:	None										 ;
0720: E8FD         ;			Exit Parameters :	A = 00H if no incoming Data					 ;
0721: E8FD         ;								A = FFH	if incoming Data					 ;
0722: E8FD         ;																			 ;
0723: E8FD         ;------------------------- Read Console Status - B (11) ---------------------;
0724: E8FD             vGetConsoleStatus:
0725: E8FD CD 89 E9               CALL   ConBreak
0726: E900 32 C2 EA               LD     (exitParameterByte),A
0727: E903 C9                     RET
0728: E904
0729: E904         ;--------------------------- Get CP/M Version - C (12) ----------------------;
0730: E904         ;  This function tells you which version of CP/M you are currently running.  ;
0731: E904         ; A two-byte value is returned:                                              ;
0732: E904         ;	H = OOH for CP/M, H = OlH for MP/M                                       ;
0733: E904         ;	L = OOH for all releases before CP/M 2.0                                 ;
0734: E904         ;	L = 20H for CP/M 2.0,21 H for 2.1, 22H for 2.2,                          ;
0735: E904         ;		and so on for any subsequent releases.                               ;
0736: E904         ;                                                                            ;
0737: E904         ; This information is of interest only if your program has some version      ;
0738: E904         ; specific logic built into it. For example, CP/M version 1.4 does not       ;
0739: E904         ; support the same Random File Input/ Output operations that CP/M 2.2 does.  ;
0740: E904         ; Therefore, if your program uses Random I/O, put this check at the          ;
0741: E904         ; beginning to ensure that it is indeed running under the appropriate        ;
0742: E904         ; version of CP/M.                                                           ;
0743: E904         ;                                                                            ;
0744: E904         ;			Function Code	:	C = 0CH                                      ;
0745: E904         ;			Entry Parameters:	None										 ;
0746: E904         ;			Exit Parameters :	HL =Version Number Code						 ;
0747: E904         ;								A = FFH	if incoming Data					 ;
0748: E904         ;																			 ;
0749: E904         ;--------------------------- Get CP/M Version - C (12) ----------------------;
0750: E904             vGetVersion:                      ; func12 (12 - 0C)	 Get Version
0751: E904 3E 20                  LD     A,VERSION
0752: E906 32 C2 EA               LD     (exitParameterByte),A ;exitParameterByte = VERSION
0753: E909 C9                     RET
0754: E90A
0755: E90A         ;--------------------------- Get/Set User Number - 20 (32) ------------------;
0756: E90A         ;  This subroutine either sets or gets the current user number. The current  ;
0757: E90A         ; user number determines which file directory entries are matched during all ;
0758: E90A         ; disk file operations. When you call this function, the contents of the     ;
0759: E90A         ; E register specify what action is to be taken. IfE=OFFH, then the function ;
0760: E90A         ; will return the current user number in the A register. If you set E to a   ;
0761: E90A         ; number in the range 0 to 15 (that is, a valid user number), the function   ;
0762: E90A         ; will set the current user number to this value.                            ;
0763: E90A         ;                                                                            ;
0764: E90A         ;			Function Code	:	C = 0CH                                      ;
0765: E90A         ;			Entry Parameters:	E = 0FFH to get User Number  				 ;
0766: E90A         ;								  = 0 to 15 to set User Number				 ;
0767: E90A         ;			Exit Parameters :	A = Current user Number if E was set to 0FFH ;
0768: E90A         ;								A = FFH	if incoming Data					 ;
0769: E90A         ;																			 ;
0770: E90A         ;                                                                            ;
0771: E90A         ;--------------------------- Get/Set User Number - 20 (32) ------------------;
0772: E90A             vGetSetUserNumber:
0773: E90A 3A BF EA               LD     A,(paramE)
0774: E90D FE FF                  CP     0FFH
0775: E90F 20 07                  JR     NZ,SetUserNumber     ; interrogate user code instead
0776: E911 3A 16 F5               LD     A,(currentUserNumber)
0777: E914 32 C2 EA               LD     (exitParameterByte),A ; exitParameterByte=currentUserNumber
0778: E917 C9                     RET
0779: E918
0780: E918             SetUserNumber:
0781: E918 E6 0F                  AND    LO_NIBBLE_MASK
0782: E91A 32 16 F5               LD     (currentUserNumber),A
0783: E91D C9                     RET
0784: E91E
0785: E91E         ;****************************************************************************;
0786: E91E         ;								Character Support Routines					 ;
0787: E91E         ;****************************************************************************;
0788: E91E
0789: E91E
0790: E91E         ;-------------------- Return a Character from the console -------------------;
0791: E91E         ;return byte from buffer or read from the console                            ;
0792: E91E             ConIn:                          ;
0793: E91E 21 BB EA               LD     HL,keyboardByte      ; is there a Byte waiting?           ;
0794: E921 7E                     LD     A,(HL)               ;
0795: E922 36 00                  LD     (HL),0               ;
0796: E924 B7                     OR     A                    ;
0797: E925 C0                     RET    NZ                   ;
0798: E926         ;
0799: E926 C3 09 F6               JP     bcConin              ; Go get byte from Console           ;
0800: E929         ;-------------------- Return a Character from the console -------------------;
0801: E929
0802: E929         ;----------- Is the Character ASCII printable, CR,LF,TAB,BACKSPACE ----------;
0803: E929         ; Resets Carry Flag if ASCII Printable, CR,LF,TAB,BackSpace or GE SPACE      ;
0804: E929             IsPrintableASCII:                      ;
0805: E929 FE 0D                  CP     CR                   ;
0806: E92B C8                     RET    Z                    ; carriage return?                                                  ;
0807: E92C FE 0A                  CP     LF                   ;
0808: E92E C8                     RET    Z                    ; line feed?                                                        ;
0809: E92F FE 09                  CP     TAB                  ;
0810: E931 C8                     RET    Z                    ; TAB?                                                              ;
0811: E932 FE 08                  CP     CTRL_H               ;
0812: E934 C8                     RET    Z                    ; backspace?                                                        ;
0813: E935 FE 20                  CP     SPACE                ; Reset Carry if ASCII printable         ;
0814: E937 C9                     RET                         ;
0815: E938         ;----------- Is the Character ASCII printable, CR,LF,TAB,BACKSPACE ----------;
0816: E938
0817: E938         ;------------------ Print character from (BC) until  $ found ----------------;
0818: E938             Print:                          ;
0819: E938 0A                     LD     A,(BC)               ; Get the next character             ;
0820: E939 FE 24                  CP     DOLLAR               ; Is it the end ?                    ;
0821: E93B C8                     RET    Z                    ;  exit if yes                       ;
0822: E93C 03                     INC    BC                   ; Update the pointer                 ;
0823: E93D C5                     PUSH   BC                   ; Save it                            ;
0824: E93E 4F                     LD     C,A                  ; Does Byte require                  ;
0825: E93F CD 55 E9               CALL   TabOut               ;  special attention - check         ;
0826: E942 C1                     POP    BC                   ; Retrieve the pointer				 ;
0827: E943 18 F3                  JR     Print                ; Loop back                          ;
0828: E945         ;------------------ Print character from (BC) until  $ found ----------------;
0829: E945
0830: E945         ;-- Send printable character to console. Precede with Caret if needed -------;
0831: E945         ; character is in Reg C                                                      ;
0832: E945             CaretOut:                       ;
0833: E945 79                     LD     A,C                  ;
0834: E946 CD 29 E9               CALL   IsPrintableASCII     ;
0835: E949 30 0A                  JR     NC,TabOut            ; Skip if Caret not needed           ;
0836: E94B         ; send preceding up arrow                                                    ;
0837: E94B F5                     PUSH   AF                   ; Save the character                 ;
0838: E94C 0E 5E                  LD     C,CARET              ;
0839: E94E CD 68 E9               CALL   ConsoleOut           ; Send Caret to Console              ;
0840: E951 F1                     POP    AF                   ; Get the character                  ;
0841: E952 F6 40                  OR     40H                  ; Make the graphic a letter          ;
0842: E954 4F                     LD     C,A                  ; Set up to print                    ;
0843: E955         ; fall thru to TabbOut                                                       ;
0844: E955         ;-- Send printable character to console. Precede with Caret if needed -------;
0845: E955
0846: E955         ;------------- Send printable character to console. Expand if TAB -----------;
0847: E955         ; character is in Reg C                                                      ;
0848: E955             TabOut:                         ;
0849: E955 79                     LD     A,C                  ;
0850: E956 FE 09                  CP     TAB                  ; Is it a TAB                        ;
0851: E958 C2 68 E9               JP     NZ,ConsoleOut        ; Go directly to ConsoleOut if not   ;
0852: E95B         ;
0853: E95B         ; TAB encountered                                                           ;
0854: E95B             TabOut0:                        ;
0855: E95B 0E 20                  LD     C,SPACE              ; Expand TABs with SPACEs            ;
0856: E95D CD 68 E9               CALL   ConsoleOut           ; Send to Console                    ;
0857: E960 3A BE EA               LD     A,(columnPosition)   ; Get Column position                ;
0858: E963 E6 07                  AND    111b                 ; (ColumnPosition mod 8) = 0 ?       ;
0859: E965 20 F4                  JR     NZ,TabOut0           ; Do again if not                    ;
0860: E967 C9                     RET                         ;
0861: E968         ;------------- Send printable character to console. Expand if TAB -----------;
0862: E968
0863: E968         ;-------------------------- Send character to console -----------------------;
0864: E968         ; C  = Character to be output                                                ;
0865: E968             ConsoleOut:                      ;
0866: E968         ; Look for CNTL_S from keyboard and save it in keyboardByte                  ;
0867: E968 C5                     PUSH   BC                   ; Save character and Count           ;
0868: E969 CD 89 E9               CALL   ConBreak             ; Check for screen stop key stroke   ;
0869: E96C C1                     POP    BC                   ;
0870: E96D C5                     PUSH   BC                   ; Get/save character                 ;
0871: E96E         ; Send character to Console	                                                 ;
0872: E96E CD 0C F6               CALL   bcConout             ; Send character to the console      ;
0873: E971 C1                     POP    BC                   ;
0874: E972 C5                     PUSH   BC                   ; Get/save character                 ;
0875: E973         ; is the data to be output to print device?                                  ;
0876: E973 3A BC EA               LD     A,(printEchoFlag)    ;
0877: E976 B7                     OR     A                    ;
0878: E977 C4 0F F6               CALL   NZ,bcList            ; Send it to printer, if so          ;
0879: E97A C1                     POP    BC                   ; Get the character                  ;
0880: E97B         ;
0881: E97B 79                     LD     A,C                  ; Put character to ACC               ;
0882: E97C 21 BE EA               LD     HL,columnPosition    ; A = char, HL = .columnPosition     ;
0883: E97F 34                     INC    M                    ; increment the ColumnPosition       ;
0884: E980         ;
0885: E980 FE 20                  CP     SPACE                ;
0886: E982 D0                     RET    NC                   ; Exit if ASCII printable            ;
0887: E983         ;
0888: E983 FE 0A                  CP     LF                   ;
0889: E985 C0                     RET    NZ                   ; Exit if not a Line Feed            ;
0890: E986         ;
0891: E986 36 00                  LD     (HL),0               ;  else force columnPosition = 0     ;
0892: E988 C9                     RET                         ;
0893: E989         ;-------------------------- Send character to console -----------------------;
0894: E989
0895: E989         ;--------------------  Check for Status and Control S or C ------------------;
0896: E989         ;  Returns:																	 ;
0897: E989         ;			ACC = 0FFH if Saved keyboard byte or CNTL_S entered from console ;
0898: E989         ;			ACC = 00   No data Pending										 ;
0899: E989         ;			DOES NOT RETURN if CTRL_C is entered from the keyboard           ;
0900: E989         ;                                                                            ;
0901: E989             ConBreak:                       ;
0902: E989 3A BB EA               LD     A,(keyboardByte)     ;
0903: E98C B7                     OR     A                    ; If there is a char waiting         ;
0904: E98D 20 2B                  JR     NZ,ConBreak1         ;  return with FF in ACC             ;
0905: E98F         ;
0906: E98F CD 06 F6               CALL   bcConst              ; Get status                         ;
0907: E992 FE 00                  CP     00H                  ; If 00 => No data pending	         ;
0908: E994 C8                     RET    Z                    ; Return 00 No data pending          ;
0909: E995         ;
0910: E995 CD 09 F6               CALL   bcConin              ; Read the byte                      ;
0911: E998         ;
0912: E998 FE 10                  CP     CTRL_P               ;
0913: E99A 20 0D                  JR     NZ,CheckCTL_S        ;
0914: E99C         ;<><><><><><><><><><><><><> Toggle Print Echo Flag<><><><><><><>             ;
0915: E99C 21 BC EA               LD     HL,printEchoFlag     ;
0916: E99F 3E FF                  LD     A,TRUE               ;
0917: E9A1 BE                     CP     (HL)                 ;
0918: E9A2 20 02                  JR     NZ,ToggleFlag1       ;
0919: E9A4 3E 00                  LD     A,FALSE              ;
0920: E9A6             ToggleFlag1:                      ;
0921: E9A6 77                     LD     (HL),A               ;
0922: E9A7 18 0C                  JR     NothingWaiting       ;
0923: E9A9         ;<><><><><><><><><><><><><> Toggle Print Echo Flag<><><><><><><>             ;
0924: E9A9             CheckCTL_S:                      ;
0925: E9A9 FE 13                  CP     CTRL_S               ; If it is not Stop Screen, save     ;
0926: E9AB 20 0A                  JR     NZ,ConBreak0         ;   and and return 0FFH              ;
0927: E9AD         ;
0928: E9AD CD 09 F6               CALL   bcConin              ; Else Read next byte                ;
0929: E9B0 FE 03                  CP     CTRL_C               ;
0930: E9B2 CA 00 00               JP     Z,WarmBoot           ; do WarmBoot if  CTRL_C             ;
0931: E9B5             NothingWaiting:                      ;
0932: E9B5 AF                     XOR    A                    ;
0933: E9B6 C9                     RET                         ; Set ACC = 0 and return             ;
0934: E9B7             ConBreak0:                      ;
0935: E9B7 32 BB EA               LD     (keyboardByte),A     ; save the byte                      ;
0936: E9BA             ConBreak1:                      ;
0937: E9BA 3E FF                  LD     A,TRUE               ; return with true set in ACC        ;
0938: E9BC C9                     RET                         ;
0939: E9BD         ;--------------------  Check for Status and Control S or C ------------------;
0940: E9BD
0941: E9BD         ;------------------------  Console Output Utilities -------------------------;
0942: E9BD             showHashCRLF:                      ;
0943: E9BD 0E 23                  LD     C,HASH_TAG           ;
0944: E9BF CD 68 E9               CALL   ConsoleOut           ; Send # to console                  ;
0945: E9C2 CD D3 E9               CALL   showCRLF             ;
0946: E9C5             showHashCRLF1:                      ;
0947: E9C5 3E BE                  LD     A,columnPosition     ;
0948: E9C7 21 BD EA               LD     HL,startingColumn    ;
0949: E9CA BF                     CP     A,M                  ;
0950: E9CB D0                     RET    NC                   ;
0951: E9CC 0E 20                  LD     C,SPACE              ;
0952: E9CE CD 68 E9               CALL   ConsoleOut           ;
0953: E9D1 18 F2                  JR     showHashCRLF1        ;
0954: E9D3         ;------------------------  Console Output Utilities -------------------------;
0955: E9D3
0956: E9D3         ;------------------------  Send Carriage Return and Line Feed ---------------;
0957: E9D3             showCRLF:                       ;
0958: E9D3 0E 0D                  LD     C,CR                 ;
0959: E9D5 CD 68 E9               CALL   ConsoleOut           ;
0960: E9D8 0E 0A                  LD     C,LF                 ;
0961: E9DA C3 68 E9               JP     ConsoleOut           ; exit via ConsoleOuts RET           ;
0962: E9DD         ;------------------------  Send Carriage Return and Line Feed ---------------;
0963: E9DD
0964: E9DD         ;------------------------- Read a $ terminated String -----------------------;
0965: E9DD         ;read to paramDE address (max length, current length, buffer)               ;
0966: E9DD             ReadString:                      ;
0967: E9DD 3A BE EA               LD     A,(columnPosition)   ;
0968: E9E0 32 BD EA               LD     (startingColumn),A   ; Save start for CTRL_X and CTRL_R   ;
0969: E9E3 2A C0 EA               LD     HL,(paramDE)         ; Get the start of the String        ;
0970: E9E6 4E                     LD     C,(HL)               ; Get Max Count  					 ;
0971: E9E7 23                     INC    HL                   ; Point at actual bytes read         ;
0972: E9E8 06 00                  LD     B,0                  ; Initialize Current Count           ;
0973: E9EA         ;
0974: E9EA         ; B = Current Count                                                      ;
0975: E9EA         ; C = Maximum characters                                                 ;
0976: E9EA         ; HL= Insertion Pointer                                                  ;
0977: E9EA         ;
0978: E9EA         ; read next character, BC, HL active                                        ;
0979: E9EA             ReadNext:                       ;
0980: E9EA C5                     PUSH   BC                   ; Save Current Index and Max Count   ;
0981: E9EB E5                     PUSH   HL                   ; Save pointer                       ;
0982: E9EC             ReadNext0:                      ;
0983: E9EC CD 1E E9               CALL   ConIn                ; Get the next Character             ;
0984: E9EF E6 7F                  AND    ASCII_MASK           ; Mask parity bit                    ;
0985: E9F1 E1                     POP    HL                   ; Restore Pointer					 ;
0986: E9F2 C1                     POP    BC                   ; Restore Current Index and Max Count;
0987: E9F3         ;Is It Carriage Return                                                       ;
0988: E9F3 FE 0D                  CP     CR                   ;
0989: E9F5 CA 3B EA               JP     Z,EndRead            ; End the read if yes                ;
0990: E9F8 FE 0A                  CP     LF                   ;
0991: E9FA         ;Is It Linefeed                                                              ;
0992: E9FA CA 3B EA               JP     Z,EndRead            ; End the read if yes                ;
0993: E9FD         ;Is It BackSpace                                                             ;
0994: E9FD FE 08                  CP     CTRL_H               ;
0995: E9FF CA 45 EA               JP     Z,BSspaceBS          ;
0996: EA02             IsItRubout:                      ;
0997: EA02 FE 7F                  CP     RUBOUT               ; Non destructive delete             ;
0998: EA04 CA 4F EA               JP     Z,ItIsRubout         ;
0999: EA07             IsPhysicalEOL:                      ;
1000: EA07 FE 05                  CP     CTRL_E               ;
1001: EA09 CA 5A EA               JP     Z,ItIsPhysicalEOL    ;
1002: EA0C             IsItPrintToggle:                      ;
1003: EA0C FE 10                  CP     CTRL_P               ;
1004: EA0E CA 62 EA               JP     Z,ItIsPrintToggle    ;
1005: EA11             IsItDeleteTheLineX:                      ;
1006: EA11 FE 18                  CP     CTRL_X               ;
1007: EA13 CA 8B EA               JP     Z,DeleteTheLine      ; If CTRL_X go delete the line       ;
1008: EA16             IsItDeleteTheLineU:                      ;
1009: EA16 FE 15                  CP     CTRL_U               ;
1010: EA18 CA A9 EA               JP     Z,IgnoreTheLine      ; If CTRL_U ignore the line          ;
1011: EA1B         ;Retype the line                                                             ;
1012: EA1B FE 12                  CP     CTRL_R               ;
1013: EA1D CA 72 EA               JP     Z,RepeatLine         ;
1014: EA20
1015: EA20         ;....................... Echo input back to the Console  ....................;
1016: EA20         ; Full Duplex								                                 ;
1017: EA20         ; A = Character to display	                                                 ;
1018: EA20         ; B = current char count                                                     ;
1019: EA20         ; C = maximum buffer length                                                  ;
1020: EA20         ; HL= buffer pointer                                                         ;
1021: EA20         ;ReadEcho                                                                    ;
1022: EA20 04                     INC    B                    ; Increment byte count		         ;
1023: EA21 23                     INC    HL                   ; Advance the Pointer                ;
1024: EA22 77                     LD     (HL),A               ; Put char in buffer                 ;
1025: EA23         ;
1026: EA23             ReadEchoRubOut:                      ;
1027: EA23 C5                     PUSH   BC                   ; Save index and length              ;
1028: EA24 E5                     PUSH   HL                   ; Save the Pointer                   ;
1029: EA25 4F                     LD     C,A                  ; Get char                           ;
1030: EA26 CD 45 E9               CALL   CaretOut             ; Output to Console (^ if needed)    ;
1031: EA29 E1                     POP    HL                   ; Restore the Pointer                ;
1032: EA2A C1                     POP    BC                   ; Restore index and length           ;
1033: EA2B 7E                     LD     A,(HL)               ; Recall char                        ;
1034: EA2C         ; check for Warm Boot                                                        ;
1035: EA2C FE 03                  CP     CTRL_C               ;
1036: EA2E 78                     LD     A,B                  ; Get Line position                  ;
1037: EA2F C2 37 EA               JP     NZ,AreWeAtEndOfBuffer ; Skip if not CTRL_C                 ;
1038: EA32 FE 01                  CP     1                    ; Beginning of the Line?             ;
1039: EA34 CA 00 00               JP     Z,WarmBoot           ;   if yes do the Boot               ;
1040: EA37         ; Check to see if we are at the end of the buffer                            ;
1041: EA37             AreWeAtEndOfBuffer:                      ;
1042: EA37 B9                     CP     C                    ; Over Max ?					     ;
1043: EA38 DA EA E9               JP     C,ReadNext           ;  no, Go for more				     ;
1044: EA3B         ;
1045: EA3B         ; At the end of read                                  					     ;
1046: EA3B             EndRead:                        ;
1047: EA3B         ; 	POP		HL                                                               ;
1048: EA3B 2A C0 EA               LD     HL,(paramDE)         ;
1049: EA3E 23                     INC    HL                   ;
1050: EA3F         ;
1051: EA3F 70                     LD     (HL),B               ; Actual length at Pos 0 of Buffer   ;
1052: EA40 0E 0D                  LD     C,CR                 ;
1053: EA42 C3 68 E9               JP     ConsoleOut           ; Send CR to the Console			 ;
1054: EA45         ;....................... Echo input back to the Console  ....................;
1055: EA45         ;.......................... Backspace SPACE BackSpace .......................;
1056: EA45             BSspaceBS:                      ;
1057: EA45 05                     DEC    B                    ;
1058: EA46 2B                     DEC    HL                   ;
1059: EA47 C5                     PUSH   BC                   ;
1060: EA48 E5                     PUSH   HL                   ;
1061: EA49 CD 9C EA               CALL   BackUp               ;
1062: EA4C C3 EC E9               JP     ReadNext0            ;
1063: EA4F         ;.......................... Backspace SPACE BackSpace .......................;
1064: EA4F         ;.......................... It is RubOut ....................................;
1065: EA4F             ItIsRubout:                      ;
1066: EA4F         ; RUBOUT if possible                                                         ;
1067: EA4F 78                     LD     A,B                  ; Are we at the start of the line    ;
1068: EA50 B7                     OR     A                    ;
1069: EA51 CA EA E9               JP     Z,ReadNext           ; then ignore and go for next char   ;
1070: EA54         ;adjust pointers back one                                                    ;
1071: EA54 7E                     LD     A,(HL)               ; ACC = current character            ;
1072: EA55 05                     DEC    B                    ; Adjust the index			    	 ;
1073: EA56 2B                     DEC    HL                   ; Adjust the pointer                 ;
1074: EA57 C3 23 EA               JP     ReadEchoRubOut       ; Echo back - Full Duplex            ;
1075: EA5A         ;.......................... It is RubOut ....................................;
1076: EA5A         ;.......................... It is PhysicalEOL ...............................;
1077: EA5A             ItIsPhysicalEOL:                      ;
1078: EA5A C5                     PUSH   BC                   ; Save Current Index and Max Count   ;
1079: EA5B E5                     PUSH   HL                   ; Save pointer                       ;
1080: EA5C CD D3 E9               CALL   showCRLF             ; Make new line                      ;
1081: EA5F C3 EC E9               JP     ReadNext0            ;   and go for next char   			 ;
1082: EA62         ;.......................... It is PhysicalEOL ...............................;
1083: EA62         ;.......................... It is PrintToggle ...............................;
1084: EA62             ItIsPrintToggle:
1085: EA62 E5                     PUSH   HL                   ; Save pointer                       ;
1086: EA63         ; Toggle the printEcho Flag                                                  ;
1087: EA63 21 BC EA               LD     HL,printEchoFlag     ; Point at the flag                  ;
1088: EA66 3E FF                  LD     A,TRUE               ; Load ACC with TRUE                 ;
1089: EA68 BE                     CP     (HL)                 ; Is the flag true?                  ;
1090: EA69 20 02                  JR     NZ,IsItPrintToggle1  ; Skip if not                        ;
1091: EA6B 3E 00                  LD     A,FALSE              ;   else. load ACC with FALSE        ;
1092: EA6D             IsItPrintToggle1:                      ;
1093: EA6D 77                     LD     (HL),A               ; Set the Flags new Value	         ;
1094: EA6E E1                     POP    HL                   ; Restore pointer                    ;
1095: EA6F C3 EA E9               JP     ReadNext             ;   and for another char             ;
1096: EA72         ;.......................... It is PrintToggle ...............................;
1097: EA72         ;.......................... RepeatLine ......................................;
1098: EA72             RepeatLine:                      ;
1099: EA72 C5                     PUSH   BC                   ; Save Current Index and Max Count   ;
1100: EA73 E5                     PUSH   HL                   ;  for exit                          ;
1101: EA74 CD BD E9               CALL   showHashCRLF         ; Display Hash, new Line			 ;
1102: EA77         ;
1103: EA77 2A C0 EA               LD     HL,(paramDE)         ; Get start of Buffer                ;
1104: EA7A 23                     INC    HL                   ; Skip past character count          ;
1105: EA7B         ;
1106: EA7B             LL1:                            ;
1107: EA7B 23                     INC    HL                   ; Point at next char to display      ;
1108: EA7C C5                     PUSH   BC                   ; Save counter, in B                 ;
1109: EA7D E5                     PUSH   HL                   ; Save buffer pointer                ;
1110: EA7E 4E                     LD     C,M                  ; Get the next character             ;
1111: EA7F CD 45 E9               CALL   CaretOut             ; Display it                         ;
1112: EA82 E1                     POP    HL                   ; Restore                            ;
1113: EA83 C1                     POP    BC                   ;  the counter and pointer           ;
1114: EA84 10 F5                  DJNZ   LL1                  ; loop if still more to show         ;
1115: EA86 E1                     POP    HL                   ; Restore values                     ;
1116: EA87 C1                     POP    BC                   ;  from routine entry                ;
1117: EA88 C3 EA E9               JP     ReadNext             ; Done here !                        ;
1118: EA8B         ;.......................... RepeatLine ......................................;
1119: EA8B         ;.......................... Delete The Line .................................;
1120: EA8B             DeleteTheLine:                      ;
1121: EA8B E1                     POP    HL                   ; Adjust Stack                       ;
1122: EA8C         ;                                             ;
1123: EA8C             DeleteTheLine1:                      ;
1124: EA8C 3A BD EA               LD     A,(startingColumn)   ;
1125: EA8F 21 BE EA               LD     HL,columnPosition    ;
1126: EA92 BE                     CP     M                    ; Start of line ?                    ;
1127: EA93 D2 DD E9               JP     NC,ReadString        ;  If yes get out and go for more    ;
1128: EA96 35                     DEC    M                    ; Adjust the ColumnPosition          ;
1129: EA97 CD 9C EA               CALL   BackUp               ; Clear 1 column                     ;
1130: EA9A 18 F0                  JR     DeleteTheLine1       ; Loop for more                      ;
1131: EA9C         ;.......................... Delete The Line .................................;
1132: EA9C         ;------------------------ Back-up one screen position -----------------------;
1133: EA9C             BackUp:                         ;
1134: EA9C CD A4 EA               CALL   BackUp1              ; Send Backspace                     ;
1135: EA9F 0E 20                  LD     C,SPACE              ; Overwrite with SPACE               ;
1136: EAA1 CD 0C F6               CALL   bcConout             ; Overwrite with SPACE				 ;
1137: EAA4         ;does not affect column count                                                ;
1138: EAA4             BackUp1:                        ;
1139: EAA4 0E 08                  LD     C,CTRL_H             ;
1140: EAA6 C3 0C F6               JP     bcConout             ; Send Backspace                     ;
1141: EAA9         ;------------------------ Back-up one screen position -----------------------;
1142: EAA9         ;.......................... Ignore The Line .................................;
1143: EAA9             IgnoreTheLine:                      ;
1144: EAA9 CD BD E9               CALL   showHashCRLF         ; Display Hash, new Line			 ;
1145: EAAC 0E 20                  LD     C,SPACE              ; We want to add a few spaces        ;
1146: EAAE CD 0C F6               CALL   bcConout             ;  to the console                    ;
1147: EAB1 0E 20                  LD     C,SPACE              ;
1148: EAB3 CD 0C F6               CALL   bcConout             ;
1149: EAB6 C3 DD E9               JP     ReadString           ; Start all over                     ;
1150: EAB9         ;.......................... Ignore The Line .................................;
1151: EAB9
1152: EAB9         ;------------------------- Read a $ terminated String -----------------------;
1153: EAB9
1154: EAB9         ;****************************************************************************
1155: EAB9         ;                           DATA AREA                                       *
1156: EAB9         ;****************************************************************************
1157: EAB9
1158: EAB9         ;------------------------------Non Disk Data Area ---------------------------;
1159: EAB9             usersStack: DS     2                    ; entry stack pointer                ;
1160: EABB         ;
1161: EABB 00          keyboardByte: DB     00                   ; Saved keyboard character           ;
1162: EABC         ;
1163: EABC 00          printEchoFlag: DB     00                   ; Controlled by ^P                   ;
1164: EABD         ;
1165: EABD         ; FunctionValue:DB	00H					; Reg C on BDOS Entry                ;
1166: EABD 00          startingColumn: DB     0                    ; Starting col pos after read        ;
1167: EABE 00          columnPosition: DB     0                    ; Current Column position            ;
1168: EABF         ;
1169: EABF             paramE:    DS     BYTE                 ; Byte Argument for BDOS Call        ;
1170: EAC0             paramDE:   DS     WORD                 ; Word Argument for BDOS Call	     ;
1171: EAC2             exitParameterByte:                      ; Byte returned Value                ;
1172: EAC2             exitParameterWord: DS     WORD                 ; Word                           ;
1173: EAC4         ;
1174: EAC4         ;
1175: EAC4         ;------------------------------------ Data Area -----------------------------;
1176: EAC4
1177: EAC4
1178: EAC4
1179: EAC4         ;****************************************************************************;
1180: EAC4         ;								Disk I/O									 ;
1181: EAC4         ;****************************************************************************;
1182: EAC4
1183: EAC4         ;---------------------------- Reset Disk System - D (13) --------------------;
1184: EAC4         ;  This function requests CP/M to completely reset the disk file system.     ;
1185: EAC4         ; CP/M then resets its internal tables, selects logical disk A as the        ;
1186: EAC4         ; default disk, resets the DMAaddress back to 0080H (the address of the      ;
1187: EAC4         ; buffer used by the BDOS to read and write to the disk), and marks all      ;
1188: EAC4         ; logical disks as having Read/Write status. The BDOS will then have to log  ;
1189: EAC4         ; in each logical disk as each disk is accessed. This involves reading the   ;
1190: EAC4         ; entire file directory for the disk and rebuilding the allocation vectors   ;
1191: EAC4         ; which keep track of which allocation blocks are free and which             ;
1192: EAC4         ; are used for file storage.                                                 ;
1193: EAC4         ;                                                                            ;
1194: EAC4         ;			Function Code	:	C = 0DH                                      ;
1195: EAC4         ;			Entry Parameters:	None										 ;
1196: EAC4         ;			Exit Parameters :	None										 ;
1197: EAC4         ;																			 ;
1198: EAC4         ;---------------------------- Reset Disk System - D (13) --------------------;
1199: EAC4             vResetSystem:
1200: EAC4 21 00 00               LD     HL,0
1201: EAC7 22 19 F5               LD     (readOnlyVector),HL  ; Clear the vectors for
1202: EACA 22 1B F5               LD     (loggedDisks),HL     ;   R/O and Logged Disks
1203: EACD AF                     XOR    A                    ; Clear the current disk
1204: EACE 32 17 F5               LD     (currentDisk),A
1205: EAD1         ; note that currentUserNumber remains unchanged
1206: EAD1 21 80 00               LD     HL,DMABuffer
1207: EAD4 22 1D F5               LD     (initDAMAddress),HL  ; initDAMAddress = DMABuffer
1208: EAD7 CD CD ED               CALL   SetDataDMA           ; to data dma address
1209: EADA C3 5A EC               JP     Select
1210: EADD         ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1211: EADD         ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1212: EADD         ;---------------------------- Get Active Disks - 18 (24) --------------------;
1213: EADD         ; This function returns a bit map, called the login vector, in register pair ;
1214: EADD         ; HL, indicating which logical disk drives have been selected since the last ;
1215: EADD         ; warm boot or Reset Disk function (code 13, ODH). The least significant bit ;
1216: EADD         ; of L corresponds to disk A, while the highest order bit in H maps disk P.  ;
1217: EADD         ; The bit corresponding to the specific logical disk is set to 1 if the      ;
1218: EADD         ; disk has been selected or to 0 if the disk is not currently on-line.       ;
1219: EADD         ;  Logical disks can be selected programmatically through any file operation ;
1220: EADD         ; that sets the drive field to a nonzero value, through the Select Disk      ;
1221: EADD         ; function (code 14, OEH), or by the operator entering an "X:" command       ;
1222: EADD         ; where "X" is equal to A, B, ... , P.                                       ;
1223: EADD         ;                                                                            ;
1224: EADD         ;			Function Code	:	C = 018H                                     ;
1225: EADD         ;			Entry Parameters:	None										 ;
1226: EADD         ;			Exit Parameters :	HL = Active disk map (login vector)			 ;
1227: EADD         ;																			 ;
1228: EADD         ;---------------------------- Get Active Disks - 18 (24) --------------------;
1229: EADD             vGetLoginVector:
1230: EADD 2A 1B F5               LD     HL,(loggedDisks)
1231: EAE0 22 C2 EA               LD     (exitParameterWord),HL
1232: EAE3 C9                     RET
1233: EAE4         ;---------------------------- Get Current Disk- 19 (25) ---------------------;
1234: EAE4         ;   This function returns the current default disk set by the last Select    ;
1235: EAE4         ; Disk function call (code 14, OEH) or by the operator entering the          ;
1236: EAE4         ; "X:"command (where "X" is A, B, ..., P) to the CCP.                        ;
1237: EAE4         ;                                                                            ;
1238: EAE4         ;  This function returns the current default disk in coded form.             ;
1239: EAE4         ; Register A= 0 if drive A is the current drive, I if drive B, and so on.    ;
1240: EAE4         ; If you need to convert this to the corresponding ASCII character, simply   ;
1241: EAE4         ; add 41H to register A. Use this function when you convert a file name and  ;
1242: EAE4         ; type in an FCB to an ASCII string in order to display it. If the first     ;
1243: EAE4         ; byte of the FCB is OOH, the current default drive is to be used.           ;
1244: EAE4         ; You must therefore use this function to determine the logical disk letter  ;
1245: EAE4         ; for the default drive.                                                     ;
1246: EAE4         ;                                                                            ;
1247: EAE4         ;			Function Code	:	C = 019H                                     ;
1248: EAE4         ;			Entry Parameters:	None										 ;
1249: EAE4         ;			Exit Parameters :	A = Current Disk (0=A,1=B...,F=P)			 ;
1250: EAE4         ;																			 ;
1251: EAE4         ;---------------------------- Get Current Disk- 19 (25) ---------------------;
1252: EAE4             vGetCurrentDisk:
1253: EAE4 3A 17 F5               LD     A,(currentDisk)
1254: EAE7 32 C2 EA               LD     (exitParameterByte),A
1255: EAEA C9                     RET
1256: EAEB         ;---------------------------- Set DMA Address - 1A (26) ---------------------;
1257: EAEB         ;  This function sets the BDOS's direct memory access (DMA) address to a new ;
1258: EAEB         ; value. The name is an historic relic dating back to the Intel Development  ;
1259: EAEB         ; System on which CP/M was originally developed. This machine, by virtue of  ;
1260: EAEB         ; its hardware, could read data from a diskette directly into memory or      ;
1261: EAEB         ; write data to a diskette directly from memory. The name DMA address now    ;
1262: EAEB         ; applies to the address of the buffer to and from which data is             ;
1263: EAEB         ; transferred whenever a diskette Read, Write, or directory operation is     ;
1264: EAEB         ; performed. Whenever CP/M first starts up (cold boot) m a warm boot or      ;
1265: EAEB         ; Reset Disk operation occurs, the DMA address is reset to its default       ;
1266: EAEB         ; value of 0080H.                                                            ;
1267: EAEB         ;                                                                            ;
1268: EAEB         ;			Function Code	:	C = 0A9H                                     ;
1269: EAEB         ;			Entry Parameters:	DE = DMA Address							 ;
1270: EAEB         ;			Exit Parameters :	None										 ;
1271: EAEB         ;																			 ;
1272: EAEB         ;---------------------------- Set DMA Address - 1A (26) ---------------------;
1273: EAEB             vSetDMA:
1274: EAEB 2A C0 EA               LD     HL,(paramDE)
1275: EAEE 22 1D F5               LD     (initDAMAddress),HL
1276: EAF1 C3 CD ED               JP     SetDataDMA
1277: EAF4         ;---------------------------- Get Allocation Vector - 1B (27) ---------------;
1278: EAF4         ;  This function returns the base, or starting, address of the allocation    ;
1279: EAF4         ; vector for the currently selected logical disk. This information,          ;
1280: EAF4         ; indicating which parts of the disk are assigned, is used by utility        ;
1281: EAF4         ; programs and the BDOS itself to determine how much unused space is on the  ;
1282: EAF4         ; logical disk, to locate an unused allocation block in order to extend      ;
1283: EAF4         ; a file, or to relinquish an allocation block when a file is deleted.       ;
1284: EAF4         ;                                                                            ;
1285: EAF4         ;			Function Code	:	C = 01BH                                     ;
1286: EAF4         ;			Entry Parameters:	None										 ;
1287: EAF4         ;			Exit Parameters :	HL = Address of allocation vector			 ;
1288: EAF4         ;																			 ;
1289: EAF4         ;---------------------------- Get Allocation Vector - 1B (27) ---------------;
1290: EAF4             vGetAllocAddr:
1291: EAF4 2A 2B F5               LD     HL,(caAllocVector)
1292: EAF7 22 C2 EA               LD     (exitParameterWord),HL
1293: EAFA C9                     RET
1294: EAFB         ;---------------------------- Get Read-Only Map - 1D (29) -------------------;
1295: EAFB         ;  This function returns a bit map in registers H and L showing which logical;
1296: EAFB         ; disks in the system have been set to Read-Only status, either by the       ;
1297: EAFB         ; Set Logical Disk to Read-Only function call (code 28, ICH), or by the      ;
1298: EAFB         ; BDOS itself, because it detected that a diskette had been changed.         ;
1299: EAFB         ;  The least significant bit of L corresponds to logical disk A, while the   ;
1300: EAFB         ; most significant bit of H corresponds to disk P. The bit corresponding to  ;
1301: EAFB         ; the specific logical disk is set to I if the disk has been set to          ;
1302: EAFB         ; Read-Only status.                                                          ;
1303: EAFB         ;                                                                            ;
1304: EAFB         ;			Function Code	:	C = 0DBH                                     ;
1305: EAFB         ;			Entry Parameters:	None										 ;
1306: EAFB         ;			Exit Parameters :	HL = Read-Only Map							 ;
1307: EAFB         ;																			 ;
1308: EAFB         ;---------------------------- Get Read-Only Map - 1D (29) -------------------;
1309: EAFB             vGetReadOnlyMap:
1310: EAFB 2A 19 F5               LD     HL,(readOnlyVector)
1311: EAFE 22 C2 EA               LD     (exitParameterWord),HL
1312: EB01 C9                     RET
1313: EB02         ;------------------ Get Disk Parameter Block Address - 1F (31) --------------;
1314: EB02         ;  This function returns the address of the disk parameter block (DPB) for   ;
1315: EB02         ; the last selected logical disk. The DPB describes the physical             ;
1316: EB02         ; characteristics of a specific logical disk-information mainly of interest  ;
1317: EB02         ; for system utility programs.                                               ;
1318: EB02         ;                                                                            ;
1319: EB02         ;			Function Code	:	C = 1FH                                     ;
1320: EB02         ;			Entry Parameters:	None										 ;
1321: EB02         ;			Exit Parameters :	HL = Address of Disk Parameter Block		 ;
1322: EB02         ;																			 ;
1323: EB02         ;------------------ Get Disk Parameter Block Address - 1F (31) --------------;
1324: EB02             vGetDiskParamBlock:                      ; func31 (31 - 1F)
1325: EB02 2A 27 F5               LD     HL,(caDiskParamBlock)
1326: EB05 22 C2 EA               LD     (exitParameterWord),HL
1327: EB08 C9                     RET
1328: EB09
1329: EB09         ;---------------------------- XXXXX YYYY ZZZZZZ - x (nn) --------------------;
1330: EB09         ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1331: EB09         ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1332: EB09         ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1333: EB09
1334: EB09         ;------------------------ Reset Logical Disk Drive - 25 (37) ----------------;
1335: EB09         ;  This function resets individual disk drives. It is a more precise version ;
1336: EB09         ; of the Reset Disk System function (code 13,ODH), in that you can set       ;
1337: EB09         ; specific logical; disks rather than all of them.                           ;
1338: EB09         ;  The bit map in DE shows which disks are to be reset. The least significant;
1339: EB09         ; bit of; E represents disk A, and the most significant bit of D, disk P.    ;
1340: EB09         ; The bits set to I indicate the disks to be reset.                          ;
1341: EB09         ;  Note that this function returns a zero value in A in order to maintain    ;
1342: EB09         ; compatibility with MP/ M.                                                  ;
1343: EB09         ;                                                                            ;
1344: EB09         ;			Function Code	:	C = 25H                                      ;
1345: EB09         ;			Entry Parameters:	DE = Logical Drive Bit Map					 ;
1346: EB09         ;			Exit Parameters :	A = 00H										 ;
1347: EB09         ;																			 ;
1348: EB09         ;------------------------ Reset Logical Disk Drive - 25 (37) ----------------;
1349: EB09         ;Reset Drive
1350: EB09         ;IN  - (DE) Drive Vector
1351: EB09         ;OUT - (A) 00
1352: EB09             vResetDrive:                      ; func37 (37 - 25) Reset Drive
1353: EB09         ; Not Yet Implemented   **************
1354: EB09 C9                     RET
1355: EB0A         ;*****************************************************************
1356: EB0A
1357: EB0A         ;-----------------------------------------------------------------
1358: EB0A         ;select disk in (E) paramDE
1359: EB0A         ; IN - (E) disk number -- 0=A  1=B ...15=P
1360: EB0A             vSelectDisk:                      ; func14 (14 - 0E)	Select Current Disk
1361: EB0A C3 4E EC               JP     SelectCurrent
1362: EB0D         ;ret ;jmp goba
1363: EB0D
1364: EB0D
1365: EB0D         ;*****************************************************************
1366: EB0D         ;random disk read
1367: EB0D         ;IN  - (DE) FCB address
1368: EB0D         ;OUT - (A) 01 = Reading unwritten data
1369: EB0D         ;	 02 = N/U
1370: EB0D         ;	 03 = Cannot close current extent
1371: EB0D         ;	 04 = Seek to unwriten Extent
1372: EB0D         ;	 05 = N/U
1373: EB0D         ;	 06 = Seek past Physical end of Disk
1374: EB0D             vReadRandom:                      ; func33 (33 - 21) Read Random record
1375: EB0D CD B7 F2               CALL   Reselect
1376: EB10 C3 23 EB               JP     RandomDiskRead       ; to perform the disk read
1377: EB13         ;*****************************************************************
1378: EB13         ;write random record
1379: EB13         ;IN  - (DE) FCB address
1380: EB13         ;OUT - (A) 01 = Reading unwritten data
1381: EB13         ;	 02 = N/U
1382: EB13         ;	 03 = Cannot close current extent
1383: EB13         ;	 04 = Seek to unwriten Extent
1384: EB13         ;	 05 = Cannot create new Extent because of directory overflow
1385: EB13         ;	 06 = Seek past Physical end of Disk
1386: EB13             vWriteRandom:                      ; func34 (34 - 22) Write Random record
1387: EB13 CD B7 F2               CALL   Reselect
1388: EB16 C3 2C EB               JP     RandomDiskWrite      ; to perform the disk write
1389: EB19         ;ret ;jmp goback
1390: EB19         ;*****************************************************************
1391: EB19         ;return file size (0-65536)
1392: EB19         ;IN  - (DE) FCB address
1393: EB19             vComputeFileSize:                      ; func35 (35 - 23) Compute File Size
1394: EB19 CD B7 F2               CALL   Reselect
1395: EB1C C3 D9 EB               JP     GetFileSize
1396: EB1F         ;*****************************************************************
1397: EB1F         ;set random record
1398: EB1F         ;IN  - (DE) FCB address
1399: EB1F         ;OUT - Random Record Field is set
1400: EB1F             vSetRandomRecord:                      ; func36 (36 - 24) Set random Record
1401: EB1F C3 C6 EB               JP     SetRandomRecord
1402: EB22         ;? ;*****************************************************************
1403: EB22         ;? ;Reset Drive
1404: EB22         ;? ;IN  - (DE) Drive Vector
1405: EB22         ;? ;OUT - (A) 00
1406: EB22         ;? vResetDrive:								; func37 (37 - 25) Reset Drive
1407: EB22         ;? ; Not Yet Implemented   **************
1408: EB22         ;?	RET
1409: EB22         ;*****************************************************************
1410: EB22         ;*****************************************************************
1411: EB22         ;Write Random With Zero Fill
1412: EB22         ;IN  - (DE) FCB address
1413: EB22         ;OUT - (A) Return Code		see Function 34
1414: EB22             vWriteRandom0Fill:                      ; func40 (40 - 28) Reset Drive
1415: EB22         ; Not Yet Implemented   **************
1416: EB22 C9                     RET
1417: EB23         ;*****************************************************************
1418: EB23         ;******************< Random I/O Stuff ****************************
1419: EB23         ;*****************************************************************
1420: EB23         ;random disk read
1421: EB23             RandomDiskRead:                      ; randiskread
1422: EB23 0E FF                  LD     C,TRUE               ; marked as read operation
1423: EB25 CD 35 EB               CALL   RandomSeek
1424: EB28 CC AF EF               CALL   Z,DiskRead           ; if seek successful
1425: EB2B C9                     RET
1426: EB2C         ;*****************************************************************
1427: EB2C         ;random disk write
1428: EB2C             RandomDiskWrite:                      ; randiskwrite
1429: EB2C 0E 00                  LD     C,FALSE              ; marked as read operation
1430: EB2E CD 35 EB               CALL   RandomSeek
1431: EB31 CC F2 EF               CALL   Z,DiskWrite          ; if seek successful
1432: EB34 C9                     RET
1433: EB35         ;*****************************************************************
1434: EB35         ;*****************************************************************
1435: EB35         ;random access seek operation, C=0ffh if read mode
1436: EB35         ;fcb is assumed to address an active file control block
1437: EB35         ;(fcbS2Index has been set to 11000000b if previous bad seek)
1438: EB35             RandomSeek:
1439: EB35 AF                     XOR    A
1440: EB36 32 41 F5               LD     (seqReadFlag),A      ; marked as random access operation
1441: EB39 C5                     PUSH   BC                   ; save r/w flag
1442: EB3A 2A C0 EA               LD     HL,(paramDE)
1443: EB3D EB                     EX     DE,HL                ; DE will hold base of fcb
1444: EB3E 21 21 00               LD     HL,RANDOM_REC_FIELD
1445: EB41 19                     ADD    HL,DE                ; HL=.fcb(RANDOM_REC_FIELD)
1446: EB42 7E                     LD     A,(HL)
1447: EB43 E6 7F                  AND    7FH
1448: EB45 F5                     PUSH   AF                   ; record number
1449: EB46 7E                     LD     A,(HL)
1450: EB47 17                     RLA                         ; cy=lsb of extent#
1451: EB48 23                     INC    HL
1452: EB49 7E                     LD     A,(HL)
1453: EB4A 17                     RLA
1454: EB4B E6 1F                  AND    11111B               ; A=ext#
1455: EB4D 4F                     LD     C,A                  ; C holds extent number, record stacked
1456: EB4E 7E                     LD     A,(HL)
1457: EB4F 1F                     RRA
1458: EB50 1F                     RRA
1459: EB51 1F                     RRA
1460: EB52 1F                     RRA
1461: EB53 E6 0F                  AND    1111B                ; mod#
1462: EB55 47                     LD     B,A                  ; B holds module#, C holds ext#
1463: EB56 F1                     POP    AF                   ; recall sought record #
1464: EB57         ;check to insure that high byte of ran rec = 00
1465: EB57 23                     INC    HL
1466: EB58 6E                     LD     L,(HL)               ; l=high byte (must be 00)
1467: EB59 2C                     INC    L
1468: EB5A 2D                     DEC    L
1469: EB5B 2E 06                  LD     L,06                 ; zero flag, l=6
1470: EB5D         ; produce error 6, seek past physical eod
1471: EB5D C2 BE EB               JP     NZ,RandomSeekError
1472: EB60         ; otherwise, high byte = 0, A = sought record
1473: EB60 21 20 00               LD     HL,NEXT_RECORD
1474: EB63 19                     ADD    HL,DE                ; HL = .fcb(NEXT_RECORD)
1475: EB64 77                     LD     (HL),A               ; sought rec# stored away
1476: EB65         ; arrive here with B=mod#, C=ext#, DE=.fcb, rec stored
1477: EB65         ; the r/w flag is still stacked.  compare fcb values
1478: EB65 21 0C 00               LD     HL,fcbExtIndex       ; extent number field
1479: EB68 19                     ADD    HL,DE
1480: EB69 79                     LD     A,C                  ; A=seek ext#
1481: EB6A 96                     SUB    M
1482: EB6B C2 79 EB               JP     NZ,RandomSeekClose   ; tests for = extents
1483: EB6E         ; extents match, check mod#
1484: EB6E 21 0E 00               LD     HL,fcbS2Index
1485: EB71 19                     ADD    HL,DE
1486: EB72 78                     LD     A,B                  ; B=seek mod#
1487: EB73         ; could be overflow at eof, producing module#
1488: EB73         ; of 90H or 10H, so compare all but fwf
1489: EB73 96                     SUB    M
1490: EB74 E6 7F                  AND    7FH
1491: EB76 CA B1 EB               JP     Z,RandomSeekExit     ; same?
1492: EB79             RandomSeekClose:
1493: EB79 C5                     PUSH   BC
1494: EB7A D5                     PUSH   DE                   ; save seek mod#,ext#, .fcb
1495: EB7B CD 92 F1               CALL   CloseDirEntry        ; current extent closed
1496: EB7E D1                     POP    DE
1497: EB7F C1                     POP    BC                   ; recall parameters and fill
1498: EB80 2E 03                  LD     L,03                 ; cannot close error #3
1499: EB82 3A C2 EA               LD     A,(exitParameterByte)
1500: EB85 3C                     INC    A
1501: EB86 CA B7 EB               JP     Z,RandomSeekErrorBadSeek
1502: EB89 21 0C 00               LD     HL,fcbExtIndex
1503: EB8C 19                     ADD    HL,DE
1504: EB8D 71                     LD     (HL),C               ; fcb(fcbExtIndex)=ext#
1505: EB8E 21 0E 00               LD     HL,fcbS2Index
1506: EB91 19                     ADD    HL,DE
1507: EB92 70                     LD     (HL),B               ; fcb(fcbS2Index)=mod#
1508: EB93 CD E4 F2               CALL   OpenFile             ; is the file present?
1509: EB96 3A C2 EA               LD     A,(exitParameterByte)
1510: EB99 3C                     INC    A
1511: EB9A C2 B1 EB               JP     NZ,RandomSeekExit    ; open successful?
1512: EB9D         ; cannot open the file, read mode?
1513: EB9D C1                     POP    BC                   ; r/w flag to c (=0ffh if read)
1514: EB9E C5                     PUSH   BC                   ; everyone expects this item stacked
1515: EB9F 2E 04                  LD     L,04                 ; seek to unwritten extent #4
1516: EBA1 0C                     INC    C                    ; becomes 00 if read operation
1517: EBA2 CA B7 EB               JP     Z,RandomSeekErrorBadSeek ; skip to error if read operation
1518: EBA5 CD 3A F1               CALL   MakeNewFile          ; write operation, make new extent
1519: EBA8 2E 05                  LD     L,05                 ; cannot create new extent #5
1520: EBAA 3A C2 EA               LD     A,(exitParameterByte)
1521: EBAD 3C                     INC    A
1522: EBAE CA B7 EB               JP     Z,RandomSeekErrorBadSeek ; no dir space
1523: EBB1         ; file make operation successful
1524: EBB1             RandomSeekExit:                      ; seekok:
1525: EBB1 C1                     POP    BC                   ; discard r/w flag
1526: EBB2 AF                     XOR    A
1527: EBB3 32 C2 EA               LD     (exitParameterByte),A
1528: EBB6 C9                     RET                         ; with zero set
1529: EBB7
1530: EBB7             RandomSeekErrorBadSeek:
1531: EBB7         ; fcb no longer contains a valid fcb, mark with 11000000b in fcbS2Index field so that it
1532: EBB7         ; appears as overflow with file write flag set
1533: EBB7 E5                     PUSH   HL                   ; save error flag
1534: EBB8 CD AE F2               CALL   GetModuleNum         ; HL = .fcbS2Index
1535: EBBB 36 C0                  LD     (HL),11000000B
1536: EBBD E1                     POP    HL                   ; and drop through
1537: EBBE             RandomSeekError:                      ; seekerr:
1538: EBBE C1                     POP    BC                   ; discard r/w flag
1539: EBBF 7D                     LD     A,L
1540: EBC0 32 C2 EA               LD     (exitParameterByte),A ; exitParameterByte=#, nonzero
1541: EBC3         ; SetFileWriteFlag returns non-zero accumulator for err
1542: EBC3 C3 AF F3               JP     SetFileWriteFlag     ; flag set, so subsequent close ok
1543: EBC6         ;ret
1544: EBC6         ;
1545: EBC6         ;*****************************************************************
1546: EBC6             SetRandomRecord:                      ; setrandom
1547: EBC6 2A C0 EA               LD     HL,(paramDE)
1548: EBC9 11 20 00               LD     DE,NEXT_RECORD       ; ready params for computesize
1549: EBCC CD 15 EC               CALL   GetRandomRecordPosition ; DE=paramDE, A=cy, BC=mmmm eeee errr rrrr
1550: EBCF 21 21 00               LD     HL,RANDOM_REC_FIELD
1551: EBD2 19                     ADD    HL,DE                ; HL = .FCB(RANDOM_REC_FIELD)
1552: EBD3 71                     LD     (HL),C
1553: EBD4 23                     INC    HL
1554: EBD5 70                     LD     (HL),B
1555: EBD6 23                     INC    HL
1556: EBD7 77                     LD     (HL),A               ; to RANDOM_REC_FIELD
1557: EBD8 C9                     RET
1558: EBD9         ;*****************************************************************
1559: EBD9         ;compute logical file size for current fcb
1560: EBD9             GetFileSize:                      ; getfilesize
1561: EBD9 0E 0C                  LD     C,fcbExtIndex
1562: EBDB CD 27 F3               CALL   Search4DirElement
1563: EBDE         ; zero the receiving Ramdom record field
1564: EBDE 2A C0 EA               LD     HL,(paramDE)
1565: EBE1 11 21 00               LD     DE,RANDOM_REC_FIELD
1566: EBE4 19                     ADD    HL,DE
1567: EBE5 E5                     PUSH   HL                   ; save position
1568: EBE6 72                     LD     (HL),D
1569: EBE7 23                     INC    HL
1570: EBE8 72                     LD     (HL),D
1571: EBE9 23                     INC    HL
1572: EBEA 72                     LD     (HL),D               ; =00 00 00
1573: EBEB             GetFileSize1:                      ; getsize:
1574: EBEB CD 45 EE               CALL   EndOfDirectory
1575: EBEE CA 13 EC               JP     Z,GetFileSizeExit
1576: EBF1         ; current fcb addressed by dptr
1577: EBF1 CD 16 EE               CALL   GetDirElementAddress
1578: EBF4 11 0F 00               LD     DE,fcbRCIndex        ; ready for compute size
1579: EBF7 CD 15 EC               CALL   GetRandomRecordPosition
1580: EBFA         ; A=0000 000? BC = mmmm eeee errr rrrr compare with memory, larger?
1581: EBFA E1                     POP    HL
1582: EBFB E5                     PUSH   HL                   ; recall, replace .fcb(Random record Field)
1583: EBFC 5F                     LD     E,A                  ; save cy
1584: EBFD 79                     LD     A,C
1585: EBFE 96                     SUB    M
1586: EBFF 23                     INC    HL                   ; ls byte
1587: EC00 78                     LD     A,B
1588: EC01 9E                     SBC    A,(HL)
1589: EC02 23                     INC    HL                   ; middle byte
1590: EC03 7B                     LD     A,E
1591: EC04 9E                     SBC    A,(HL)               ; carry if .fcb(random record field) > directory
1592: EC05 DA 0D EC               JP     C,GetFileSize2       ; for another try
1593: EC08         ; fcb is less or equal, fill from directory
1594: EC08 73                     LD     (HL),E
1595: EC09 2B                     DEC    HL
1596: EC0A 70                     LD     (HL),B
1597: EC0B 2B                     DEC    HL
1598: EC0C 71                     LD     (HL),C
1599: EC0D             GetFileSize2:                      ; getnextsize:
1600: EC0D CD 3F F3               CALL   Search4NextDirElement
1601: EC10 C3 EB EB               JP     GetFileSize1
1602: EC13             GetFileSizeExit:                      ; setsize:
1603: EC13 E1                     POP    HL                   ; discard .fcb(random record field)
1604: EC14 C9                     RET
1605: EC15         ;-----------------------------------------------------------------
1606: EC15         ;compute random record position
1607: EC15             GetRandomRecordPosition:                      ; compute$rr
1608: EC15 EB                     EX     DE,HL
1609: EC16 19                     ADD    HL,DE
1610: EC17         ; DE=.buf(dptr) or .fcb(0), HL = .f(NEXT_RECORD/fcbRCIndex)
1611: EC17 4E                     LD     C,(HL)
1612: EC18 06 00                  LD     B,0                  ; BC = 0000 0000 ?rrr rrrr
1613: EC1A 21 0C 00               LD     HL,fcbExtIndex
1614: EC1D 19                     ADD    HL,DE
1615: EC1E 7E                     LD     A,(HL)
1616: EC1F 0F                     RRCA
1617: EC20 E6 80                  AND    80H                  ; A=e000 0000
1618: EC22 81                     ADD    A,C
1619: EC23 4F                     LD     C,A
1620: EC24 3E 00                  LD     A,0
1621: EC26 88                     ADC    A,B
1622: EC27 47                     LD     B,A
1623: EC28         ; BC = 0000 000? errrr rrrr
1624: EC28 7E                     LD     A,(HL)
1625: EC29 0F                     RRCA
1626: EC2A E6 0F                  AND    LO_NIBBLE_MASK
1627: EC2C 80                     ADD    A,B
1628: EC2D 47                     LD     B,A
1629: EC2E         ; BC = 000? eeee errrr rrrr
1630: EC2E 21 0E 00               LD     HL,fcbS2Index
1631: EC31 19                     ADD    HL,DE
1632: EC32 7E                     LD     A,(HL)               ; A=XXX? mmmm
1633: EC33 87                     ADD    A,A
1634: EC34 87                     ADD    A,A
1635: EC35 87                     ADD    A,A
1636: EC36 87                     ADD    A,A                  ; cy=? A=mmmm 0000
1637: EC37 F5                     PUSH   AF
1638: EC38 80                     ADD    A,B
1639: EC39 47                     LD     B,A
1640: EC3A         ; cy=?, BC = mmmm eeee errr rrrr
1641: EC3A F5                     PUSH   AF                   ; possible second carry
1642: EC3B E1                     POP    HL                   ; cy = lsb of L
1643: EC3C 7D                     LD     A,L                  ; cy = lsb of A
1644: EC3D E1                     POP    HL                   ; cy = lsb of L
1645: EC3E B5                     OR     L                    ; cy/cy = lsb of A
1646: EC3F E6 01                  AND    1                    ; A = 0000 000? possible carry-out
1647: EC41 C9                     RET
1648: EC42         ;-----------------------------------------------------------------
1649: EC42
1650: EC42
1651: EC42
1652: EC42         ;*****************************************************************
1653: EC42         ;********************** Disk  I/O ********************************
1654: EC42         ;*****************************************************************
1655: EC42         ;-----------------------------------------------------------------
1656: EC42         ;;write protect current disk
1657: EC42             vWriteProtectDisk:                      ; func28 (28 - 1C) Write protect disk
1658: EC42 C3 35 ED               JP     SetDiskReadOnly
1659: EC45         ;-----------------------------------------------------------------
1660: EC45         ;;set file Attributes
1661: EC45             vSetFileAttributes:                      ; func30 (30 - 1E) Set File Attributes
1662: EC45 CD B7 F2               CALL   Reselect
1663: EC48 CD 12 EF               CALL   SetAttributes
1664: EC4B C3 A1 F2               JP     DirLocationToReturnLoc ; exitParameterByte=dirloc
1665: EC4E         ;-----------------------------------------------------------------
1666: EC4E
1667: EC4E             SelectCurrent:                      ; curselect
1668: EC4E 3A BF EA               LD     A,(paramE)
1669: EC51 21 17 F5               LD     HL,currentDisk
1670: EC54 BE                     CP     M
1671: EC55 C8                     RET    Z                    ; exit if parame = Current disk
1672: EC56 77                     LD     (HL),A
1673: EC57 C3 5A EC               JP     Select
1674: EC5A         ;*****************************************************************
1675: EC5A         ;--------------------------- Select Login Drive -----------------------------;
1676: EC5A         ; select Login Drive                                                        ;
1677: EC5A             Select:                         ;
1678: EC5A CD 7B EC               CALL   SelectDisk           ; Select the Disk                    ;
1679: EC5D CC 86 F4               CALL   Z,errSelect          ;
1680: EC60 21 17 F5               LD     HL,currentDisk       ;
1681: EC63 46                     LD     B,(HL)               ; Get Current Disk                   ;
1682: EC64 2A 1B F5               LD     HL,(loggedDisks)     ; Load Logged Disk MAP               ;
1683: EC67 CD 58 F4               CALL   IsBitSet             ;
1684: EC6A C0                     RET    NZ                   ; Exit if already logged in          ;
1685: EC6B         ;                                                                            ;
1686: EC6B 21 17 F5               LD     HL,currentDisk       ;
1687: EC6E 46                     LD     B,(HL)               ; Get Current Disk                   ;
1688: EC6F 2A 1B F5               LD     HL,(loggedDisks)     ; else log in a different disk	     ;
1689: EC72 CD 68 F4               CALL   SetMapBit            ;
1690: EC75 22 1B F5               LD     (loggedDisks),HL     ; Update the Map                     ;
1691: EC78         ;
1692: EC78 C3 C1 EC               JP     InitDisk             ;
1693: EC7B         ;--------------------------- Select Login Drive -----------------------------;
1694: EC7B
1695: EC7B         ;--------------------------- Select Disk ------------------------------------;
1696: EC7B         ;*****************************************************************          ;
1697: EC7B         ; select the disk drive given by currentDisk, and fill the base addresses   ;
1698: EC7B         ; caTrack - caAllocVector, then fill the values of the disk parameter block ;
1699: EC7B             SelectDisk:                      ;
1700: EC7B 3A 17 F5               LD     A,(currentDisk)      ; Get current disk (0=A,1=B...)      ;
1701: EC7E 4F                     LD     C,A                  ; Prepare for BIOS Call              ;
1702: EC7F CD 1B F6               CALL   bcSeldsk             ; Select the disk                    ;
1703: EC82 7C                     LD     A,H                  ; Return Pointer to                  ;
1704: EC83 B5                     OR     L                    ;  Disk Parameter Header             ;
1705: EC84 C8                     RET    Z                    ; exit if error, with HL = 0000      ;
1706: EC85         ;
1707: EC85 5E                     LD     E,(HL)               ;
1708: EC86 23                     INC    HL                   ;
1709: EC87 56                     LD     D,(HL)               ; Skew Table in DE                   ;
1710: EC88 23                     INC    HL                   ; HL = DPH + 2, Rel Pos for File     ;
1711: EC89 ED 53 3C F5               LD     (caSkewTable),DE     ; Move to Current Skew Table         ;
1712: EC8D         ;
1713: EC8D 22 1F F5               LD     (caDirMaxValue),HL   ; Move to Current Dir max            ;
1714: EC90 23                     INC    HL                   ;
1715: EC91 23                     INC    HL                   ; HL = Last Track #                  ;
1716: EC92 22 21 F5               LD     (caTrack),HL         ; Move to Current Track #            ;
1717: EC95 23                     INC    HL                   ;
1718: EC96 23                     INC    HL                   ; HL = Last Sector #                 ;
1719: EC97 22 23 F5               LD     (caSector),HL        ; Move to Current Sector #           ;
1720: EC9A 23                     INC    HL                   ;
1721: EC9B 23                     INC    HL                   ;
1722: EC9C 11 25 F5               LD     DE,caDirectoryDMA    ;
1723: EC9F 01 08 00               LD     BC,caListSize        ;
1724: ECA2 ED B0                  LDIR                        ;
1725: ECA4         ;
1726: ECA4         ; finish filling in address list                                             ;
1727: ECA4 2A 27 F5               LD     HL,(caDiskParamBlock) ; Point Disk Parameter Block         ;
1728: ECA7 11 2D F5               LD     DE,dpbStart          ; Point at BIOS DPB                  ;
1729: ECAA 01 0F 00               LD     BC,dpbSize           ;
1730: ECAD ED B0                  LDIR                        ; Move DPB to current                ;
1731: ECAF         ;
1732: ECAF         ; Determine if Byte or Word Allocation Table	                             ;
1733: ECAF 2A 32 F5               LD     HL,(dpbDSM)          ; Get max entry number               ;
1734: ECB2 7C                     LD     A,H                  ; If  its 00 then < 255              ;
1735: ECB3 21 46 F5               LD     HL,byteAllocationFlag ; Point at the  flag				 ;
1736: ECB6 36 FF                  LD     (HL),TRUE            ; Assume its less than 255           ;
1737: ECB8 B7                     OR     A                    ;  is the assumption confirmed ?     ;
1738: ECB9 28 02                  JR     Z,SelectDisk1        ;  skip if yes                       ;
1739: ECBB 36 00                  LD     (HL),FALSE           ; Fix assumption,set flag to false   ;
1740: ECBD         ;
1741: ECBD         ; Set Sign, reset Carry and Zero to indicate success                         ;
1742: ECBD             SelectDisk1:                      ;
1743: ECBD 3E FF                  LD     A,TRUE               ;
1744: ECBF B7                     OR     A                    ;
1745: ECC0 C9                     RET                         ;
1746: ECC1         ;--------------------------- Select Disk ------------------------------------;
1747: ECC1         ;--------------------------- Initialize Disk --------------------------------;
1748: ECC1             InitDisk:
1749: ECC1 2A 32 F5               LD     HL,(dpbDSM)          ; Maximum allocation value
1750: ECC4 06 03                  LD     B,3                  ; We want dpbDSM/8
1751: ECC6             InitDiskLoop1:
1752: ECC6 AF                     XOR    A                    ; Rest the CY flag
1753: ECC7 CB 1C                  RR     H
1754: ECC9 CB 1D                  RR     L                    ; Shift right
1755: ECCB 10 F9                  DJNZ   InitDiskLoop1        ; Loop till divide by 8
1756: ECCD E5                     PUSH   HL
1757: ECCE C1                     POP    BC                   ; BC = dpbDSM/8+1
1758: ECCF         ; Clear the Allocation Vector
1759: ECCF 2A 2B F5               LD     HL,(caAllocVector)   ; Allocation vector Start
1760: ECD2 36 00                  LD     (HL),0               ; Clear location
1761: ECD4 ED 5B 2B F5               LD     DE,(caAllocVector)
1762: ECD8 13                     INC    DE                   ; Allocation vector Start + 1
1763: ECD9 ED B0                  LDIR                        ; Cascade 00 thru Allocation Vector
1764: ECDB         ; Mark the reserved space for the directory
1765: ECDB 2A 36 F5               LD     HL,(dpbDABM)         ; Directory block reserved bits
1766: ECDE EB                     EX     DE,HL
1767: ECDF 2A 2B F5               LD     HL,(caAllocVector)   ; HL Start of Allocation Vector
1768: ECE2 73                     LD     (HL),E
1769: ECE3 23                     INC    HL
1770: ECE4 72                     LD     (HL),D               ; Put reserved blocks in Vector
1771: ECE5         ; home disk, and set current track and sector to 00
1772: ECE5 CD B3 ED               CALL   Home
1773: ECE8 2A 1F F5               LD     HL,(caDirMaxValue)
1774: ECEB 36 03                  LD     (HL),3
1775: ECED 23                     INC    HL
1776: ECEE 36 00                  LD     (HL),0               ; Current Max Dir Value = 0003
1777: ECF0 CD 0F EE               CALL   SetEndDirectory      ; dirEntryIndex = EOD (-1)
1778: ECF3
1779: ECF3             InitDisk1:
1780: ECF3         ; Process the directory for
1781: ECF3 0E FF                  LD     C,TRUE               ; Set flag for setting CheckSum
1782: ECF5 CD 57 EE               CALL   ReadDirectory
1783: ECF8 CD 45 EE               CALL   EndOfDirectory
1784: ECFB C8                     RET    Z                    ; Exit at end of directory
1785: ECFC         ; not end of directory, valid entry?
1786: ECFC CD 16 EE               CALL   GetDirElementAddress ; Calculate the location of the element
1787: ECFF 3E E5                  LD     A,emptyDir
1788: ED01 BE                     CP     M
1789: ED02 CA F3 EC               JP     Z,InitDisk1          ; go get another item
1790: ED05         ; not emptyDir, user code the same?
1791: ED05 3A 16 F5               LD     A,(currentUserNumber)
1792: ED08 BE                     CP     M
1793: ED09 C2 17 ED               JP     NZ,InitDisk2
1794: ED0C         ; same user code, check for '$' submit
1795: ED0C 23                     INC    HL
1796: ED0D 7E                     LD     A,(HL)               ; first character
1797: ED0E D6 24                  SUB    DOLLAR               ; dollar file?
1798: ED10 C2 17 ED               JP     NZ,InitDisk2
1799: ED13         ; dollar file found, mark in exitParameterByte
1800: ED13 3D                     DEC    A
1801: ED14 32 C2 EA               LD     (exitParameterByte),A ; exitParameterByte = 255
1802: ED17             InitDisk2:
1803: ED17         ; now scan the disk map for allocated blocks
1804: ED17 0E 01                  LD     C,1                  ; set to allocated
1805: ED19 CD 4C ED               CALL   ScanDiskMap
1806: ED1C CD 22 EE               CALL   SetDirectoryEntry    ; set DirMaxVAlue to dirEntryIndex
1807: ED1F C3 F3 EC               JP     InitDisk1            ; for another entry
1808: ED22         ;--------------------------- Initialize Disk --------------------------------;
1809: ED22         ;---------------
1810: ED22         ; set a "1" value in currentDisk position of BC
1811: ED22         ; return in HL
1812: ED22             SetCurrentDiskBit:
1813: ED22 C5                     PUSH   BC                   ; save input parameter
1814: ED23 3A 17 F5               LD     A,(currentDisk)
1815: ED26 4F                     LD     C,A                  ; ready parameter for shift
1816: ED27 21 01 00               LD     HL,1                 ; number to shift
1817: ED2A CD 47 F4               CALL   ShiftLeftHLbyC       ; HL = mask to integrate
1818: ED2D C1                     POP    BC                   ; original mask
1819: ED2E 79                     LD     A,C
1820: ED2F B5                     OR     L
1821: ED30 6F                     LD     L,A
1822: ED31 78                     LD     A,B
1823: ED32 B4                     OR     H
1824: ED33 67                     LD     H,A                  ; HL = mask or rol(1,currentDisk)
1825: ED34 C9                     RET
1826: ED35         ;--------------
1827: ED35         ;--------------------------- Set disk Read Only ----------------------------;
1828: ED35         ;set current disk to read only
1829: ED35             SetDiskReadOnly:
1830: ED35 21 19 F5               LD     HL,readOnlyVector    ; Get the Vector
1831: ED38
1832: ED38         ;	LD		B,(currentDisk)				; Get the current disk
1833: ED38         ;	CALL	SetMapBit					; Set the bit
1834: ED38 4E                     LD     C,(HL)
1835: ED39 23                     INC    HL
1836: ED3A 46                     LD     B,(HL)
1837: ED3B CD 22 ED               CALL   SetCurrentDiskBit    ; sets bit to 1
1838: ED3E 22 19 F5               LD     (readOnlyVector),HL  ; Update the Vector
1839: ED41
1840: ED41
1841: ED41
1842: ED41 2A 34 F5               LD     HL,(dpbDRM)          ; Directory Max Value
1843: ED44 EB                     EX     DE,HL                ; DE = directory max
1844: ED45 2A 1F F5               LD     HL,(caDirMaxValue)   ; HL = .Directory max value
1845: ED48 73                     LD     (HL),E
1846: ED49 23                     INC    HL
1847: ED4A 72                     LD     (HL),D               ; cdrmax = dpbDRM
1848: ED4B
1849: ED4B         ;	LD		IX(dpbDRM)
1850: ED4B C9                     RET
1851: ED4C         ;--------------------------- Set disk Read Only ----------------------------;
1852: ED4C
1853: ED4C         ;
1854: ED4C         ;-------------Scan the disk map for unallocated entry-----------------------------------
1855: ED4C         ; scan the disk map addressed by dptr for non-zero entries.  The allocation
1856: ED4C         ; vector entry corresponding to a non-zero entry is set to the value of C (0,1)
1857: ED4C             ScanDiskMap:
1858: ED4C C5                     PUSH   BC                   ; save the set/reset bit
1859: ED4D CD 16 EE               CALL   GetDirElementAddress ; HL = buffa + dptr
1860: ED50         ; HL addresses the beginning of the directory entry
1861: ED50 11 10 00               LD     DE,fcbDiskMapIndex
1862: ED53 19                     ADD    HL,DE                ; hl now addresses the disk map
1863: ED54 0E 11                  LD     C,fcbLength-fcbDiskMapIndex+1 ; size of Disk Allocation Map + 1
1864: ED56
1865: ED56             ScanDiskMap0:                      ; loop once for each disk map entry
1866: ED56 D1                     POP    DE                   ; recall the set/reset bit
1867: ED57 0D                     DEC    C
1868: ED58 C8                     RET    Z
1869: ED59
1870: ED59 D5                     PUSH   DE                   ; save the set/reset bit
1871: ED5A 3A 46 F5               LD     A,(byteAllocationFlag) ; byteAllocationFlag byte entry flag
1872: ED5D B7                     OR     A
1873: ED5E CA 69 ED               JP     Z,ScanDiskMap1       ; skip if two byte value
1874: ED61         ;  Byte Allocation scan operation
1875: ED61 C5                     PUSH   BC                   ; save counter
1876: ED62 E5                     PUSH   HL                   ; save map address
1877: ED63 4E                     LD     C,(HL)
1878: ED64 06 00                  LD     B,0                  ; BC=block#
1879: ED66 C3 6F ED               JP     ScanDiskMap2
1880: ED69         ; two byte scan operation
1881: ED69             ScanDiskMap1:
1882: ED69 0D                     DEC    C                    ; adjust counter for double byte
1883: ED6A C5                     PUSH   BC                   ; save counter
1884: ED6B         ;	MOV		C,M
1885: ED6B 46                     LD     B,(HL)
1886: ED6C 23                     INC    HL
1887: ED6D         ;	MOV		B,M								; BC=block#
1888: ED6D 4E                     LD     C,(HL)               ; BC=block#
1889: ED6E E5                     PUSH   HL                   ; save map address
1890: ED6F             ScanDiskMap2:                      ; arrive here with BC=block#, E=0/1
1891: ED6F 79                     LD     A,C
1892: ED70 B0                     OR     B                    ; skip if = 0000
1893: ED71 C4 A1 ED               CALL   NZ,SetAllocBit       ; bit set to 0/1 its in C
1894: ED74 E1                     POP    HL
1895: ED75 23                     INC    HL                   ; to next bit position
1896: ED76 C1                     POP    BC                   ; recall counter
1897: ED77 C3 56 ED               JP     ScanDiskMap0         ; for another item
1898: ED7A         ;
1899: ED7A         ;-----------------------------------
1900: ED7A         ;given allocation vector position BC, return with byte
1901: ED7A         ;containing BC shifted so that the least significant
1902: ED7A         ;bit is in the low order accumulator position.  HL is
1903: ED7A         ;the address of the byte for possible replacement in
1904: ED7A         ;memory upon return, and D contains the number of shifts
1905: ED7A         ;required to place the returned value back into position
1906: ED7A
1907: ED7A             GetAllocBit:                      ; getallocbit
1908: ED7A 79                     LD     A,C
1909: ED7B E6 07                  AND    111b
1910: ED7D 3C                     INC    A
1911: ED7E 5F                     LD     E,A
1912: ED7F 57                     LD     D,A
1913: ED80         ; d and e both contain the number of bit positions to shift
1914: ED80 79                     LD     A,C
1915: ED81 0F                     RRCA
1916: ED82 0F                     RRCA
1917: ED83 0F                     RRCA
1918: ED84 E6 1F                  AND    11111b
1919: ED86 4F                     LD     C,A                  ; C shr 3 to C
1920: ED87 78                     LD     A,B
1921: ED88 87                     ADD    A,A
1922: ED89 87                     ADD    A,A
1923: ED8A 87                     ADD    A,A
1924: ED8B 87                     ADD    A,A
1925: ED8C 87                     ADD    A,A                  ; B shl 5
1926: ED8D B1                     OR     C
1927: ED8E 4F                     LD     C,A                  ; bbbccccc to C
1928: ED8F 78                     LD     A,B
1929: ED90 0F                     RRCA
1930: ED91 0F                     RRCA
1931: ED92 0F                     RRCA
1932: ED93 E6 1F                  AND    11111b
1933: ED95 47                     LD     B,A                  ; BC shr 3 to BC
1934: ED96 2A 2B F5               LD     HL,(caAllocVector)   ; base address of allocation vector
1935: ED99 09                     ADD    HL,BC
1936: ED9A 7E                     LD     A,(HL)               ; byte to A, hl = .alloc(BC shr 3)
1937: ED9B         ;now move the bit to the low order position of A
1938: ED9B             GetAllocBitl:
1939: ED9B 07                     RLCA
1940: ED9C 1D                     DEC    E
1941: ED9D C2 9B ED               JP     NZ,GetAllocBitl
1942: EDA0 C9                     RET
1943: EDA1
1944: EDA1         ;-----------------------------------
1945: EDA1         ; BC is the bit position of ALLOC to set or reset.  The
1946: EDA1         ; value of the bit is in register E.
1947: EDA1             SetAllocBit:
1948: EDA1 D5                     PUSH   DE
1949: EDA2 CD 7A ED               CALL   GetAllocBit          ; shifted val A, count in D
1950: EDA5 E6 FE                  AND    11111110b            ; mask low bit to zero (may be set)
1951: EDA7 C1                     POP    BC
1952: EDA8 B1                     OR     C                    ; low bit of C is masked into A
1953: EDA9 C3 AC ED               JP     RotateAndReplace     ; to rotate back into proper position
1954: EDAC         ;ret
1955: EDAC         ;-----------------------------------
1956: EDAC         ; byte value from ALLOC is in register A, with shift count
1957: EDAC         ; in register C (to place bit back into position), and
1958: EDAC         ; target ALLOC position in registers HL, rotate and replace
1959: EDAC             RotateAndReplace:
1960: EDAC 0F                     RRCA
1961: EDAD 15                     DEC    D
1962: EDAE C2 AC ED               JP     NZ,RotateAndReplace  ; back into position
1963: EDB1 77                     LD     (HL),A               ; back to ALLOC
1964: EDB2 C9                     RET
1965: EDB3         ;-----------------------------------
1966: EDB3         ;--------------------------- Home The Current Disk -------------------------;
1967: EDB3         ;move to home position, then offset to start of dir                         ;
1968: EDB3             Home:                           ;
1969: EDB3 CD 18 F6               CALL   bcHome               ; Sets Track to 0, and checks       ;
1970: EDB6         ; if Buffer needs to be written     ;
1971: EDB6 21 3A F5               LD     HL,dpbOFF            ; Number of tracks before directory ;
1972: EDB9 4E                     LD     C,(HL)               ;
1973: EDBA 23                     INC    HL                   ;
1974: EDBB 46                     LD     B,(HL)               ;
1975: EDBC CD 1E F6               CALL   bcSettrk             ; Point at 1st directory position   ;
1976: EDBF         ;
1977: EDBF         ; Set Current Track and Sector to 00                                        ;
1978: EDBF AF                     XOR    A                    ; set ACC to 00                     ;
1979: EDC0 2A 21 F5               LD     HL,(caTrack)         ;
1980: EDC3 77                     LD     (HL),A               ;
1981: EDC4 23                     INC    HL                   ;
1982: EDC5 77                     LD     (HL),A               ;
1983: EDC6 2A 23 F5               LD     HL,(caSector)        ;
1984: EDC9 77                     LD     (HL),A               ;
1985: EDCA 23                     INC    HL                   ;
1986: EDCB 77                     LD     (HL),A               ;
1987: EDCC C9                     RET                         ;
1988: EDCD         ;
1989: EDCD         ;--------------------------- Home The Current Disk -------------------------;
1990: EDCD
1991: EDCD         ;*****************************************************************
1992: EDCD
1993: EDCD         ;*****************************************************************
1994: EDCD         ;=========================== Disk Utilities ================================;
1995: EDCD         ;--------------------------- Set DMAs -------------------------------------;
1996: EDCD             SetDataDMA:                      ;
1997: EDCD 21 1D F5               LD     HL,initDAMAddress    ;
1998: EDD0 18 03                  JR     SetDMA               ; Skip to complete the call        ;
1999: EDD2         ;	LD		BC,initDAMAddress                                              ;
2000: EDD2         ;	JP		bcSetdma					; Call BIOS to set                 ;
2001: EDD2         ;
2002: EDD2             SetDirDMA:                      ;
2003: EDD2 21 25 F5               LD     HL,caDirectoryDMA    ; Load current directory Buffer    ;
2004: EDD5         ;	LD		BC,caDirectoryDMA			; Load current directory Buffer    ;
2005: EDD5         ;	JP		bcSetdma					; Call BIOS to set                 ;
2006: EDD5         ;
2007: EDD5             SetDMA:                         ;
2008: EDD5 4E                     LD     C,(HL)               ;
2009: EDD6 23                     INC    HL                   ;
2010: EDD7 46                     LD     B,(HL)               ; parameter ready              ;
2011: EDD8 C3 24 F6               JP     bcSetdma             ; call bios to set             ;
2012: EDDB         ;--------------------------- Set DMAs -------------------------------------;
2013: EDDB         ;--------------------------- Read Buffer ----------------------------------;
2014: EDDB         ;reads into current DMA, using current Disk,Track and Sector               ;
2015: EDDB             ReadBuffer:                      ;
2016: EDDB CD 27 F6               CALL   bcRead               ; Do the read at the BIOS level    ;
2017: EDDE B7                     OR     A                    ; Check status                     ;
2018: EDDF C2 AB F4               JP     NZ,erPermanentNoWait ; Report if Status not OK          ;
2019: EDE2 C9                     RET                         ;
2020: EDE3         ;--------------------------- Read Buffer ----------------------------------;
2021: EDE3
2022: EDE3
2023: EDE3         ;=========================== Disk Utilities ================================;
2024: EDE3
2025: EDE3         ;=========================== File Utilities ================================;
2026: EDE3         ;--------------------------- Set Record Variables -------------------------;
2027: EDE3         ;set variables from currently FCB - Current Record, RC, EXM                ;
2028: EDE3             SetRecordVars:                      ;
2029: EDE3 CD FA ED               CALL   GetFcbRecordDetails  ; DE = .RecordCount                ;
2030: EDE6         ;  and HL => .CurrentRecord        ;
2031: EDE6 7E                     LD     A,(HL)               ;
2032: EDE7 32 4C F5               LD     (currentFileRecord),A ; Save current record              ;
2033: EDEA EB                     EX     DE,HL                ;
2034: EDEB 7E                     LD     A,(HL)               ;
2035: EDEC 32 4A F5               LD     (fcbRecordCount),A   ; Save the FCBs RC                 ;
2036: EDEF CD 07 EE               CALL   GetExtentAddress     ; HL=.FCB(fcbExtIndex)             ;
2037: EDF2 3A 31 F5               LD     A,(dpbEXM)           ; Extent mask                      ;
2038: EDF5 A6                     AND    M                    ; Remove unwanted bits             ;
2039: EDF6 32 4B F5               LD     (extentValue),A      ; Store the value                  ;
2040: EDF9 C9                     RET                         ;
2041: EDFA         ;--------------------------- Set Record Variables -------------------------;
2042: EDFA
2043: EDFA         ;----------------------Get File Record Count and Current Record------------;
2044: EDFA         ; returns with DE pointing at RC from FCB                                  ;
2045: EDFA         ;         with HL pointing at Current Record                               ;
2046: EDFA             GetFcbRecordDetails:                      ;
2047: EDFA 2A C0 EA               LD     HL,(paramDE)         ; Get FCB start                    ;
2048: EDFD 11 0F 00               LD     DE,fcbRCIndex        ; Offset to Record Count           ;
2049: EE00 19                     ADD    HL,DE                ;
2050: EE01 EB                     EX     DE,HL                ; DE Points to Record Count        ;
2051: EE02 21 11 00               LD     HL,NEXT_RECORD-fcbRCIndex ;
2052: EE05 19                     ADD    HL,DE                ; HL Points to Current Record      ;
2053: EE06 C9                     RET                         ;
2054: EE07         ;----------------------Get File Record Count and Current Record------------;
2055: EE07         ;----------------------Get FileExtent--------------------------------------;
2056: EE07         ;get current extent field address to (HL)                                 ;
2057: EE07             GetExtentAddress:                      ;
2058: EE07 2A C0 EA               LD     HL,(paramDE)         ; Get FCB                          ;
2059: EE0A 11 0C 00               LD     DE,fcbExtIndex       ; Get EXT offset                   ;
2060: EE0D 19                     ADD    HL,DE                ; HL=.fcb(fcbExtIndex)             ;
2061: EE0E C9                     RET                         ;
2062: EE0F         ;----------------------Get FileExtent--------------------------------------;
2063: EE0F
2064: EE0F         ;=========================== File Utilities ================================;
2065: EE0F
2066: EE0F         ;=========================== Directory Utilities ===========================;
2067: EE0F         ;--------------------------- Set End of Directory indicator ----------------;
2068: EE0F             SetEndDirectory:                      ;
2069: EE0F 21 FF FF               LD     HL,EOD               ; Put -1 (0FFFFH) in index          ;
2070: EE12 22 51 F5               LD     (dirEntryIndex),HL   ;
2071: EE15 C9                     RET                         ;
2072: EE16         ;--------------------------- Set End of Directory indicator ----------------;
2073: EE16         ;--------------------------- Get Directory Element -------------------------;
2074: EE16         ; compute the address of a directory element in Directory Buffer            ;
2075: EE16             GetDirElementAddress:                      ;
2076: EE16 2A 25 F5               LD     HL,(caDirectoryDMA)  ; Get the Directory Buffer base     ;
2077: EE19 3A 50 F5               LD     A,(dirBlockIndex)    ; Get the index value               ;
2078: EE1C 4F                     LD     C,A                  ;
2079: EE1D AF                     XOR    A                    ; Set to Zero and reset CY          ;
2080: EE1E 47                     LD     B,A                  ;
2081: EE1F ED 4A                  ADC    HL,BC                ; Compute the Entry Location        ;
2082: EE21 C9                     RET                         ;
2083: EE22         ;--------------------------- Get Directory Element -------------------------;
2084: EE22         ;--------------------------- Set Directory Entry ---------------------------;
2085: EE22         ; Will update directory if not in the directory                             ;
2086: EE22         ;
2087: EE22             SetDirectoryEntry:                      ;
2088: EE22 CD 2B EE               CALL   StillInDirectory     ;
2089: EE25 D8                     RET    C                    ; Exit if still in the Directory  	;
2090: EE26         ;
2091: EE26         ; StillInDirectory will return with:                                        ;
2092: EE26         ;									DE = Directory entry number             ;
2093: EE26         ;									HL = Address of entry number + 1        ;
2094: EE26 13                     INC    DE                   ;
2095: EE27 72                     LD     (HL),D               ;
2096: EE28 2B                     DEC    HL                   ;
2097: EE29 73                     LD     (HL),E               ;
2098: EE2A C9                     RET                         ;
2099: EE2B         ;--------------------------- Set Directory Entry ---------------------------;
2100: EE2B
2101: EE2B         ;--------------------------- Are we sill in the Directory ------------------;
2102: EE2B         ;Returns	:                                                               ;
2103: EE2B         ;			CY Set   if dirEntryIndex <= Directory Max Value                ;
2104: EE2B         ;			CY Reset if dirEntryIndex  > Directory Max Value                ;
2105: EE2B         ;			HL = (address of Index Value) + 1                               ;
2106: EE2B         ;			DE = Directory Index Value                                      ;
2107: EE2B             StillInDirectory:                      ;
2108: EE2B 2A 51 F5               LD     HL,(dirEntryIndex)   ;
2109: EE2E EB                     EX     DE,HL                ; DE = directory counter            ;
2110: EE2F 2A 1F F5               LD     HL,(caDirMaxValue)   ; HL = caDirMaxValue              	;
2111: EE32 7B                     LD     A,E                  ;
2112: EE33 96                     SUB    M                    ;
2113: EE34 23                     INC    HL                   ;
2114: EE35 7A                     LD     A,D                  ;
2115: EE36 9E                     SBC    A,(HL)               ; Set CY if dirEntryIndex           ;
2116: EE37 C9                     RET                         ;  <= Directory Max Value       ;
2117: EE38         ;--------------------------- Are we sill in the Directory ------------------;
2118: EE38
2119: EE38         ;=========================== Directory Utilities ===========================;
2120: EE38
2121: EE38         ;=========================== General   Utilities ===========================;
2122: EE38         ;--------------------------- Shift HL right by value in C -----------------;
2123: EE38         ;
2124: EE38         ; HL = Value to be shifted Right                                           ;
2125: EE38         ;  B = Amount to shift                                                     ;
2126: EE38             ShiftRightHLbyB:                      ;
2127: EE38 37                     SCF                         ; Set carry flag, expect LSBit = 1 ;
2128: EE39 CB 45                  BIT    0,L                  ; is LSB set?                      ;
2129: EE3B 20 01                  JR     NZ,ShiftRightHLbyB1  ; Skip if LSB set              ;
2130: EE3D 3F                     CCF                         ; else Clear Carry flag            ;
2131: EE3E             ShiftRightHLbyB1:                      ;
2132: EE3E CB 1C                  RR     H                    ; Shift thru CY                    ;
2133: EE40 CB 1D                  RR     L                    ; ditto                            ;
2134: EE42 10 F4                  DJNZ   ShiftRightHLbyB      ;
2135: EE44 C9                     RET                         ;
2136: EE45         ;
2137: EE45         ;--------------------------- Shift HL right by value in C -----------------;
2138: EE45         ;=========================== General   Utilities ===========================;
2139: EE45
2140: EE45         ;---------------
2141: EE45         ;---------------
2142: EE45         ;---------------
2143: EE45         ; return zero flag if at end of directory
2144: EE45         ; non zero if not at end (end of dir if dirEntryIndex = 0ffffh)
2145: EE45             EndOfDirectory:
2146: EE45 21 51 F5               LD     HL,dirEntryIndex
2147: EE48 7E                     LD     A,(HL)               ; may be 0ffh
2148: EE49 23                     INC    HL
2149: EE4A BE                     CP     M                    ; low(dirEntryIndex) = high(dirEntryIndex)?
2150: EE4B C0                     RET    NZ                   ; non zero returned if different
2151: EE4C         ; high and low the same, = 0ffh?
2152: EE4C 3C                     INC    A                    ; 0ffh becomes 00 if so
2153: EE4D C9                     RET
2154: EE4E         ;---------------
2155: EE4E         ;--------------------------- Read Directory Record -------------------------;
2156: EE4E         ; read a directory entry into the directory buffer                          ;
2157: EE4E             ReadDirRecord:                      ;
2158: EE4E CD D2 ED               CALL   SetDirDMA            ; System Assigned Buffer            ;
2159: EE51 CD DB ED               CALL   ReadBuffer           ; Go to BIOS for the read           ;
2160: EE54 C3 CD ED               JP     SetDataDMA           ; Restore DMA                       ;
2161: EE57         ;--------------------------- Read Directory Record -------------------------;
2162: EE57
2163: EE57         ;--------------------------- Read Directory --------------------------------;
2164: EE57         ; Read next directory entry, with C=true if initializing and setting CheckSum
2165: EE57             ReadDirectory:
2166: EE57 ED 5B 34 F5               LD     DE,(dpbDRM)          ; Number of Dir Entries-1
2167: EE5B 2A 51 F5               LD     HL,(dirEntryIndex)   ; Prior Directory Index
2168: EE5E 23                     INC    HL                   ; Increment the Index
2169: EE5F 22 51 F5               LD     (dirEntryIndex),HL   ; Save current directory index
2170: EE62 AF                     XOR    A                    ; Clear the CY flag
2171: EE63 ED 52                  SBC    HL,DE                ; Are we at end Of the directory
2172: EE65 20 04                  JR     NZ,ReadDirectory0    ;  No the process
2173: EE67 CD 0F EE               CALL   SetEndDirectory      ;  else we are done
2174: EE6A C9                     RET
2175: EE6B
2176: EE6B         ; Calculate the entry index Position in Buffer
2177: EE6B             ReadDirectory0:
2178: EE6B 3A 51 F5               LD     A,(dirEntryIndex)    ; Get the index
2179: EE6E E6 03                  AND    dirEntryMask         ; Determine Entry number in the buffer
2180: EE70 06 05                  LD     B,fcbShift           ; Shift value results in Record Size
2181: EE72             ReadDirectory1:
2182: EE72 87                     ADD    A,A
2183: EE73 10 FD                  DJNZ   ReadDirectory1
2184: EE75 32 50 F5               LD     (dirBlockIndex),A    ; Now save the Index into to buffer
2185: EE78 B7                     OR     A                    ; Is this the 1st entry?
2186: EE79 C0                     RET    NZ                   ;  return if not.
2187: EE7A
2188: EE7A C5                     PUSH   BC                   ; Save init Flag (CheckSum)
2189: EE7B CD 85 EE               CALL   SeekDir              ; Set up for Directory Read
2190: EE7E CD 4E EE               CALL   ReadDirRecord        ; Read the directory record
2191: EE81 C1                     POP    BC                   ; Recall initialization flag
2192: EE82 C3 D0 EE               JP     CheckSumUtility      ; checksum the directory elt
2193: EE85         ;---------
2194: EE85         ;--------------------------- Read Directory ---------------------------------;
2195: EE85         ;--------------------------- Seek Directory --------------------------------;
2196: EE85         ;seek the record containing the current dir entry                          ;
2197: EE85             SeekDir:                        ;
2198: EE85 2A 51 F5               LD     HL,(dirEntryIndex)   ; Directory Entry Index             ;
2199: EE88 06 02                  LD     B,dirEntryShift      ; 4 entries per record              ;
2200: EE8A CD 38 EE               CALL   ShiftRightHLbyB      ;
2201: EE8D 22 4E F5               LD     (absoluteCPMRecord),HL ;
2202: EE90 22 53 F5               LD     (dirRecord),HL       ; Save                              ;
2203: EE93 C3 96 EE               JP     Seek                 ;
2204: EE96         ;--------------------------- Seek Directory --------------------------------;
2205: EE96         ;--------------------------- Seek ------------------------------------------;
2206: EE96             Seek:                           ; seek                                          ;
2207: EE96 01 FF FF               LD     BC,0FFFFH            ; Initialize the track counter      ;
2208: EE99 2A 4E F5               LD     HL,(absoluteCPMRecord) ; Get the record in question        ;
2209: EE9C ED 5B 2D F5               LD     DE,(dpbSPT)          ; Get Sectors Per track             ;
2210: EEA0         ;
2211: EEA0             Seek0:                          ;
2212: EEA0 03                     INC    BC                   ; Divide the record                 ;
2213: EEA1 AF                     XOR    A                    ;  by the sectors per track         ;
2214: EEA2 ED 52                  SBC    HL,DE                ;
2215: EEA4 30 FA                  JR     NC,Seek0             ;  to get the gross track number    ;
2216: EEA6         ;
2217: EEA6         ;
2218: EEA6 19                     ADD    HL,DE                ; Gets the sector in the track      ;
2219: EEA7 E5                     PUSH   HL                   ; Save Index Sector                 ;
2220: EEA8         ;
2221: EEA8 DD 2A 21 F5               LD     IX,(caTrack)         ;
2222: EEAC DD 71 00               LD     (IX+0),C             ;
2223: EEAF DD 70 01               LD     (IX+1),B             ; Save the Gross Track              ;
2224: EEB2         ;
2225: EEB2 EB                     EX     DE,HL                ; Take the index from the record    ;
2226: EEB3 2A 4E F5               LD     HL,(absoluteCPMRecord) ;
2227: EEB6 AF                     XOR    A                    ;
2228: EEB7 ED 52                  SBC    HL,DE                ;  and you get the Block start      ;
2229: EEB9         ;
2230: EEB9 DD 2A 23 F5               LD     IX,(caSector)        ;
2231: EEBD DD 75 00               LD     (IX+0),L             ;
2232: EEC0 DD 74 01               LD     (IX+1),H             ; Save the Block Start              ;
2233: EEC3         ;
2234: EEC3 2A 3A F5               LD     HL,(dpbOFF)          ; Get directory Offset (tracks)		;
2235: EEC6 09                     ADD    HL,BC                ;  to add to the gross Track        ;
2236: EEC7 E5                     PUSH   HL                   ;  which yields the net or          ;
2237: EEC8 C1                     POP    BC                   ;  actual track for the record      ;
2238: EEC9 CD 1E F6               CALL   bcSettrk             ; Set the net (actual) track        ;
2239: EECC         ;
2240: EECC C1                     POP    BC                   ; Get the sector within the track   ;
2241: EECD C3 21 F6               JP     bcSetsec             ;  and set it for the seek          ;
2242: EED0         ;
2243: EED0         ;--------------------------- Seek ------------------------------------------;
2244: EED0         ;--------------------------- Check Sum Utility -----------------------------;
2245: EED0         ; At entry
2246: EED0         ;			C  = TRUE	-  Set the Checksum values in Vector
2247: EED0         ;			C <> TRUE	-  Validate Checksum value in Vector
2248: EED0
2249: EED0         ;/ NewCheckSum:
2250: EED0         ;/	LD		C,TRUE
2251: EED0         ;/
2252: EED0             CheckSumUtility:
2253: EED0 2A 38 F5               LD     HL,(dpbCKS)
2254: EED3 ED 5B 53 F5               LD     DE,(dirRecord)
2255: EED7 AF                     XOR    A
2256: EED8 ED 52                  SBC    HL,DE                ; Skip if past the Directory
2257: EEDA D8                     RET    C                    ;  Entry
2258: EEDB
2259: EEDB C5                     PUSH   BC                   ; Save New/Validate Flag
2260: EEDC
2261: EEDC         ; CheckSum = MOD( SUM(all bytes in The Record), 0FFH)
2262: EEDC             ComputeCheckSum:
2263: EEDC 06 80                  LD     B,cpmRecordSize
2264: EEDE 2A 25 F5               LD     HL,(caDirectoryDMA)
2265: EEE1 EE 00                  XOR
2266: EEE3             ComputeCheckSum1:
2267: EEE3 86                     ADD    A,(HL)
2268: EEE4 23                     INC    HL
2269: EEE5 10 FC                  DJNZ   ComputeCheckSum1
2270: EEE7         ; Checksum is in ACC
2271: EEE7
2272: EEE7 2A 29 F5               LD     HL,(caCheckSum)      ; Address of check sum vector
2273: EEEA ED 5B 53 F5               LD     DE,(dirRecord)       ; Index to this record
2274: EEEE 19                     ADD    HL,DE                ; Address of this record in vector
2275: EEEF C1                     POP    BC                   ; Retrieve New/Validate Flag
2276: EEF0 0C                     INC    C
2277: EEF1 CA FE EE               JP     Z,SetNewCheckSum     ; Set the Value if Flag was TRUE
2278: EEF4
2279: EEF4 BE                     CP     M                    ; Else we are checking the value
2280: EEF5 C8                     RET    Z                    ; Exit if OK
2281: EEF6         ; possible checksum error, are we beyond the end of the disk?
2282: EEF6 CD 2B EE               CALL   StillInDirectory
2283: EEF9 D0                     RET    NC                   ; OK, if not in the directory
2284: EEFA CD 35 ED               CALL   SetDiskReadOnly      ;  else the checksums don't match
2285: EEFD C9                     RET                         ;  Set disk RO before returning
2286: EEFE
2287: EEFE         ;initializing the checksum
2288: EEFE             SetNewCheckSum:
2289: EEFE 77                     LD     (HL),A
2290: EEFF C9                     RET
2291: EF00         ;------------------
2292: EF00         ;/ ;compute checksum for current directory buffer
2293: EF00         ;/ ComputeCheckSum:
2294: EF00         ;/	LD		C,cpmRecordSize					; size of directory buffer
2295: EF00         ;/	LD	HL,(caDirectoryDMA)					; current directory buffer
2296: EF00         ;/	XOR		A								; clear checksum value
2297: EF00         ;/ ComputeCheckSum0:
2298: EF00         ;/	ADD		A,(HL)
2299: EF00         ;/	INC		HL
2300: EF00         ;/	DEC		C								; cs=cs+buff(cpmRecordSize-C)
2301: EF00         ;/	JP	NZ,ComputeCheckSum0
2302: EF00         ;/	RET										; with checksum in A
2303: EF00         ;*****************************************************************
2304: EF00         ;--------------------------- Check Sum Utility -----------------------------;
2305: EF00
2306: EF00
2307: EF00         ;---------------------
2308: EF00         ;update variables from I/O in  fcb
2309: EF00             UpdateRecordVars:
2310: EF00 CD FA ED               CALL   GetFcbRecordDetails  ; DE => fcbRCIndex(RC) , HL => NEXT_RECORD
2311: EF03 3A 41 F5               LD     A,(seqReadFlag)
2312: EF06 4F                     LD     C,A                  ; =1 if sequential i/o
2313: EF07 3A 4C F5               LD     A,(currentFileRecord) ; get NEXT_RECORD
2314: EF0A 81                     ADD    A,C
2315: EF0B 77                     LD     (HL),A               ; fcb(NEXT_RECORD)=current File Record+seqReadFlag
2316: EF0C EB                     EX     DE,HL
2317: EF0D 3A 4A F5               LD     A,(fcbRecordCount)
2318: EF10 77                     LD     (HL),A               ; fcb(fcbRCIndex)=fcbRecordCount
2319: EF11 C9                     RET
2320: EF12         ;---------------------
2321: EF12         ;set file Attributes for current fcb
2322: EF12             SetAttributes:
2323: EF12 0E 0C                  LD     C,fcbExtIndex
2324: EF14 CD 27 F3               CALL   Search4DirElement    ; through file type
2325: EF17             SetAttributes1:
2326: EF17 CD 45 EE               CALL   EndOfDirectory
2327: EF1A C8                     RET    Z                    ; exit at end of dir
2328: EF1B 0E 00                  LD     C,0
2329: EF1D 1E 0C                  LD     E,fcbExtIndex        ;copy name
2330: EF1F CD E0 F3               CALL   CopyDir
2331: EF22 CD 3F F3               CALL   Search4NextDirElement
2332: EF25 C3 17 EF               JP     SetAttributes1
2333: EF28         ;
2334: EF28         ;*****************************************************************
2335: EF28
2336: EF28         ;*****************************************************************
2337: EF28         ;********************** File  Routines ***************************
2338: EF28         ;*****************************************************************
2339: EF28         ;open file
2340: EF28         ; IN  - (DE)	FCB Address
2341: EF28         ; OUT - (A)	Directory Code
2342: EF28         ;	0-3 = success ; 0FFH = File Not Found
2343: EF28             vOpenFile:                      ;
2344: EF28 CD A8 F2               CALL   ClearModuleNum       ; clear the module number
2345: EF2B CD B7 F2               CALL   Reselect             ; do we need to reselect disk?
2346: EF2E C3 E4 F2               JP     OpenFile
2347: EF31         ;ret ;jmp goback
2348: EF31         ;-----------------------------------------------------------------
2349: EF31         ;close file
2350: EF31             vCloseFile:                      ; func16: (16 - 10) Close File
2351: EF31 CD B7 F2               CALL   Reselect
2352: EF34 C3 92 F1               JP     CloseDirEntry
2353: EF37         ;-----------------------------------------------------------------
2354: EF37         ;search for first occurrence of a file
2355: EF37         ; In - (DE)	FCB Address
2356: EF37         ; OUT - (A)	Directory Code
2357: EF37         ;	0-3 = success ; 0FFH = File Not Found
2358: EF37             vFindFirst:                      ; func17: (17 - 11) Search for first
2359: EF37 0E 00                  LD     C,0                  ; length assuming '?' true
2360: EF39 2A C0 EA               LD     HL,(paramDE)
2361: EF3C 7E                     LD     A,(HL)
2362: EF3D FE 3F                  CP     QMARK                ; no reselect if ?
2363: EF3F CA 4A EF               JP     Z,QMarkSelect        ; skip reselect if so
2364: EF42
2365: EF42 CD A8 F2               CALL   ClearModuleNum       ; module number zeroed
2366: EF45 CD B7 F2               CALL   Reselect
2367: EF48 0E 0F                  LD     C,nameLength
2368: EF4A             QMarkSelect:                      ; qselect:
2369: EF4A CD 27 F3               CALL   Search4DirElement
2370: EF4D C3 CD F3               JP     CopyDirEntryToUser   ; copy directory entry to user
2371: EF50         ;-----------------------------------------------------------------
2372: EF50         ;search for next occurrence of a file name
2373: EF50         ; OUT - (A)	Directory Code
2374: EF50         ;	0-3 = success ; 0FFH = File Not Found
2375: EF50             vFindNext:                      ; func18: (18 - 12) Search for next
2376: EF50 2A 44 F5               LD     HL,(searchAddress)
2377: EF53 22 C0 EA               LD     (paramDE),HL
2378: EF56 CD B7 F2               CALL   Reselect
2379: EF59 CD 3F F3               CALL   Search4NextDirElement
2380: EF5C C3 CD F3               JP     CopyDirEntryToUser   ; copy directory entry to user
2381: EF5F         ;-----------------------------------------------------------------
2382: EF5F         ;search for next occurrence of a file name
2383: EF5F         ; OUT - (A)	Directory Code
2384: EF5F         ;delete a file
2385: EF5F             vDeleteFile:                      ; func18: (19 - 13) Delete File
2386: EF5F CD B7 F2               CALL   Reselect
2387: EF62 CD 70 F1               CALL   DeleteFile
2388: EF65 C3 A1 F2               JP     DirLocationToReturnLoc
2389: EF68         ;-----------------------------------------------------------------
2390: EF68         ;read sequential
2391: EF68         ;IN  - (DE) FCB address
2392: EF68         ;OUT - (A) 00 = success and data available. else no read and no data
2393: EF68             vReadSeq:                       ; func20: (20 - 14) read sequential
2394: EF68 CD B7 F2               CALL   Reselect
2395: EF6B CD AA EF               CALL   ReadSeq
2396: EF6E C9                     RET
2397: EF6F         ;-----------------------------------------------------------------
2398: EF6F         ;write sequential
2399: EF6F         ;IN  - (DE) FCB address
2400: EF6F         ;OUT - (A) 00 = success and data available. else no read and no data
2401: EF6F             vWriteSeq:                      ; func21 (21 - 15) write sequention
2402: EF6F CD B7 F2               CALL   Reselect
2403: EF72 CD ED EF               CALL   DiskWriteSeq
2404: EF75 C9                     RET
2405: EF76         ;-----------------------------------------------------------------
2406: EF76         ; Make file
2407: EF76         ; In - (DE)	FCB Address
2408: EF76         ; OUT - (A)	Directory Code
2409: EF76         ;	0-3 = success ; 0FFH = File Not Found
2410: EF76             vMakeFile:                      ; func22 (22 - 16) Make file
2411: EF76 CD A8 F2               CALL   ClearModuleNum       ; set S2 to Zero
2412: EF79 CD B7 F2               CALL   Reselect
2413: EF7C C3 3A F1               JP     MakeNewFile
2414: EF7F         ;-----------------------------------------------------------------
2415: EF7F         ; Rename file
2416: EF7F         ; In - (DE)	FCB Address
2417: EF7F         ; OUT - (A)	Directory Code
2418: EF7F         ;	0-3 = success ; 0FFH = File Not Found
2419: EF7F             vRenameFile:                      ; func23 (23 - 17) Rename File
2420: EF7F CD B7 F2               CALL   Reselect
2421: EF82 CD 15 F1               CALL   Rename
2422: EF85 C3 A1 F2               JP     DirLocationToReturnLoc
2423: EF88         ;-----------------------------------------------------------------
2424: EF88         ;-----------------------------------------------------------------
2425: EF88         ;*****************************************************************
2426: EF88         ;-----------------------------------------------------------------
2427: EF88         ;check current directory element for read/only status
2428: EF88             CheckRODirectory:
2429: EF88 CD 16 EE               CALL   GetDirElementAddress ; address of element
2430: EF8B         ;	JMP	CheckROFile
2431: EF8B         ;------------
2432: EF8B         ;check current buff(dptr) or fcb(0) for r/o status
2433: EF8B             CheckROFile:
2434: EF8B 11 09 00               LD     DE,fcbROfileIndex
2435: EF8E 19                     ADD    HL,DE                ; offset to ro bit
2436: EF8F 7E                     LD     A,(HL)
2437: EF90 17                     RLA
2438: EF91 D0                     RET    NC                   ; return if not set
2439: EF92 C3 92 F4               JP     errReadOnlyFile      ; exit to read only disk message
2440: EF95         ;-----------------------------------------------------------------
2441: EF95         ;check for write protected disk
2442: EF95             CheckWrite:
2443: EF95 CD 9C EF               CALL   DoNotWrite
2444: EF98 C8                     RET    Z                    ; ok to write if not rodsk
2445: EF99 C3 8C F4               JP     errReadOnlyDisk      ; read only disk error
2446: EF9C         ;-----------------------------------------------------------------
2447: EF9C         ;return true if dir checksum difference occurred
2448: EF9C             DoNotWrite:
2449: EF9C 2A 19 F5               LD     HL,(readOnlyVector)
2450: EF9F 3A 17 F5               LD     A,(currentDisk)
2451: EFA2 4F                     LD     C,A
2452: EFA3 CD 3A F4               CALL   ShiftRightHLbyC
2453: EFA6 7D                     LD     A,L
2454: EFA7 E6 1B                  AND    1BH                  ; 01BH
2455: EFA9 C9                     RET                         ; non zero if nowrite
2456: EFAA         ;-----------------------------------------------------------------
2457: EFAA         ;sequential disk read operation
2458: EFAA             ReadSeq:
2459: EFAA 3E 01                  LD     A,1
2460: EFAC 32 41 F5               LD     (seqReadFlag),A      ; set flag for seqential read
2461: EFAF         ;---
2462: EFAF         ; read the disk
2463: EFAF         ; read the next record from the current fcb
2464: EFAF             DiskRead:
2465: EFAF 3E FF                  LD     A,TRUE
2466: EFB1 32 3F F5               LD     (readModeFlag),A     ; read mode flag = true (OpenNextExt)
2467: EFB4
2468: EFB4 CD E3 ED               CALL   SetRecordVars        ; sets current File Record, fcbRecordCount and EXM
2469: EFB7 3A 4C F5               LD     A,(currentFileRecord)
2470: EFBA 21 4A F5               LD     HL,fcbRecordCount
2471: EFBD BE                     CP     M                    ; current File Record-fcbRecordCount
2472: EFBE         ; skip if  current File Record < fcbRecordCount
2473: EFBE DA D4 EF               JP     C,RecordOK
2474: EFC1         ; not enough records in the extent
2475: EFC1 FE 80                  CP     RecordsPerExtent     ; current File Record = 128?   *** Records in an Extent
2476: EFC3 C2 EA EF               JP     NZ,DiskEOF           ; skip if current File Record<>128
2477: EFC6 CD B2 F0               CALL   OpenNextExt          ; go to next extent if so
2478: EFC9 AF                     XOR    A
2479: EFCA 32 4C F5               LD     (currentFileRecord),A ; current File Record=00
2480: EFCD         ; now check for open ok
2481: EFCD 3A C2 EA               LD     A,(exitParameterByte)
2482: EFD0 B7                     OR     A
2483: EFD1 C2 EA EF               JP     NZ,DiskEOF
2484: EFD4         ; stop at eof
2485: EFD4         ; arrive with fcb addressing a record to read
2486: EFD4             RecordOK:                       ; recordok:
2487: EFD4 CD 75 F2               CALL   GetBlockNumber       ; save it in Absolute CPM Record
2488: EFD7 CD 82 F2               CALL   IsAllocated          ; Absolute CPM Record=0000?
2489: EFDA CA EA EF               JP     Z,DiskEOF            ; get out if not allocated already
2490: EFDD
2491: EFDD CD 88 F2               CALL   SetActualRecordAdd   ; Absolute CPM Record now a record value
2492: EFE0 CD 96 EE               CALL   Seek                 ; to proper track,sector
2493: EFE3 CD DB ED               CALL   ReadBuffer           ; to dma address
2494: EFE6 CD 00 EF               CALL   UpdateRecordVars     ; update variables from I/O in  fcb
2495: EFE9 C9                     RET
2496: EFEA             DiskEOF:                        ; diskeof:
2497: EFEA C3 B6 F3               JP     SetLowReturnTo1      ; exitParameterByte = 1
2498: EFED         ;ret
2499: EFED         ;-----------------------------------------------------------------
2500: EFED         ;sequential disk write
2501: EFED             DiskWriteSeq:
2502: EFED 3E 01                  LD     A,1
2503: EFEF 32 41 F5               LD     (seqReadFlag),A
2504: EFF2         ;--------
2505: EFF2         ;disk write
2506: EFF2             DiskWrite:
2507: EFF2 3E 00                  LD     A,FALSE
2508: EFF4 32 3F F5               LD     (readModeFlag),A
2509: EFF7         ; write record to currently selected file
2510: EFF7 CD 95 EF               CALL   CheckWrite           ; in case write protected
2511: EFFA 2A C0 EA               LD     HL,(paramDE)         ; HL = .fcb(0)
2512: EFFD CD 8B EF               CALL   CheckROFile          ; may be a read-only file
2513: F000 CD E3 ED               CALL   SetRecordVars        ; set local Record parameters
2514: F003 3A 4C F5               LD     A,(currentFileRecord)
2515: F006 FE 80                  CP     highestRecordNumber+1 ; Still in the same extent?
2516: F008 DA 0F F0               JP     C,DiskWrite1         ; skip if in the same Extent
2517: F00B CD B6 F3               CALL   SetLowReturnTo1
2518: F00E C9                     RET                         ; Exit ???????????
2519: F00F
2520: F00F         ; can write the next record, so continue
2521: F00F             DiskWrite1:
2522: F00F CD 75 F2               CALL   GetBlockNumber       ; sets up actual block number
2523: F012 CD 82 F2               CALL   IsAllocated
2524: F015 0E 00                  LD     C,WriteAllocated     ; assume a normal write operation for WriteBuffer
2525: F017 C2 62 F0               JP     NZ,DiskWrite3
2526: F01A         ; not allocated -
2527: F01A         ; the argument to getblock is the starting position for the disk search
2528: F01A         ; and should be the last allocated block for this file,
2529: F01A         ; or the value 0 if no space has been allocated
2530: F01A
2531: F01A CD F5 F3               CALL   GetDiskMapIndex      ; return with Disk Map index in Acc
2532: F01D 32 42 F5               LD     (diskMapIndex),A     ; save for later
2533: F020 01 00 00               LD     BC,0000h             ; may use block zero
2534: F023 B7                     OR     A
2535: F024 CA 2E F0               JP     Z,FirstBlock         ; skip if no previous block
2536: F027         ; previous block exists
2537: F027 4F                     LD     C,A
2538: F028 0B                     DEC    BC                   ; previous block # in BC
2539: F029 CD 15 F4               CALL   GetDiskMapValue      ; previous block # to HL
2540: F02C 44                     LD     B,H
2541: F02D 4D                     LD     C,L                  ; BC=prev block#
2542: F02E         ; BC = 0000, or previous block #
2543: F02E             FirstBlock:
2544: F02E CD 3B F2               CALL   GetClosestBlock      ; block # to HL
2545: F031         ; arrive here with block# or zero
2546: F031 7D                     LD     A,L
2547: F032 B4                     OR     H
2548: F033 C2 3C F0               JP     NZ,BlockOK
2549: F036         ; cannot find a block to allocate
2550: F036 3E 02                  LD     A,2
2551: F038 32 C2 EA               LD     (exitParameterByte),A
2552: F03B C9                     RET                         ; exitParameterByte=2
2553: F03C
2554: F03C             BlockOK:
2555: F03C 22 4E F5               LD     (absoluteCPMRecord),HL ; allocated block number is in HL
2556: F03F EB                     EX     DE,HL                ; block number to DE
2557: F040 2A C0 EA               LD     HL,(paramDE)
2558: F043 01 10 00               LD     BC,fcbDiskMapIndex
2559: F046 09                     ADD    HL,BC                ; HL=.fcb(fcbDiskMapIndex)
2560: F047 3A 46 F5               LD     A,(byteAllocationFlag)
2561: F04A B7                     OR     A                    ; set flags for byteAllocationFlag byte dm
2562: F04B 3A 42 F5               LD     A,(diskMapIndex)     ; recall dm index
2563: F04E CA 58 F0               JP     Z,Allocate16Bit      ; skip if allocating word
2564: F051         ; else allocate using a byte value
2565: F051 CD 2E F4               CALL   AddAtoHL
2566: F054 73                     LD     (HL),E               ; byteAllocationFlag byte alloc
2567: F055 C3 60 F0               JP     DiskWrite2           ; to continue
2568: F058
2569: F058             Allocate16Bit:                      ; allocate a word value
2570: F058
2571: F058 4F                     LD     C,A
2572: F059 06 00                  LD     B,0                  ; double(diskMapIndex)
2573: F05B 09                     ADD    HL,BC
2574: F05C 09                     ADD    HL,BC                ; HL=.fcb(diskMapIndex*2)
2575: F05D 72                     LD     (HL),D
2576: F05E 23                     INC    HL
2577: F05F 73                     LD     (HL),E               ; double wd
2578: F060         ; disk write to previously unallocated block
2579: F060             DiskWrite2:
2580: F060 0E 02                  LD     C,WriteCleanBuffer   ; marked as unallocated write
2581: F062
2582: F062         ; continue the write operation of no allocation error
2583: F062         ; C = 0 if normal write, 1 if directory write, 2 if to prev unalloc block
2584: F062
2585: F062             DiskWrite3:
2586: F062 3A C2 EA               LD     A,(exitParameterByte)
2587: F065 B7                     OR     A
2588: F066 C0                     RET    NZ                   ; stop if non zero returned value
2589: F067
2590: F067 C5                     PUSH   BC                   ; save write flag ( in C see above)
2591: F068 CD 88 F2               CALL   SetActualRecordAdd   ; Absolute CPM Record set to actual record number
2592: F06B CD 96 EE               CALL   Seek                 ; to proper file position
2593: F06E C1                     POP    BC                   ; get write flag
2594: F06F C5                     PUSH   BC                   ; restore/save write flag (C=2 if new block)
2595: F070 CD 25 F2               CALL   WriteBuffer          ; written to disk
2596: F073 C1                     POP    BC                   ; C = 2 if a new block was allocated, 0 if not
2597: F074         ; increment record count if fcbRecordCount<=current File Record
2598: F074 3A 4C F5               LD     A,(currentFileRecord)
2599: F077 21 4A F5               LD     HL,fcbRecordCount
2600: F07A BE                     CP     M                    ; current File Record-fcbRecordCount
2601: F07B DA 82 F0               JP     C,DiskWrite4
2602: F07E         ; fcbRecordCount <= current File Record
2603: F07E 77                     LD     (HL),A
2604: F07F 34                     INC    M                    ; fcbRecordCount = current File Record+1
2605: F080 0E 02                  LD     C,2                  ; mark as record count incremented
2606: F082             DiskWrite4:
2607: F082         ; A has current File Record, C=2 if new block or new record#
2608: F082 0D                     DEC    C
2609: F083 0D                     DEC    C
2610: F084 C2 8F F0               JP     NZ,DiskWrite5
2611: F087 F5                     PUSH   AF                   ; save current File Record value
2612: F088 CD AE F2               CALL   GetModuleNum         ; HL=.fcb(fcbS2Index), A=fcb(fcbS2Index)
2613: F08B         ; reset the file write flag to mark as written fcb
2614: F08B E6 7F                  AND    7FH                  ; not writeFlagMask
2615: F08D 77                     LD     (HL),A               ; fcb(fcbS2Index) = fcb(fcbS2Index) and 7fh
2616: F08E F1                     POP    AF                   ; restore current File Record
2617: F08F             DiskWrite5:
2618: F08F         ; check for end of extent, if found attempt to open next extent in preparation for next write
2619: F08F FE 7F                  CP     highestRecordNumber  ; current File Record=highestRecordNumber?
2620: F091 C2 AF F0               JP     NZ,DiskWrite7        ; skip if not
2621: F094         ; may be random access write, if so we are done
2622: F094 3A 41 F5               LD     A,(seqReadFlag)
2623: F097 B7                     OR     A
2624: F098 CA AF F0               JP     Z,DiskWrite7         ; skip next extent open op
2625: F09B         ; update current fcb before going to next extent
2626: F09B CD 00 EF               CALL   UpdateRecordVars     ;update variables from I/O in  fcb
2627: F09E CD B2 F0               CALL   OpenNextExt          ; readModeFlag=false
2628: F0A1         ; current File Record remains at highestRecordNumber causing eof if no more directory space is available
2629: F0A1 21 C2 EA               LD     HL,exitParameterByte
2630: F0A4 7E                     LD     A,(HL)
2631: F0A5 B7                     OR     A
2632: F0A6 C2 AD F0               JP     NZ,DiskWrite6        ; no space
2633: F0A9         ; space available, set current File Record=255
2634: F0A9 3D                     DEC    A
2635: F0AA 32 4C F5               LD     (currentFileRecord),A ; goes to 00 next time
2636: F0AD             DiskWrite6:
2637: F0AD 36 00                  LD     (HL),0               ; exitParameterByte = 00 for returned value
2638: F0AF             DiskWrite7:
2639: F0AF C3 00 EF               JP     UpdateRecordVars     ; update variables from I/O in  fcb
2640: F0B2         ;ret
2641: F0B2         ;-----------------------------------------------------------------
2642: F0B2         ;close the current extent  and open the next one if possible.
2643: F0B2         ;readModeFlag is true if in read mode
2644: F0B2             OpenNextExt:                      ; open$reel
2645: F0B2 AF                     XOR    A
2646: F0B3 32 3E F5               LD     (fcbCopiedFlag),A    ; set true if actually copied
2647: F0B6 CD 92 F1               CALL   CloseDirEntry        ; close current extent
2648: F0B9         ; exitParameterByte remains at enddir if we cannot open the next ext
2649: F0B9 CD 45 EE               CALL   EndOfDirectory
2650: F0BC C8                     RET    Z                    ; return if end
2651: F0BD 2A C0 EA               LD     HL,(paramDE)         ; increment extent number
2652: F0C0 01 0C 00               LD     BC,fcbExtIndex
2653: F0C3 09                     ADD    HL,BC                ; HL=.fcb(fcbExtIndex)
2654: F0C4 7E                     LD     A,(HL)
2655: F0C5 3C                     INC    A
2656: F0C6 E6 1F                  AND    maxExtValue
2657: F0C8 77                     LD     (HL),A               ; fcb(fcbExtIndex)=++1
2658: F0C9 CA DB F0               JP     Z,OpenNextModule     ; move to next module if zero
2659: F0CC         ; may be in the same extent group
2660: F0CC 47                     LD     B,A
2661: F0CD 3A 31 F5               LD     A,(dpbEXM)
2662: F0D0 A0                     AND    B
2663: F0D1         ; if result is zero, then not in the same group
2664: F0D1 21 3E F5               LD     HL,fcbCopiedFlag     ; true if the fcb was copied to directory
2665: F0D4 A6                     AND    M                    ; produces a 00 in accumulator if not written
2666: F0D5 CA E6 F0               JP     Z,OpenNextExt1       ; go to next physical extent
2667: F0D8         ; result is non zero, so we must be in same logical ext
2668: F0D8 C3 04 F1               JP     OpenNextExt2         ; to copy fcb information
2669: F0DB         ; extent number overflow, go to next module
2670: F0DB
2671: F0DB             OpenNextModule:
2672: F0DB 01 02 00               LD     BC,fcbS2Index-fcbExtIndex ;RATS
2673: F0DE 09                     ADD    HL,BC                ; HL=.fcb(fcbS2Index)
2674: F0DF 34                     INC    M                    ; fcb(fcbS2Index)=++1
2675: F0E0         ; module number incremented, check for overflow
2676: F0E0 7E                     LD     A,(HL)
2677: F0E1 E6 0F                  AND    moduleMask           ; mask high order bits
2678: F0E3 CA 0F F1               JP     Z,OpenNextExtError   ; cannot overflow to zero
2679: F0E6         ; otherwise, ok to continue with new module
2680: F0E6
2681: F0E6             OpenNextExt1:
2682: F0E6 0E 0F                  LD     C,nameLength
2683: F0E8 CD 27 F3               CALL   Search4DirElement    ; next extent found?
2684: F0EB CD 45 EE               CALL   EndOfDirectory
2685: F0EE C2 04 F1               JP     NZ,OpenNextExt2
2686: F0F1         ; end of file encountered
2687: F0F1 3A 3F F5               LD     A,(readModeFlag)
2688: F0F4 3C                     INC    A                    ; 0ffh becomes 00 if read
2689: F0F5 CA 0F F1               JP     Z,OpenNextExtError   ; sets exitParameterByte = 1
2690: F0F8         ; try to extend the current file
2691: F0F8 CD 3A F1               CALL   MakeNewFile
2692: F0FB         ; cannot be end of directory
2693: F0FB CD 45 EE               CALL   EndOfDirectory
2694: F0FE CA 0F F1               JP     Z,OpenNextExtError   ; with exitParameterByte = 1
2695: F101 C3 07 F1               JP     OpenNextExt3
2696: F104
2697: F104         ; not end of file, open
2698: F104             OpenNextExt2:
2699: F104 CD ED F2               CALL   OpenFileCopyFCB
2700: F107             OpenNextExt3:
2701: F107 CD E3 ED               CALL   SetRecordVars        ; Set Record parameters
2702: F10A AF                     XOR    A
2703: F10B 32 C2 EA               LD     (exitParameterByte),A ; exitParameterByte = 0
2704: F10E C9                     RET                         ; with exitParameterByte = 0
2705: F10F
2706: F10F         ; cannot move to next extent of this file
2707: F10F             OpenNextExtError:
2708: F10F CD B6 F3               CALL   SetLowReturnTo1      ; exitParameterByte = 1
2709: F112 C3 AF F3               JP     SetFileWriteFlag     ; ensure that it will not be closed
2710: F115         ;-----------------------------------------------------------------
2711: F115         ;rename the file described by the first half of the currently addressed FCB.
2712: F115         ;the new name is contained in the last half of the FCB. The file name and type
2713: F115         ;are changed, but the reel number is ignored.  the user number is identical
2714: F115             Rename:
2715: F115 CD 95 EF               CALL   CheckWrite           ; may be write protected
2716: F118         ; search up to the extent field
2717: F118 0E 0C                  LD     C,fcbExtIndex        ; extent number field index
2718: F11A CD 27 F3               CALL   Search4DirElement
2719: F11D         ; copy position 0
2720: F11D 2A C0 EA               LD     HL,(paramDE)
2721: F120 7E                     LD     A,(HL)               ; HL=.fcb(0), A=fcb(0)
2722: F121 11 10 00               LD     DE,fcbDiskMapIndex
2723: F124 19                     ADD    HL,DE                ; HL=.fcb(fcbDiskMapIndex)
2724: F125 77                     LD     (HL),A               ; fcb(fcbDiskMapIndex)=fcb(0)
2725: F126         ; assume the same disk drive for new named file
2726: F126             Rename1:
2727: F126 CD 45 EE               CALL   EndOfDirectory
2728: F129 C8                     RET    Z                    ; stop at end of dir
2729: F12A         ; not end of directory, rename next element
2730: F12A CD 88 EF               CALL   CheckRODirectory     ; may be read-only file
2731: F12D 0E 10                  LD     C,fcbDiskMapIndex
2732: F12F 1E 0C                  LD     E,fcbExtIndex
2733: F131 CD E0 F3               CALL   CopyDir
2734: F134         ; element renamed, move to next
2735: F134 CD 3F F3               CALL   Search4NextDirElement
2736: F137 C3 26 F1               JP     Rename1
2737: F13A         ;-----------------------------------------------------------------
2738: F13A         ;create a new file by creating a directory entry then opening the file
2739: F13A             MakeNewFile:
2740: F13A CD 95 EF               CALL   CheckWrite           ; may be write protected
2741: F13D 2A C0 EA               LD     HL,(paramDE)
2742: F140 E5                     PUSH   HL                   ; save fcb address, look for e5
2743: F141 21 18 F5               LD     HL,emptyFCB
2744: F144 22 C0 EA               LD     (paramDE),HL         ; paramDE = .empty
2745: F147 0E 01                  LD     C,1
2746: F149 CD 27 F3               CALL   Search4DirElement    ; length 1 match on empty entry
2747: F14C CD 45 EE               CALL   EndOfDirectory       ; zero flag set if no space
2748: F14F E1                     POP    HL                   ; recall paramDE address
2749: F150 22 C0 EA               LD     (paramDE),HL         ; in case we return here
2750: F153 C8                     RET    Z                    ; return with error condition 255 if not found
2751: F154 EB                     EX     DE,HL                ; DE = paramDE address
2752: F155         ; clear the remainder of the fcb
2753: F155 21 0F 00               LD     HL,nameLength
2754: F158 19                     ADD    HL,DE                ; HL=.fcb(nameLength)
2755: F159 0E 11                  LD     C,fcbLength-nameLength ; number of bytes to fill
2756: F15B AF                     XOR    A                    ; clear accumulator to 00 for fill
2757: F15C             MakeNewFile1:
2758: F15C 77                     LD     (HL),A
2759: F15D 23                     INC    HL
2760: F15E 0D                     DEC    C
2761: F15F C2 5C F1               JP     NZ,MakeNewFile1
2762: F162 21 0D 00               LD     HL,fcbS1Index
2763: F165 19                     ADD    HL,DE                ; HL = .fcb(fcbS1Index)
2764: F166 77                     LD     (HL),A               ; fcb(fcbS1Index) = 0
2765: F167 CD 22 EE               CALL   SetDirectoryEntry    ; may have extended the directory
2766: F16A         ; now copy entry to the directory
2767: F16A CD D9 F3               CALL   CopyFCB
2768: F16D         ; and set the file write flag to "1"
2769: F16D C3 AF F3               JP     SetFileWriteFlag
2770: F170         ;-----------------------------------------------------------------
2771: F170         ;delete the currently addressed file
2772: F170             DeleteFile:
2773: F170 CD 95 EF               CALL   CheckWrite           ; write protected ?
2774: F173 0E 0C                  LD     C,fcbExtIndex        ; extent number field
2775: F175 CD 27 F3               CALL   Search4DirElement    ; search through file type
2776: F178             DeleteFile1:
2777: F178         ; loop while directory matches
2778: F178 CD 45 EE               CALL   EndOfDirectory
2779: F17B C8                     RET    Z                    ; exit if end
2780: F17C         ; set each non zero disk map entry to 0 in the allocation vector
2781: F17C CD 88 EF               CALL   CheckRODirectory     ; ro disk error if found
2782: F17F CD 16 EE               CALL   GetDirElementAddress ; HL=.buff(dptr)
2783: F182 36 E5                  LD     (HL),emptyDir
2784: F184 0E 00                  LD     C,0
2785: F186 CD 4C ED               CALL   ScanDiskMap          ; alloc elts set to 0
2786: F189 CD 15 F2               CALL   WriteDir             ; write the directory
2787: F18C CD 3F F3               CALL   Search4NextDirElement ; to next element
2788: F18F C3 78 F1               JP     DeleteFile1          ; for another record
2789: F192         ;-----------------------------------------------------------------
2790: F192         ;locate the directory element and re-write it
2791: F192             CloseDirEntry:
2792: F192 AF                     XOR    A
2793: F193 32 C2 EA               LD     (exitParameterByte),A
2794: F196 CD 9C EF               CALL   DoNotWrite           ; return TRUE (0) if checksum change
2795: F199 C0                     RET    NZ                   ; skip close if r/o disk
2796: F19A         ; check file write flag - 0 indicates written
2797: F19A CD AE F2               CALL   GetModuleNum         ; fcb(fcbS2Index) in A
2798: F19D E6 80                  AND    writeFlagMask
2799: F19F C0                     RET    NZ                   ; return if bit remains set
2800: F1A0 0E 0F                  LD     C,nameLength
2801: F1A2 CD 27 F3               CALL   Search4DirElement    ; locate file
2802: F1A5 CD 45 EE               CALL   EndOfDirectory
2803: F1A8 C8                     RET    Z                    ; return if not found
2804: F1A9         ; merge the disk map at paramDE with that at buff(dptr)
2805: F1A9 01 10 00               LD     BC,fcbDiskMapIndex
2806: F1AC CD 16 EE               CALL   GetDirElementAddress
2807: F1AF 09                     ADD    HL,BC
2808: F1B0 EB                     EX     DE,HL                ; DE is .buff(dptr+16)
2809: F1B1 2A C0 EA               LD     HL,(paramDE)
2810: F1B4 09                     ADD    HL,BC                ; DE=.buff(dptr+16), HL=.fcb(16)
2811: F1B5 0E 10                  LD     C,(fcbLength-fcbDiskMapIndex) ; length of  byte Allocation Map
2812: F1B7             CloseDirEntry1:
2813: F1B7 3A 46 F5               LD     A,(byteAllocationFlag)
2814: F1BA B7                     OR     A
2815: F1BB CA D2 F1               JP     Z,CloseDirEntry4     ; skip to double
2816: F1BE         ; this is a  byte map
2817: F1BE         ; if fcb(i) = 0 then fcb(i) = buff(i)
2818: F1BE         ; if buff(i) = 0 then buff(i) = fcb(i)
2819: F1BE         ; if fcb(i) <> buff(i) then error
2820: F1BE 7E                     LD     A,(HL)
2821: F1BF B7                     OR     A
2822: F1C0 1A                     LD     A,(DE)
2823: F1C1 C2 C5 F1               JP     NZ,CloseDirEntry2
2824: F1C4         ; fcb(i) = 0
2825: F1C4 77                     LD     (HL),A               ; fcb(i) = buff(i)
2826: F1C5             CloseDirEntry2:
2827: F1C5 B7                     OR     A
2828: F1C6 C2 CB F1               JP     NZ,CloseDirEntry3
2829: F1C9         ; buff(i) = 0
2830: F1C9 7E                     LD     A,(HL)
2831: F1CA 12                     LD     (DE),AE              ; buff(i)=fcb(i)
2832: F1CB             CloseDirEntry3:
2833: F1CB BE                     CP     M
2834: F1CC C2 0A F2               JP     NZ,CloseDirEntryError ; fcb(i) = buff(i)?
2835: F1CF C3 E7 F1               JP     CloseDirEntry5       ; if merge ok
2836: F1D2
2837: F1D2         ; this is a double byte merge operation
2838: F1D2             CloseDirEntry4:
2839: F1D2 CD 2D F2               CALL   Merge                ; buff = fcb if buff 0000
2840: F1D5 EB                     EX     DE,HL
2841: F1D6 CD 2D F2               CALL   Merge
2842: F1D9 EB                     EX     DE,HL                ; fcb = buff if fcb 0000
2843: F1DA         ; they should be identical at this point
2844: F1DA 1A                     LD     A,(DE)
2845: F1DB BE                     CP     M
2846: F1DC C2 0A F2               JP     NZ,CloseDirEntryError ; low same?
2847: F1DF 13                     INC    DE
2848: F1E0 23                     INC    HL                   ; to high byte
2849: F1E1 1A                     LD     A,(DE)
2850: F1E2 BE                     CP     M
2851: F1E3 C2 0A F2               JP     NZ,CloseDirEntryError ; high same?
2852: F1E6         ;	merge operation ok for this pair
2853: F1E6 0D                     DEC    C                    ; extra count for double byte
2854: F1E7             CloseDirEntry5:
2855: F1E7 13                     INC    DE
2856: F1E8 23                     INC    HL                   ; to next byte position
2857: F1E9 0D                     DEC    C
2858: F1EA C2 B7 F1               JP     NZ,CloseDirEntry1    ; for more
2859: F1ED         ; end of disk map merge, check record count DE = .buff(dptr)+32, HL = .fcb(32)
2860: F1ED 01 EC FF               LD     BC,-(fcbLength-fcbExtIndex) ;RATS
2861: F1F0 09                     ADD    HL,BC
2862: F1F1 EB                     EX     DE,HL
2863: F1F2 09                     ADD    HL,BC
2864: F1F3         ; DE = .fcb(fcbExtIndex), HL = .buff(dptr+fcbExtIndex)
2865: F1F3 1A                     LD     A,(DE)               ; current user extent number
2866: F1F4         ; if fcb(ext) >= buff(fcb) then	buff(ext) := fcb(ext), buff(rec) := fcb(rec)
2867: F1F4 BE                     CP     M
2868: F1F5 DA 01 F2               JP     C,CloseDirEntryEnd
2869: F1F8         ; fcb extent number >= dir extent number
2870: F1F8 77                     LD     (HL),A               ; buff(ext) = fcb(ext)
2871: F1F9         ; update directory record count field
2872: F1F9 01 03 00               LD     BC,fcbRCIndex-fcbExtIndex ;RATS
2873: F1FC 09                     ADD    HL,BC
2874: F1FD EB                     EX     DE,HL
2875: F1FE 09                     ADD    HL,BC
2876: F1FF         ; DE=.buff(fcbRCIndex), HL=.fcb(fcbRCIndex)
2877: F1FF 7E                     LD     A,(HL)
2878: F200 12                     LD     (DE),AE              ; buff(fcbRCIndex)=fcb(fcbRCIndex)
2879: F201             CloseDirEntryEnd:
2880: F201 3E FF                  LD     A,TRUE
2881: F203 32 3E F5               LD     (fcbCopiedFlag),A    ; mark as copied
2882: F206 CD 0F F2               CALL   SeekCopy             ; ok to "WriteDir" here - 1.4 compat
2883: F209 C9                     RET
2884: F20A
2885: F20A         ; elements did not merge correctly
2886: F20A             CloseDirEntryError:
2887: F20A 21 C2 EA               LD     HL,exitParameterByte
2888: F20D 35                     DEC    M                    ; =255 non zero flag set
2889: F20E C9                     RET
2890: F20F         ;-----------------------------------------------------------------
2891: F20F         ;enter from CloseDirEntry to seek and copy current element
2892: F20F             SeekCopy:
2893: F20F CD 85 EE               CALL   SeekDir              ; to the directory element
2894: F212 C3 15 F2               JP     WriteDir             ; write the directory element
2895: F215         ;ret
2896: F215         ;-----------------------------------------------------------------
2897: F215         ;write the current directory entry, set checksum
2898: F215             WriteDir:
2899: F215         ;	CALL	NewCheckSum						; initialize entry
2900: F215 0E FF                  LD     C,TRUE
2901: F217 CD D0 EE               CALL   CheckSumUtility
2902: F21A
2903: F21A CD D2 ED               CALL   SetDirDMA            ; directory dma
2904: F21D 0E 01                  LD     C,1                  ; indicates a write directory operation
2905: F21F CD 25 F2               CALL   WriteBuffer          ; write the buffer
2906: F222 C3 CD ED               JP     SetDataDMA           ; to data dma address
2907: F225         ;ret
2908: F225         ;-----------------------------------------------------------------
2909: F225         ;write buffer and check condition
2910: F225         ;write type (wrtype) is in register C
2911: F225         ;wrtype = 0 => normal write operation		WriteAllocated
2912: F225         ;wrtype = 1 => directory write operation	WriteDirectory
2913: F225         ;wrtype = 2 => start of new block			WriteCleanBuffer
2914: F225             WriteBuffer:
2915: F225 CD 2A F6               CALL   bcWrite              ; current drive, track, sector, dma
2916: F228 B7                     OR     A
2917: F229 C2 AB F4               JP     NZ,erPermanentNoWait ; error if not 00
2918: F22C C9                     RET
2919: F22D         ;-----------------------------------------------------------------
2920: F22D
2921: F22D         ;HL = .fcb1(i), DE = .fcb2(i),
2922: F22D         ;if fcb1(i) = 0 then fcb1(i) := fcb2(i)
2923: F22D             Merge:
2924: F22D 7E                     LD     A,(HL)
2925: F22E 23                     INC    HL
2926: F22F B6                     OR     M
2927: F230 2B                     DEC    HL
2928: F231 C0                     RET    NZ                   ; return if = 0000
2929: F232 1A                     LD     A,(DE)
2930: F233 77                     LD     (HL),A
2931: F234 13                     INC    DE
2932: F235 23                     INC    HL                   ; low byte copied
2933: F236 1A                     LD     A,(DE)
2934: F237 77                     LD     (HL),A
2935: F238 1B                     DEC    DE
2936: F239 2B                     DEC    HL                   ; back to input form
2937: F23A C9                     RET
2938: F23B         ;-----------------------------------------------------------------
2939: F23B         ;compute closest disk block number from current block
2940: F23B         ;given allocation vector position BC, find the zero bit closest to this position
2941: F23B         ;by searching left and right.
2942: F23B         ;if found, set the bit to one and return the bit position in hl.
2943: F23B         ;if not found (i.e., we pass 0 on the left, or dpbDSM on the right), return 0000 in hl
2944: F23B             GetClosestBlock:
2945: F23B 50                     LD     D,B
2946: F23C 59                     LD     E,C                  ; copy of starting position to de
2947: F23D             TestLeft:
2948: F23D 79                     LD     A,C
2949: F23E B0                     OR     B
2950: F23F CA 4E F2               JP     Z,TestRight          ; skip if left=0000
2951: F242         ; left not at position zero, bit zero?
2952: F242 0B                     DEC    BC
2953: F243 D5                     PUSH   DE
2954: F244 C5                     PUSH   BC                   ; left,right pushed
2955: F245 CD 7A ED               CALL   GetAllocBit
2956: F248 1F                     RRA
2957: F249 D2 69 F2               JP     NC,ReturnBlockNumber ; return block number if zero
2958: F24C         ; bit is one, so try the right
2959: F24C C1                     POP    BC
2960: F24D D1                     POP    DE                   ; left, right restored
2961: F24E             TestRight:
2962: F24E 2A 32 F5               LD     HL,(dpbDSM)          ; value of maximum allocation#
2963: F251 7B                     LD     A,E
2964: F252 95                     SUB    L
2965: F253 7A                     LD     A,D
2966: F254 9C                     SBC    A,H                  ; right=dpbDSM?
2967: F255 D2 71 F2               JP     NC,ReturnBlockZero   ; return block 0000 if so
2968: F258 13                     INC    DE
2969: F259 C5                     PUSH   BC
2970: F25A D5                     PUSH   DE                   ; left, right pushed
2971: F25B 42                     LD     B,D
2972: F25C 4B                     LD     C,E                  ; ready right for call
2973: F25D CD 7A ED               CALL   GetAllocBit
2974: F260 1F                     RRA
2975: F261 D2 69 F2               JP     NC,ReturnBlockNumber ; return block number if zero
2976: F264 D1                     POP    DE
2977: F265 C1                     POP    BC                   ; restore left and right pointers
2978: F266 C3 3D F2               JP     TestLeft             ; for another attempt
2979: F269             ReturnBlockNumber:
2980: F269 17                     RLA
2981: F26A 3C                     INC    A                    ; bit back into position and set to 1
2982: F26B         ; 	D contains the number of shifts required to reposition
2983: F26B CD AC ED               CALL   RotateAndReplace     ; move bit back to position and store
2984: F26E E1                     POP    HL
2985: F26F D1                     POP    DE                   ; HL returned value, DE discarded
2986: F270 C9                     RET
2987: F271
2988: F271         ; cannot find an available bit, return 0000
2989: F271             ReturnBlockZero:
2990: F271 21 00 00               LD     HL,0000H
2991: F274 C9                     RET
2992: F275         ;-----------------------------------------------------------------
2993: F275         ;compute disk block number from current fcb
2994: F275             GetBlockNumber:
2995: F275 CD F5 F3               CALL   GetDiskMapIndex      ; 0...15 in register A
2996: F278 4F                     LD     C,A
2997: F279 06 00                  LD     B,0
2998: F27B CD 15 F4               CALL   GetDiskMapValue      ; return value in HL
2999: F27E 22 4E F5               LD     (absoluteCPMRecord),HL ; save for later
3000: F281 C9                     RET
3001: F282         ;-----------------------------------------------------------------
3002: F282         ;is  block allocated
3003: F282             IsAllocated:
3004: F282 2A 4E F5               LD     HL,(absoluteCPMRecord)
3005: F285 7D                     LD     A,L
3006: F286 B4                     OR     H
3007: F287 C9                     RET
3008: F288         ;-----------------------------------------------------------------
3009: F288         ;compute actual record address
3010: F288         ; result = absoluteCPMRecord * ( 2**BSH)
3011: F288             SetActualRecordAdd:
3012: F288 3A 2F F5               LD     A,(dpbBSH)           ; Block Shift  to reg A
3013: F28B 2A 4E F5               LD     HL,(absoluteCPMRecord)
3014: F28E
3015: F28E             SetActualRecordAdd1:
3016: F28E 29                     ADD    HL,HL
3017: F28F 3D                     DEC    A                    ; shl(absoluteCPMRecord,dpbBSH)
3018: F290 C2 8E F2               JP     NZ,SetActualRecordAdd1
3019: F293         ; HL has Record number for start of the block;
3020: F293 3A 30 F5               LD     A,(dpbBLM)           ; get block mask
3021: F296 4F                     LD     C,A                  ; to get current File Record mod Block
3022: F297 3A 4C F5               LD     A,(currentFileRecord) ; get index into block
3023: F29A A1                     AND    C                    ; masked value in A
3024: F29B B5                     OR     L
3025: F29C 6F                     LD     L,A                  ; to HL
3026: F29D 22 4E F5               LD     (absoluteCPMRecord),HL ; Absolute CPM Record=HL or (current File Record and dpbBLM)
3027: F2A0         ; *** Absolute CPM Record now has current record number - Starting record number + index into block
3028: F2A0 C9                     RET
3029: F2A1         ;-----------------------------------------------------------------
3030: F2A1         ;---------------------
3031: F2A1         ;copy directory location to exitParameterByte
3032: F2A1             DirLocationToReturnLoc:
3033: F2A1 3A 40 F5               LD     A,(directoryFlag)
3034: F2A4 32 C2 EA               LD     (exitParameterByte),A
3035: F2A7 C9                     RET
3036: F2A8         ;---------------------
3037: F2A8         ;clear the module number field for user open/make (S2)
3038: F2A8             ClearModuleNum:
3039: F2A8 CD AE F2               CALL   GetModuleNum
3040: F2AB 36 00                  LD     (HL),0               ; fcb(fcbS2Index)=0
3041: F2AD C9                     RET
3042: F2AE         ;---------------------
3043: F2AE         ;get data module number (high order bit is fwf -file write flag)
3044: F2AE             GetModuleNum:
3045: F2AE 2A C0 EA               LD     HL,(paramDE)
3046: F2B1 11 0E 00               LD     DE,fcbS2Index
3047: F2B4 19                     ADD    HL,DE                ; HL=.fcb(fcbS2Index)
3048: F2B5 7E                     LD     A,(HL)
3049: F2B6 C9                     RET                         ; A=fcb(fcbS2Index)
3050: F2B7         ;---------------------
3051: F2B7         ;check current fcb to see if reselection necessary
3052: F2B7             Reselect:
3053: F2B7 3E FF                  LD     A,TRUE
3054: F2B9 32 47 F5               LD     (fResel),A           ;mark possible reselect
3055: F2BC 2A C0 EA               LD     HL,(paramDE)
3056: F2BF 7E                     LD     A,(HL)               ; drive select code
3057: F2C0 E6 1F                  AND    00011111B            ; non zero is auto drive select
3058: F2C2 3D                     DEC    A                    ; drive code normalized to 0..30, or 255
3059: F2C3 32 BF EA               LD     (paramE),A           ; save drive code
3060: F2C6 FE 1E                  CP     30
3061: F2C8 D2 DB F2               JP     NC,NoSelect
3062: F2CB         ; auto select function, save currentDisk
3063: F2CB 3A 17 F5               LD     A,(currentDisk)
3064: F2CE 32 48 F5               LD     (entryDisk),A        ; entryDisk=currentDisk
3065: F2D1 7E                     LD     A,(HL)
3066: F2D2 32 49 F5               LD     (fcbDisk),A          ; save drive code
3067: F2D5 E6 E0                  AND    11100000B
3068: F2D7 77                     LD     (HL),A               ; preserve hi bits
3069: F2D8 CD 4E EC               CALL   SelectCurrent
3070: F2DB             NoSelect:                       ; noselect:
3071: F2DB
3072: F2DB 3A 16 F5               LD     A,(currentUserNumber) ; set user code 0...31
3073: F2DE 2A C0 EA               LD     HL,(paramDE)
3074: F2E1 B6                     OR     M
3075: F2E2 77                     LD     (HL),A
3076: F2E3 C9                     RET
3077: F2E4         ;---------------------
3078: F2E4         ;search for the directory entry, copy to fcb
3079: F2E4             OpenFile:
3080: F2E4 0E 0F                  LD     C,nameLength
3081: F2E6 CD 27 F3               CALL   Search4DirElement
3082: F2E9 CD 45 EE               CALL   EndOfDirectory
3083: F2EC C8                     RET    Z                    ; return with exitParameterByte=255 if end
3084: F2ED
3085: F2ED         ; not end of directory, copy fcb information
3086: F2ED             OpenFileCopyFCB:
3087: F2ED CD 07 EE               CALL   GetExtentAddress     ; HL=.fcb(fcbExtIndex)
3088: F2F0 7E                     LD     A,(HL)
3089: F2F1 F5                     PUSH   AF
3090: F2F2 E5                     PUSH   HL                   ; save extent#
3091: F2F3 CD 16 EE               CALL   GetDirElementAddress
3092: F2F6 EB                     EX     DE,HL                ; DE = .buff(dptr)
3093: F2F7 2A C0 EA               LD     HL,(paramDE)         ; HL=.fcb(0)
3094: F2FA 0E 20                  LD     C,NEXT_RECORD        ; length of move operation
3095: F2FC D5                     PUSH   DE                   ; save .buff(dptr)
3096: F2FD CD 4E F4               CALL   Move                 ; from .buff(dptr) to .fcb(0)
3097: F300         ; note that entire fcb is copied, including indicators
3098: F300 CD AF F3               CALL   SetFileWriteFlag     ; sets file write flag
3099: F303 D1                     POP    DE
3100: F304 21 0C 00               LD     HL,fcbExtIndex
3101: F307 19                     ADD    HL,DE                ; HL=.buff(dptr+fcbExtIndex)
3102: F308 4E                     LD     C,(HL)               ; C = directory extent number
3103: F309 21 0F 00               LD     HL,fcbRCIndex        ; point at the record Count field
3104: F30C 19                     ADD    HL,DE                ; HL=.buff(dptr+fcbRCIndex)
3105: F30D 46                     LD     B,(HL)               ; B holds directory record count
3106: F30E E1                     POP    HL
3107: F30F F1                     POP    AF
3108: F310 77                     LD     (HL),A               ; restore extent number
3109: F311         ; HL = .user extent#, B = dir rec cnt, C = dir extent#
3110: F311         ; if user ext < dir ext then user := 128 records
3111: F311         ; if user ext = dir ext then user := dir records
3112: F311         ; if user ext > dir ext then user := 0 records
3113: F311 79                     LD     A,C
3114: F312 BE                     CP     M
3115: F313 78                     LD     A,B                  ; ready dir fcbRCIndex
3116: F314 CA 1E F3               JP     Z,OpenRecordCount    ; if same, user gets dir fcbRCIndex
3117: F317 3E 00                  LD     A,0
3118: F319 DA 1E F3               JP     C,OpenRecordCount    ; user is larger
3119: F31C 3E 80                  LD     A,RecordsPerExtent   ; directory is larger >>>RecordsPerExtent
3120: F31E             OpenRecordCount:                      ;Acc has record count to fill
3121: F31E 2A C0 EA               LD     HL,(paramDE)
3122: F321 11 0F 00               LD     DE,fcbRCIndex
3123: F324 19                     ADD    HL,DE
3124: F325 77                     LD     (HL),A
3125: F326 C9                     RET
3126: F327
3127: F327         ;---------------------
3128: F327         ;search for directory element of length C at info
3129: F327             Search4DirElement:
3130: F327 3E FF                  LD     A,0FFH
3131: F329 32 40 F5               LD     (directoryFlag),A    ; changed if actually found
3132: F32C 21 43 F5               LD     HL,searchLength
3133: F32F 71                     LD     (HL),C               ; searchLength = C
3134: F330 2A C0 EA               LD     HL,(paramDE)
3135: F333 22 44 F5               LD     (searchAddress),HL   ; searchAddress = paramDE
3136: F336 CD 0F EE               CALL   SetEndDirectory      ; dirEntryIndex = enddir
3137: F339 CD B3 ED               CALL   Home                 ; to start at the beginning
3138: F33C C3 3F F3               JP     Search4NextDirElement
3139: F33F         ;---------------------
3140: F33F         ;search for the next directory element, assuming a previous
3141: F33F         ;call on search which sets searchAddress and searchLength
3142: F33F             Search4NextDirElement:
3143: F33F 0E 00                  LD     C,FALSE
3144: F341 CD 57 EE               CALL   ReadDirectory        ; read next dir element
3145: F344 CD 45 EE               CALL   EndOfDirectory
3146: F347 CA A6 F3               JP     Z,SearchDone         ; skip to end if so
3147: F34A         ; not end of directory, scan for match
3148: F34A 2A 44 F5               LD     HL,(searchAddress)
3149: F34D EB                     EX     DE,HL                ; DE=beginning of user fcb
3150: F34E 1A                     LD     A,(DE)               ; first character
3151: F34F FE E5                  CP     emptyDir             ; keep scanning if Dir entry is empty
3152: F351 CA 5C F3               JP     Z,Search4NextDirElement1
3153: F354         ; not emptyDir, may be end of logical directory
3154: F354 D5                     PUSH   DE                   ; save search address
3155: F355 CD 2B EE               CALL   StillInDirectory     ; past logical end?
3156: F358 D1                     POP    DE                   ; recall address
3157: F359 D2 A6 F3               JP     NC,SearchDone        ; artificial stop
3158: F35C             Search4NextDirElement1:
3159: F35C CD 16 EE               CALL   GetDirElementAddress ; HL = buffa+dptr
3160: F35F 3A 43 F5               LD     A,(searchLength)
3161: F362 4F                     LD     C,A                  ; length of search to c
3162: F363 06 00                  LD     B,0                  ; bcounts up, c counts down
3163: F365             Search4NextLoop:
3164: F365 79                     LD     A,C
3165: F366 B7                     OR     A
3166: F367 CA 95 F3               JP     Z,EndDirElementSearch
3167: F36A 1A                     LD     A,(DE)
3168: F36B FE 3F                  CP     QMARK
3169: F36D CA 8E F3               JP     Z,Search4NextOK      ; ? matches all
3170: F370         ; scan next character if not fcbS1Index
3171: F370 78                     LD     A,B
3172: F371 FE 0D                  CP     fcbS1Index
3173: F373 CA 8E F3               JP     Z,Search4NextOK
3174: F376         ; not the fcbS1Index field, extent field?
3175: F376 FE 0C                  CP     fcbExtIndex          ; may be extent field
3176: F378 1A                     LD     A,(DE)               ; fcb character
3177: F379 CA 85 F3               JP     Z,Search4Ext         ; skip to search extent
3178: F37C 96                     SUB    M
3179: F37D E6 7F                  AND    07FH                 ; mask-out flags/extent modulus
3180: F37F C2 3F F3               JP     NZ,Search4NextDirElement ; skip if not matched
3181: F382 C3 8E F3               JP     Search4NextOK        ;matched character
3182: F385
3183: F385         ; A has fcb character attempt an extent # match
3184: F385             Search4Ext:
3185: F385 C5                     PUSH   BC                   ; save counters
3186: F386 4E                     LD     C,(HL)               ; directory character to c
3187: F387 CD BC F3               CALL   CompareExtents       ; compare user/dir char
3188: F38A C1                     POP    BC                   ; recall counters
3189: F38B C2 3F F3               JP     NZ,Search4NextDirElement ; skip if no match
3190: F38E
3191: F38E         ; current character matches
3192: F38E             Search4NextOK:
3193: F38E 13                     INC    DE
3194: F38F 23                     INC    HL
3195: F390 04                     INC    B
3196: F391 0D                     DEC    C
3197: F392 C3 65 F3               JP     Search4NextLoop
3198: F395
3199: F395         ; entire name matches, return dir position
3200: F395             EndDirElementSearch:
3201: F395 3A 51 F5               LD     A,(dirEntryIndex)
3202: F398 E6 03                  AND    dirEntryMask
3203: F39A 32 C2 EA               LD     (exitParameterByte),A
3204: F39D         ; exitParameterByte = low(dirEntryIndex) and 11b
3205: F39D 21 40 F5               LD     HL,directoryFlag
3206: F3A0 7E                     LD     A,(HL)
3207: F3A1 17                     RLA
3208: F3A2 D0                     RET    NC                   ; directoryFlag=0ffh?
3209: F3A3         ; yes, change it to 0 to mark as found
3210: F3A3 AF                     XOR    A
3211: F3A4 77                     LD     (HL),A               ; directoryFlag=0
3212: F3A5 C9                     RET
3213: F3A6
3214: F3A6         ; end of directory, or empty name
3215: F3A6             SearchDone:
3216: F3A6 CD 0F EE               CALL   SetEndDirectory      ; may be artifical end
3217: F3A9 3E FF                  LD     A,0FFH
3218: F3AB 32 C2 EA               LD     (exitParameterByte),A
3219: F3AE C9                     RET
3220: F3AF         ;---------------------
3221: F3AF         ;Set file write flag
3222: F3AF             SetFileWriteFlag:
3223: F3AF CD AE F2               CALL   GetModuleNum         ; HL=.fcb(fcbS2Index), A=fcb(fcbS2Index)
3224: F3B2 F6 80                  OR     writeFlagMask        ; set fwf (file write flag) to "1"
3225: F3B4 77                     LD     (HL),A               ; fcb(fcbS2Index)=fcb(fcbS2Index) or 80h
3226: F3B5 C9                     RET                         ; also returns non zero in accumulator
3227: F3B6         ;---------------------
3228: F3B6         ;set exitParameterByte to 1
3229: F3B6             SetLowReturnTo1:
3230: F3B6 3E 01                  LD     A,1
3231: F3B8 32 C2 EA               LD     (exitParameterByte),A
3232: F3BB C9                     RET
3233: F3BC         ;---------------------
3234: F3BC         ;compare extent# in A with that in C, return nonzero if they do not match
3235: F3BC             CompareExtents:
3236: F3BC C5                     PUSH   BC                   ; save C's original value
3237: F3BD F5                     PUSH   AF
3238: F3BE 3A 31 F5               LD     A,(dpbEXM)
3239: F3C1 2F                     CPL
3240: F3C2 47                     LD     B,A
3241: F3C3         ; B has negated form of extent mask
3242: F3C3 79                     LD     A,C
3243: F3C4 A0                     AND    B
3244: F3C5 4F                     LD     C,A                  ; low bits removed from C
3245: F3C6 F1                     POP    AF
3246: F3C7 A0                     AND    B                    ; low bits removed from A
3247: F3C8 91                     SUB    C
3248: F3C9 E6 1F                  AND    maxExtValue          ; set flags
3249: F3CB C1                     POP    BC                   ; restore original values
3250: F3CC C9                     RET
3251: F3CD         ;---------------------
3252: F3CD         ;copy the directory entry to the user buffer
3253: F3CD             CopyDirEntryToUser:
3254: F3CD 2A 25 F5               LD     HL,(caDirectoryDMA)
3255: F3D0 EB                     EX     DE,HL                ; source is directory buffer
3256: F3D1 2A 1D F5               LD     HL,(initDAMAddress)  ; destination is user dma address
3257: F3D4 0E 80                  LD     C,cpmRecordSize      ; copy entire record
3258: F3D6 C3 4E F4               JP     Move
3259: F3D9         ;---------------------
3260: F3D9         ;copy the whole file control block
3261: F3D9             CopyFCB:
3262: F3D9 0E 00                  LD     C,0
3263: F3DB 1E 20                  LD     E,fcbLength          ; start at 0, to fcblen-1
3264: F3DD C3 E0 F3               JP     CopyDir
3265: F3E0         ;---------------------
3266: F3E0         ;copy fcb information starting at C for E bytes into the currently addressed directory entry
3267: F3E0             CopyDir:
3268: F3E0 D5                     PUSH   DE                   ; save length for later
3269: F3E1 06 00                  LD     B,0                  ; double index to BC
3270: F3E3 2A C0 EA               LD     HL,(paramDE)         ; HL = source for data
3271: F3E6 09                     ADD    HL,BC
3272: F3E7 EB                     EX     DE,HL                ; DE=.fcb(C), source for copy
3273: F3E8 CD 16 EE               CALL   GetDirElementAddress ; HL=.buff(dptr), destination
3274: F3EB C1                     POP    BC                   ; DE=source, HL=dest, C=length
3275: F3EC CD 4E F4               CALL   Move                 ; data moved
3276: F3EF         ;enter from close to seek and copy current element
3277: F3EF             SeekAndCopy:                      ; seek$copy:
3278: F3EF CD 85 EE               CALL   SeekDir              ; seek$dir ;to the directory element
3279: F3F2 C3 15 F2               JP     WriteDir             ; write the directory element
3280: F3F5         ;---------------------
3281: F3F5         ;Return the  disk map Index for current File Record in the ACC
3282: F3F5         ;  account for multiple extents in 1 physical Directory entry
3283: F3F5             GetDiskMapIndex:                      ; dm$position
3284: F3F5 21 2F F5               LD     HL,dpbBSH            ; get block shift value
3285: F3F8 4E                     LD     C,(HL)               ; shift count to C
3286: F3F9 3A 4C F5               LD     A,(currentFileRecord) ; current virtual record to A
3287: F3FC             GetDiskMapIndex1:
3288: F3FC B7                     OR     A                    ; reset the carry flag
3289: F3FD 1F                     RRA
3290: F3FE 0D                     DEC    C
3291: F3FF C2 FC F3               JP     NZ,GetDiskMapIndex1
3292: F402         ; A = shr(current File Record,dpbBSH) = current File Record/2**(sect/block)
3293: F402         ; A has the relative position in the block.
3294: F402 47                     LD     B,A                  ; save it for later addition
3295: F403 3E 08                  LD     A,8
3296: F405 96                     SUB    M                    ; 8-dpbBSH to accumulator
3297: F406 4F                     LD     C,A                  ; extent shift count in register c
3298: F407 3A 4B F5               LD     A,(extentValue)      ; extent value ani extmsk
3299: F40A             GetDiskMapIndex2:                      ; dmpos1:
3300: F40A         ; dpbBSH = 3,4,5,6,7, C=5,4,3,2,1
3301: F40A         ; shift is 4,3,2,1,0
3302: F40A 0D                     DEC    C
3303: F40B CA 13 F4               JP     Z,GetDiskMapIndex3
3304: F40E B7                     OR     A                    ; clear the carry flag
3305: F40F 17                     RLA
3306: F410 C3 0A F4               JP     GetDiskMapIndex2
3307: F413
3308: F413         ; The ACC has the Block Number for this record
3309: F413             GetDiskMapIndex3:
3310: F413         ; arrive here with A = shl(ext and extmsk,7-dpbBSH)
3311: F413 80                     ADD    A,B                  ; add the previous shr(current File Record,dpbBSH) value
3312: F414         ; A is one of the following values, depending upon alloc
3313: F414         ; bks dpbBSH
3314: F414         ; 1k   3     v/8 + extentValue * 16
3315: F414         ; 2k   4     v/16+ extentValue * 8
3316: F414         ; 4k   5     v/32+ extentValue * 4
3317: F414         ; 8k   6     v/64+ extentValue * 2
3318: F414         ; 16k  7     v/128+extentValue * 1
3319: F414 C9                     RET                         ; with disk map position in A
3320: F415         ;---------------------
3321: F415         ; Enter with Disk Map Index in BG
3322: F415         ; Return disk map value  in HL
3323: F415             GetDiskMapValue:
3324: F415 2A C0 EA               LD     HL,(paramDE)         ; base address of file control block
3325: F418 11 10 00               LD     DE,fcbDiskMapIndex   ; offset to the disk map
3326: F41B 19                     ADD    HL,DE                ; HL =.diskmap
3327: F41C 09                     ADD    HL,BC                ; index by a  byte value
3328: F41D 3A 46 F5               LD     A,(byteAllocationFlag) ;  byte map entry?
3329: F420 B7                     OR     A
3330: F421 CA 28 F4               JP     Z,GetDiskMap16Bit    ; get disk map  byte
3331: F424 6E                     LD     L,(HL)
3332: F425 26 00                  LD     H,0
3333: F427 C9                     RET                         ; with HL=00bb
3334: F428             GetDiskMap16Bit:                      ; getdmd:
3335: F428 09                     ADD    HL,BC                ; HL=.fcb(dm+i*2)
3336: F429         ; double precision value returned
3337: F429 56                     LD     D,(HL)
3338: F42A 23                     INC    HL
3339: F42B 5E                     LD     E,(HL)
3340: F42C EB                     EX     DE,HL
3341: F42D C9                     RET
3342: F42E         ;---------------------
3343: F42E         ;---------------------
3344: F42E         ;*****************************************************************
3345: F42E         ;************************ Utilities ******************************
3346: F42E         ;*****************************************************************
3347: F42E             AddAtoHL:
3348: F42E 85                     ADD    A,L
3349: F42F 6F                     LD     L,A
3350: F430 D0                     RET    NC
3351: F431 24                     INC    H
3352: F432 C9                     RET
3353: F433         ;----------
3354: F433             DEminusHL2HL:
3355: F433 7B                     LD     A,E
3356: F434 95                     SUB    L
3357: F435 6F                     LD     L,A
3358: F436 7A                     LD     A,D
3359: F437 9C                     SBC    A,H
3360: F438 67                     LD     H,A
3361: F439 C9                     RET
3362: F43A         ;-------------
3363: F43A             ShiftRightHLbyC:
3364: F43A 0C                     INC    C
3365: F43B             ShiftRightHLbyC0:
3366: F43B 0D                     DEC    C
3367: F43C C8                     RET    Z
3368: F43D 7C                     LD     A,H
3369: F43E B7                     OR     A
3370: F43F 1F                     RRA
3371: F440 67                     LD     H,A
3372: F441 7D                     LD     A,L
3373: F442 1F                     RRA
3374: F443 6F                     LD     L,A
3375: F444 C3 3B F4               JP     ShiftRightHLbyC0
3376: F447         ;-------
3377: F447             ShiftLeftHLbyC:
3378: F447 0C                     INC    C
3379: F448             ShiftLeftHLbyC0:
3380: F448 0D                     DEC    C
3381: F449 C8                     RET    Z                    ; exit when done
3382: F44A 29                     ADD    HL,HL
3383: F44B C3 48 F4               JP     ShiftLeftHLbyC0
3384: F44E         ;*****************************************************************
3385: F44E         ;move data length of length C from source DE to HL
3386: F44E             Move:
3387: F44E 0C                     INC    C
3388: F44F             Move0:
3389: F44F 0D                     DEC    C
3390: F450 C8                     RET    Z
3391: F451 1A                     LD     A,(DE)
3392: F452 77                     LD     (HL),A
3393: F453 13                     INC    DE
3394: F454 23                     INC    HL
3395: F455 C3 4F F4               JP     Move0
3396: F458
3397: F458         ;********** Console OUT Routines*******************??????
3398: F458
3399: F458         ;---------------------------------- Is Bit Set ------------------------------;
3400: F458         ; Enter HL  contains the bit map                                             ;
3401: F458         ;       B   Has the bit number (0...F)                                       ;
3402: F458         ; Return ZFlag = 1 if bit is reset (0)                                       ;
3403: F458         ;              = 0 if bit is set (1)                                         ;
3404: F458             IsBitSet:                       ;
3405: F458 04                     INC    B                    ;
3406: F459             IsBitSetLoop:                      ;
3407: F459 37                     SCF                         ; Set carry flag, expect LSBit = 1   ;
3408: F45A CB 45                  BIT    0,L                  ; is LSB set?                        ;
3409: F45C 20 01                  JR     NZ,IsBitSet1         ; Skip if LSB set                ;
3410: F45E 3F                     CCF                         ; else Clear Carry flag              ;
3411: F45F             IsBitSet1:                      ;
3412: F45F CB 1C                  RR     H                    ; Shift thru CY                      ;
3413: F461 CB 1D                  RR     L                    ; ditto                              ;
3414: F463 10 F4                  DJNZ   IsBitSetLoop         ;
3415: F465 CB 7C                  BIT    7,H                  ; Bit moved from L LSBit to H MSBit	 ;
3416: F467 C9                     RET                         ;
3417: F468         ;---------------------------------- Is Bit Set ------------------------------;
3418: F468
3419: F468         ;============================ Set/Reset Map Bit =============================;
3420: F468         ;---------------------------------- Set Map Bit ----------------------------;;
3421: F468         ; Enter  HL  contains the bit map                                           ;;
3422: F468         ;        B   Has the bit number (0...F)                                     ;;
3423: F468         ; Return HL  Contains the modified bit map                                  ;;
3424: F468             SetMapBit:                      ;;
3425: F468 C5                     PUSH   BC                   ; Save the Bit Number               ;;
3426: F469 CD 58 F4               CALL   IsBitSet             ; Put the bit in the LSBit          ;;
3427: F46C         ;;
3428: F46C C1                     POP    BC                   ; Get the bit position              ;;
3429: F46D CB FC                  SET    7,H                  ;;
3430: F46F 18 07                  JR     ReAlignMap           ;                                    ;
3431: F471         ;---------------------------------- Set Map Bit ----------------------------;;
3432: F471         ;---------------------------------- Reset Map Bit --------------------------;;
3433: F471         ; Enter  HL  contains the bit map                                           ;;
3434: F471         ;        B   Has the bit number (0...F)                                     ;;
3435: F471         ; Return HL  Contains the modified bit map                                  ;;
3436: F471             ResetMapBit:                      ;;
3437: F471 C5                     PUSH   BC                   ; Save the Bit Number               ;;
3438: F472 CD 58 F4               CALL   IsBitSet             ; Put the bit in the LSBit          ;;
3439: F475         ;;
3440: F475 C1                     POP    BC                   ; Get the bit position              ;;
3441: F476 CB BC                  RES    7,H                  ;;
3442: F478         ; Fall thru to ReAlignMap                                                    ;
3443: F478         ;---------------------------------- Reset Map Bit --------------------------;;
3444: F478         ;---------------------------------- Set Map Bit ----------------------------;;
3445: F478         ; Adjusts the HL register to its Original Alignment after IsBitSet           ;
3446: F478         ;
3447: F478             ReAlignMap:                      ;
3448: F478 04                     INC    B                    ;
3449: F479             ReAlignMapLoop:                      ;
3450: F479 37                     SCF                         ; Set carry flag, expect LSBit = 1   ;
3451: F47A CB 7C                  BIT    7,H                  ; is LSB set?                        ;
3452: F47C 20 01                  JR     NZ,ReAlignMap1       ; Skip if LSB set                ;
3453: F47E 3F                     CCF                         ; else Clear Carry flag              ;
3454: F47F             ReAlignMap1:                      ;
3455: F47F CB 15                  RL     L                    ; Shift thru CY                      ;
3456: F481 CB 14                  RL     H                    ; ditto                              ;
3457: F483 10 F4                  DJNZ   ReAlignMapLoop       ;
3458: F485 C9                     RET                         ;
3459: F486         ;============================ Set/Reset Map Bit =============================;
3460: F486
3461: F486
3462: F486         ;? ;********************************************************
3463: F486         ;? ;return version number
3464: F486         ;? vGetVersion:								; func12 (12 - 0C)	 Get Verson
3465: F486         ;?	LD		A,VERSION
3466: F486         ;?	LD		(exitParameterByte),A 				;exitParameterByte = VERSION (high = 00)
3467: F486         ;?	RET
3468: F486         ;************Error message World*************************
3469: F486             errSelect:
3470: F486 21 A5 F4               LD     HL,evSelection
3471: F489 C3 9E F4               JP     GoToError
3472: F48C             errReadOnlyDisk:
3473: F48C 21 A7 F4               LD     HL,evReadOnlyDisk
3474: F48F C3 9E F4               JP     GoToError
3475: F492             errReadOnlyFile:
3476: F492 21 A9 F4               LD     HL,evReadOnlyFile
3477: F495 C3 9E F4               JP     GoToError
3478: F498             errPermanent:
3479: F498 21 A3 F4               LD     HL,evPermanent
3480: F49B C3 9E F4               JP     GoToError
3481: F49E         ;************Error message handler **********************
3482: F49E             GoToError:
3483: F49E         ;HL = .errorhandler, call subroutine
3484: F49E 5E                     LD     E,(HL)
3485: F49F 23                     INC    HL
3486: F4A0 56                     LD     D,(HL)               ; address of routine in DE
3487: F4A1 EB                     EX     DE,HL
3488: F4A2 E9                     JP     (HL)                 ; vector to subroutine
3489: F4A3         ;************ Error Vectors *****************************
3490: F4A3 B1 F4       evPermanent: DW     erPermanent          ; pererr permanent error subroutine
3491: F4A5 BD F4       evSelection: DW     erSelection          ; selerr select error subroutine
3492: F4A7 C3 F4       evReadOnlyDisk: DW     erReadOnlyDisk       ; roderr ro disk error subroutine
3493: F4A9 C9 F4       evReadOnlyFile: DW     erReadOnlyFile       ; roferr ro file error subroutine
3494: F4AB         ;************Error Routines ******************************
3495: F4AB             erPermanentNoWait:
3496: F4AB 21 FB F4               LD     HL,emPermanent
3497: F4AE C3 9E F4               JP     GoToError
3498: F4B1             erPermanent:
3499: F4B1 21 FB F4               LD     HL,emPermanent
3500: F4B4 CD D2 F4               CALL   displayAndWait       ; to report the error
3501: F4B7 FE 03                  CP     CTRL_C
3502: F4B9 CA 00 00               JP     Z,WarmBoot           ; reboot if response is CTRL_C
3503: F4BC C9                     RET                         ; and ignore the error
3504: F4BD         ;
3505: F4BD             erSelection:
3506: F4BD 21 06 F5               LD     HL,emSelection
3507: F4C0 C3 CC F4               JP     waitB4boot           ; wait console before boot
3508: F4C3         ;
3509: F4C3             erReadOnlyDisk:
3510: F4C3 21 12 F5               LD     HL,emReadOnlyDisk
3511: F4C6 C3 CC F4               JP     waitB4boot           ; wait console before boot
3512: F4C9         ;
3513: F4C9             erReadOnlyFile:
3514: F4C9 21 0D F5               LD     HL,emReadOnlyFile    ; drop through to wait for console
3515: F4CC         ;
3516: F4CC         ; wait for response before boot
3517: F4CC             waitB4boot:
3518: F4CC CD D2 F4               CALL   displayAndWait
3519: F4CF C3 00 00               JP     WarmBoot
3520: F4D2
3521: F4D2         ;report error to console, message address in HL
3522: F4D2             displayAndWait:
3523: F4D2 E5                     PUSH   HL                   ; save message pointer
3524: F4D3 CD D3 E9               CALL   showCRLF             ; stack mssg address, new line
3525: F4D6 3A 17 F5               LD     A,(currentDisk)
3526: F4D9 C6 41                  ADD    A,ASCII_A
3527: F4DB 32 F7 F4               LD     (emDisk),A           ; Problem disk name
3528: F4DE 01 EB F4               LD     BC,emDisk0
3529: F4E1 CD 38 E9               CALL   Print                ; the error message
3530: F4E4 C1                     POP    BC
3531: F4E5 CD 38 E9               CALL   Print                ; error mssage tail
3532: F4E8 C3 1E E9               JP     ConIn                ; to get the input character
3533: F4EB         ;ret
3534: F4EB         ;**************Error Messages*******************************
3535: F4EB 42 64 6F 73 20 45 72 72 20 4F 6E 20     emDisk0:   DB     'Bdos Err On '
3536: F4F7 20 3A 20 24     emDisk:    DB     ' : $'
3537: F4FB 42 61 64 20 53 65 63 74 6F 72 24     emPermanent: DB     'Bad Sector$'
3538: F506 53 65 6C 65 63 74 24     emSelection: DB     'Select$'
3539: F50D 46 69 6C 65 20     emReadOnlyFile: DB     'File '
3540: F512 52 2F 4F 24     emReadOnlyDisk: DB     'R/O$'
3541: F516         ;*****************************************************************
3542: F516
3543: F516         ;********* file control block (fcb) constants ********************
3544: F516             fcbLength  EQU    20H                  ;32				; fcblen file control block size
3545: F516             fcbROfileIndex EQU    09H                  ; high order of first type char
3546: F516             fcbHiddenfileIndex EQU    0AH                  ;10				; invisible file in dir command
3547: F516             fcbExtIndex EQU    0CH                  ;12				; extent number field index
3548: F516             fcbS1Index EQU    0DH                  ;13				; S1 index
3549: F516             fcbS2Index EQU    0EH                  ;14				; S2 data module number index
3550: F516             fcbRCIndex EQU    0FH                  ;15				; record count field index
3551: F516             fcbDiskMapIndex EQU    10H                  ;16				; dskmap disk map field
3552: F516
3553: F516             fcbCurrentRecord EQU    21H                  ;33
3554: F516
3555: F516             highestRecordNumber EQU    RecordsPerExtent - 1 ; last record# in extent
3556: F516
3557: F516             dirEntriesPerRecord EQU    cpmRecordSize/fcbLength ; directory elts / record
3558: F516             dirEntryShift EQU    2                    ; log2(dirEntriesPerRecord)
3559: F516             dirEntryMask EQU    dirEntriesPerRecord-1
3560: F516             fcbShift   EQU    5                    ; log2(fcbLength)
3561: F516         ;
3562: F516
3563: F516
3564: F516
3565: F516             maxExtValue EQU    31                   ; largest extent number
3566: F516             moduleMask EQU    15                   ; limits module number value
3567: F516             writeFlagMask EQU    80h                  ; file write flag is high order fcbS2Index
3568: F516             nameLength EQU    15                   ; namlen name length
3569: F516
3570: F516             emptyDir   EQU    0E5H                 ; empty empty directory entry
3571: F516             NEXT_RECORD EQU    fcbLength            ; nxtrec
3572: F516             RANDOM_REC_FIELD EQU    NEXT_RECORD + 1      ;ranrec random record field (2 bytes)
3573: F516         ;
3574: F516         ;	reserved file indicators
3575: F516         ;	equ	11				; reserved
3576: F516         ;*****************************************************************
3577: F516         ;*****************************************************************
3578: F516
3579: F516         ;***common values shared between bdosi and bdos******************
3580: F516 00          currentUserNumber: DB     0                    ; usrcode current user number
3581: F517         ; paramDE:			DS	2					; ParamsDE information address
3582: F517         ; exitParameterByte:
3583: F517         ; exitParameterWord:	DS	2					; address value to return
3584: F517 FF          currentDisk: DB     -1                   ; curdsk current disk number
3585: F518         ; exitParameterByte		EQU	exitParameterWord	; lret low(exitParameterWord)
3586: F518
3587: F518         ;********************* Local Variables ***************************
3588: F518         ;     ************************
3589: F518         ;     *** Initialized Data ***
3590: F518
3591: F518 E5          emptyFCB:  DB     emptyDir             ; efcb 0E5 = available dir entry
3592: F519 00 00       readOnlyVector: DW     0                    ; rodsk read only disk vector
3593: F51B 00 00       loggedDisks: DW     0                    ; dlog	 logged-in disks
3594: F51D 80 00       initDAMAddress: DW     DMABuffer            ; dmaad tbuff initial dma address
3595: F51F
3596: F51F         ;     *** Current Disk attributes ****
3597: F51F         ; These are set upon disk select
3598: F51F         ; data must be adjacent, do not insert variables
3599: F51F         ; address of translate vector, not used
3600: F51F         ; ca - currentAddress
3601: F51F
3602: F51F 00 00       caDirMaxValue: DW     0000H                ; cdrmaxa pointer to cur dir max value
3603: F521 00 00       caTrack:   DW     0000H                ; curtrka current track address
3604: F523 00 00       caSector:  DW     0000H                ; current Sector
3605: F525             caListSizeStart:
3606: F525 00 00       caDirectoryDMA: DW     0000H                ; buffa pointer to directory dma address
3607: F527 00 00       caDiskParamBlock: DW     0000H                ; dpbaddr current disk parameter block address
3608: F529 00 00       caCheckSum: DW     0000H                ; checka current checksum vector address
3609: F52B 00 00       caAllocVector: DW     0000H                ; alloca current allocation vector address
3610: F52D             caListSizeEnd:
3611: F52D             caListSize EQU    caListSizeEnd - caListSizeStart
3612: F52D
3613: F52D         ;     ***** Disk Parameter Block *******
3614: F52D         ; data must be adjacent, do not insert variables
3615: F52D         ; dpb - Disk Parameter Block
3616: F52D             dpbStart:
3617: F52D 00 00       dpbSPT:    DW     0000H                ; sectpt sectors per track
3618: F52F 00          dpbBSH:    DB     0000H                ; blkshf block shift factor
3619: F530 00          dpbBLM:    DB     00H                  ; blkmsk block mask
3620: F531 00          dpbEXM:    DB     00H                  ; extmsk extent mask
3621: F532 00 00       dpbDSM:    DW     0000H                ; Maximum allocation number
3622: F534 00 00       dpbDRM:    DW     0000H                ; dirmax largest directory number
3623: F536 00 00       dpbDABM:   DW     0000H                ; dirblk reserved allocation bits for directory
3624: F538 00 00       dpbCKS:    DW     0000H                ; chksiz size of checksum vector
3625: F53A 00 00       dpbOFF:    DW     0000H                ; offset offset tracks at beginning
3626: F53C             dpbEnd:
3627: F53C             dpbSize    EQU    dpbEnd - dpbStart
3628: F53C         ;
3629: F53C
3630: F53C         ;     ************************
3631: F53C
3632: F53C 00 00       caSkewTable: DW     0000H                ; tranv address of translate vector
3633: F53E 00          fcbCopiedFlag: DB     00H                  ; fcb$copied set true if CopyFCB called
3634: F53F 00          readModeFlag: DB     00H                  ; rmf read mode flag for OpenNextExt
3635: F540 00          directoryFlag: DB     00H                  ; dirloc directory flag in rename, etc.
3636: F541 00          seqReadFlag: DB     00H                  ; seqio  1 if sequential i/o
3637: F542 00          diskMapIndex: DB     00H                  ; dminx  local for DiskWrite
3638: F543 00          searchLength: DB     00H                  ; searchl search length
3639: F544 00 00       searchAddress: DW     0000H                ; searcha search address
3640: F546         ;tinfo:	ds	word							; temp for info in "make"
3641: F546 00          byteAllocationFlag: DB     00H                  ; set true if single byte allocation map
3642: F547 00          fResel:    DB     00H                  ; resel reselection flag
3643: F548 00          entryDisk: DB     00H                  ; olddsk disk on entry to bdos
3644: F549 00          fcbDisk:   DB     00H                  ; fcbdsk disk named in fcb
3645: F54A 00          fcbRecordCount: DB     00H                  ; record count from current FCB
3646: F54B 00          extentValue: DB     00H                  ; extent number and dpbEXM from current fcb
3647: F54C 00 00       currentFileRecord: DW     0000H                ; Current File Record - fcbCurrentRecord
3648: F54E 00 00       absoluteCPMRecord: DW     0000H                ; Raw record ( 4 records / Sector)( 4 Sectors per block)
3649: F550         ;
3650: F550         ;	local variables for directory access
3651: F550 00          dirBlockIndex: DB     00H                  ; directory block Index 0,1,2,3
3652: F551 00 00       dirEntryIndex: DW     00H                  ; directory entry Index  0,1,...,dpbDRM
3653: F553 00 00       dirRecord: DW     00H                  ; drec:	ds	word	;directory record 0,1,...,dpbDRM/4
3654: F555
3655: F555         ;********************** data areas ******************************
3656: F555
3657: F555
3658: F555         ;---------------------------------- Stack Area--------------------------------;
3659: F555             stackBottom: DS     STACK_SIZE * 2       ; stack size                      ;
3660: F595             bdosStack:
3661: F595         ;
3662: F595         ;---------------------------------- Stack Area--------------------------------;
3663: F595         ;	end of Basic I/O System
3664: F595         ;-----------------------------------------------------------------;
3665: F595
3666: F595
3667: F595         ;
3668: F595             Z_HighestLocation:
3669: F595             Z_MemoryLeft EQU    (BIOSStart-1) - Z_HighestLocation
3670: F595
3671: F595
           ************************   Xref   ************************
0000: $               F595   0414 0444
3648: absoluteCPMRecord F54E   2201 2208 2226 2555 2999 3004 3013 3026
3347: AddAtoHL        F42E   2565
2569: Allocate16Bit   F058   2563
1041: AreWeAtEndOfBuffer EA37   1037
0083: ASCII_A         0041   3526
0084: ASCII_C         0043
0085: ASCII_K         004B
0092: ASCII_LO_A      0061
0093: ASCII_LO_K      006B
0094: ASCII_LO_P      0070
0035: ASCII_MASK      007F   0984
0086: ASCII_N         004E
0087: ASCII_Q         0051
0088: ASCII_R         0052
0089: ASCII_W         0057
0090: ASCII_Y         0059
0070: ASCII_ZERO      0030
0064: ASTERISK        002A
1133: BackUp          EA9C   1061 1129
1138: BackUp1         EAA4   1134
0292: bcBoot          F600
0295: bcConin         F609   0614 0799 0910 0928
0296: bcConout        F60C   0606 0872 1136 1140 1146 1148
0294: bcConst         F606   0611 0906
0300: bcHome          F618   1969
0297: bcList          F60F   0579 0878
0307: bcListst        F62D
0298: bcPunch         F612   0564
0305: bcRead          F627   2016
0299: bcReader        F615   0545
0308: bcSectran       F630
0301: bcSeldsk        F61B   1702
0304: bcSetdma        F624   2011
0303: bcSetsec        F621   2241
0302: bcSettrk        F61E   1975 2238
0293: bcWboot         F603   0465
0306: bcWrite         F62A   2915
0150: BDOSBase        E800   0151 0153 0324
0119: BDOSE           0005   0120
0151: BDOSEntry       E800
0140: BDOSLength      0E00   0143 0153 0154
3660: bdosStack       F595
0330: BdosStart       E800
0053: BELL            0007
0153: BIOSBase        F600
0141: BIOSLength      0A00   0143
0113: BIOSPAGE        0002
0154: BIOSStart       F600   0292 0293 0294 0295 0296 0297 0298 0299 0300 0301 0302 0303 0304 0305 0306 0307 0308 3669
2554: BlockOK         F03C   2548
0250: BlockSize       0800   0272
1056: BSspaceBS       EA45   0995
0031: BYTE            0001   1169
3641: byteAllocationFlag F546   1735 1871 2560 2813 3328
3609: caAllocVector   F52B   1291 1759 1761 1767 1934
3608: caCheckSum      F529   2272
3606: caDirectoryDMA  F525   1722 2003 2076 2264 3254
3602: caDirMaxValue   F51F   1713 1773 1844 2110
3607: caDiskParamBlock F527   1325 1727
3611: caListSize      0008   1723
3610: caListSizeEnd   F52D   3611
3605: caListSizeStart F525   3611
0091: CARET           005E   0838
0832: CaretOut        E945   1030 1111
3604: caSector        F523   1719 1983 2230
3632: caSkewTable     F53C   1711
3603: caTrack         F521   1716 1979 2221
0148: CCPEntry        E000   0150 0154
0139: CCPLength       0800   0143 0150 0154
0924: CheckCTL_S      E9A9   0913
2428: CheckRODirectory EF88   2730 2781
2433: CheckROFile     EF8B   2512
2252: CheckSumUtility EED0   2192 2901
2442: CheckWrite      EF95   2510 2715 2740 2773
3038: ClearModuleNum  F2A8   2344 2365 2411
2791: CloseDirEntry   F192   1495 2352 2647
2812: CloseDirEntry1  F1B7   2858
2826: CloseDirEntry2  F1C5   2823
2832: CloseDirEntry3  F1CB   2828
2838: CloseDirEntry4  F1D2   2815
2854: CloseDirEntry5  F1E7   2835
2879: CloseDirEntryEnd F201   2868
2886: CloseDirEntryError F20A   2834 2846 2851
0071: COLON           003A
1167: columnPosition  EABE   0857 0882 0947 0967 1125
0066: COMMA           002C
3235: CompareExtents  F3BC   3187
2262: ComputeCheckSum EEDC
2266: ComputeCheckSum1 EEE3   2269
0125: ComTail         0080   0126
0127: ComTailChars    0082
0126: ComTailCount    0081   0127
0901: ConBreak        E989   0725 0868
0934: ConBreak0       E9B7   0926
0936: ConBreak1       E9BA   0904
0792: ConIn           E91E   0497 0983 3532
0865: ConsoleOut      E968   0839 0851 0856 0944 0952 0959 0961 1053
3267: CopyDir         F3E0   2330 2733 3264
3253: CopyDirEntryToUser F3CD   2370 2380
3261: CopyFCB         F3D9   2767
0227: cpmRecordSize   0080   0229 0232 0234 2263 3257 3557
0056: CR              000D   0805 0958 0988 1052
0039: CTRL_C          0003   0929 1035 3501
0040: CTRL_E          0005   1000
0041: CTRL_H          0008   0811 0994 1139
0042: CTRL_K          000B
0043: CTRL_L          000C
0044: CTRL_P          0010   0912 1003
0045: CTRL_R          0012   1012
0046: CTRL_S          0013   0925
0047: CTRL_U          0015   1009
0048: CTRL_X          0018   1006
0049: CTRL_Z          001A
3584: currentDisk     F517   1204 1253 1669 1680 1686 1700 1814 2450 3063 3525
3647: currentFileRecord F54C   2032 2313 2469 2479 2514 2598 2635 3022 3286
3580: currentUserNumber F516   0776 0782 1791 3072
0067: DASH            002D
0261: DataBlocks      02C7   0271
0260: DataSectors     0B1C   0261
2772: DeleteFile      F170   2387
2776: DeleteFile1     F178   2788
1120: DeleteTheLine   EA8B   1007
1123: DeleteTheLine1  EA8C   1130
3354: DEminusHL2HL    F433
3651: dirBlockIndex   F550   2077 2184
0232: DirBuffSize     0080
0247: DirectoryBlockCount 0002   0272
0234: DirectoryEntryPerRecord 0004   0275
3635: directoryFlag   F540   3033 3131 3205
3557: dirEntriesPerRecord 0004   3559
3652: dirEntryIndex   F551   2070 2108 2146 2167 2169 2178 2198 3201
3559: dirEntryMask    0003   2179 3202
3558: dirEntryShift   0002   2199
0231: DirEntrySize    0020   0234 0272
3032: DirLocationToReturnLoc F2A1   1664 2388 2422
3653: dirRecord       F553   2202 2254 2273
0219: DiskCommandBlock 0046
0218: DiskControlByte 0045
0221: DiskControlTable 0040
2496: DiskEOF         EFEA   2476 2483 2489
0414: diskf           000B
3637: diskMapIndex    F542   2532 2562
2464: DiskRead        EFAF   1424
0223: DiskReadCode    0001
0228: diskSectorSize  0200   0229 0250 0258
0217: DiskStatusLocation 0043
2506: DiskWrite       EFF2   1431
2521: DiskWrite1      F00F   2516
2579: DiskWrite2      F060   2567
2585: DiskWrite3      F062   2525
2606: DiskWrite4      F082   2601
2617: DiskWrite5      F08F   2610
2636: DiskWrite6      F0AD   2632
2638: DiskWrite7      F0AF   2620 2624
0224: DiskWriteCode   0002
2501: DiskWriteSeq    EFED   2403
3522: displayAndWait  F4D2   3500 3518
0130: DMABuffer       0080   1206 3594
0060: DOLLAR          0024   0820 1797
2448: DoNotWrite      EF9C   2443 2794
0273: dpb3hdAL0       00C0
0274: dpb3hdAL1       0000
0269: dpb3hdBLM       000F
0268: dpb3hdBSH       0004
0275: dpb3hdCKS       0020
0272: dpb3hdDRM       007F   0275
0271: dpb3hdDSM       02C6
0270: dpb3hdEXM       0000
0277: dpb3hdNOH       0002
0276: dpb3hdOFF       0001
0267: dpb3hdSPT       0090
3619: dpbBLM          F530   3020
3618: dpbBSH          F52F   3012 3284
3624: dpbCKS          F538   2253
3623: dpbDABM         F536   1765
3622: dpbDRM          F534   1842 2166
3621: dpbDSM          F532   1733 1749 2962
3626: dpbEnd          F53C   3627
3620: dpbEXM          F531   2037 2661 3238
3625: dpbOFF          F53A   1971 2234
3627: dpbSize         000F   1729
3617: dpbSPT          F52D   2209
3616: dpbStart        F52D   1728 3627
0446: DUMMY           E8A6   0441 0442
3536: emDisk          F4F7   3527
3535: emDisk0         F4EB   3528
3537: emPermanent     F4FB   3496 3499
3570: emptyDir        00E5   1787 2783 3151 3591
3591: emptyFCB        F518   2743
3540: emReadOnlyDisk  F512   3510
3539: emReadOnlyFile  F50D   3514
3538: emSelection     F506   3506
0134: END_OF_FILE     001A
3200: EndDirElementSearch F395   3166
2145: EndOfDirectory  EE45   1574 1783 2326 2649 2684 2693 2727 2747 2778 2802 3082 3145
0037: EndOfMessage    0000
1046: EndRead         EA3B   0989 0992
3643: entryDisk       F548   0387 3064
0289: EOD             FFFF   2069
0075: EQUAL_SIGN      003D
3498: erPermanent     F4B1   3490
3495: erPermanentNoWait F4AB   2018 2917
3509: erReadOnlyDisk  F4C3   3492
3513: erReadOnlyFile  F4C9   3493
3478: errPermanent    F498
3472: errReadOnlyDisk F48C   2445
3475: errReadOnlyFile F492   2439
3469: errSelect       F486   1679
3505: erSelection     F4BD   3491
3490: evPermanent     F4A3   3479
3492: evReadOnlyDisk  F4A7   3473
3493: evReadOnlyFile  F4A9   3476
3491: evSelection     F4A5   3470
0058: EXCLAIM_POINT   0021
1171: exitParameterByte EAC2   0506 0615 0726 0752 0777 1254 1499 1509 1520 1527 1540 1801 2481 2551 2586 2629 2703 2793 2887 3034 3203 3218 3231
1172: exitParameterWord EAC2   0343 0394 0546 0635 1231 1292 1311 1326
3646: extentValue     F54B   2039 3298
0026: FALSE           0000   0919 1091 1429 1739 2507 3143
0122: FCB1            005C   0123
0123: FCB2            006C
3633: fcbCopiedFlag   F53E   2646 2664 2881
3553: fcbCurrentRecord 0021
3644: fcbDisk         F549   0345 0382 3066
3551: fcbDiskMapIndex 0010   1861 1863 2558 2722 2731 2805 2811 3325
3547: fcbExtIndex     000C   1478 1502 1561 1613 2059 2323 2329 2652 2672 2717 2732 2774 2860 2872 3100 3175
3546: fcbHiddenfileIndex 000A
3544: fcbLength       0020   1863 2755 2811 2860 3263 3557 3571
3550: fcbRCIndex      000F   1578 2048 2051 2872 3103 3122
3645: fcbRecordCount  F54A   2035 2317 2470 2599
3545: fcbROfileIndex  0009   2434
3548: fcbS1Index      000D   2762 3172
3549: fcbS2Index      000E   1484 1505 1630 2672 3046
3560: fcbShift        0005   2180
0167: fCloseFile      0010
0158: fConsoleIn      0001
0159: fConsoleOut     0002
0170: fDeleteFile     0013
0162: fGetConsoleStatus 000B
0176: fGetCurrentDisk 0019
0175: fGetLoginVector 0018
0178: fGetSetUserNumber 0020
0163: fGetVersion     000C
2543: FirstBlock      F02E   2535
0173: fMakeFile       0016
0166: fOpenFile       000F
0160: fPrintString    0009
0171: fReadSeq        0014
0161: fReadString     000A
0174: fRenameFile     0017
3642: fResel          F547   0346 0376 3054
0164: fResetSystem    000D
0168: fSearchFirst    0011
0169: fSearchNext     0012
0165: fSelectDisk     000E
0177: fSetDMA         001A
0444: functionCount   0028   0355
0401: functionTable   E854   0360 0414 0444
0172: fWriteSeq       0015
1907: GetAllocBit     ED7A   1949 2955 2973
1938: GetAllocBitl    ED9B   1941
2994: GetBlockNumber  F275   2487 2522
2944: GetClosestBlock F23B   2544
2075: GetDirElementAddress EE16   1577 1786 1859 2429 2782 2806 3091 3159 3273
3334: GetDiskMap16Bit F428   3330
3283: GetDiskMapIndex F3F5   2531 2995
3287: GetDiskMapIndex1 F3FC   3291
3299: GetDiskMapIndex2 F40A   3306
3309: GetDiskMapIndex3 F413   3303
3323: GetDiskMapValue F415   2539 2998
2057: GetExtentAddress EE07   2036 3087
2046: GetFcbRecordDetails EDFA   2029 2310
1560: GetFileSize     EBD9   1395
1573: GetFileSize1    EBEB   1601
1599: GetFileSize2    EC0D   1592
1602: GetFileSizeExit EC13   1575
3044: GetModuleNum    F2AE   1534 2612 2797 3039 3223
1607: GetRandomRecordPosition EC15   1549 1579
3482: GoToError       F49E   3471 3474 3477 3480 3497
0076: GREATER_THAN    003E
0059: HASH_TAG        0023   0943
3555: highestRecordNumber 007F   2515 2619
1968: Home            EDB3   1772 3137
1143: IgnoreTheLine   EAA9   1010
3594: initDAMAddress  F51D   1207 1275 1997 3256
1748: InitDisk        ECC1   1692
1779: InitDisk1       ECF3   1789 1807
1802: InitDisk2       ED17   1793 1798
1751: InitDiskLoop1   ECC6   1755
0114: IOBYTE          0003   0634 0654
3003: IsAllocated     F282   2488 2523
3404: IsBitSet        F458   1683 3426 3438
3411: IsBitSet1       F45F   3409
3406: IsBitSetLoop    F459   3414
1008: IsItDeleteTheLineU EA16
1005: IsItDeleteTheLineX EA11
1002: IsItPrintToggle EA0C
1092: IsItPrintToggle1 EA6D   1090
0996: IsItRubout      EA02
0999: IsPhysicalEOL   EA07
0804: IsPrintableASCII E929   0498 0834
1077: ItIsPhysicalEOL EA5A   1001
1084: ItIsPrintToggle EA62   1004
1065: ItIsRubout      EA4F   0998
1161: keyboardByte    EABB   0793 0902 0935
0062: L_PAREN         0028
0079: LEFT_ARROW      005F
0095: LEFT_CURLY      007B
0143: LengthInBytes   2000   0144 0148 0258
0144: LengthInK       0009
0074: LESS_THAN       003C
0055: LF              000A   0807 0888 0960 0990
1106: LL1             EA7B   1114
0029: LO_NIBBLE_MASK  000F   0781 1626
3593: loggedDisks     F51B   1202 1230 1682 1688 1690
2739: MakeNewFile     F13A   1518 2413 2691
2757: MakeNewFile1    F15C   2761
3565: maxExtValue     001F   2656 3248
0146: MemorySize      0040   0148
2923: Merge           F22D   2839 2841
3566: moduleMask      000F   2677
3386: Move            F44E   3096 3258 3275
3388: Move0           F44F   3395
0259: myOffset        0001   0260 0276
3568: nameLength      000F   2367 2682 2753 2755 2800 3080
3571: NEXT_RECORD     0020   1473 1548 2051 3094 3572
3070: NoSelect        F2DB   3061
0931: NothingWaiting  E9B5   0922
0051: NULL            0000
0243: NumberOfHeads   0002   0254 0256 0267 0277
0240: NumberOfLogicalDisks 0004
0028: OFF             0000
0027: ON              FFFF
3079: OpenFile        F2E4   1508 2346
3086: OpenFileCopyFCB F2ED   2699
2644: OpenNextExt     F0B2   2477 2627
2681: OpenNextExt1    F0E6   2666
2698: OpenNextExt2    F104   2668 2685
2700: OpenNextExt3    F107   2695
2707: OpenNextExtError F10F   2678 2689 2694
2671: OpenNextModule  F0DB   2658
3120: OpenRecordCount F31E   3116 3118
1170: paramDE         EAC0   0335 0380 0677 0969 1048 1103 1274 1442 1547 1564 2047 2058 2360 2377 2511 2557 2651 2720 2741 2744 2749 2809 3045 3055 3073 3093 3121 3134 3270 3324
1169: paramE          EABF   0337 0388 0773 1668 3059
0061: PERCENT         0025
0068: PERIOD          002E
0117: Pg0CurentDisk   0004
0116: Pg0CurentUser   0004   0117
0065: PLUS_SIGN       002B
0818: Print           E938   0680 0827 3529 3531
1163: printEchoFlag   EABC   0876 0915 1087
0077: QMARK           003F   2362 3168
2368: QMarkSelect     EF4A   2363
0063: R_PAREN         0029
0110: RAM             0000   0112 0113 0114 0116 0119 0122 0125 0130 0132
3572: RANDOM_REC_FIELD 0021   1444 1550 1565
1421: RandomDiskRead  EB23   1376
1428: RandomDiskWrite EB2C   1388
1438: RandomSeek      EB35   1423 1430
1492: RandomSeekClose EB79   1482
1537: RandomSeekError EBBE   1471
1530: RandomSeekErrorBadSeek EBB7   1501 1517 1522
1524: RandomSeekExit  EBB1   1491 1511
2015: ReadBuffer      EDDB   2159 2493
2165: ReadDirectory   EE57   1782 3144
2177: ReadDirectory0  EE6B   2172
2181: ReadDirectory1  EE72   2183
2157: ReadDirRecord   EE4E   2190
1026: ReadEchoRubOut  EA23   1074
3634: readModeFlag    F53F   2466 2508 2687
0979: ReadNext        E9EA   1043 1069 1095 1117
0982: ReadNext0       E9EC   1062 1081
3592: readOnlyVector  F519   1201 1310 1830 1838 2449
2458: ReadSeq         EFAA   2395
0966: ReadString      E9DD   0710 1127 1149
3447: ReAlignMap      F478   3430
3454: ReAlignMap1     F47F   3452
3449: ReAlignMapLoop  F479   3457
2486: RecordOK        EFD4   2473
0252: RecordsPerBlock 0010
0236: RecordsPerExtent 0080   2475 3119 3555
0229: recordsPerSector 0004   0252 0267
2714: Rename          F115   2421
2726: Rename1         F126   2736
1098: RepeatLine      EA72   1013
3052: Reselect        F2B7   1375 1387 1394 1662 2345 2351 2366 2378 2386 2394 2402 2412 2420
3436: ResetMapBit     F471
2979: ReturnBlockNumber F269   2957 2975
2989: ReturnBlockZero F271   2967
0375: ReturnToCaller  E82F   0349
0391: ReturnToCaller1 E84A   0378 0384 0613
1959: RotateAndReplace EDAC   1953 1962 2983
0080: RUBOUT          007F   0997
1857: ScanDiskMap     ED4C   1805 2785
1865: ScanDiskMap0    ED56   1897
1881: ScanDiskMap1    ED69   1873
1890: ScanDiskMap2    ED6F   1879
3129: Search4DirElement F327   1562 2324 2369 2683 2718 2746 2775 2801 3081
3184: Search4Ext      F385   3177
3142: Search4NextDirElement F33F   1600 2331 2379 2735 2787 3138 3180 3189
3158: Search4NextDirElement1 F35C   3152
3163: Search4NextLoop F365   3197
3192: Search4NextOK   F38E   3169 3173 3181
3639: searchAddress   F544   2376 3135 3148
3215: SearchDone      F3A6   3146 3157
3638: searchLength    F543   3132 3160
0281: SectorMask      0003
0246: SectorsPerBlock 0004   0250 0252 0255 0261 0281
0256: SectorsPerCylinder 0024   0259 0260
0245: SectorsPerTrack 0012   0254 0256 0267
2206: Seek            EE96   2203 2492 2592
2211: Seek0           EEA0   2215
3277: SeekAndCopy     F3EF
2892: SeekCopy        F20F   2882
2197: SeekDir         EE85   2189 2893 3278
1677: Select          EC5A   1209 1673
1667: SelectCurrent   EC4E   0389 1361 3069
1699: SelectDisk      EC7B   1678
1742: SelectDisk1     ECBD   1738
0073: SEMICOLON       003B
3636: seqReadFlag     F541   1440 2311 2460 2503 2622
3011: SetActualRecordAdd F288   2491 2591
3015: SetActualRecordAdd1 F28E   3018
1947: SetAllocBit     EDA1   1893
2322: SetAttributes   EF12   1663
2325: SetAttributes1  EF17   2332
1812: SetCurrentDiskBit ED22   1837
1996: SetDataDMA      EDCD   1208 1276 2160 2906
2002: SetDirDMA       EDD2   2158 2903
2087: SetDirectoryEntry EE22   1806 2765
1829: SetDiskReadOnly ED35   1658 2284
2007: SetDMA          EDD5   1998
2068: SetEndDirectory EE0F   1777 2173 3136 3216
3222: SetFileWriteFlag F3AF   1542 2709 2769 3098
3229: SetLowReturnTo1 F3B6   2497 2517 2708
3424: SetMapBit       F468   1689
2288: SetNewCheckSum  EEFE   2277
1546: SetRandomRecord EBC6   1401
2028: SetRecordVars   EDE3   2468 2513 2701
0780: SetUserNumber   E918   0775
3377: ShiftLeftHLbyC  F447   1817
3379: ShiftLeftHLbyC0 F448   3383
2126: ShiftRightHLbyB EE38   2134 2200
2131: ShiftRightHLbyB1 EE3E   2129
3363: ShiftRightHLbyC F43A   2452
3365: ShiftRightHLbyC0 F43B   3375
0957: showCRLF        E9D3   0945 1080 3524
0942: showHashCRLF    E9BD   1101 1144
0946: showHashCRLF1   E9C5   0953
0069: SLASH           002F
0052: SOH             0001
0057: SPACE           0020   0813 0855 0885 0951 1135 1145 1147
0288: STACK_SIZE      0020   3659
3659: stackBottom     F555
1166: startingColumn  EABD   0948 0968 1124
2107: StillInDirectory EE2B   2088 2282 3155
0258: SystemSectors   0011   0259
0054: TAB             0009   0809 0850
0848: TabOut          E955   0503 0525 0825 0835
0854: TabOut0         E95B   0859
2947: TestLeft        F23D   2978
2961: TestRight       F24E   2950
0920: ToggleFlag1     E9A6   0918
0120: TopRAM          0007
0255: TotalNumberOfBlocks 02D0
0254: TotalNumberOfSectors 0B40   0255 0260
0132: TPA             0100
0244: TracksPerHead   0050   0254
0025: TRUE            FFFF   0916 0937 1088 1422 1736 1743 1781 2465 2880 2900 3053
0078: UNDER_SCORE     005F
2309: UpdateRecordVars EF00   2494 2626 2639
1159: usersStack      EAB9   0339 0392
2350: vCloseFile      EF31   0419
1393: vComputeFileSize EB19   0438
0496: vConsoleIn      E8AA   0403
0524: vConsoleOut     E8BB   0404
2385: vDeleteFile     EF5F   0422
0601: vDirectConIO    E8CE   0408
0610: vDirectConIO1   E8D6   0604
0287: VERSION         0020   0751
2358: vFindFirst      EF37   0420
2375: vFindNext       EF50   0421
1290: vGetAllocAddr   EAF4   0430
0724: vGetConsoleStatus E8FD   0413
1252: vGetCurrentDisk EAE4   0428
1324: vGetDiskParamBlock EB02   0434
0633: vGetIOBYTE      E8E4   0409
1229: vGetLoginVector EADD   0427
1309: vGetReadOnlyMap EAFB   0432
0772: vGetSetUserNumber E90A   0435
0750: vGetVersion     E904   0415
0578: vListOut        E8CA   0407
2410: vMakeFile       EF76   0425
2343: vOpenFile       EF28   0418
0676: vPrintString    E8F0   0411
0563: vPunchOut       E8C6   0406
0544: vReaderIn       E8BF   0405
1374: vReadRandom     EB0D   0436
2393: vReadSeq        EF68   0423
0709: vReadString     E8F9   0412
2419: vRenameFile     EF7F   0426
1352: vResetDrive     EB09   0440
1199: vResetSystem    EAC4   0416
1360: vSelectDisk     EB0A   0417
1273: vSetDMA         EAEB   0429
1661: vSetFileAttributes EC45   0433
0653: vSetIOBYTE      E8EB   0410
1400: vSetRandomRecord EB1F   0439
0464: vSystemReset    E8A7   0402
1657: vWriteProtectDisk EC42   0431
1386: vWriteRandom    EB13   0437
1414: vWriteRandom0Fill EB22   0443
2401: vWriteSeq       EF6F   0424
3517: waitB4boot      F4CC   3507 3511
0112: WarmBoot        0000   0930 1039 3502 3519
0032: WORD            0002   1170 1172
0192: WriteAllocated  0000   2524
2914: WriteBuffer     F225   2595 2905
0194: WriteCleanBuffer 0002   2580
2898: WriteDir        F215   2786 2894 3279
0193: WriteDirectory  0001
3567: writeFlagMask   0080   2798 3224
3668: Z_HighestLocation F595   3669
3669: Z_MemoryLeft    006A
0036: ZERO            0000
