0001: E800         ;     File created by MakeZ80Source on Tue Sep 18 12:41:03 EDT 2018 from:
0002: E800         ;     C:\Users\admin\Dropbox\Resources\CPM\CurrentOS\8080\BDOSX.asm
0003: E800         ; BDOS.Z80
0004: E800
0005: E800
0006: E800         ; 2019-01-11 - BDOS 0.B  - Function 0-A Refactored to Z80 idiom
0007: E800         ; 2018-12-28 Started to refactor to Z80 idiom
0008: E800         ; 2018-03-31 added vector for BDOS Call 5 -ListOut
0009: E800         ; 2018-03-02 Refactored the CP/M Suite
0010: E800         ; 2018-02-12 fixed allocate 16 bit problem
0011: E800         ; 2014-01-16 extended from part of newOS (newBDOS)
0012: E800         ; 2014-03-14  :  Frank Martyn
0013: E800
0014: E800
0015: E800                        Include ./stdHeader.Z80
0016: E800         ;<<<<<<<<<<<<<<<<<<<<<<< Include >>>>>>>>>>>>>>>>
0017: E800         ;     File created by MakeZ80Source on Mon Sep 17 16:25:01 EDT 2018 from:
0018: E800         ;     C:\Users\admin\Dropbox\Resources\CPM\CurrentOS\8080\stdHeader.asm
0019: E800         ; stdHeader.asm
0020: E800         ; standard equates
0021: E800
0022: E800         ; 2017-03-02 Refactored the CP/M Suite
0023: E800
0024: E800
0025: E800             TRUE       EQU    -1                   ; not false
0026: E800             FALSE      EQU    0000H
0027: E800             ON         EQU    -1
0028: E800             OFF        EQU    0000H
0029: E800             LO_NIBBLE_MASK EQU    0FH                  ; mask used to obtain the bytes low four bits
0030: E800
0031: E800             BYTE       EQU    1                    ; number of bytes for "byte" type
0032: E800             WORD       EQU    2                    ; number of bytes for "word" type
0033: E800
0034: E800
0035: E800             ASCII_MASK EQU    7FH                  ; Ascii mask 7 bits
0036: E800             ZERO       EQU    00H                  ; Zero
0037: E800             EndOfMessage EQU    00H
0038: E800
0039: E800             CTRL_C     EQU    03H                  ; ETX
0040: E800             CTRL_E     EQU    05H                  ; physical eol
0041: E800             CTRL_H     EQU    08H                  ; backspace
0042: E800             CTRL_K     EQU    0BH                  ; VT - Vertical tab
0043: E800             CTRL_L     EQU    0CH                  ; FF - Form feed
0044: E800             CTRL_P     EQU    10H                  ; prnt toggle
0045: E800             CTRL_R     EQU    12H                  ; repeat line
0046: E800             CTRL_S     EQU    13H                  ; X-OFF stop/start screen
0047: E800             CTRL_U     EQU    15H                  ; line delete
0048: E800             CTRL_X     EQU    18H                  ; =ctl-u
0049: E800             CTRL_Z     EQU    1AH                  ; end of file
0050: E800
0051: E800             NULL       EQU    00H                  ; Null
0052: E800             SOH        EQU    01H                  ; Start of Heading
0053: E800             BELL       EQU    07H                  ; Bell
0054: E800             TAB        EQU    09H                  ; Tab
0055: E800             LF         EQU    0AH                  ; Line Feed
0056: E800             CR         EQU    0DH                  ; Carriage Return
0057: E800             SPACE      EQU    20H                  ; Space
0058: E800             EXCLAIM_POINT EQU    21H                  ; Exclamtion Point
0059: E800             HASH_TAG   EQU    23H                  ; Sharp sign #
0060: E800             DOLLAR     EQU    24H                  ; Dollar Sign
0061: E800             PERCENT    EQU    25H                  ; Percent Sign
0062: E800             L_PAREN    EQU    28H                  ; Left Paenthesis (
0063: E800             R_PAREN    EQU    29H                  ; Right Paenthesis )
0064: E800             ASTERISK   EQU    2AH                  ; Asterisk *
0065: E800             PLUS_SIGN  EQU    2BH                  ; Plus sign +
0066: E800             COMMA      EQU    2CH                  ; Comma
0067: E800             DASH       EQU    2DH                  ; Dash Hyphen -
0068: E800             PERIOD     EQU    2EH                  ; Period
0069: E800             SLASH      EQU    2FH                  ; /
0070: E800             ASCII_ZERO EQU    30H                  ; zero
0071: E800             COLON      EQU    3AH                  ; Colon
0072: E800
0073: E800             SEMICOLON  EQU    3BH                  ; Semi Colon
0074: E800             LESS_THAN  EQU    3CH                  ; Less Than <
0075: E800             EQUAL_SIGN EQU    3DH                  ; Equal Sign
0076: E800             GREATER_THAN EQU    3EH                  ; Greater Than >
0077: E800             QMARK      EQU    3FH                  ; Question Mark
0078: E800             UNDER_SCORE EQU    5FH                  ; under score _
0079: E800             LEFT_ARROW EQU    5FH                  ; Left Arrow ?
0080: E800             RUBOUT     EQU    7FH                  ; Delete Key
0081: E800
0082: E800
0083: E800             ASCII_A    EQU    'A'
0084: E800             ASCII_C    EQU    'C'
0085: E800             ASCII_K    EQU    'K'
0086: E800             ASCII_N    EQU    'N'
0087: E800             ASCII_Q    EQU    'Q'
0088: E800             ASCII_R    EQU    'R'
0089: E800             ASCII_W    EQU    'W'
0090: E800             ASCII_Y    EQU    'Y'
0091: E800             CARET      EQU    '^'
0092: E800             ASCII_LO_A EQU    'a'
0093: E800             ASCII_LO_K EQU    'k'
0094: E800             ASCII_LO_P EQU    'p'
0095: E800             LEFT_CURLY EQU    '{'                  ; Left curly Bracket
0096: E800
0097: E800         ;<<<<<<<<<<<<<<<<<<<<<<< Include >>>>>>>>>>>>>>>>
0098: E800                        Include ./osHeader.Z80
0099: E800         ;<<<<<<<<<<<<<<<<<<<<<<< Include >>>>>>>>>>>>>>>>
0100: E800         ;     File created by MakeZ80Source on Mon Sep 17 16:25:47 EDT 2018 from:
0101: E800         ;     C:\Users\admin\Dropbox\Resources\CPM\CurrentOS\8080\osHeader.asm
0102: E800         ; osHeader.Z80
0103: E800
0104: E800         ; 2018-12-28 Changed BDOSEntry to remove dead space in BDOS
0105: E800         ; 2017-03-02 Refactored the CP/M Suite
0106: E800
0107: E800         ; Contains the Equates used by the CP/M system
0108: E800
0109: E800         ;------------------------Page Zero Constants ---------------------------------
0110: E800             RAM        EQU    0                    ; Start of RAM ( and the Base page)
0111: E800
0112: E800             WarmBoot   EQU    RAM + 0              ; Contains a JMP instruction to warm boot in BIOS
0113: E800             BIOSPAGE   EQU    RAM + 2              ; BIOS Jump Vector Page
0114: E800             IOBYTE     EQU    RAM + 3              ; Input/Output redirection byte
0115: E800
0116: E800             Pg0CurentUser EQU    RAM + 4              ; Current user ( bits 7-4)
0117: E800             Pg0CurentDisk EQU    Pg0CurentUser        ; Default logical disk (bits 0-3)
0118: E800
0119: E800             BDOSE      EQU    RAM + 5              ; Contains a JMP to BDOS entry
0120: E800             TopRAM     EQU    BDOSE+2              ; Top page of usable RAM
0121: E800
0122: E800             FCB1       EQU    RAM + 05CH           ; File Control Block #1
0123: E800             FCB2       EQU    FCB1 + 16            ; File Control Block #2
0124: E800
0125: E800             ComTail    EQU    RAM + 080H           ; Complete command tail
0126: E800             ComTailCount EQU    ComTail + 1          ; Count of the number of char in tail
0127: E800             ComTailChars EQU    ComTailCount + 1     ; Complete Command tail up-cased, w/o trailing CR
0128: E800         ;-----------------------------------------------------------------------
0129: E800
0130: E800             DMABuffer  EQU    RAM + 080H           ; Default "DMA" address used as buffer
0131: E800         ;-----------------------------------------------------------------------
0132: E800             TPA        EQU    RAM + 0100H          ; Start of Transient program Area
0133: E800         ;-----------------------------------------------------------------------
0134: E800             END_OF_FILE EQU    1AH                  ; end of file
0135: E800         ;-----------------------------------------------------------------------
0136: E800
0137: E800         ;--------------- CP/M Constants -----------------------------------------
0138: E800
0139: E800             CCPLength  EQU    0800H                ; Constant
0140: E800             BDOSLength EQU    0E00H                ; Constant 0E00H
0141: E800             BIOSLength EQU    0A00H                ; Constant 0900H
0142: E800
0143: E800             LengthInBytes EQU    CCPLength + BDOSLength + BIOSLength
0144: E800             LengthInK  EQU    (LengthInBytes/1024) + 1
0145: E800
0146: E800             MemorySize EQU    64
0147: E800
0148: E800             CCPEntry   EQU    (MemorySize * 1024) - LengthInBytes
0149: E800
0150: E800             BDOSBase   EQU    CCPEntry + CCPLength
0151: E800             BDOSEntry  EQU    BDOSBase
0152: E800
0153: E800             BIOSBase   EQU    BDOSBase + BDOSLength
0154: E800             BIOSStart  EQU    CCPEntry + CCPLength + BDOSLength
0155: E800         ;-----------------------------------------------------------------------
0156: E800
0157: E800         ;------------------- BDOS System Call Equates --------------------------
0158: E800             fConsoleIn EQU    01H                  ; rcharf - Console Input
0159: E800             fConsoleOut EQU    02H                  ; pcharf - Console Output
0160: E800             fPrintString EQU    09H                  ; pbuff	- Print String
0161: E800             fReadString EQU    0AH                  ; rbuff	- Read Console String
0162: E800             fGetConsoleStatus EQU    0BH                  ; breakf - Get Console Status
0163: E800             fGetVersion EQU    0CH                  ; liftf	- Return Version Number
0164: E800             fResetSystem EQU    0DH                  ; initf	- Reset Disk System
0165: E800             fSelectDisk EQU    0EH                  ; self	- Select Disk
0166: E800             fOpenFile  EQU    0FH                  ; openf	- Open File
0167: E800             fCloseFile EQU    10H                  ; closef - Close File
0168: E800             fSearchFirst EQU    11H                  ; searf	- Search For First
0169: E800             fSearchNext EQU    12H                  ; searnf - Search for Next
0170: E800             fDeleteFile EQU    13H                  ; delf - Delete File
0171: E800             fReadSeq   EQU    14H                  ; dreadf - Read Sequential
0172: E800             fWriteSeq  EQU    15H                  ; dwritf - Write Sequential
0173: E800             fMakeFile  EQU    16H                  ; makef	- Make File
0174: E800             fRenameFile EQU    17H                  ; renf	- Rename File
0175: E800             fGetLoginVector EQU    18H                  ; logf	- Return Login Vector
0176: E800             fGetCurrentDisk EQU    19H                  ; cself	- Return Current Disk
0177: E800             fSetDMA    EQU    1AH                  ; dmaf	- Set DMA address
0178: E800             fGetSetUserNumber EQU    20H                  ; userf	- Set/Get User Code
0179: E800         ;-----------------------------------------------------------------------
0180: E800
0181: E800
0182: E800
0183: E800
0184: E800
0185: E800         ;*******************************************************************************
0186: E800         ; These are the values handed over by the BDOS when it calls the Writer operation
0187: E800         ; The allocated.unallocated indicates whether the BDOS is set to write to an
0188: E800         ; unallocated allocation block (it only indicates this for the first 128 byte
0189: E800         ; sector write) or to an allocation block that has already been allocated to a
0190: E800         ; file. The BDOS also indicates if it is set to write to the file directory
0191: E800         ;*******************************************************************************
0192: E800             WriteAllocated EQU    00H
0193: E800             WriteDirectory EQU    01H
0194: E800             WriteCleanBuffer EQU    02H
0195: E800
0196: E800
0197: E800         ;<<<<<<<<<<<<<<<<<<<<<<< Include >>>>>>>>>>>>>>>>
0198: E800                        Include ./diskHeader.Z80
0199: E800         ;<<<<<<<<<<<<<<<<<<<<<<< Include >>>>>>>>>>>>>>>>
0200: E800         ;     File created by MakeZ80Source on Mon Sep 17 16:26:22 EDT 2018 from:
0201: E800         ;     C:\Users\admin\Dropbox\Resources\CPM\CurrentOS\8080\diskHeader.asm
0202: E800         ; diskHeader.asm
0203: E800
0204: E800         ; 2017-03-02 Refactored the CP/M Suite
0205: E800
0206: E800         ; needs osHeader.asm declared before this is used !!!!!!!
0207: E800
0208: E800         ; Contains the Equates used by the CP/M system to handle disks
0209: E800
0210: E800
0211: E800         ;*******************************************************************************
0212: E800         ;
0213: E800         ;     Disk related values
0214: E800         ;
0215: E800         ;
0216: E800         ;*******************************************************************************
0217: E800             DiskStatusLocation EQU    043H                 ; status after disk I/O placed here
0218: E800             DiskControlByte EQU    045H                 ; control byte for disk I/O
0219: E800             DiskCommandBlock EQU    046H                 ; Control Table Pointer
0220: E800         ; for boot
0221: E800             DiskControlTable EQU    0040H
0222: E800
0223: E800             DiskReadCode EQU    01H                  ; Code for Read
0224: E800             DiskWriteCode EQU    02H                  ; Code for Write
0225: E800
0226: E800
0227: E800             cpmRecordSize EQU    080H                 ; (128) record size that CP/M uses
0228: E800             diskSectorSize EQU    200H                 ; (512) size of physical disk I/O
0229: E800             recordsPerSector EQU    diskSectorSize/cpmRecordSize
0230: E800
0231: E800             DirEntrySize EQU    20H                  ; (32)
0232: E800             DirBuffSize EQU    cpmRecordSize
0233: E800
0234: E800             DirectoryEntryPerRecord EQU    cpmRecordSize / DirEntrySize
0235: E800
0236: E800             RecordsPerExtent EQU    080H                 ; extent Record capacity
0237: E800
0238: E800
0239: E800         ;-------------------------------------------------------------------------------------
0240: E800             NumberOfLogicalDisks EQU    4                    ; max number of disk in this system
0241: E800
0242: E800         ;----------------------3.5 Double Density Disk Geometry----------------------------------------
0243: E800             NumberOfHeads EQU    02H                  ; number of heads
0244: E800             TracksPerHead EQU    50H                  ; 80
0245: E800             SectorsPerTrack EQU    12H                  ; 18 -  1 head only
0246: E800             SectorsPerBlock EQU    04H                  ; 2048 bytes
0247: E800             DirectoryBlockCount EQU    02H                  ;
0248: E800         ;-----------------------------------------------------------------------
0249: E800
0250: E800             BlockSize  EQU    SectorsPerBlock * 	diskSectorSize ; Size in Bytes
0251: E800
0252: E800             RecordsPerBlock EQU    recordsPerSector * SectorsPerBlock
0253: E800
0254: E800             TotalNumberOfSectors EQU    SectorsPerTrack * TracksPerHead * NumberOfHeads
0255: E800             TotalNumberOfBlocks EQU    TotalNumberOfSectors / SectorsPerBlock
0256: E800             SectorsPerCylinder EQU    SectorsPerTrack * NumberOfHeads
0257: E800
0258: E800             SystemSectors EQU    LengthInBytes / diskSectorSize + 1 ; need to account for boot sector
0259: E800             myOffset   EQU    (SystemSectors / SectorsPerCylinder) + 1 ;
0260: E800             DataSectors EQU    TotalNumberOfSectors - (SectorsPerCylinder * myOffset)
0261: E800             DataBlocks EQU    DataSectors / 	SectorsPerBlock
0262: E800
0263: E800         ;-----------------------------------------------------------------------
0264: E800         ;; Disk block parameters for F3HD - 3.5 HD   1.44 MB Diskette
0265: E800         ;-----------------------------------------------------------------------
0266: E800         ;dpb3hdSPT				EQU		0090H			; cpmRecords per track- (144)
0267: E800             dpb3hdSPT  EQU    recordsPerSector * SectorsPerTrack * NumberOfHeads ; SPT - records per Clynder
0268: E800             dpb3hdBSH  EQU    04H                  ; Block Shift Factor - BlockSize = 128 * (2**BSH)											; BSH = Log2(BlockSize/cpmRecordSize)
0269: E800             dpb3hdBLM  EQU    0FH                  ; BlockMask = (2**BSH) -1
0270: E800             dpb3hdEXM  EQU    00H                  ; Extent mask = (PhysicalExtents/LogicalExtents) - 1
0271: E800             dpb3hdDSM  EQU    DataBlocks -1        ; Maximum allocation block number (710)
0272: E800             dpb3hdDRM  EQU    ((BlockSize *  DirectoryBlockCount)	/	DirEntrySize) -1 ; DRM Number of directory entries - 1 (127)
0273: E800             dpb3hdAL0  EQU    0C0H                 ; Bit map for reserving 1 alloc. block
0274: E800             dpb3hdAL1  EQU    00H                  ;  for each file directory
0275: E800             dpb3hdCKS  EQU    (dpb3hdDRM +1)/ DirectoryEntryPerRecord ; Disk change work area size (32)
0276: E800             dpb3hdOFF  EQU    myOffset             ; Number of tracks before directory
0277: E800             dpb3hdNOH  EQU    NumberOfHeads
0278: E800
0279: E800         ;*******************************************************************************
0280: E800
0281: E800             SectorMask EQU    SectorsPerBlock - 1
0282: E800
0283: E800         ;***************************************************************************
0284: E800
0285: E800         ;<<<<<<<<<<<<<<<<<<<<<<< Include >>>>>>>>>>>>>>>>
0286: E800
0287: E800             VERSION    EQU    20H                  ; Version 2.0
0288: E800             STACK_SIZE EQU    20H                  ; Make stack big enough
0289: E800             EOD        EQU    -1                   ; End of Directory
0290: E800
0291: E800         ;************************ BIOS Function Constants ***************************;
0292: E800             bcBoot     EQU    BIOSStart+3*0        ; Cold Boot function	             ;
0293: E800             bcWboot    EQU    BIOSStart+3*1        ; Warm Boot function                 ;
0294: E800             bcConst    EQU    BIOSStart+3*2        ; Console Status function            ;
0295: E800             bcConin    EQU    BIOSStart+3*3        ; Console Input function             ;
0296: E800             bcConout   EQU    BIOSStart+3*4        ; Console Output function            ;
0297: E800             bcList     EQU    BIOSStart+3*5        ; List Output function               ;
0298: E800             bcPunch    EQU    BIOSStart+3*6        ; Punch Output function              ;
0299: E800             bcReader   EQU    BIOSStart+3*7        ; Reader Input function              ;
0300: E800             bcHome     EQU    BIOSStart+3*8        ; Disk Home function                 ;
0301: E800             bcSeldsk   EQU    BIOSStart+3*9        ; Select Disk function               ;
0302: E800             bcSettrk   EQU    BIOSStart+3*10       ; Set Track function                 ;
0303: E800             bcSetsec   EQU    BIOSStart+3*11       ; Set Sector function                ;
0304: E800             bcSetdma   EQU    BIOSStart+3*12       ; Set DMA function                   ;
0305: E800             bcRead     EQU    BIOSStart+3*13       ; Read Disk function                 ;
0306: E800             bcWrite    EQU    BIOSStart+3*14       ; Write Disk function                ;
0307: E800             bcListst   EQU    BIOSStart+3*15       ; List Status function               ;
0308: E800             bcSectran  EQU    BIOSStart+3*16       ; Sector Translate                   ;
0309: E800         ;************************ BIOS Function Constants ***************************;
0310: E800
0311: E800         ;============================================================================;
0312: E800         ;	BDOS                                                                     ;
0313: E800         ; Calling into   :                                                           ;
0314: E800         ;					Register  C - Contains BDOS Function Code                ;
0315: E800         ;					Register  A - Holds the Byte argument if any             ;
0316: E800         ;					Register DE - Holds the Word argument if any             ;
0317: E800         ; Returning from :                                                           ;
0318: E800         ;					Register  A - The Byte return value if any               ;
0319: E800         ;					Register HL - The Word return value if any               ;
0320: E800         ;                   ( Register A=L and B=H)                                  ;
0321: E800         ;============================================================================;
0322: E800
0323: E800
0324: E800                        ORG    BDOSBase
0325: E800
0326: E800         ;===========================BDOS Entry=======================================;
0327: E800         ;BDOSEntry:                                                                  ;
0328: E800         ;
0329: E800         ;
0330: E800             BdosStart:                      ;
0331: E800         ;	LD		A,C                                                              ;
0332: E800         ; 	LD		(FunctionValue),A			; Save the function number           ;
0333: E800         ;
0334: E800         ; Save Calling Arguments                                                     ;
0335: E800 ED 53 C0 EA               LD     (paramDE),DE         ; Save the Word Argument             ;
0336: E804 7B                     LD     A,E                  ;
0337: E805 32 BF EA               LD     (paramE),A           ; Save the Byte argument             ;
0338: E808         ; Save users Stack pointer                                                   ;
0339: E808 ED 73 B9 EA               LD     (usersStack),SP      ; We will use our own stack          ;
0340: E80C         ;
0341: E80C         ; initialize variables                                                       ;
0342: E80C 21 00 00               LD     HL,0000H             ;
0343: E80F 22 C2 EA               LD     (exitParameterWord),HL ; Assume all is well for return      ;
0344: E812 AF                     XOR    A                    ;
0345: E813 32 66 F5               LD     (fcbDisk),A          ; Initialize to 00                   ;
0346: E816 32 64 F5               LD     (fResel),A           ; Clear re selection flag            ;
0347: E819         ;
0348: E819         ; Set up for return to caller when Function Completes                        ;
0349: E819 21 2F E8               LD     HL,ReturnToCaller    ;
0350: E81C E5                     PUSH   HL                   ;Set up to ReturnToCaller            ;
0351: E81D         ;
0352: E81D         ; is it a valid function number ?	                                         ;
0353: E81D         ;	LD		A,(FunctionValue)			; Get the Function Number            ;
0354: E81D 79                     LD     A,C                  ;
0355: E81E FE 28                  CP     functionCount        ; make sure its a good number        ;
0356: E820 D0                     RET    NC                   ; exit if not a valid function       ;
0357: E821         ;
0358: E821         ; Calculate the index and get vector to go to	                             ;
0359: E821 4B                     LD     C,E                  ; Assume byte argument               ;
0360: E822 21 54 E8               LD     HL,functionTable     ; Get table base                     ;
0361: E825 5F                     LD     E,A                  ; Function number in E               ;
0362: E826 16 00                  LD     D,0                  ;
0363: E828 19                     ADD    HL,DE                ; Have byte location                 ;
0364: E829 19                     ADD    HL,DE                ;  but we want a Word offset         ;
0365: E82A 5E                     LD     E,(HL)               ; Get LSB of vector                  ;
0366: E82B 23                     INC    HL                   ;
0367: E82C 56                     LD     D,(HL)               ; Get MSB of vector                  ;
0368: E82D EB                     EX     DE,HL                ; Vector now in HL                   ;
0369: E82E         ;
0370: E82E         ; Vector to Function is in HL                                                ;
0371: E82E E9                     JP     (HL)                 ; Put it into the Program Counter    ;
0372: E82F         ;===========================BDOS Entry=======================================;
0373: E82F         ;===========================BDOS Exit =======================================;
0374: E82F         ;arrive here at end of processing to return to user                          ;
0375: E82F             ReturnToCaller:                      ;
0376: E82F 3A 64 F5               LD     A,(fResel)           ; get re-selection flag              ;
0377: E832 B7                     OR     A                    ; is it set?                         ;
0378: E833 28 15                  JR     Z,ReturnToCaller1    ;
0379: E835         ;re-selection  may have taken place                                         ;
0380: E835 2A C0 EA               LD     HL,(paramDE)         ;
0381: E838 36 00                  LD     (HL),0               ;
0382: E83A 3A 66 F5               LD     A,(fcbDisk)          ;
0383: E83D B7                     OR     A                    ; Disk = 0?                          ;
0384: E83E 28 0A                  JR     Z,ReturnToCaller1    ; exit if yes                  		 ;
0385: E840         ;
0386: E840 77                     LD     (HL),A               ;
0387: E841 3A 65 F5               LD     A,(entryDisk)        ; get back original Disk             ;
0388: E844 32 BF EA               LD     (paramE),A           ; and select it                      ;
0389: E847 CD 4E EC               CALL   SelectCurrent        ;
0390: E84A         ;
0391: E84A             ReturnToCaller1:                      ;
0392: E84A 2A B9 EA               LD     HL,(usersStack)      ;
0393: E84D F9                     LD     SP,HL                ; restore callers stack              ;
0394: E84E 2A C2 EA               LD     HL,(exitParameterWord) ;
0395: E851 7D                     LD     A,L                  ;
0396: E852 44                     LD     B,H                  ; BA = exitParameterWord             ;
0397: E853 C9                     RET                         ;
0398: E854         ;===========================BDOS Exit =======================================;
0399: E854
0400: E854         ;++++++++++++++++++++++++++++ Function Vector Table +++++++++++++++++++++++++;
0401: E854             functionTable:                      ;
0402: E854 A7 E8                  DW     vSystemReset         ;   0 - System Reset                 ;
0403: E856 AA E8                  DW     vConsoleIn           ;   1 - Console Input                ;
0404: E858 BB E8                  DW     vConsoleOut          ;   2 - Console Output               ;
0405: E85A BF E8                  DW     vReaderIn            ;   3 - Reader Input                 ;
0406: E85C C6 E8                  DW     vPunchOut            ;   4 - Punch Output                 ;
0407: E85E CA E8                  DW     vListOut             ;   5 - List Output                  ;
0408: E860 CE E8                  DW     vDirectConIO         ;   6 - Direct Console I/O           ;
0409: E862 E4 E8                  DW     vGetIOBYTE           ;   7 - Get I/O Byte                 ;
0410: E864 EB E8                  DW     vSetIOBYTE           ;   8 - Set I/O Byte                 ;
0411: E866 F0 E8                  DW     vPrintString         ;   9 - Print String                 ;
0412: E868 F9 E8                  DW     vReadString          ;   A - Read Console String          ;
0413: E86A FD E8                  DW     vGetConsoleStatus    ;   B - Get Console Status           ;
0414: E86C             diskf      EQU    ($-functionTable)/2  ; disk functions                     ;
0415: E86C 04 E9                  DW     vGetVersion          ;   C - Return Version Number        ;
0416: E86E C4 EA                  DW     vResetSystem         ;   D - Reset Disk System            ;
0417: E870 0A EB                  DW     vSelectDisk          ;   E - Select Disk                  ;
0418: E872 37 EF                  DW     vOpenFile            ;   F - Open File                    ;
0419: E874 40 EF                  DW     vCloseFile           ;  10 - Close File                   ;
0420: E876 46 EF                  DW     vFindFirst           ;  11 - Search For First             ;
0421: E878 5F EF                  DW     vFindNext            ;  12 - Search for Next              ;
0422: E87A 6E EF                  DW     vDeleteFile          ;  13 - Delete File                  ;
0423: E87C 77 EF                  DW     vReadSeq             ;  14 - Read Sequential              ;
0424: E87E 7E EF                  DW     vWriteSeq            ;  15 - Write Sequential             ;
0425: E880 85 EF                  DW     vMakeFile            ;  16 - Make File                    ;
0426: E882 8E EF                  DW     vRenameFile          ;  17 - Rename File                  ;
0427: E884 DD EA                  DW     vGetLoginVector      ;  18 - Return Login Vector          ;
0428: E886 E4 EA                  DW     vGetCurrentDisk      ;  19 - Return Current Disk          ;
0429: E888 EB EA                  DW     vSetDMA              ;  1A - Set DMA address              ;
0430: E88A F4 EA                  DW     vGetAllocAddr        ;  1B - Get ADDR (ALLOC)             ;
0431: E88C 42 EC                  DW     vWriteProtectDisk    ;  1C - Write Protect Disk           ;
0432: E88E FB EA                  DW     vGetReadOnlyMap      ;  1D - Get Read/Only MAP	         ;
0433: E890 45 EC                  DW     vSetFileAttributes   ;  1E - Set File Attributes ??       ;
0434: E892 02 EB                  DW     vGetDiskParamBlock   ;  1F - Get ADDR (Disk Parameters)   ;
0435: E894 0A E9                  DW     vGetSetUserNumber    ;  20 - Set/Get User Code            ;
0436: E896 0D EB                  DW     vReadRandom          ;  21 - Read Random                  ;
0437: E898 13 EB                  DW     vWriteRandom         ;  22 - Write Random                 ;
0438: E89A 19 EB                  DW     vComputeFileSize     ;  23 - Compute File Size            ;
0439: E89C 1F EB                  DW     vSetRandomRecord     ;  24 - Set Random Record            ;
0440: E89E 09 EB                  DW     vResetDrive          ;  25 - Reset Drive                  ;
0441: E8A0 A6 E8                  DW     DUMMY                ;  26 - Access Drive (not supported) ;
0442: E8A2 A6 E8                  DW     DUMMY                ;  27 - Free Drive (not supported)   ;
0443: E8A4 22 EB                  DW     vWriteRandom0Fill    ;  28 - Write random w/Fill          ;
0444: E8A6             functionCount EQU    ($-functionTable)/2  ; Number of  functions               ;
0445: E8A6         ;
0446: E8A6             DUMMY:                          ;
0447: E8A6 76                     HALT                        ;
0448: E8A7         ;++++++++++++++++++++++++++++ Function Vector Table +++++++++++++++++++++++++;
0449: E8A7
0450: E8A7         ;-------------------------- System Reset - 0 (0) ----------------------------;
0451: E8A7         ;  The system reset function makes CP/M do a complete reset, exactly the     ;
0452: E8A7         ; same as the warm boot function invoked when you transfer control to the    ;
0453: E8A7         ; WARMBOOT point. In addition to resetting the BDOS, this function reloads   ;
0454: E8A7         ; the CCP, rebuilds the allocation vectors for the currently logged disks,   ;
0455: E8A7         ; sets the DMA address (used byCP/M to address the disk read/write buffer)   ;
0456: E8A7         ; to 80H, marks all disks as being Read/Write status, and transfers control  ;
0457: E8A7         ; to the  CCP. The CCP then outputs its prompt to the console.               ;
0458: E8A7         ;																			 ;
0459: E8A7         ;			Function Code	 :	C = 00H                                      ;
0460: E8A7         ;			Entry Parameters:	None                                         ;
0461: E8A7         ;			Exit Parameters :	Does Not Return								 ;
0462: E8A7         ;																			 ;
0463: E8A7         ;-------------------------- System Reset - 0 (0) ----------------------------;
0464: E8A7             vSystemReset:
0465: E8A7 C3 03 F6               JP     bcWboot              ; do a Warm Boot
0466: E8AA
0467: E8AA         ;****************************************************************************;
0468: E8AA         ;								IOByte device I/O							 ;
0469: E8AA         ;****************************************************************************;
0470: E8AA
0471: E8AA
0472: E8AA         ;-------------------------- Read Console Byte - 1 (1) -----------------------;
0473: E8AA         ;  This function reads the next byte of data from the console keyboard and   ;
0474: E8AA         ; puts it into register A. If the character input is a graphic character, it ;
0475: E8AA         ; will be echoed back to the console. The only control characters that are   ;
0476: E8AA         ; echoed are  CARRIAGE RETURN, LINE FEED, BACKSPACE, and TAB. In the case    ;
0477: E8AA         ; of a TAB character, the BDOS outputs as many spaces as are required to     ;
0478: E8AA         ; move the cursor to the next multiple of eight columns. All of the other    ;
0479: E8AA         ; control characters, including CONTROL-C, are input but are not echoed.     ;
0480: E8AA         ;  This function also checks for CONTROL-S (XOFF) to see if console output   ;
0481: E8AA         ; should be suspended, and for CONTROL-P (printer echo toggle) to see if     ;
0482: E8AA         ; console output should also be sent to the list device. If CONTROL-S is     ;
0483: E8AA         ; found, further output will be suspended until you type another character.  ;
0484: E8AA         ; CONTROL-P will enable the echoing of console output the first time it is   ;
0485: E8AA         ; pressed and disable it the second time. If there is no incoming data       ;
0486: E8AA         ; character, this function will wait until there is one.                     ;
0487: E8AA         ;                                                                            ;
0488: E8AA         ; This is a blocking function                                                ;
0489: E8AA         ;																			 ;
0490: E8AA         ;																			 ;
0491: E8AA         ;			Function Code	:	C = 01H                                      ;
0492: E8AA         ;			Entry Parameters:	None                                         ;
0493: E8AA         ;			Exit Parameters :	A = Data byte from console					 ;
0494: E8AA         ;																			 ;
0495: E8AA         ;-------------------------- Read Console Byte - 1 (1) -----------------------;
0496: E8AA             vConsoleIn:
0497: E8AA CD 1E E9               CALL   ConIn                ; Don't come back without input
0498: E8AD CD 29 E9               CALL   IsPrintableASCII     ; CR,LF,TAB,BACK_SPACE or GE SPACE
0499: E8B0 D8                     RET    C                    ; return nothing to echo
0500: E8B1
0501: E8B1 F5                     PUSH   AF                   ; Save printable character
0502: E8B2 4F                     LD     C,A
0503: E8B3 CD 55 E9               CALL   TabOut               ; Send to console. if TAB expand
0504: E8B6 F1                     POP    AF                   ; retrieve exit value
0505: E8B7
0506: E8B7 32 C2 EA               LD     (exitParameterByte),A
0507: E8BA C9                     RET
0508: E8BB
0509: E8BB         ;------------------------- Write Console Byte - 2 (2) -----------------------;
0510: E8BB         ;  This function outputs the data byte in register E to the console. As with ;
0511: E8BB         ; function 1, if the data byte is a TAB character, it will be expanded by    ;
0512: E8BB         ; the BDOS to the next column that is a multiple of eight. The BDOS also     ;
0513: E8BB         ; checks to see if there is an incoming character, and if there is,          ;
0514: E8BB         ; checks to see if it is a CONTROL-S ,in which case console output is        ;
0515: E8BB         ; suspended or CONTROL-P, in which case echoing of console output to the     ;
0516: E8BB         ; printer is  toggled on or off                                              ;
0517: E8BB         ;																			 ;
0518: E8BB         ;			Function Code	:	C = 02H                                      ;
0519: E8BB         ;			Entry Parameters:	E = Data byte to be output					 ;
0520: E8BB         ;			Exit Parameters :	None										 ;
0521: E8BB         ;																			 ;
0522: E8BB         ;------------------------- Write Console Byte - 2 (2) -----------------------;
0523: E8BB         ;BDOS put parameter in C before entering this routine
0524: E8BB             vConsoleOut:
0525: E8BB CD 55 E9               CALL   TabOut
0526: E8BE C9                     RET
0527: E8BF
0528: E8BF         ;--------------------------- Read Reader Byte - 3 (3) -----------------------;
0529: E8BF         ;   function reads the next character from the logical "reader" device into  ;
0530: E8BF         ; register A. In practice, the physical device that is accessed depends      ;
0531: E8BF         ; entirely on how your BIOS is configured. In some systems, there is no      ;
0532: E8BF         ; reader at all; this function will return some arbitrary value such as lAH  ;
0533: E8BF         ; (the ASCII CONTROL-Z character, used by CP/M to denote "End of File').     ;
0534: E8BF         ; Control is not returned to the calling program until a character has been  ;
0535: E8BF         ; read.                                                                      ;
0536: E8BF         ;                                                                            ;
0537: E8BF         ; This is a blocking function                                                ;
0538: E8BF         ;																			 ;
0539: E8BF         ;			Function Code	:	C = 03H                                      ;
0540: E8BF         ;			Entry Parameters:	None										 ;
0541: E8BF         ;			Exit Parameters :	A = Character Input							 ;
0542: E8BF         ;																			 ;
0543: E8BF         ;--------------------------- Read Reader Byte - 3 (3) -----------------------;
0544: E8BF             vReaderIn:
0545: E8BF CD 15 F6               CALL   bcReader
0546: E8C2 32 C2 EA               LD     (exitParameterWord),A
0547: E8C5 C9                     RET
0548: E8C6
0549: E8C6         ;--------------------------- Write Punch Byte - 4 (4) -----------------------;
0550: E8C6         ;  This function is a counterpart to the Read "Reader" Byte It outputs the   ;
0551: E8C6         ; specified character from register E to the logical punch device. Again,    ;
0552: E8C6         ; the actual physical device used, if any, is determined by the BIOS.        ;
0553: E8C6         ; There is no set standard for this device; in some systems the punch        ;
0554: E8C6         ; device is a "bit bucket," so called because it absorbs all data that you   ;
0555: E8C6         ; output to it.                                                              ;
0556: E8C6         ;																			 ;
0557: E8C6         ;			Function Code	:	C = 04H                                      ;
0558: E8C6         ;			Entry Parameters:	E = Data byte to be output					 ;
0559: E8C6         ;			Exit Parameters :	None										 ;
0560: E8C6         ;																			 ;
0561: E8C6         ;--------------------------- Write Punch Byte - 4 (4) -----------------------;
0562: E8C6         ;BDOS put parameter in C before entering this routine
0563: E8C6             vPunchOut:
0564: E8C6 CD 12 F6               CALL   bcPunch
0565: E8C9 C9                     RET
0566: E8CA
0567: E8CA         ;---------------------------- Write List Byte - 5 (5) -----------------------;
0568: E8CA         ;  This function outputs the specified byte in register E to the logical     ;
0569: E8CA         ; list device. As with the reader and the punch, the physical device used    ;
0570: E8CA         ; depends entirely on the BIOS.                                              ;
0571: E8CA         ;																			 ;
0572: E8CA         ;			Function Code	:	C = 05H                                      ;
0573: E8CA         ;			Entry Parameters:	E = Data byte to be output					 ;
0574: E8CA         ;			Exit Parameters :	None										 ;
0575: E8CA         ;																			 ;
0576: E8CA         ;---------------------------- Write List Byte - 5 (5) -----------------------;
0577: E8CA         ;BDOS put parameter in C before entering this routine
0578: E8CA             vListOut:                       ; func5 (05 - 05) List Output
0579: E8CA CD 0F F6               CALL   bcList               ; direct call to BIOS
0580: E8CD C9                     RET
0581: E8CE
0582: E8CE         ;--------------------------- Direct Console I/O - 6 (6) ---------------------;
0583: E8CE         ;  This function serves double duty: it both inputs and outputs characters   ;
0584: E8CE         ; from the console. However, it bypasses the normal control characters and   ;
0585: E8CE         ; line editing features (such as CONTROL-P and CONTROL-S) normally           ;
0586: E8CE         ; associated with console I( O. Hence the name "direct" (or "unadorned" as   ;
0587: E8CE         ; Digital Research describes it). If the value in register E is not OFFH,    ;
0588: E8CE         ; then E contains a valid ASCII character that is output to the console.     ;
0589: E8CE         ;  This function works well provided you never have to send a value ofOFFH   ;
0590: E8CE         ; or expect to receive a value ofOOH. If you do need to send or receive pure ;
0591: E8CE         ; binary data, you cannot use this function, since these values are likely   ;
0592: E8CE         ; to be part of the data stream.                                             ;
0593: E8CE         ;                                                                            ;
0594: E8CE         ;			Function Code	:	C = 06H                                      ;
0595: E8CE         ;			Entry Parameters:	E = 0FFH for Input					  		 ;
0596: E8CE         ;								E = Other than 0FFH for Output				 ;
0597: E8CE         ;			Exit Parameters :	A = Input byte or status					 ;
0598: E8CE         ;																			 ;
0599: E8CE         ;--------------------------- Direct Console I/O - 6 (6) ---------------------;
0600: E8CE         ;BDOS put parameter in C before entering this routine
0601: E8CE             vDirectConIO:
0602: E8CE 79                     LD     A,C
0603: E8CF 3C                     INC    A
0604: E8D0 28 04                  JR     Z,vDirectConIO1      ; 0ffh => 00h, means input mode
0605: E8D2         ; send byte to console
0606: E8D2 CD 0C F6               CALL   bcConout             ; Send the byte to the console
0607: E8D5 C9                     RET
0608: E8D6
0609: E8D6         ;read byte/status from console
0610: E8D6             vDirectConIO1:
0611: E8D6 CD 06 F6               CALL   bcConst              ; Check Status
0612: E8D9 B7                     OR     A                    ; 00 means not data ready
0613: E8DA CA 4A E8               JP     Z,ReturnToCaller1    ; If no data return  00 to caller
0614: E8DD CD 09 F6               CALL   bcConin              ; Data is available, get it to A
0615: E8E0 32 C2 EA               LD     (exitParameterByte),A ; Save it
0616: E8E3 C9                     RET
0617: E8E4
0618: E8E4         ;--------------------------- Get IOBYTE Setting - 7 (7) ---------------------;
0619: E8E4         ; This function places the current value of the IOBYTE in register A.        ;
0620: E8E4         ;                                                                            ;
0621: E8E4         ; The IOBYTE structure:                                                      ;
0622: E8E4         ;								+-------+-------+-------+-------+            ;
0623: E8E4         ;						Bit No. | 7 : 6 | 5 : 4 | 3 : 2 | 1 : 0 |            ;
0624: E8E4         ;								+-------+-------+-------+-------+            ;
0625: E8E4         ;				Logical Device     List | Punch | Reader|Console             ;
0626: E8E4         ;                                                                            ;
0627: E8E4         ;                                                                            ;
0628: E8E4         ;			Function Code	:	C = 07H                                      ;
0629: E8E4         ;			Entry Parameters:	None					  		  			 ;
0630: E8E4         ;			Exit Parameters :	A = Current IOBYTE value					 ;
0631: E8E4         ;																			 ;
0632: E8E4         ;--------------------------- Get IOBYTE Setting - 7 (7) ---------------------;
0633: E8E4             vGetIOBYTE:
0634: E8E4 3A 03 00               LD     A,(IOBYTE)           ; Get the IOBYTE
0635: E8E7 32 C2 EA               LD     (exitParameterWord),A ; Return it to caller
0636: E8EA C9                     RET
0637: E8EB         ;--------------------------- Set IOBYTE Setting - 8 (8) ---------------------;
0638: E8EB         ; This function sets the IOBYTE         									 ;
0639: E8EB         ;                                                                            ;
0640: E8EB         ; The IOBYTE structure:                                                      ;
0641: E8EB         ;								+-------+-------+-------+-------+            ;
0642: E8EB         ;						Bit No. | 7 : 6 | 5 : 4 | 3 : 2 | 1 : 0 |            ;
0643: E8EB         ;								+-------+-------+-------+-------+            ;
0644: E8EB         ;				Logical Device     List | Punch | Reader|Console             ;
0645: E8EB         ;                                                                            ;
0646: E8EB         ;                                                                            ;
0647: E8EB         ;			Function Code	:	C = 08H                                      ;
0648: E8EB         ;			Entry Parameters:	E = New IOBYTE value	  		  			 ;
0649: E8EB         ;			Exit Parameters :	None                                         ;
0650: E8EB         ;																			 ;
0651: E8EB         ;--------------------------- Get IOBYTE Setting - 8 (8) ---------------------;
0652: E8EB         ;BDOS put parameter in C before entering this routine
0653: E8EB             vSetIOBYTE:
0654: E8EB 21 03 00               LD     HL,IOBYTE            ; point at The IOBYTE
0655: E8EE 71                     LD     (HL),C               ; Place new vale in it
0656: E8EF C9                     RET
0657: E8F0
0658: E8F0         ;---------------------- Display $ terminated String - 9 (9) -----------------;
0659: E8F0         ;  This function outputs a string of characters to the console device. The   ;
0660: E8F0         ; address of this string is in registers DE. You must make sure that the last;
0661: E8F0         ; character of the string is "$"; the BDOS uses this character as a marker   ;
0662: E8F0         ; for the end of the string.                                                 ;
0663: E8F0         ;  The "$" itself does not get output to the console.                        ;
0664: E8F0         ;                                                                            ;
0665: E8F0         ; While the BDOS is outputting the string, it expands tabs as previously     ;
0666: E8F0         ; described, checks to see if there is an incoming character, and checks for ;
0667: E8F0         ; CONTROL-S (XOFF, which stops the output until another character is entered);
0668: E8F0         ; or CONTROL-P (which turns on or off echoing of console characters to       ;
0669: E8F0         ; the printer).                                                              ;
0670: E8F0         ;                                                                            ;
0671: E8F0         ;			Function Code	:	C = 09H                                      ;
0672: E8F0         ;			Entry Parameters:	DE = Address of the first byte of the string ;
0673: E8F0         ;			Exit Parameters :	None							             ;
0674: E8F0         ;																			 ;
0675: E8F0         ;---------------------- Display $ terminated String - 9 (9) -----------------;
0676: E8F0             vPrintString:
0677: E8F0 2A C0 EA               LD     HL,(paramDE)         ; Get address of the string
0678: E8F3 4D                     LD     C,L
0679: E8F4 44                     LD     B,H                  ; Put it into BC for call
0680: E8F5 CD 38 E9               CALL   Print                ; out to console
0681: E8F8 C9                     RET
0682: E8F9
0683: E8F9         ;-------------------------- Read Console String - A (10) --------------------;
0684: E8F9         ;  This function reads a string of characters from the console device        ;
0685: E8F9         ; and stores them in a buffer (address in DE) that you define. Full line     ;
0686: E8F9         ; editing is possible: the operator can backspace, cancel the line and start ;
0687: E8F9         ; over, and use all the normal control functions. What you will ultimately   ;
0688: E8F9         ; see in the buffer is the final version of the character string entered,    ;
0689: E8F9         ; without any of the errors or control characters used to do the line editing;
0690: E8F9         ;                                                                            ;
0691: E8F9         ;  The buffer that you define has a special format. The first byte in the    ;
0692: E8F9         ; buffer tells the BDOS the maximum number of characters to be accepted.     ;
0693: E8F9         ; The second byte is reserved for the BDOS to tell you how many characters   ;
0694: E8F9         ; were actually placed in the buffer. The following bytes contain            ;
0695: E8F9         ; the characters of the string. Character input will cease either when a     ;
0696: E8F9         ; CARRIAGE RETURN is entered or when the maximum number of characters,       ;
0697: E8F9         ; as specified in the buffer, has been received. The CARRIAGE RETURN is not  ;
0698: E8F9         ; stored in the buffer as a character-it just serves as a terminator. If     ;
0699: E8F9         ; the first character entered is a CARRIAGE RETURN, then the BDOS sets       ;
0700: E8F9         ; the "characters input" byte to O. If you attempt to input more than the    ;
0701: E8F9         ; maximum number of characters, the "characters input" count will be the     ;
0702: E8F9         ; same as the maximum value allowed.                                         ;
0703: E8F9         ;                                                                            ;
0704: E8F9         ;			Function Code	:	C = 0AH                                      ;
0705: E8F9         ;			Entry Parameters:	DE = Address string buffer					 ;
0706: E8F9         ;			Exit Parameters :	String Buffer with console bytes in it       ;
0707: E8F9         ;																			 ;
0708: E8F9         ;-------------------------- Read Console String - A (10) --------------------;
0709: E8F9             vReadString:
0710: E8F9 CD DD E9               CALL   ReadString
0711: E8FC C9                     RET
0712: E8FD
0713: E8FD         ;------------------------- Read Console Status - B (11) ---------------------;
0714: E8FD         ; This function tells you whether a console input character is waiting to be ;
0715: E8FD         ;processed. Unlike the Console Input functions, which will wait until there  ;
0716: E8FD         ;is input,this function simply checks and returns immediately.               ;
0717: E8FD         ;                                                                            ;
0718: E8FD         ;			Function Code	:	C = 0BH                                      ;
0719: E8FD         ;			Entry Parameters:	None										 ;
0720: E8FD         ;			Exit Parameters :	A = 00H if no incoming Data					 ;
0721: E8FD         ;								A = FFH	if incoming Data					 ;
0722: E8FD         ;																			 ;
0723: E8FD         ;------------------------- Read Console Status - B (11) ---------------------;
0724: E8FD             vGetConsoleStatus:
0725: E8FD CD 89 E9               CALL   ConBreak
0726: E900 32 C2 EA               LD     (exitParameterByte),A
0727: E903 C9                     RET
0728: E904
0729: E904         ;--------------------------- Get CP/M Version - C (12) ----------------------;
0730: E904         ;  This function tells you which version of CP/M you are currently running.  ;
0731: E904         ; A two-byte value is returned:                                              ;
0732: E904         ;	H = OOH for CP/M, H = OlH for MP/M                                       ;
0733: E904         ;	L = OOH for all releases before CP/M 2.0                                 ;
0734: E904         ;	L = 20H for CP/M 2.0,21 H for 2.1, 22H for 2.2,                          ;
0735: E904         ;		and so on for any subsequent releases.                               ;
0736: E904         ;                                                                            ;
0737: E904         ; This information is of interest only if your program has some version      ;
0738: E904         ; specific logic built into it. For example, CP/M version 1.4 does not       ;
0739: E904         ; support the same Random File Input/ Output operations that CP/M 2.2 does.  ;
0740: E904         ; Therefore, if your program uses Random I/O, put this check at the          ;
0741: E904         ; beginning to ensure that it is indeed running under the appropriate        ;
0742: E904         ; version of CP/M.                                                           ;
0743: E904         ;                                                                            ;
0744: E904         ;			Function Code	:	C = 0CH                                      ;
0745: E904         ;			Entry Parameters:	None										 ;
0746: E904         ;			Exit Parameters :	HL =Version Number Code						 ;
0747: E904         ;								A = FFH	if incoming Data					 ;
0748: E904         ;																			 ;
0749: E904         ;--------------------------- Get CP/M Version - C (12) ----------------------;
0750: E904             vGetVersion:                      ; func12 (12 - 0C)	 Get Version
0751: E904 3E 20                  LD     A,VERSION
0752: E906 32 C2 EA               LD     (exitParameterByte),A ;exitParameterByte = VERSION
0753: E909 C9                     RET
0754: E90A
0755: E90A         ;--------------------------- Get/Set User Number - 20 (32) ------------------;
0756: E90A         ;  This subroutine either sets or gets the current user number. The current  ;
0757: E90A         ; user number determines which file directory entries are matched during all ;
0758: E90A         ; disk file operations. When you call this function, the contents of the     ;
0759: E90A         ; E register specify what action is to be taken. IfE=OFFH, then the function ;
0760: E90A         ; will return the current user number in the A register. If you set E to a   ;
0761: E90A         ; number in the range 0 to 15 (that is, a valid user number), the function   ;
0762: E90A         ; will set the current user number to this value.                            ;
0763: E90A         ;                                                                            ;
0764: E90A         ;			Function Code	:	C = 0CH                                      ;
0765: E90A         ;			Entry Parameters:	E = 0FFH to get User Number  				 ;
0766: E90A         ;								  = 0 to 15 to set User Number				 ;
0767: E90A         ;			Exit Parameters :	A = Current user Number if E was set to 0FFH ;
0768: E90A         ;								A = FFH	if incoming Data					 ;
0769: E90A         ;																			 ;
0770: E90A         ;                                                                            ;
0771: E90A         ;--------------------------- Get/Set User Number - 20 (32) ------------------;
0772: E90A             vGetSetUserNumber:
0773: E90A 3A BF EA               LD     A,(paramE)
0774: E90D FE FF                  CP     0FFH
0775: E90F 20 07                  JR     NZ,SetUserNumber     ; interrogate user code instead
0776: E911 3A 33 F5               LD     A,(currentUserNumber)
0777: E914 32 C2 EA               LD     (exitParameterByte),A ; exitParameterByte=currentUserNumber
0778: E917 C9                     RET
0779: E918
0780: E918             SetUserNumber:
0781: E918 E6 0F                  AND    LO_NIBBLE_MASK
0782: E91A 32 33 F5               LD     (currentUserNumber),A
0783: E91D C9                     RET
0784: E91E
0785: E91E         ;****************************************************************************;
0786: E91E         ;								Character Support Routines					 ;
0787: E91E         ;****************************************************************************;
0788: E91E
0789: E91E
0790: E91E         ;-------------------- Return a Character from the console -------------------;
0791: E91E         ;return byte from buffer or read from the console                            ;
0792: E91E             ConIn:                          ;
0793: E91E 21 BB EA               LD     HL,keyboardByte      ; is there a Byte waiting?           ;
0794: E921 7E                     LD     A,(HL)               ;
0795: E922 36 00                  LD     (HL),0               ;
0796: E924 B7                     OR     A                    ;
0797: E925 C0                     RET    NZ                   ;
0798: E926         ;
0799: E926 C3 09 F6               JP     bcConin              ; Go get byte from Console           ;
0800: E929         ;-------------------- Return a Character from the console -------------------;
0801: E929
0802: E929         ;----------- Is the Character ASCII printable, CR,LF,TAB,BACKSPACE ----------;
0803: E929         ; Resets Carry Flag if ASCII Printable, CR,LF,TAB,BackSpace or GE SPACE      ;
0804: E929             IsPrintableASCII:                      ;
0805: E929 FE 0D                  CP     CR                   ;
0806: E92B C8                     RET    Z                    ; carriage return?                                                  ;
0807: E92C FE 0A                  CP     LF                   ;
0808: E92E C8                     RET    Z                    ; line feed?                                                        ;
0809: E92F FE 09                  CP     TAB                  ;
0810: E931 C8                     RET    Z                    ; TAB?                                                              ;
0811: E932 FE 08                  CP     CTRL_H               ;
0812: E934 C8                     RET    Z                    ; backspace?                                                        ;
0813: E935 FE 20                  CP     SPACE                ; Reset Carry if ASCII printable         ;
0814: E937 C9                     RET                         ;
0815: E938         ;----------- Is the Character ASCII printable, CR,LF,TAB,BACKSPACE ----------;
0816: E938
0817: E938         ;------------------ Print character from (BC) until  $ found ----------------;
0818: E938             Print:                          ;
0819: E938 0A                     LD     A,(BC)               ; Get the next character             ;
0820: E939 FE 24                  CP     DOLLAR               ; Is it the end ?                    ;
0821: E93B C8                     RET    Z                    ;  exit if yes                       ;
0822: E93C 03                     INC    BC                   ; Update the pointer                 ;
0823: E93D C5                     PUSH   BC                   ; Save it                            ;
0824: E93E 4F                     LD     C,A                  ; Does Byte require                  ;
0825: E93F CD 55 E9               CALL   TabOut               ;  special attention - check         ;
0826: E942 C1                     POP    BC                   ; Retrieve the pointer				 ;
0827: E943 18 F3                  JR     Print                ; Loop back                          ;
0828: E945         ;------------------ Print character from (BC) until  $ found ----------------;
0829: E945
0830: E945         ;-- Send printable character to console. Precede with Caret if needed -------;
0831: E945         ; character is in Reg C                                                      ;
0832: E945             CaretOut:                       ;
0833: E945 79                     LD     A,C                  ;
0834: E946 CD 29 E9               CALL   IsPrintableASCII     ;
0835: E949 30 0A                  JR     NC,TabOut            ; Skip if Caret not needed           ;
0836: E94B         ; send preceding up arrow                                                    ;
0837: E94B F5                     PUSH   AF                   ; Save the character                 ;
0838: E94C 0E 5E                  LD     C,CARET              ;
0839: E94E CD 68 E9               CALL   ConsoleOut           ; Send Caret to Console              ;
0840: E951 F1                     POP    AF                   ; Get the character                  ;
0841: E952 F6 40                  OR     40H                  ; Make the graphic a letter          ;
0842: E954 4F                     LD     C,A                  ; Set up to print                    ;
0843: E955         ; fall thru to TabbOut                                                       ;
0844: E955         ;-- Send printable character to console. Precede with Caret if needed -------;
0845: E955
0846: E955         ;------------- Send printable character to console. Expand if TAB -----------;
0847: E955         ; character is in Reg C                                                      ;
0848: E955             TabOut:                         ;
0849: E955 79                     LD     A,C                  ;
0850: E956 FE 09                  CP     TAB                  ; Is it a TAB                        ;
0851: E958 C2 68 E9               JP     NZ,ConsoleOut        ; Go directly to ConsoleOut if not   ;
0852: E95B         ;
0853: E95B         ; TAB encountered                                                           ;
0854: E95B             TabOut0:                        ;
0855: E95B 0E 20                  LD     C,SPACE              ; Expand TABs with SPACEs            ;
0856: E95D CD 68 E9               CALL   ConsoleOut           ; Send to Console                    ;
0857: E960 3A BE EA               LD     A,(columnPosition)   ; Get Column position                ;
0858: E963 E6 07                  AND    111b                 ; (ColumnPosition mod 8) = 0 ?       ;
0859: E965 20 F4                  JR     NZ,TabOut0           ; Do again if not                    ;
0860: E967 C9                     RET                         ;
0861: E968         ;------------- Send printable character to console. Expand if TAB -----------;
0862: E968
0863: E968         ;-------------------------- Send character to console -----------------------;
0864: E968         ; C  = Character to be output                                                ;
0865: E968             ConsoleOut:                      ;
0866: E968         ; Look for CNTL_S from keyboard and save it in keyboardByte                  ;
0867: E968 C5                     PUSH   BC                   ; Save character and Count           ;
0868: E969 CD 89 E9               CALL   ConBreak             ; Check for screen stop key stroke   ;
0869: E96C C1                     POP    BC                   ;
0870: E96D C5                     PUSH   BC                   ; Get/save character                 ;
0871: E96E         ; Send character to Console	                                                 ;
0872: E96E CD 0C F6               CALL   bcConout             ; Send character to the console      ;
0873: E971 C1                     POP    BC                   ;
0874: E972 C5                     PUSH   BC                   ; Get/save character                 ;
0875: E973         ; is the data to be output to print device?                                  ;
0876: E973 3A BC EA               LD     A,(printEchoFlag)    ;
0877: E976 B7                     OR     A                    ;
0878: E977 C4 0F F6               CALL   NZ,bcList            ; Send it to printer, if so          ;
0879: E97A C1                     POP    BC                   ; Get the character                  ;
0880: E97B         ;
0881: E97B 79                     LD     A,C                  ; Put character to ACC               ;
0882: E97C 21 BE EA               LD     HL,columnPosition    ; A = char, HL = .columnPosition     ;
0883: E97F 34                     INC    M                    ; increment the ColumnPosition       ;
0884: E980         ;
0885: E980 FE 20                  CP     SPACE                ;
0886: E982 D0                     RET    NC                   ; Exit if ASCII printable            ;
0887: E983         ;
0888: E983 FE 0A                  CP     LF                   ;
0889: E985 C0                     RET    NZ                   ; Exit if not a Line Feed            ;
0890: E986         ;
0891: E986 36 00                  LD     (HL),0               ;  else force columnPosition = 0     ;
0892: E988 C9                     RET                         ;
0893: E989         ;-------------------------- Send character to console -----------------------;
0894: E989
0895: E989         ;--------------------  Check for Status and Control S or C ------------------;
0896: E989         ;  Returns:																	 ;
0897: E989         ;			ACC = 0FFH if Saved keyboard byte or CNTL_S entered from console ;
0898: E989         ;			ACC = 00   No data Pending										 ;
0899: E989         ;			DOES NOT RETURN if CTRL_C is entered from the keyboard           ;
0900: E989         ;                                                                            ;
0901: E989             ConBreak:                       ;
0902: E989 3A BB EA               LD     A,(keyboardByte)     ;
0903: E98C B7                     OR     A                    ; If there is a char waiting         ;
0904: E98D 20 2B                  JR     NZ,ConBreak1         ;  return with FF in ACC             ;
0905: E98F         ;
0906: E98F CD 06 F6               CALL   bcConst              ; Get status                         ;
0907: E992 FE 00                  CP     00H                  ; If 00 => No data pending	         ;
0908: E994 C8                     RET    Z                    ; Return 00 No data pending          ;
0909: E995         ;
0910: E995 CD 09 F6               CALL   bcConin              ; Read the byte                      ;
0911: E998         ;
0912: E998 FE 10                  CP     CTRL_P               ;
0913: E99A 20 0D                  JR     NZ,CheckCTL_S        ;
0914: E99C         ;<><><><><><><><><><><><><> Toggle Print Echo Flag<><><><><><><>             ;
0915: E99C 21 BC EA               LD     HL,printEchoFlag     ;
0916: E99F 3E FF                  LD     A,TRUE               ;
0917: E9A1 BE                     CP     (HL)                 ;
0918: E9A2 20 02                  JR     NZ,ToggleFlag1       ;
0919: E9A4 3E 00                  LD     A,FALSE              ;
0920: E9A6             ToggleFlag1:                      ;
0921: E9A6 77                     LD     (HL),A               ;
0922: E9A7 18 0C                  JR     NothingWaiting       ;
0923: E9A9         ;<><><><><><><><><><><><><> Toggle Print Echo Flag<><><><><><><>             ;
0924: E9A9             CheckCTL_S:                      ;
0925: E9A9 FE 13                  CP     CTRL_S               ; If it is not Stop Screen, save     ;
0926: E9AB 20 0A                  JR     NZ,ConBreak0         ;   and and return 0FFH              ;
0927: E9AD         ;
0928: E9AD CD 09 F6               CALL   bcConin              ; Else Read next byte                ;
0929: E9B0 FE 03                  CP     CTRL_C               ;
0930: E9B2 CA 00 00               JP     Z,WarmBoot           ; do WarmBoot if  CTRL_C             ;
0931: E9B5             NothingWaiting:                      ;
0932: E9B5 AF                     XOR    A                    ;
0933: E9B6 C9                     RET                         ; Set ACC = 0 and return             ;
0934: E9B7             ConBreak0:                      ;
0935: E9B7 32 BB EA               LD     (keyboardByte),A     ; save the byte                      ;
0936: E9BA             ConBreak1:                      ;
0937: E9BA 3E FF                  LD     A,TRUE               ; return with true set in ACC        ;
0938: E9BC C9                     RET                         ;
0939: E9BD         ;--------------------  Check for Status and Control S or C ------------------;
0940: E9BD
0941: E9BD         ;------------------------  Console Output Utilities -------------------------;
0942: E9BD             showHashCRLF:                      ;
0943: E9BD 0E 23                  LD     C,HASH_TAG           ;
0944: E9BF CD 68 E9               CALL   ConsoleOut           ; Send # to console                  ;
0945: E9C2 CD D3 E9               CALL   showCRLF             ;
0946: E9C5             showHashCRLF1:                      ;
0947: E9C5 3E BE                  LD     A,columnPosition     ;
0948: E9C7 21 BD EA               LD     HL,startingColumn    ;
0949: E9CA BF                     CP     A,M                  ;
0950: E9CB D0                     RET    NC                   ;
0951: E9CC 0E 20                  LD     C,SPACE              ;
0952: E9CE CD 68 E9               CALL   ConsoleOut           ;
0953: E9D1 18 F2                  JR     showHashCRLF1        ;
0954: E9D3         ;------------------------  Console Output Utilities -------------------------;
0955: E9D3
0956: E9D3         ;------------------------  Send Carriage Return and Line Feed ---------------;
0957: E9D3             showCRLF:                       ;
0958: E9D3 0E 0D                  LD     C,CR                 ;
0959: E9D5 CD 68 E9               CALL   ConsoleOut           ;
0960: E9D8 0E 0A                  LD     C,LF                 ;
0961: E9DA C3 68 E9               JP     ConsoleOut           ; exit via ConsoleOuts RET           ;
0962: E9DD         ;------------------------  Send Carriage Return and Line Feed ---------------;
0963: E9DD
0964: E9DD         ;------------------------- Read a $ terminated String -----------------------;
0965: E9DD         ;read to paramDE address (max length, current length, buffer)               ;
0966: E9DD             ReadString:                      ;
0967: E9DD 3A BE EA               LD     A,(columnPosition)   ;
0968: E9E0 32 BD EA               LD     (startingColumn),A   ; Save start for CTRL_X and CTRL_R   ;
0969: E9E3 2A C0 EA               LD     HL,(paramDE)         ; Get the start of the String        ;
0970: E9E6 4E                     LD     C,(HL)               ; Get Max Count  					 ;
0971: E9E7 23                     INC    HL                   ; Point at actual bytes read         ;
0972: E9E8 06 00                  LD     B,0                  ; Initialize Current Count           ;
0973: E9EA         ;
0974: E9EA         ; B = Current Count                                                      ;
0975: E9EA         ; C = Maximum characters                                                 ;
0976: E9EA         ; HL= Insertion Pointer                                                  ;
0977: E9EA         ;
0978: E9EA         ; read next character, BC, HL active                                        ;
0979: E9EA             ReadNext:                       ;
0980: E9EA C5                     PUSH   BC                   ; Save Current Index and Max Count   ;
0981: E9EB E5                     PUSH   HL                   ; Save pointer                       ;
0982: E9EC             ReadNext0:                      ;
0983: E9EC CD 1E E9               CALL   ConIn                ; Get the next Character             ;
0984: E9EF E6 7F                  AND    ASCII_MASK           ; Mask parity bit                    ;
0985: E9F1 E1                     POP    HL                   ; Restore Pointer					 ;
0986: E9F2 C1                     POP    BC                   ; Restore Current Index and Max Count;
0987: E9F3         ;Is It Carriage Return                                                       ;
0988: E9F3 FE 0D                  CP     CR                   ;
0989: E9F5 CA 3B EA               JP     Z,EndRead            ; End the read if yes                ;
0990: E9F8 FE 0A                  CP     LF                   ;
0991: E9FA         ;Is It Linefeed                                                              ;
0992: E9FA CA 3B EA               JP     Z,EndRead            ; End the read if yes                ;
0993: E9FD         ;Is It BackSpace                                                             ;
0994: E9FD FE 08                  CP     CTRL_H               ;
0995: E9FF CA 45 EA               JP     Z,BSspaceBS          ;
0996: EA02             IsItRubout:                      ;
0997: EA02 FE 7F                  CP     RUBOUT               ; Non destructive delete             ;
0998: EA04 CA 4F EA               JP     Z,ItIsRubout         ;
0999: EA07             IsPhysicalEOL:                      ;
1000: EA07 FE 05                  CP     CTRL_E               ;
1001: EA09 CA 5A EA               JP     Z,ItIsPhysicalEOL    ;
1002: EA0C             IsItPrintToggle:                      ;
1003: EA0C FE 10                  CP     CTRL_P               ;
1004: EA0E CA 62 EA               JP     Z,ItIsPrintToggle    ;
1005: EA11             IsItDeleteTheLineX:                      ;
1006: EA11 FE 18                  CP     CTRL_X               ;
1007: EA13 CA 8B EA               JP     Z,DeleteTheLine      ; If CTRL_X go delete the line       ;
1008: EA16             IsItDeleteTheLineU:                      ;
1009: EA16 FE 15                  CP     CTRL_U               ;
1010: EA18 CA A9 EA               JP     Z,IgnoreTheLine      ; If CTRL_U ignore the line          ;
1011: EA1B         ;Retype the line                                                             ;
1012: EA1B FE 12                  CP     CTRL_R               ;
1013: EA1D CA 72 EA               JP     Z,RepeatLine         ;
1014: EA20
1015: EA20         ;....................... Echo input back to the Console  ....................;
1016: EA20         ; Full Duplex								                                 ;
1017: EA20         ; A = Character to display	                                                 ;
1018: EA20         ; B = current char count                                                     ;
1019: EA20         ; C = maximum buffer length                                                  ;
1020: EA20         ; HL= buffer pointer                                                         ;
1021: EA20         ;ReadEcho                                                                    ;
1022: EA20 04                     INC    B                    ; Increment byte count		         ;
1023: EA21 23                     INC    HL                   ; Advance the Pointer                ;
1024: EA22 77                     LD     (HL),A               ; Put char in buffer                 ;
1025: EA23         ;
1026: EA23             ReadEchoRubOut:                      ;
1027: EA23 C5                     PUSH   BC                   ; Save index and length              ;
1028: EA24 E5                     PUSH   HL                   ; Save the Pointer                   ;
1029: EA25 4F                     LD     C,A                  ; Get char                           ;
1030: EA26 CD 45 E9               CALL   CaretOut             ; Output to Console (^ if needed)    ;
1031: EA29 E1                     POP    HL                   ; Restore the Pointer                ;
1032: EA2A C1                     POP    BC                   ; Restore index and length           ;
1033: EA2B 7E                     LD     A,(HL)               ; Recall char                        ;
1034: EA2C         ; check for Warm Boot                                                        ;
1035: EA2C FE 03                  CP     CTRL_C               ;
1036: EA2E 78                     LD     A,B                  ; Get Line position                  ;
1037: EA2F C2 37 EA               JP     NZ,AreWeAtEndOfBuffer ; Skip if not CTRL_C                 ;
1038: EA32 FE 01                  CP     1                    ; Beginning of the Line?             ;
1039: EA34 CA 00 00               JP     Z,WarmBoot           ;   if yes do the Boot               ;
1040: EA37         ; Check to see if we are at the end of the buffer                            ;
1041: EA37             AreWeAtEndOfBuffer:                      ;
1042: EA37 B9                     CP     C                    ; Over Max ?					     ;
1043: EA38 DA EA E9               JP     C,ReadNext           ;  no, Go for more				     ;
1044: EA3B         ;
1045: EA3B         ; At the end of read                                  					     ;
1046: EA3B             EndRead:                        ;
1047: EA3B         ; 	POP		HL                                                               ;
1048: EA3B 2A C0 EA               LD     HL,(paramDE)         ;
1049: EA3E 23                     INC    HL                   ;
1050: EA3F         ;
1051: EA3F 70                     LD     (HL),B               ; Actual length at Pos 0 of Buffer   ;
1052: EA40 0E 0D                  LD     C,CR                 ;
1053: EA42 C3 68 E9               JP     ConsoleOut           ; Send CR to the Console			 ;
1054: EA45         ;....................... Echo input back to the Console  ....................;
1055: EA45         ;.......................... Backspace SPACE BackSpace .......................;
1056: EA45             BSspaceBS:                      ;
1057: EA45 05                     DEC    B                    ;
1058: EA46 2B                     DEC    HL                   ;
1059: EA47 C5                     PUSH   BC                   ;
1060: EA48 E5                     PUSH   HL                   ;
1061: EA49 CD 9C EA               CALL   BackUp               ;
1062: EA4C C3 EC E9               JP     ReadNext0            ;
1063: EA4F         ;.......................... Backspace SPACE BackSpace .......................;
1064: EA4F         ;.......................... It is RubOut ....................................;
1065: EA4F             ItIsRubout:                      ;
1066: EA4F         ; RUBOUT if possible                                                         ;
1067: EA4F 78                     LD     A,B                  ; Are we at the start of the line    ;
1068: EA50 B7                     OR     A                    ;
1069: EA51 CA EA E9               JP     Z,ReadNext           ; then ignore and go for next char   ;
1070: EA54         ;adjust pointers back one                                                    ;
1071: EA54 7E                     LD     A,(HL)               ; ACC = current character            ;
1072: EA55 05                     DEC    B                    ; Adjust the index			    	 ;
1073: EA56 2B                     DEC    HL                   ; Adjust the pointer                 ;
1074: EA57 C3 23 EA               JP     ReadEchoRubOut       ; Echo back - Full Duplex            ;
1075: EA5A         ;.......................... It is RubOut ....................................;
1076: EA5A         ;.......................... It is PhysicalEOL ...............................;
1077: EA5A             ItIsPhysicalEOL:                      ;
1078: EA5A C5                     PUSH   BC                   ; Save Current Index and Max Count   ;
1079: EA5B E5                     PUSH   HL                   ; Save pointer                       ;
1080: EA5C CD D3 E9               CALL   showCRLF             ; Make new line                      ;
1081: EA5F C3 EC E9               JP     ReadNext0            ;   and go for next char   			 ;
1082: EA62         ;.......................... It is PhysicalEOL ...............................;
1083: EA62         ;.......................... It is PrintToggle ...............................;
1084: EA62             ItIsPrintToggle:
1085: EA62 E5                     PUSH   HL                   ; Save pointer                       ;
1086: EA63         ; Toggle the printEcho Flag                                                  ;
1087: EA63 21 BC EA               LD     HL,printEchoFlag     ; Point at the flag                  ;
1088: EA66 3E FF                  LD     A,TRUE               ; Load ACC with TRUE                 ;
1089: EA68 BE                     CP     (HL)                 ; Is the flag true?                  ;
1090: EA69 20 02                  JR     NZ,IsItPrintToggle1  ; Skip if not                        ;
1091: EA6B 3E 00                  LD     A,FALSE              ;   else. load ACC with FALSE        ;
1092: EA6D             IsItPrintToggle1:                      ;
1093: EA6D 77                     LD     (HL),A               ; Set the Flags new Value	         ;
1094: EA6E E1                     POP    HL                   ; Restore pointer                    ;
1095: EA6F C3 EA E9               JP     ReadNext             ;   and for another char             ;
1096: EA72         ;.......................... It is PrintToggle ...............................;
1097: EA72         ;.......................... RepeatLine ......................................;
1098: EA72             RepeatLine:                      ;
1099: EA72 C5                     PUSH   BC                   ; Save Current Index and Max Count   ;
1100: EA73 E5                     PUSH   HL                   ;  for exit                          ;
1101: EA74 CD BD E9               CALL   showHashCRLF         ; Display Hash, new Line			 ;
1102: EA77         ;
1103: EA77 2A C0 EA               LD     HL,(paramDE)         ; Get start of Buffer                ;
1104: EA7A 23                     INC    HL                   ; Skip past character count          ;
1105: EA7B         ;
1106: EA7B             LL1:                            ;
1107: EA7B 23                     INC    HL                   ; Point at next char to display      ;
1108: EA7C C5                     PUSH   BC                   ; Save counter, in B                 ;
1109: EA7D E5                     PUSH   HL                   ; Save buffer pointer                ;
1110: EA7E 4E                     LD     C,M                  ; Get the next character             ;
1111: EA7F CD 45 E9               CALL   CaretOut             ; Display it                         ;
1112: EA82 E1                     POP    HL                   ; Restore                            ;
1113: EA83 C1                     POP    BC                   ;  the counter and pointer           ;
1114: EA84 10 F5                  DJNZ   LL1                  ; loop if still more to show         ;
1115: EA86 E1                     POP    HL                   ; Restore values                     ;
1116: EA87 C1                     POP    BC                   ;  from routine entry                ;
1117: EA88 C3 EA E9               JP     ReadNext             ; Done here !                        ;
1118: EA8B         ;.......................... RepeatLine ......................................;
1119: EA8B         ;.......................... Delete The Line .................................;
1120: EA8B             DeleteTheLine:                      ;
1121: EA8B E1                     POP    HL                   ; Adjust Stack                       ;
1122: EA8C         ;                                             ;
1123: EA8C             DeleteTheLine1:                      ;
1124: EA8C 3A BD EA               LD     A,(startingColumn)   ;
1125: EA8F 21 BE EA               LD     HL,columnPosition    ;
1126: EA92 BE                     CP     M                    ; Start of line ?                    ;
1127: EA93 D2 DD E9               JP     NC,ReadString        ;  If yes get out and go for more    ;
1128: EA96 35                     DEC    M                    ; Adjust the ColumnPosition          ;
1129: EA97 CD 9C EA               CALL   BackUp               ; Clear 1 column                     ;
1130: EA9A 18 F0                  JR     DeleteTheLine1       ; Loop for more                      ;
1131: EA9C         ;.......................... Delete The Line .................................;
1132: EA9C         ;------------------------ Back-up one screen position -----------------------;
1133: EA9C             BackUp:                         ;
1134: EA9C CD A4 EA               CALL   BackUp1              ; Send Backspace                     ;
1135: EA9F 0E 20                  LD     C,SPACE              ; Overwrite with SPACE               ;
1136: EAA1 CD 0C F6               CALL   bcConout             ; Overwrite with SPACE				 ;
1137: EAA4         ;does not affect column count                                                ;
1138: EAA4             BackUp1:                        ;
1139: EAA4 0E 08                  LD     C,CTRL_H             ;
1140: EAA6 C3 0C F6               JP     bcConout             ; Send Backspace                     ;
1141: EAA9         ;------------------------ Back-up one screen position -----------------------;
1142: EAA9         ;.......................... Ignore The Line .................................;
1143: EAA9             IgnoreTheLine:                      ;
1144: EAA9 CD BD E9               CALL   showHashCRLF         ; Display Hash, new Line			 ;
1145: EAAC 0E 20                  LD     C,SPACE              ; We want to add a few spaces        ;
1146: EAAE CD 0C F6               CALL   bcConout             ;  to the console                    ;
1147: EAB1 0E 20                  LD     C,SPACE              ;
1148: EAB3 CD 0C F6               CALL   bcConout             ;
1149: EAB6 C3 DD E9               JP     ReadString           ; Start all over                     ;
1150: EAB9         ;.......................... Ignore The Line .................................;
1151: EAB9
1152: EAB9         ;------------------------- Read a $ terminated String -----------------------;
1153: EAB9
1154: EAB9         ;****************************************************************************
1155: EAB9         ;                           DATA AREA                                       *
1156: EAB9         ;****************************************************************************
1157: EAB9
1158: EAB9         ;------------------------------Non Disk Data Area ---------------------------;
1159: EAB9             usersStack: DS     2                    ; entry stack pointer                ;
1160: EABB         ;
1161: EABB 00          keyboardByte: DB     00                   ; Saved keyboard character           ;
1162: EABC         ;
1163: EABC 00          printEchoFlag: DB     00                   ; Controlled by ^P                   ;
1164: EABD         ;
1165: EABD         ; FunctionValue:DB	00H					; Reg C on BDOS Entry                ;
1166: EABD 00          startingColumn: DB     0                    ; Starting col pos after read        ;
1167: EABE 00          columnPosition: DB     0                    ; Current Column position            ;
1168: EABF         ;
1169: EABF             paramE:    DS     BYTE                 ; Byte Argument for BDOS Call        ;
1170: EAC0             paramDE:   DS     WORD                 ; Word Argument for BDOS Call	     ;
1171: EAC2             exitParameterByte:                      ; Byte returned Value                ;
1172: EAC2             exitParameterWord: DS     WORD                 ; Word                           ;
1173: EAC4         ;
1174: EAC4         ;
1175: EAC4         ;------------------------------------ Data Area -----------------------------;
1176: EAC4
1177: EAC4
1178: EAC4
1179: EAC4         ;****************************************************************************;
1180: EAC4         ;								Disk I/O									 ;
1181: EAC4         ;****************************************************************************;
1182: EAC4
1183: EAC4         ;---------------------------- Reset Disk System - D (13) --------------------;
1184: EAC4         ;  This function requests CP/M to completely reset the disk file system.     ;
1185: EAC4         ; CP/M then resets its internal tables, selects logical disk A as the        ;
1186: EAC4         ; default disk, resets the DMAaddress back to 0080H (the address of the      ;
1187: EAC4         ; buffer used by the BDOS to read and write to the disk), and marks all      ;
1188: EAC4         ; logical disks as having Read/Write status. The BDOS will then have to log  ;
1189: EAC4         ; in each logical disk as each disk is accessed. This involves reading the   ;
1190: EAC4         ; entire file directory for the disk and rebuilding the allocation vectors   ;
1191: EAC4         ; which keep track of which allocation blocks are free and which             ;
1192: EAC4         ; are used for file storage.                                                 ;
1193: EAC4         ;                                                                            ;
1194: EAC4         ;			Function Code	:	C = 0DH                                      ;
1195: EAC4         ;			Entry Parameters:	None										 ;
1196: EAC4         ;			Exit Parameters :	None										 ;
1197: EAC4         ;																			 ;
1198: EAC4         ;---------------------------- Reset Disk System - D (13) --------------------;
1199: EAC4             vResetSystem:
1200: EAC4 21 00 00               LD     HL,0
1201: EAC7 22 36 F5               LD     (ReadOnlyVector),HL  ; Clear the vectors for
1202: EACA 22 38 F5               LD     (loggedDisks),HL     ;   R/O and Logged Disks
1203: EACD AF                     XOR    A                    ; Clear the current disk
1204: EACE 32 34 F5               LD     (currentDisk),A
1205: EAD1         ; note that currentUserNumber remains unchanged
1206: EAD1 21 80 00               LD     HL,DMABuffer
1207: EAD4 22 3A F5               LD     (InitDAMAddress),HL  ; InitDAMAddress = DMABuffer
1208: EAD7 CD D1 ED               CALL   SetDataDMA           ; to data dma address
1209: EADA C3 5A EC               JP     Select
1210: EADD         ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1211: EADD         ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1212: EADD         ;---------------------------- Get Active Disks - 18 (24) --------------------;
1213: EADD         ; This function returns a bit map, called the login vector, in register pair ;
1214: EADD         ; HL, indicating which logical disk drives have been selected since the last ;
1215: EADD         ; warm boot or Reset Disk function (code 13, ODH). The least significant bit ;
1216: EADD         ; of L corresponds to disk A, while the highest order bit in H maps disk P.  ;
1217: EADD         ; The bit corresponding to the specific logical disk is set to 1 if the      ;
1218: EADD         ; disk has been selected or to 0 if the disk is not currently on-line.       ;
1219: EADD         ;  Logical disks can be selected programmatically through any file operation ;
1220: EADD         ; that sets the drive field to a nonzero value, through the Select Disk      ;
1221: EADD         ; function (code 14, OEH), or by the operator entering an "X:" command       ;
1222: EADD         ; where "X" is equal to A, B, ... , P.                                       ;
1223: EADD         ;                                                                            ;
1224: EADD         ;			Function Code	:	C = 018H                                     ;
1225: EADD         ;			Entry Parameters:	None										 ;
1226: EADD         ;			Exit Parameters :	HL = Active disk map (login vector)			 ;
1227: EADD         ;																			 ;
1228: EADD         ;---------------------------- Get Active Disks - 18 (24) --------------------;
1229: EADD             vGetLoginVector:
1230: EADD 2A 38 F5               LD     HL,(loggedDisks)
1231: EAE0 22 C2 EA               LD     (exitParameterWord),HL
1232: EAE3 C9                     RET
1233: EAE4         ;---------------------------- Get Current Disk- 19 (25) ---------------------;
1234: EAE4         ;   This function returns the current default disk set by the last Select    ;
1235: EAE4         ; Disk function call (code 14, OEH) or by the operator entering the          ;
1236: EAE4         ; "X:"command (where "X" is A, B, ..., P) to the CCP.                        ;
1237: EAE4         ;                                                                            ;
1238: EAE4         ;  This function returns the current default disk in coded form.             ;
1239: EAE4         ; Register A= 0 if drive A is the current drive, I if drive B, and so on.    ;
1240: EAE4         ; If you need to convert this to the corresponding ASCII character, simply   ;
1241: EAE4         ; add 41H to register A. Use this function when you convert a file name and  ;
1242: EAE4         ; type in an FCB to an ASCII string in order to display it. If the first     ;
1243: EAE4         ; byte of the FCB is OOH, the current default drive is to be used.           ;
1244: EAE4         ; You must therefore use this function to determine the logical disk letter  ;
1245: EAE4         ; for the default drive.                                                     ;
1246: EAE4         ;                                                                            ;
1247: EAE4         ;			Function Code	:	C = 019H                                     ;
1248: EAE4         ;			Entry Parameters:	None										 ;
1249: EAE4         ;			Exit Parameters :	A = Current Disk (0=A,1=B...,F=P)			 ;
1250: EAE4         ;																			 ;
1251: EAE4         ;---------------------------- Get Current Disk- 19 (25) ---------------------;
1252: EAE4             vGetCurrentDisk:
1253: EAE4 3A 34 F5               LD     A,(currentDisk)
1254: EAE7 32 C2 EA               LD     (exitParameterByte),A
1255: EAEA C9                     RET
1256: EAEB         ;---------------------------- Set DMA Address - 1A (26) ---------------------;
1257: EAEB         ;  This function sets the BDOS's direct memory access (DMA) address to a new ;
1258: EAEB         ; value. The name is an historic relic dating back to the Intel Development  ;
1259: EAEB         ; System on which CP/M was originally developed. This machine, by virtue of  ;
1260: EAEB         ; its hardware, could read data from a diskette directly into memory or      ;
1261: EAEB         ; write data to a diskette directly from memory. The name DMA address now    ;
1262: EAEB         ; applies to the address of the buffer to and from which data is             ;
1263: EAEB         ; transferred whenever a diskette Read, Write, or directory operation is     ;
1264: EAEB         ; performed. Whenever CP/M first starts up (cold boot) m a warm boot or      ;
1265: EAEB         ; Reset Disk operation occurs, the DMA address is reset to its default       ;
1266: EAEB         ; value of 0080H.                                                            ;
1267: EAEB         ;                                                                            ;
1268: EAEB         ;			Function Code	:	C = 0A9H                                     ;
1269: EAEB         ;			Entry Parameters:	DE = DMA Address							 ;
1270: EAEB         ;			Exit Parameters :	None										 ;
1271: EAEB         ;																			 ;
1272: EAEB         ;---------------------------- Set DMA Address - 1A (26) ---------------------;
1273: EAEB             vSetDMA:
1274: EAEB 2A C0 EA               LD     HL,(paramDE)
1275: EAEE 22 3A F5               LD     (InitDAMAddress),HL
1276: EAF1 C3 D1 ED               JP     SetDataDMA
1277: EAF4         ;---------------------------- Get Allocation Vector - 1B (27) ---------------;
1278: EAF4         ;  This function returns the base, or starting, address of the allocation    ;
1279: EAF4         ; vector for the currently selected logical disk. This information,          ;
1280: EAF4         ; indicating which parts of the disk are assigned, is used by utility        ;
1281: EAF4         ; programs and the BDOS itself to determine how much unused space is on the  ;
1282: EAF4         ; logical disk, to locate an unused allocation block in order to extend      ;
1283: EAF4         ; a file, or to relinquish an allocation block when a file is deleted.       ;
1284: EAF4         ;                                                                            ;
1285: EAF4         ;			Function Code	:	C = 01BH                                     ;
1286: EAF4         ;			Entry Parameters:	None										 ;
1287: EAF4         ;			Exit Parameters :	HL = Address of allocation vector			 ;
1288: EAF4         ;																			 ;
1289: EAF4         ;---------------------------- Get Allocation Vector - 1B (27) ---------------;
1290: EAF4             vGetAllocAddr:
1291: EAF4 2A 48 F5               LD     HL,(caAllocVector)
1292: EAF7 22 C2 EA               LD     (exitParameterWord),HL
1293: EAFA C9                     RET
1294: EAFB         ;---------------------------- Get Read-Only Map - 1D (29) -------------------;
1295: EAFB         ;  This function returns a bit map in registers H and L showing which logical;
1296: EAFB         ; disks in the system have been set to Read-Only status, either by the       ;
1297: EAFB         ; Set Logical Disk to Read-Only function call (code 28, ICH), or by the      ;
1298: EAFB         ; BDOS itself, because it detected that a diskette had been changed.         ;
1299: EAFB         ;  The least significant bit of L corresponds to logical disk A, while the   ;
1300: EAFB         ; most significant bit of H corresponds to disk P. The bit corresponding to  ;
1301: EAFB         ; the specific logical disk is set to I if the disk has been set to          ;
1302: EAFB         ; Read-Only status.                                                          ;
1303: EAFB         ;                                                                            ;
1304: EAFB         ;			Function Code	:	C = 0DBH                                     ;
1305: EAFB         ;			Entry Parameters:	None										 ;
1306: EAFB         ;			Exit Parameters :	HL = Read-Only Map							 ;
1307: EAFB         ;																			 ;
1308: EAFB         ;---------------------------- Get Read-Only Map - 1D (29) -------------------;
1309: EAFB             vGetReadOnlyMap:
1310: EAFB 2A 36 F5               LD     HL,(ReadOnlyVector)
1311: EAFE 22 C2 EA               LD     (exitParameterWord),HL
1312: EB01 C9                     RET
1313: EB02         ;------------------ Get Disk Parameter Block Address - 1F (31) --------------;
1314: EB02         ;  This function returns the address of the disk parameter block (DPB) for   ;
1315: EB02         ; the last selected logical disk. The DPB describes the physical             ;
1316: EB02         ; characteristics of a specific logical disk-information mainly of interest  ;
1317: EB02         ; for system utility programs.                                               ;
1318: EB02         ;                                                                            ;
1319: EB02         ;			Function Code	:	C = 1FH                                     ;
1320: EB02         ;			Entry Parameters:	None										 ;
1321: EB02         ;			Exit Parameters :	HL = Address of Disk Parameter Block		 ;
1322: EB02         ;																			 ;
1323: EB02         ;------------------ Get Disk Parameter Block Address - 1F (31) --------------;
1324: EB02             vGetDiskParamBlock:                      ; func31 (31 - 1F)
1325: EB02 2A 44 F5               LD     HL,(caDiskParamBlock)
1326: EB05 22 C2 EA               LD     (exitParameterWord),HL
1327: EB08 C9                     RET
1328: EB09
1329: EB09         ;---------------------------- XXXXX YYYY ZZZZZZ - x (nn) --------------------;
1330: EB09         ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1331: EB09         ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1332: EB09         ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1333: EB09
1334: EB09         ;------------------------ Reset Logical Disk Drive - 25 (37) ----------------;
1335: EB09         ;  This function resets individual disk drives. It is a more precise version ;
1336: EB09         ; of the Reset Disk System function (code 13,ODH), in that you can set       ;
1337: EB09         ; specific logical; disks rather than all of them.                           ;
1338: EB09         ;  The bit map in DE shows which disks are to be reset. The least significant;
1339: EB09         ; bit of; E represents disk A, and the most significant bit of D, disk P.    ;
1340: EB09         ; The bits set to I indicate the disks to be reset.                          ;
1341: EB09         ;  Note that this function returns a zero value in A in order to maintain    ;
1342: EB09         ; compatibility with MP/ M.                                                  ;
1343: EB09         ;                                                                            ;
1344: EB09         ;			Function Code	:	C = 25H                                      ;
1345: EB09         ;			Entry Parameters:	DE = Logical Drive Bit Map					 ;
1346: EB09         ;			Exit Parameters :	A = 00H										 ;
1347: EB09         ;																			 ;
1348: EB09         ;------------------------ Reset Logical Disk Drive - 25 (37) ----------------;
1349: EB09         ;Reset Drive
1350: EB09         ;IN  - (DE) Drive Vector
1351: EB09         ;OUT - (A) 00
1352: EB09             vResetDrive:                      ; func37 (37 - 25) Reset Drive
1353: EB09         ; Not Yet Implemented   **************
1354: EB09 C9                     RET
1355: EB0A         ;*****************************************************************
1356: EB0A
1357: EB0A         ;-----------------------------------------------------------------
1358: EB0A         ;select disk in (E) paramDE
1359: EB0A         ; IN - (E) disk number -- 0=A  1=B ...15=P
1360: EB0A             vSelectDisk:                      ; func14 (14 - 0E)	Select Current Disk
1361: EB0A C3 4E EC               JP     SelectCurrent
1362: EB0D         ;ret ;jmp goba
1363: EB0D
1364: EB0D
1365: EB0D         ;*****************************************************************
1366: EB0D         ;random disk read
1367: EB0D         ;IN  - (DE) FCB address
1368: EB0D         ;OUT - (A) 01 = Reading unwritten data
1369: EB0D         ;	 02 = N/U
1370: EB0D         ;	 03 = Cannot close current extent
1371: EB0D         ;	 04 = Seek to unwriten Extent
1372: EB0D         ;	 05 = N/U
1373: EB0D         ;	 06 = Seek past Physical end of Disk
1374: EB0D             vReadRandom:                      ; func33 (33 - 21) Read Random record
1375: EB0D CD CC F2               CALL   Reselect
1376: EB10 C3 23 EB               JP     RandomDiskRead       ; to perform the disk read
1377: EB13         ;*****************************************************************
1378: EB13         ;write random record
1379: EB13         ;IN  - (DE) FCB address
1380: EB13         ;OUT - (A) 01 = Reading unwritten data
1381: EB13         ;	 02 = N/U
1382: EB13         ;	 03 = Cannot close current extent
1383: EB13         ;	 04 = Seek to unwriten Extent
1384: EB13         ;	 05 = Cannot create new Extent because of directory overflow
1385: EB13         ;	 06 = Seek past Physical end of Disk
1386: EB13             vWriteRandom:                      ; func34 (34 - 22) Write Random record
1387: EB13 CD CC F2               CALL   Reselect
1388: EB16 C3 2C EB               JP     RandomDiskWrite      ; to perform the disk write
1389: EB19         ;ret ;jmp goback
1390: EB19         ;*****************************************************************
1391: EB19         ;return file size (0-65536)
1392: EB19         ;IN  - (DE) FCB address
1393: EB19             vComputeFileSize:                      ; func35 (35 - 23) Compute File Size
1394: EB19 CD CC F2               CALL   Reselect
1395: EB1C C3 D9 EB               JP     GetFileSize
1396: EB1F         ;*****************************************************************
1397: EB1F         ;set random record
1398: EB1F         ;IN  - (DE) FCB address
1399: EB1F         ;OUT - Random Record Field is set
1400: EB1F             vSetRandomRecord:                      ; func36 (36 - 24) Set random Record
1401: EB1F C3 C6 EB               JP     SetRandomRecord
1402: EB22         ;? ;*****************************************************************
1403: EB22         ;? ;Reset Drive
1404: EB22         ;? ;IN  - (DE) Drive Vector
1405: EB22         ;? ;OUT - (A) 00
1406: EB22         ;? vResetDrive:								; func37 (37 - 25) Reset Drive
1407: EB22         ;? ; Not Yet Implemented   **************
1408: EB22         ;?	RET
1409: EB22         ;*****************************************************************
1410: EB22         ;*****************************************************************
1411: EB22         ;Write Random With Zero Fill
1412: EB22         ;IN  - (DE) FCB address
1413: EB22         ;OUT - (A) Return Code		see Function 34
1414: EB22             vWriteRandom0Fill:                      ; func40 (40 - 28) Reset Drive
1415: EB22         ; Not Yet Implemented   **************
1416: EB22 C9                     RET
1417: EB23         ;*****************************************************************
1418: EB23         ;******************< Random I/O Stuff ****************************
1419: EB23         ;*****************************************************************
1420: EB23         ;random disk read
1421: EB23             RandomDiskRead:                      ; randiskread
1422: EB23 0E FF                  LD     C,TRUE               ; marked as read operation
1423: EB25 CD 35 EB               CALL   RandomSeek
1424: EB28 CC BE EF               CALL   Z,DiskRead           ; if seek successful
1425: EB2B C9                     RET
1426: EB2C         ;*****************************************************************
1427: EB2C         ;random disk write
1428: EB2C             RandomDiskWrite:                      ; randiskwrite
1429: EB2C 0E 00                  LD     C,FALSE              ; marked as read operation
1430: EB2E CD 35 EB               CALL   RandomSeek
1431: EB31 CC 01 F0               CALL   Z,DiskWrite          ; if seek successful
1432: EB34 C9                     RET
1433: EB35         ;*****************************************************************
1434: EB35         ;*****************************************************************
1435: EB35         ;random access seek operation, C=0ffh if read mode
1436: EB35         ;fcb is assumed to address an active file control block
1437: EB35         ;(fcbS2Index has been set to 11000000b if previous bad seek)
1438: EB35             RandomSeek:
1439: EB35 AF                     XOR    A
1440: EB36 32 5E F5               LD     (seqReadFlag),A      ; marked as random access operation
1441: EB39 C5                     PUSH   BC                   ; save r/w flag
1442: EB3A 2A C0 EA               LD     HL,(paramDE)
1443: EB3D EB                     EX     DE,HL                ; DE will hold base of fcb
1444: EB3E 21 21 00               LD     HL,RANDOM_REC_FIELD
1445: EB41 19                     ADD    HL,DE                ; HL=.fcb(RANDOM_REC_FIELD)
1446: EB42 7E                     LD     A,(HL)
1447: EB43 E6 7F                  AND    7FH
1448: EB45 F5                     PUSH   AF                   ; record number
1449: EB46 7E                     LD     A,(HL)
1450: EB47 17                     RLA                         ; cy=lsb of extent#
1451: EB48 23                     INC    HL
1452: EB49 7E                     LD     A,(HL)
1453: EB4A 17                     RLA
1454: EB4B E6 1F                  AND    11111B               ; A=ext#
1455: EB4D 4F                     LD     C,A                  ; C holds extent number, record stacked
1456: EB4E 7E                     LD     A,(HL)
1457: EB4F 1F                     RRA
1458: EB50 1F                     RRA
1459: EB51 1F                     RRA
1460: EB52 1F                     RRA
1461: EB53 E6 0F                  AND    1111B                ; mod#
1462: EB55 47                     LD     B,A                  ; B holds module#, C holds ext#
1463: EB56 F1                     POP    AF                   ; recall sought record #
1464: EB57         ;check to insure that high byte of ran rec = 00
1465: EB57 23                     INC    HL
1466: EB58 6E                     LD     L,(HL)               ; l=high byte (must be 00)
1467: EB59 2C                     INC    L
1468: EB5A 2D                     DEC    L
1469: EB5B 2E 06                  LD     L,06                 ; zero flag, l=6
1470: EB5D         ; produce error 6, seek past physical eod
1471: EB5D C2 BE EB               JP     NZ,RandomSeekError
1472: EB60         ; otherwise, high byte = 0, A = sought record
1473: EB60 21 20 00               LD     HL,NEXT_RECORD
1474: EB63 19                     ADD    HL,DE                ; HL = .fcb(NEXT_RECORD)
1475: EB64 77                     LD     (HL),A               ; sought rec# stored away
1476: EB65         ; arrive here with B=mod#, C=ext#, DE=.fcb, rec stored
1477: EB65         ; the r/w flag is still stacked.  compare fcb values
1478: EB65 21 0C 00               LD     HL,fcbExtIndex       ; extent number field
1479: EB68 19                     ADD    HL,DE
1480: EB69 79                     LD     A,C                  ; A=seek ext#
1481: EB6A 96                     SUB    M
1482: EB6B C2 79 EB               JP     NZ,RandomSeekClose   ; tests for = extents
1483: EB6E         ; extents match, check mod#
1484: EB6E 21 0E 00               LD     HL,fcbS2Index
1485: EB71 19                     ADD    HL,DE
1486: EB72 78                     LD     A,B                  ; B=seek mod#
1487: EB73         ; could be overflow at eof, producing module#
1488: EB73         ; of 90H or 10H, so compare all but fwf
1489: EB73 96                     SUB    M
1490: EB74 E6 7F                  AND    7FH
1491: EB76 CA B1 EB               JP     Z,RandomSeekExit     ; same?
1492: EB79             RandomSeekClose:
1493: EB79 C5                     PUSH   BC
1494: EB7A D5                     PUSH   DE                   ; save seek mod#,ext#, .fcb
1495: EB7B CD A1 F1               CALL   CloseDirEntry        ; current extent closed
1496: EB7E D1                     POP    DE
1497: EB7F C1                     POP    BC                   ; recall parameters and fill
1498: EB80 2E 03                  LD     L,03                 ; cannot close error #3
1499: EB82 3A C2 EA               LD     A,(exitParameterByte)
1500: EB85 3C                     INC    A
1501: EB86 CA B7 EB               JP     Z,RandomSeekErrorBadSeek
1502: EB89 21 0C 00               LD     HL,fcbExtIndex
1503: EB8C 19                     ADD    HL,DE
1504: EB8D 71                     LD     (HL),C               ; fcb(fcbExtIndex)=ext#
1505: EB8E 21 0E 00               LD     HL,fcbS2Index
1506: EB91 19                     ADD    HL,DE
1507: EB92 70                     LD     (HL),B               ; fcb(fcbS2Index)=mod#
1508: EB93 CD F9 F2               CALL   OpenFile             ; is the file present?
1509: EB96 3A C2 EA               LD     A,(exitParameterByte)
1510: EB99 3C                     INC    A
1511: EB9A C2 B1 EB               JP     NZ,RandomSeekExit    ; open successful?
1512: EB9D         ; cannot open the file, read mode?
1513: EB9D C1                     POP    BC                   ; r/w flag to c (=0ffh if read)
1514: EB9E C5                     PUSH   BC                   ; everyone expects this item stacked
1515: EB9F 2E 04                  LD     L,04                 ; seek to unwritten extent #4
1516: EBA1 0C                     INC    C                    ; becomes 00 if read operation
1517: EBA2 CA B7 EB               JP     Z,RandomSeekErrorBadSeek ; skip to error if read operation
1518: EBA5 CD 49 F1               CALL   MakeNewFile          ; write operation, make new extent
1519: EBA8 2E 05                  LD     L,05                 ; cannot create new extent #5
1520: EBAA 3A C2 EA               LD     A,(exitParameterByte)
1521: EBAD 3C                     INC    A
1522: EBAE CA B7 EB               JP     Z,RandomSeekErrorBadSeek ; no dir space
1523: EBB1         ; file make operation successful
1524: EBB1             RandomSeekExit:                      ; seekok:
1525: EBB1 C1                     POP    BC                   ; discard r/w flag
1526: EBB2 AF                     XOR    A
1527: EBB3 32 C2 EA               LD     (exitParameterByte),A
1528: EBB6 C9                     RET                         ; with zero set
1529: EBB7
1530: EBB7             RandomSeekErrorBadSeek:
1531: EBB7         ; fcb no longer contains a valid fcb, mark with 11000000b in fcbS2Index field so that it
1532: EBB7         ; appears as overflow with file write flag set
1533: EBB7 E5                     PUSH   HL                   ; save error flag
1534: EBB8 CD C3 F2               CALL   GetModuleNum         ; HL = .fcbS2Index
1535: EBBB 36 C0                  LD     (HL),11000000B
1536: EBBD E1                     POP    HL                   ; and drop through
1537: EBBE             RandomSeekError:                      ; seekerr:
1538: EBBE C1                     POP    BC                   ; discard r/w flag
1539: EBBF 7D                     LD     A,L
1540: EBC0 32 C2 EA               LD     (exitParameterByte),A ; exitParameterByte=#, nonzero
1541: EBC3         ; SetFileWriteFlag returns non-zero accumulator for err
1542: EBC3 C3 CC F3               JP     SetFileWriteFlag     ; flag set, so subsequent close ok
1543: EBC6         ;ret
1544: EBC6         ;
1545: EBC6         ;*****************************************************************
1546: EBC6             SetRandomRecord:                      ; setrandom
1547: EBC6 2A C0 EA               LD     HL,(paramDE)
1548: EBC9 11 20 00               LD     DE,NEXT_RECORD       ; ready params for computesize
1549: EBCC CD 15 EC               CALL   GetRandomRecordPosition ; DE=paramDE, A=cy, BC=mmmm eeee errr rrrr
1550: EBCF 21 21 00               LD     HL,RANDOM_REC_FIELD
1551: EBD2 19                     ADD    HL,DE                ; HL = .FCB(RANDOM_REC_FIELD)
1552: EBD3 71                     LD     (HL),C
1553: EBD4 23                     INC    HL
1554: EBD5 70                     LD     (HL),B
1555: EBD6 23                     INC    HL
1556: EBD7 77                     LD     (HL),A               ; to RANDOM_REC_FIELD
1557: EBD8 C9                     RET
1558: EBD9         ;*****************************************************************
1559: EBD9         ;compute logical file size for current fcb
1560: EBD9             GetFileSize:                      ; getfilesize
1561: EBD9 0E 0C                  LD     C,fcbExtIndex
1562: EBDB CD 3C F3               CALL   Search4DirElement
1563: EBDE         ; zero the receiving Ramdom record field
1564: EBDE 2A C0 EA               LD     HL,(paramDE)
1565: EBE1 11 21 00               LD     DE,RANDOM_REC_FIELD
1566: EBE4 19                     ADD    HL,DE
1567: EBE5 E5                     PUSH   HL                   ; save position
1568: EBE6 72                     LD     (HL),D
1569: EBE7 23                     INC    HL
1570: EBE8 72                     LD     (HL),D
1571: EBE9 23                     INC    HL
1572: EBEA 72                     LD     (HL),D               ; =00 00 00
1573: EBEB             GetFileSize1:                      ; getsize:
1574: EBEB CD E0 ED               CALL   EndOfDirectory
1575: EBEE CA 13 EC               JP     Z,GetFileSizeExit
1576: EBF1         ; current fcb addressed by dptr
1577: EBF1 CD CC EE               CALL   GetDirElementAddress
1578: EBF4 11 0F 00               LD     DE,fcbRCIndex        ; ready for compute size
1579: EBF7 CD 15 EC               CALL   GetRandomRecordPosition
1580: EBFA         ; A=0000 000? BC = mmmm eeee errr rrrr compare with memory, larger?
1581: EBFA E1                     POP    HL
1582: EBFB E5                     PUSH   HL                   ; recall, replace .fcb(Random record Field)
1583: EBFC 5F                     LD     E,A                  ; save cy
1584: EBFD 79                     LD     A,C
1585: EBFE 96                     SUB    M
1586: EBFF 23                     INC    HL                   ; ls byte
1587: EC00 78                     LD     A,B
1588: EC01 9E                     SBC    A,(HL)
1589: EC02 23                     INC    HL                   ; middle byte
1590: EC03 7B                     LD     A,E
1591: EC04 9E                     SBC    A,(HL)               ; carry if .fcb(random record field) > directory
1592: EC05 DA 0D EC               JP     C,GetFileSize2       ; for another try
1593: EC08         ; fcb is less or equal, fill from directory
1594: EC08 73                     LD     (HL),E
1595: EC09 2B                     DEC    HL
1596: EC0A 70                     LD     (HL),B
1597: EC0B 2B                     DEC    HL
1598: EC0C 71                     LD     (HL),C
1599: EC0D             GetFileSize2:                      ; getnextsize:
1600: EC0D CD 54 F3               CALL   Search4NextDirElement
1601: EC10 C3 EB EB               JP     GetFileSize1
1602: EC13             GetFileSizeExit:                      ; setsize:
1603: EC13 E1                     POP    HL                   ; discard .fcb(random record field)
1604: EC14 C9                     RET
1605: EC15         ;-----------------------------------------------------------------
1606: EC15         ;compute random record position
1607: EC15             GetRandomRecordPosition:                      ; compute$rr
1608: EC15 EB                     EX     DE,HL
1609: EC16 19                     ADD    HL,DE
1610: EC17         ; DE=.buf(dptr) or .fcb(0), HL = .f(NEXT_RECORD/fcbRCIndex)
1611: EC17 4E                     LD     C,(HL)
1612: EC18 06 00                  LD     B,0                  ; BC = 0000 0000 ?rrr rrrr
1613: EC1A 21 0C 00               LD     HL,fcbExtIndex
1614: EC1D 19                     ADD    HL,DE
1615: EC1E 7E                     LD     A,(HL)
1616: EC1F 0F                     RRCA
1617: EC20 E6 80                  AND    80H                  ; A=e000 0000
1618: EC22 81                     ADD    A,C
1619: EC23 4F                     LD     C,A
1620: EC24 3E 00                  LD     A,0
1621: EC26 88                     ADC    A,B
1622: EC27 47                     LD     B,A
1623: EC28         ; BC = 0000 000? errrr rrrr
1624: EC28 7E                     LD     A,(HL)
1625: EC29 0F                     RRCA
1626: EC2A E6 0F                  AND    LO_NIBBLE_MASK
1627: EC2C 80                     ADD    A,B
1628: EC2D 47                     LD     B,A
1629: EC2E         ; BC = 000? eeee errrr rrrr
1630: EC2E 21 0E 00               LD     HL,fcbS2Index
1631: EC31 19                     ADD    HL,DE
1632: EC32 7E                     LD     A,(HL)               ; A=XXX? mmmm
1633: EC33 87                     ADD    A,A
1634: EC34 87                     ADD    A,A
1635: EC35 87                     ADD    A,A
1636: EC36 87                     ADD    A,A                  ; cy=? A=mmmm 0000
1637: EC37 F5                     PUSH   AF
1638: EC38 80                     ADD    A,B
1639: EC39 47                     LD     B,A
1640: EC3A         ; cy=?, BC = mmmm eeee errr rrrr
1641: EC3A F5                     PUSH   AF                   ; possible second carry
1642: EC3B E1                     POP    HL                   ; cy = lsb of L
1643: EC3C 7D                     LD     A,L                  ; cy = lsb of A
1644: EC3D E1                     POP    HL                   ; cy = lsb of L
1645: EC3E B5                     OR     L                    ; cy/cy = lsb of A
1646: EC3F E6 01                  AND    1                    ; A = 0000 000? possible carry-out
1647: EC41 C9                     RET
1648: EC42         ;-----------------------------------------------------------------
1649: EC42
1650: EC42
1651: EC42
1652: EC42         ;*****************************************************************
1653: EC42         ;********************** Disk  I/O ********************************
1654: EC42         ;*****************************************************************
1655: EC42         ;-----------------------------------------------------------------
1656: EC42         ;;write protect current disk
1657: EC42             vWriteProtectDisk:                      ; func28 (28 - 1C) Write protect disk
1658: EC42 C3 03 ED               JP     SetDiskReadOnly
1659: EC45         ;-----------------------------------------------------------------
1660: EC45         ;;set file Attributes
1661: EC45             vSetFileAttributes:                      ; func30 (30 - 1E) Set File Attributes
1662: EC45 CD CC F2               CALL   Reselect
1663: EC48 CD 21 EF               CALL   SetAttributes
1664: EC4B C3 B6 F2               JP     DirLocationToReturnLoc ; exitParameterByte=dirloc
1665: EC4E         ;-----------------------------------------------------------------
1666: EC4E
1667: EC4E             SelectCurrent:                      ; curselect
1668: EC4E 3A BF EA               LD     A,(paramE)
1669: EC51 21 34 F5               LD     HL,currentDisk
1670: EC54 BE                     CP     M
1671: EC55 C8                     RET    Z                    ; exit if parame = Current disk
1672: EC56 77                     LD     (HL),A
1673: EC57 C3 5A EC               JP     Select
1674: EC5A         ;*****************************************************************
1675: EC5A         ;--------------------------- Select Login Drive -----------------------------;
1676: EC5A         ; select Login Drive                                                        ;
1677: EC5A             Select:                         ;
1678: EC5A CD 7B EC               CALL   SelectDisk           ; Select the Disk                    ;
1679: EC5D CC A3 F4               CALL   Z,errSelect          ;
1680: EC60 21 34 F5               LD     HL,currentDisk       ;
1681: EC63 46                     LD     B,(HL)               ; Get Current Disk                   ;
1682: EC64 2A 38 F5               LD     HL,(loggedDisks)     ; Load Logged Disk MAP               ;
1683: EC67 CD 75 F4               CALL   IsBitSet             ;
1684: EC6A C0                     RET    NZ                   ; Exit if already logged in          ;
1685: EC6B         ;                                                                            ;
1686: EC6B 21 34 F5               LD     HL,currentDisk       ;
1687: EC6E 46                     LD     B,(HL)               ; Get Current Disk                   ;
1688: EC6F 2A 38 F5               LD     HL,(loggedDisks)     ; else log in a different disk	     ;
1689: EC72 CD 85 F4               CALL   SetMapBit            ;
1690: EC75 22 38 F5               LD     (loggedDisks),HL     ; Update the Map                     ;
1691: EC78         ;
1692: EC78 C3 1A ED               JP     InitDisk             ;
1693: EC7B         ;--------------------------- Select Login Drive -----------------------------;
1694: EC7B
1695: EC7B         ;--------------------------- Select Disk ------------------------------------;
1696: EC7B         ;*****************************************************************          ;
1697: EC7B         ; select the disk drive given by currentDisk, and fill the base addresses   ;
1698: EC7B         ; caTrack - caAllocVector, then fill the values of the disk parameter block ;
1699: EC7B             SelectDisk:                      ;
1700: EC7B 3A 34 F5               LD     A,(currentDisk)      ; Get current disk (0=A,1=B...)      ;
1701: EC7E 4F                     LD     C,A                  ; Prepare for BIOS Call              ;
1702: EC7F CD 1B F6               CALL   bcSeldsk             ; Select the disk                    ;
1703: EC82 7C                     LD     A,H                  ; Return Pointer to                  ;
1704: EC83 B5                     OR     L                    ;  Disk Parameter Header             ;
1705: EC84 C8                     RET    Z                    ; exit if error, with HL = 0000      ;
1706: EC85         ;
1707: EC85 5E                     LD     E,(HL)               ;
1708: EC86 23                     INC    HL                   ;
1709: EC87 56                     LD     D,(HL)               ; Skew Table in DE                   ;
1710: EC88 23                     INC    HL                   ; HL = DPH + 2, Rel Pos for File     ;
1711: EC89 ED 53 59 F5               LD     (caSkewTable),DE     ; Move to Current Skew Table         ;
1712: EC8D         ;
1713: EC8D 22 3C F5               LD     (caDirMaxValue),HL   ; Move to Current Dir max            ;
1714: EC90 23                     INC    HL                   ;
1715: EC91 23                     INC    HL                   ; HL = Last Track #                  ;
1716: EC92 22 3E F5               LD     (caTrack),HL         ; Move to Current Track #            ;
1717: EC95 23                     INC    HL                   ;
1718: EC96 23                     INC    HL                   ; HL = Last Sector #                 ;
1719: EC97 22 40 F5               LD     (caSector),HL        ; Move to Current Sector #           ;
1720: EC9A 23                     INC    HL                   ;
1721: EC9B 23                     INC    HL                   ;
1722: EC9C 11 42 F5               LD     DE,caDirectoryDMA    ;
1723: EC9F 01 08 00               LD     BC,caListSize        ;
1724: ECA2 ED B0                  LDIR                        ;
1725: ECA4         ;
1726: ECA4         ; finish filling in address list                                             ;
1727: ECA4 2A 44 F5               LD     HL,(caDiskParamBlock) ; Point Disk Parameter Block         ;
1728: ECA7 11 4A F5               LD     DE,dpbStart          ; Point at BIOS DPB                  ;
1729: ECAA 01 0F 00               LD     BC,dpbSize           ;
1730: ECAD ED B0                  LDIR                        ; Move DPB to current                ;
1731: ECAF         ;
1732: ECAF         ; Determine if Byte or Word Allocation Table	                             ;
1733: ECAF 2A 4F F5               LD     HL,(dpbDSM)          ; Get max entry number               ;
1734: ECB2 7C                     LD     A,H                  ; If  its 00 then < 255              ;
1735: ECB3 21 63 F5               LD     HL,byteAllocationFlag ; Point at the  flag				 ;
1736: ECB6 36 FF                  LD     (HL),TRUE            ; Assume its less than 255           ;
1737: ECB8 B7                     OR     A                    ;  is the assumption confirmed ?     ;
1738: ECB9 28 02                  JR     Z,SelectDisk1        ;  skip if yes                       ;
1739: ECBB 36 00                  LD     (HL),FALSE           ; Fix assumption,set flag to false   ;
1740: ECBD         ;
1741: ECBD         ; Set Sign, reset Carry and Zero to indicate success                         ;
1742: ECBD             SelectDisk1:                      ;
1743: ECBD 3E FF                  LD     A,TRUE               ;
1744: ECBF B7                     OR     A                    ;
1745: ECC0 C9                     RET                         ;
1746: ECC1         ;--------------------------- Select Disk ------------------------------------;
1747: ECC1         ;--------------------------- Initialize Disk --------------------------------;
1748: ECC1             InitDisk1:
1749: ECC1 0E FF                  LD     C,TRUE
1750: ECC3 CD F2 ED               CALL   ReadDirectory
1751: ECC6 CD E0 ED               CALL   EndOfDirectory
1752: ECC9 C8                     RET    Z                    ; return if end of directory
1753: ECCA         ; not end of directory, valid entry?
1754: ECCA CD CC EE               CALL   GetDirElementAddress ; HL = caDirectoryDMA + dirBlockIndex
1755: ECCD 3E E5                  LD     A,emptyDir
1756: ECCF BE                     CP     M
1757: ECD0 CA C1 EC               JP     Z,InitDisk1          ; go get another item
1758: ECD3         ; not emptyDir, user code the same?
1759: ECD3 3A 33 F5               LD     A,(currentUserNumber)
1760: ECD6 BE                     CP     M
1761: ECD7 C2 E5 EC               JP     NZ,InitDisk2
1762: ECDA         ; same user code, check for '$' submit
1763: ECDA 23                     INC    HL
1764: ECDB 7E                     LD     A,(HL)               ; first character
1765: ECDC D6 24                  SUB    DOLLAR               ; dollar file?
1766: ECDE C2 E5 EC               JP     NZ,InitDisk2
1767: ECE1         ; dollar file found, mark in exitParameterByte
1768: ECE1 3D                     DEC    A
1769: ECE2 32 C2 EA               LD     (exitParameterByte),A ; exitParameterByte = 255
1770: ECE5             InitDisk2:
1771: ECE5         ; now scan the disk map for allocated blocks
1772: ECE5 0E 01                  LD     C,1                  ; set to allocated
1773: ECE7 CD 49 ED               CALL   ScanDiskMap
1774: ECEA CD D5 EE               CALL   SetDirectoryEntry    ; set DirMaxVAlue to dirEntryIndex
1775: ECED C3 C1 EC               JP     InitDisk1            ; for another entry
1776: ECF0         ;--------------------------- Initialize Disk --------------------------------;
1777: ECF0         ;---------------
1778: ECF0         ; set a "1" value in currentDisk position of BC
1779: ECF0         ; return in HL
1780: ECF0             SetCurrentDiskBit:
1781: ECF0 C5                     PUSH   BC                   ; save input parameter
1782: ECF1 3A 34 F5               LD     A,(currentDisk)
1783: ECF4 4F                     LD     C,A                  ; ready parameter for shift
1784: ECF5 21 01 00               LD     HL,1                 ; number to shift
1785: ECF8 CD 64 F4               CALL   ShiftLeftHLbyC       ; HL = mask to integrate
1786: ECFB C1                     POP    BC                   ; original mask
1787: ECFC 79                     LD     A,C
1788: ECFD B5                     OR     L
1789: ECFE 6F                     LD     L,A
1790: ECFF 78                     LD     A,B
1791: ED00 B4                     OR     H
1792: ED01 67                     LD     H,A                  ; HL = mask or rol(1,currentDisk)
1793: ED02 C9                     RET
1794: ED03         ;--------------
1795: ED03         ;set current disk to read only
1796: ED03             SetDiskReadOnly:
1797: ED03 21 36 F5               LD     HL,ReadOnlyVector
1798: ED06 4E                     LD     C,(HL)
1799: ED07 23                     INC    HL
1800: ED08 46                     LD     B,(HL)
1801: ED09 CD F0 EC               CALL   SetCurrentDiskBit    ; sets bit to 1
1802: ED0C 22 36 F5               LD     (ReadOnlyVector),HL
1803: ED0F         ; high water mark in directory goes to max
1804: ED0F 2A 51 F5               LD     HL,(dpbDRM)          ; directory max
1805: ED12 EB                     EX     DE,HL                ; DE = directory max
1806: ED13 2A 3C F5               LD     HL,(caDirMaxValue)   ; HL = .Directory max value
1807: ED16 73                     LD     (HL),E
1808: ED17 23                     INC    HL
1809: ED18 72                     LD     (HL),D               ; cdrmax = dpbDRM
1810: ED19 C9                     RET
1811: ED1A         ;----------------------- initialize the current disk
1812: ED1A         ;
1813: ED1A         ;exitParameterByte = false ;set to true if $ file exists
1814: ED1A         ; compute the length of the allocation vector - 2
1815: ED1A
1816: ED1A             InitDisk:
1817: ED1A 2A 4F F5               LD     HL,(dpbDSM)          ; get max allocation value
1818: ED1D 0E 03                  LD     C,3                  ; we want dpbDSM/8
1819: ED1F         ; number of bytes in alloc vector is (dpbDSM/8)+1
1820: ED1F CD 57 F4               CALL   ShiftRightHLbyC
1821: ED22 23                     INC    HL                   ; HL = dpbDSM/8+1
1822: ED23 44                     LD     B,H
1823: ED24 4D                     LD     C,L                  ; BC has size of AllocationVector
1824: ED25 2A 48 F5               LD     HL,(caAllocVector)   ; base of allocation vector
1825: ED28         ;fill the allocation vector with zeros
1826: ED28             InitDisk0:
1827: ED28 36 00                  LD     (HL),0
1828: ED2A 23                     INC    HL                   ; alloc(i)=0
1829: ED2B 0B                     DEC    BC                   ; count length down
1830: ED2C 78                     LD     A,B
1831: ED2D B1                     OR     C
1832: ED2E C2 28 ED               JP     NZ,InitDisk0
1833: ED31         ; set the reserved space for the directory
1834: ED31 2A 53 F5               LD     HL,(dpbDABM)         ; get the directory block reserved bits
1835: ED34 EB                     EX     DE,HL
1836: ED35 2A 48 F5               LD     HL,(caAllocVector)   ; HL=.alloc()
1837: ED38 73                     LD     (HL),E
1838: ED39 23                     INC    HL
1839: ED3A 72                     LD     (HL),D               ; sets reserved directory blks
1840: ED3B         ; allocation vector initialized, home disk
1841: ED3B CD B0 ED               CALL   Home
1842: ED3E         ; caDirMaxValue = 3 (scans at least one directory record)
1843: ED3E 2A 3C F5               LD     HL,(caDirMaxValue)
1844: ED41 36 03                  LD     (HL),3
1845: ED43 23                     INC    HL
1846: ED44 36 00                  LD     (HL),0               ; caDirMaxValue = 0003
1847: ED46
1848: ED46 CD CA ED               CALL   SetEndDirectory      ; dirEntryIndex = EOD
1849: ED49         ; read directory entries and check for allocated storage
1850: ED49         ;? InitDisk1:
1851: ED49         ;?	LD		C,TRUE
1852: ED49         ;?	CALL	ReadDirectory
1853: ED49         ;?	CALL	EndOfDirectory
1854: ED49         ;?	RET	Z; return if end of directory
1855: ED49         ;? ; not end of directory, valid entry?
1856: ED49         ;?	CALL	GetDirElementAddress			; HL = caDirectoryDMA + dirBlockIndex
1857: ED49         ;?	LD		A,emptyDir
1858: ED49         ;?	CP		M
1859: ED49         ;?	JP	Z,InitDisk1						; go get another item
1860: ED49         ;? ; not emptyDir, user code the same?
1861: ED49         ;?	LD		A,(currentUserNumber)
1862: ED49         ;?	CP		M
1863: ED49         ;?	JP	NZ,InitDisk2
1864: ED49         ;? ; same user code, check for '$' submit
1865: ED49         ;?	INC		HL
1866: ED49         ;?	LD		A,(HL)								; first character
1867: ED49         ;?	SUB		DOLLAR							; dollar file?
1868: ED49         ;?	JP	NZ,InitDisk2
1869: ED49         ;? ; dollar file found, mark in exitParameterByte
1870: ED49         ;?	DEC		A
1871: ED49         ;?	LD		(exitParameterByte),A					; exitParameterByte = 255
1872: ED49         ;? InitDisk2:
1873: ED49         ;? ; now scan the disk map for allocated blocks
1874: ED49         ;?	LD		C,1								; set to allocated
1875: ED49         ;?	CALL	ScanDiskMap
1876: ED49         ;?	CALL	SetDirectoryEntry				; set DirMaxVAlue to dirEntryIndex
1877: ED49         ;?	JP		InitDisk1						; for another entry
1878: ED49         ;
1879: ED49         ;-------------Scan the disk map for unallocated entry-----------------------------------
1880: ED49         ; scan the disk map addressed by dptr for non-zero entries.  The allocation
1881: ED49         ; vector entry corresponding to a non-zero entry is set to the value of C (0,1)
1882: ED49             ScanDiskMap:
1883: ED49 CD CC EE               CALL   GetDirElementAddress ; HL = buffa + dptr
1884: ED4C         ; HL addresses the beginning of the directory entry
1885: ED4C 11 10 00               LD     DE,fcbDiskMapIndex
1886: ED4F 19                     ADD    HL,DE                ; hl now addresses the disk map
1887: ED50 C5                     PUSH   BC                   ; save the set/reset bit
1888: ED51 0E 11                  LD     C,fcbLength-fcbDiskMapIndex+1 ; size of Disk Allocation Map + 1
1889: ED53
1890: ED53             ScanDiskMap0:                      ; loop once for each disk map entry
1891: ED53 D1                     POP    DE                   ; recall the set/reset bit
1892: ED54 0D                     DEC    C
1893: ED55 C8                     RET    Z
1894: ED56
1895: ED56 D5                     PUSH   DE                   ; save the set/reset bit
1896: ED57 3A 63 F5               LD     A,(byteAllocationFlag) ; byteAllocationFlag byte entry flag
1897: ED5A B7                     OR     A
1898: ED5B CA 66 ED               JP     Z,ScanDiskMap1       ; skip if two byte value
1899: ED5E         ;  Byte Allocation scan operation
1900: ED5E C5                     PUSH   BC                   ; save counter
1901: ED5F E5                     PUSH   HL                   ; save map address
1902: ED60 4E                     LD     C,(HL)
1903: ED61 06 00                  LD     B,0                  ; BC=block#
1904: ED63 C3 6C ED               JP     ScanDiskMap2
1905: ED66         ; two byte scan operation
1906: ED66             ScanDiskMap1:
1907: ED66 0D                     DEC    C                    ; adjust counter for double byte
1908: ED67 C5                     PUSH   BC                   ; save counter
1909: ED68         ;	MOV		C,M
1910: ED68 46                     LD     B,(HL)
1911: ED69 23                     INC    HL
1912: ED6A         ;	MOV		B,M								; BC=block#
1913: ED6A 4E                     LD     C,(HL)               ; BC=block#
1914: ED6B E5                     PUSH   HL                   ; save map address
1915: ED6C             ScanDiskMap2:                      ; arrive here with BC=block#, E=0/1
1916: ED6C 79                     LD     A,C
1917: ED6D B0                     OR     B                    ; skip if = 0000
1918: ED6E C4 9E ED               CALL   NZ,SetAllocBit       ; bit set to 0/1 its in C
1919: ED71 E1                     POP    HL
1920: ED72 23                     INC    HL                   ; to next bit position
1921: ED73 C1                     POP    BC                   ; recall counter
1922: ED74 C3 53 ED               JP     ScanDiskMap0         ; for another item
1923: ED77         ;
1924: ED77         ;-----------------------------------
1925: ED77         ;given allocation vector position BC, return with byte
1926: ED77         ;containing BC shifted so that the least significant
1927: ED77         ;bit is in the low order accumulator position.  HL is
1928: ED77         ;the address of the byte for possible replacement in
1929: ED77         ;memory upon return, and D contains the number of shifts
1930: ED77         ;required to place the returned value back into position
1931: ED77
1932: ED77             GetAllocBit:                      ; getallocbit
1933: ED77 79                     LD     A,C
1934: ED78 E6 07                  AND    111b
1935: ED7A 3C                     INC    A
1936: ED7B 5F                     LD     E,A
1937: ED7C 57                     LD     D,A
1938: ED7D         ; d and e both contain the number of bit positions to shift
1939: ED7D 79                     LD     A,C
1940: ED7E 0F                     RRCA
1941: ED7F 0F                     RRCA
1942: ED80 0F                     RRCA
1943: ED81 E6 1F                  AND    11111b
1944: ED83 4F                     LD     C,A                  ; C shr 3 to C
1945: ED84 78                     LD     A,B
1946: ED85 87                     ADD    A,A
1947: ED86 87                     ADD    A,A
1948: ED87 87                     ADD    A,A
1949: ED88 87                     ADD    A,A
1950: ED89 87                     ADD    A,A                  ; B shl 5
1951: ED8A B1                     OR     C
1952: ED8B 4F                     LD     C,A                  ; bbbccccc to C
1953: ED8C 78                     LD     A,B
1954: ED8D 0F                     RRCA
1955: ED8E 0F                     RRCA
1956: ED8F 0F                     RRCA
1957: ED90 E6 1F                  AND    11111b
1958: ED92 47                     LD     B,A                  ; BC shr 3 to BC
1959: ED93 2A 48 F5               LD     HL,(caAllocVector)   ; base address of allocation vector
1960: ED96 09                     ADD    HL,BC
1961: ED97 7E                     LD     A,(HL)               ; byte to A, hl = .alloc(BC shr 3)
1962: ED98         ;now move the bit to the low order position of A
1963: ED98             GetAllocBitl:
1964: ED98 07                     RLCA
1965: ED99 1D                     DEC    E
1966: ED9A C2 98 ED               JP     NZ,GetAllocBitl
1967: ED9D C9                     RET
1968: ED9E
1969: ED9E         ;-----------------------------------
1970: ED9E         ; BC is the bit position of ALLOC to set or reset.  The
1971: ED9E         ; value of the bit is in register E.
1972: ED9E             SetAllocBit:
1973: ED9E D5                     PUSH   DE
1974: ED9F CD 77 ED               CALL   GetAllocBit          ; shifted val A, count in D
1975: EDA2 E6 FE                  AND    11111110b            ; mask low bit to zero (may be set)
1976: EDA4 C1                     POP    BC
1977: EDA5 B1                     OR     C                    ; low bit of C is masked into A
1978: EDA6 C3 A9 ED               JP     RotateAndReplace     ; to rotate back into proper position
1979: EDA9         ;ret
1980: EDA9         ;-----------------------------------
1981: EDA9         ; byte value from ALLOC is in register A, with shift count
1982: EDA9         ; in register C (to place bit back into position), and
1983: EDA9         ; target ALLOC position in registers HL, rotate and replace
1984: EDA9             RotateAndReplace:
1985: EDA9 0F                     RRCA
1986: EDAA 15                     DEC    D
1987: EDAB C2 A9 ED               JP     NZ,RotateAndReplace  ; back into position
1988: EDAE 77                     LD     (HL),A               ; back to ALLOC
1989: EDAF C9                     RET
1990: EDB0         ;-----------------------------------
1991: EDB0
1992: EDB0         ;move to home position, then offset to start of dir
1993: EDB0             Home:
1994: EDB0 CD 18 F6               CALL   bcHome               ; move to track 00, sector 00 reference
1995: EDB3 21 57 F5               LD     HL,dpbOFF            ; get track ofset at begining
1996: EDB6 4E                     LD     C,(HL)
1997: EDB7 23                     INC    HL
1998: EDB8 46                     LD     B,(HL)
1999: EDB9 CD 1E F6               CALL   bcSettrk             ; select first directory position
2000: EDBC
2001: EDBC AF                     XOR    A                    ; constant zero to accumulator
2002: EDBD 2A 3E F5               LD     HL,(caTrack)
2003: EDC0 77                     LD     (HL),A
2004: EDC1 23                     INC    HL
2005: EDC2 77                     LD     (HL),A               ; curtrk=0000
2006: EDC3 2A 40 F5               LD     HL,(caSector)
2007: EDC6 77                     LD     (HL),A
2008: EDC7 23                     INC    HL
2009: EDC8 77                     LD     (HL),A               ; currec=0000
2010: EDC9 C9                     RET
2011: EDCA
2012: EDCA
2013: EDCA         ;*****************************************************************
2014: EDCA
2015: EDCA         ;*****************************************************************
2016: EDCA         ;*****************************************************************
2017: EDCA         ; set directory counter to end  -1
2018: EDCA             SetEndDirectory:
2019: EDCA 21 FF FF               LD     HL,EOD
2020: EDCD 22 6E F5               LD     (dirEntryIndex),HL
2021: EDD0 C9                     RET
2022: EDD1         ;---------------
2023: EDD1             SetDataDMA:                      ; setdata
2024: EDD1 21 3A F5               LD     HL,InitDAMAddress
2025: EDD4 C3 DA ED               JP     SetDMA               ; to complete the call
2026: EDD7         ;---------------
2027: EDD7             SetDirDMA:                      ; setdir
2028: EDD7 21 42 F5               LD     HL,caDirectoryDMA
2029: EDDA
2030: EDDA             SetDMA:
2031: EDDA 4E                     LD     C,(HL)
2032: EDDB 23                     INC    HL
2033: EDDC 46                     LD     B,(HL)               ; parameter ready
2034: EDDD C3 24 F6               JP     bcSetdma             ; call bios to set
2035: EDE0         ;---------------
2036: EDE0         ;---------------
2037: EDE0         ; return zero flag if at end of directory
2038: EDE0         ; non zero if not at end (end of dir if dirEntryIndex = 0ffffh)
2039: EDE0             EndOfDirectory:
2040: EDE0 21 6E F5               LD     HL,dirEntryIndex
2041: EDE3 7E                     LD     A,(HL)               ; may be 0ffh
2042: EDE4 23                     INC    HL
2043: EDE5 BE                     CP     M                    ; low(dirEntryIndex) = high(dirEntryIndex)?
2044: EDE6 C0                     RET    NZ                   ; non zero returned if different
2045: EDE7         ; high and low the same, = 0ffh?
2046: EDE7 3C                     INC    A                    ; 0ffh becomes 00 if so
2047: EDE8 C9                     RET
2048: EDE9         ;---------------
2049: EDE9         ;--------------------------- Read Directory Record --------------------------;
2050: EDE9         ; read a directory entry into the directory buffer
2051: EDE9             ReadDirRecord:
2052: EDE9 CD D7 ED               CALL   SetDirDMA            ; System Assigned Buffer
2053: EDEC CD 3A F2               CALL   ReadBuffer           ; directory record loaded
2054: EDEF C3 D1 ED               JP     SetDataDMA           ; to data dma address
2055: EDF2         ;ret
2056: EDF2         ;--------------------------- Read Directory Record --------------------------;
2057: EDF2
2058: EDF2         ;--------------------------- Read Directory ---------------------------------;
2059: EDF2         ; read next directory entry, with C=true if initializing
2060: EDF2             ReadDirectory:
2061: EDF2 2A 51 F5               LD     HL,(dpbDRM)          ; Number of Dir Entries-1
2062: EDF5 EB                     EX     DE,HL                ; determine number of directory entries
2063: EDF6 2A 6E F5               LD     HL,(dirEntryIndex)   ; index into directory
2064: EDF9 23                     INC    HL
2065: EDFA 22 6E F5               LD     (dirEntryIndex),HL   ; initialize directory index
2066: EDFD         ; continue while dpbDRM >= dirEntryIndex (dpbDRM-dirEntryIndex no cy)
2067: EDFD CD 50 F4               CALL   DEminusHL2HL         ; DE-HL - processed all entries ?
2068: EE00 D2 07 EE               JP     NC,ReadDirectory0    ; no - do it again
2069: EE03         ; yes, set dirEntryIndex to end of directory
2070: EE03 CD CA ED               CALL   SetEndDirectory
2071: EE06 C9                     RET
2072: EE07
2073: EE07         ; not at end of directory, seek next element, initialization flag is in C
2074: EE07             ReadDirectory0:
2075: EE07 3A 6E F5               LD     A,(dirEntryIndex)
2076: EE0A E6 03                  AND    dirEntryMask         ; low(dirEntryIndex) and dirEntryMask
2077: EE0C 06 05                  LD     B,fcbShift           ; to multiply by fcb size to get the correct index in dir record
2078: EE0E             ReadDirectory1:
2079: EE0E 87                     ADD    A,A
2080: EE0F 05                     DEC    B
2081: EE10 C2 0E EE               JP     NZ,ReadDirectory1
2082: EE13         ; A = (low(dirEntryIndex) and dirEntryMask) shl fcbShift
2083: EE13 32 6D F5               LD     (dirBlockIndex),A    ; ready for next dir operation
2084: EE16 B7                     OR     A
2085: EE17 C0                     RET    NZ                   ; return if not a new record (Directory Block)
2086: EE18 C5                     PUSH   BC                   ; save initialization flag C
2087: EE19 CD 23 EE               CALL   SeekDir              ; seek$dir seek proper record
2088: EE1C CD E9 ED               CALL   ReadDirRecord        ; read the directory record
2089: EE1F C1                     POP    BC                   ; recall initialization flag
2090: EE20 C3 97 EE               JP     CalculateCheckSum    ; checksum the directory elt
2091: EE23         ;---------
2092: EE23         ;--------------------------- Read Directory ---------------------------------;
2093: EE23         ;seek the record containing the current dir entry
2094: EE23             SeekDir:
2095: EE23 2A 6E F5               LD     HL,(dirEntryIndex)   ; directory counter to HL
2096: EE26 0E 02                  LD     C,dirEntryShift      ; 4 entries per record
2097: EE28 CD 57 F4               CALL   ShiftRightHLbyC      ; value to HL
2098: EE2B 22 6B F5               LD     (currentBlock),HL
2099: EE2E 22 70 F5               LD     (dirRecord),HL       ; ready for seek
2100: EE31 C3 34 EE               JP     Seek
2101: EE34         ;---------------------------
2102: EE34             Seek:                           ; seek
2103: EE34         ;seek the track given by currentBlock (actual record number)
2104: EE34
2105: EE34 21 6B F5               LD     HL,currentBlock      ; contains the cpm record number
2106: EE37 4E                     LD     C,(HL)               ; Actual Record Number Low
2107: EE38 23                     INC    HL
2108: EE39 46                     LD     B,(HL)               ; Actual Record Number High
2109: EE3A 2A 40 F5               LD     HL,(caSector)        ; Current Sector
2110: EE3D 5E                     LD     E,(HL)               ; Current Sector Number Low
2111: EE3E 23                     INC    HL
2112: EE3F 56                     LD     D,(HL)               ; Current Sector Number High
2113: EE40 2A 3E F5               LD     HL,(caTrack)         ; Current track
2114: EE43 7E                     LD     A,(HL)               ; Current track Number Low - temp
2115: EE44 23                     INC    HL
2116: EE45 66                     LD     H,(HL)               ; Current track Number High
2117: EE46 6F                     LD     L,A                  ; Current track Number Low
2118: EE47         ;(BC) - cpmRecord Number
2119: EE47         ;(DE) - Current Sector
2120: EE47         ;(HL) - Current Track
2121: EE47
2122: EE47         ;loop while currentBlock < currec   ?????
2123: EE47             Seek0:
2124: EE47 79                     LD     A,C                  ;   Current Sector
2125: EE48 93                     SUB    E                    ;
2126: EE49 78                     LD     A,B                  ; - cpmRecord Number
2127: EE4A 9A                     SBC    A,D                  ;
2128: EE4B D2 5D EE               JP     NC,Seek1             ; skip if cpmRecord Number >= Current Sector
2129: EE4E
2130: EE4E E5                     PUSH   HL
2131: EE4F 2A 4A F5               LD     HL,(dpbSPT)
2132: EE52 7B                     LD     A,E
2133: EE53 95                     SUB    L
2134: EE54 5F                     LD     E,A
2135: EE55 7A                     LD     A,D
2136: EE56 9C                     SBC    A,H
2137: EE57 57                     LD     D,A
2138: EE58 E1                     POP    HL
2139: EE59 2B                     DEC    HL
2140: EE5A C3 47 EE               JP     Seek0
2141: EE5D
2142: EE5D             Seek1:
2143: EE5D
2144: EE5D E5                     PUSH   HL                   ; Save Current Track
2145: EE5E 2A 4A F5               LD     HL,(dpbSPT)          ; records per track
2146: EE61 19                     ADD    HL,DE                ; HL = Current Sector + sectorsPerClynder
2147: EE62 79                     LD     A,C                  ;     cpmRecord Number
2148: EE63 95                     SUB    L                    ;
2149: EE64 78                     LD     A,B                  ;  - HL (above)
2150: EE65 9C                     SBC    A,H                  ;
2151: EE66 DA 6F EE               JP     C,Seek2              ; skip if cpmRecord Number > HL (above)
2152: EE69
2153: EE69 EB                     EX     DE,HL
2154: EE6A
2155: EE6A E1                     POP    HL
2156: EE6B 23                     INC    HL
2157: EE6C C3 5D EE               JP     Seek1
2158: EE6F
2159: EE6F             Seek2:
2160: EE6F E1                     POP    HL                   ; retreive Current Track
2161: EE70 C5                     PUSH   BC                   ; save  cpmRecord Number
2162: EE71 D5                     PUSH   DE                   ; save  Current Sector
2163: EE72 E5                     PUSH   HL                   ; save CurrentTrack
2164: EE73         ; stack contains CurrentTrack , Current Sector, cpmRecord Number
2165: EE73 EB                     EX     DE,HL                ; DE => CurrentTrack, HL => Current Sector
2166: EE74 2A 57 F5               LD     HL,(dpbOFF)          ; Block Zero starting Track
2167: EE77 19                     ADD    HL,DE                ; HL =  actual physical Track number
2168: EE78 44                     LD     B,H
2169: EE79 4D                     LD     C,L                  ; BC has physical Track number
2170: EE7A CD 1E F6               CALL   bcSettrk             ; track set up
2171: EE7D         ; note that BC - curtrk is difference to move in bios
2172: EE7D D1                     POP    DE                   ; recall CurrentTrack
2173: EE7E 2A 3E F5               LD     HL,(caTrack)         ; point at current Track
2174: EE81 73                     LD     (HL),E
2175: EE82 23                     INC    HL
2176: EE83 72                     LD     (HL),D               ; current Track updated
2177: EE84         ; now compute sector as currentBlock-currec
2178: EE84 D1                     POP    DE                   ; recall Current Sector
2179: EE85 2A 40 F5               LD     HL,(caSector)        ; point at current Sector
2180: EE88 73                     LD     (HL),E
2181: EE89 23                     INC    HL
2182: EE8A 72                     LD     (HL),D               ; current sector updated / DE has currentSector
2183: EE8B C1                     POP    BC                   ; recall cpmRecord Number
2184: EE8C 79                     LD     A,C                  ; cpmRecord Number
2185: EE8D 93                     SUB    E
2186: EE8E 4F                     LD     C,A                  ; - currentSector
2187: EE8F 78                     LD     A,B
2188: EE90 9A                     SBC    A,D
2189: EE91 47                     LD     B,A                  ; back into BC
2190: EE92 C3 21 F6               JP     bcSetsec             ; sector selected
2191: EE95         ;ret
2192: EE95         ;************* CheckSum *******************************
2193: EE95         ; compute current checksum record
2194: EE95         ; if C = TRUE , update the allocation vector
2195: EE95         ;
2196: EE95         ; or check for = if not dirRecord < dpbCKS ????
2197: EE95
2198: EE95             NewCheckSum:
2199: EE95 0E FF                  LD     C,TRUE
2200: EE97
2201: EE97             CalculateCheckSum:
2202: EE97 2A 70 F5               LD     HL,(dirRecord)
2203: EE9A EB                     EX     DE,HL
2204: EE9B 2A 55 F5               LD     HL,(dpbCKS)          ; size of checksum vector
2205: EE9E CD 50 F4               CALL   DEminusHL2HL         ; DE-HL
2206: EEA1 D0                     RET    NC                   ; skip checksum if past checksum vector size
2207: EEA2 C5                     PUSH   BC                   ; save init flag
2208: EEA3 CD BF EE               CALL   ComputeCheckSum      ; check sum value to A
2209: EEA6 2A 46 F5               LD     HL,(caCheckSum)      ; address of check sum vector
2210: EEA9 EB                     EX     DE,HL
2211: EEAA 2A 70 F5               LD     HL,(dirRecord)       ; value of dirRecord
2212: EEAD 19                     ADD    HL,DE                ; HL = .check(dirRecord)
2213: EEAE C1                     POP    BC                   ; recall true=0ffh or false=00 to C
2214: EEAF 0C                     INC    C                    ; 0ffh produces zero flag
2215: EEB0 CA BD EE               JP     Z,SetNewCheckSum
2216: EEB3         ; not initializing, compare
2217: EEB3 BE                     CP     M                    ; compute$cs=check(dirRecord)?
2218: EEB4 C8                     RET    Z                    ; no message if ok
2219: EEB5         ; possible checksum error, are we beyond the end of the disk?
2220: EEB5 CD DE EE               CALL   StillInDirectory
2221: EEB8 D0                     RET    NC                   ; no message if so
2222: EEB9 CD 03 ED               CALL   SetDiskReadOnly      ; read/only disk set
2223: EEBC C9                     RET
2224: EEBD
2225: EEBD         ;initializing the checksum
2226: EEBD             SetNewCheckSum:
2227: EEBD 77                     LD     (HL),A
2228: EEBE C9                     RET
2229: EEBF         ;------------------
2230: EEBF         ;compute checksum for current directory buffer
2231: EEBF             ComputeCheckSum:
2232: EEBF 0E 80                  LD     C,cpmRecordSize      ; size of directory buffer
2233: EEC1 2A 42 F5               LD     HL,(caDirectoryDMA)  ; current directory buffer
2234: EEC4 AF                     XOR    A                    ; clear checksum value
2235: EEC5             ComputeCheckSum0:
2236: EEC5 86                     ADD    A,(HL)
2237: EEC6 23                     INC    HL
2238: EEC7 0D                     DEC    C                    ; cs=cs+buff(cpmRecordSize-C)
2239: EEC8 C2 C5 EE               JP     NZ,ComputeCheckSum0
2240: EECB C9                     RET                         ; with checksum in A
2241: EECC         ;*****************************************************************
2242: EECC         ; compute the address of a directory element at positon dirBlockIndex in the buffer
2243: EECC             GetDirElementAddress:
2244: EECC 2A 42 F5               LD     HL,(caDirectoryDMA)
2245: EECF 3A 6D F5               LD     A,(dirBlockIndex)
2246: EED2 C3 4B F4               JP     AddAtoHL
2247: EED5         ;---------------------
2248: EED5         ;if not still in directory set max value
2249: EED5             SetDirectoryEntry:
2250: EED5 CD DE EE               CALL   StillInDirectory
2251: EED8 D8                     RET    C
2252: EED9         ; return if yes,otherwise, HL = DirMaxValue+1, DE = directoryCount
2253: EED9
2254: EED9 13                     INC    DE
2255: EEDA 72                     LD     (HL),D
2256: EEDB 2B                     DEC    HL
2257: EEDC 73                     LD     (HL),E
2258: EEDD C9                     RET
2259: EEDE         ; return CY if entry is still in Directory
2260: EEDE             StillInDirectory:
2261: EEDE 2A 6E F5               LD     HL,(dirEntryIndex)
2262: EEE1 EB                     EX     DE,HL                ; DE = directory counter
2263: EEE2 2A 3C F5               LD     HL,(caDirMaxValue)   ; HL=caDirMaxValue
2264: EEE5 7B                     LD     A,E
2265: EEE6 96                     SUB    M                    ; low(dirEntryIndex) - low(cdrmax)
2266: EEE7 23                     INC    HL                   ; HL = .cdrmax+1
2267: EEE8 7A                     LD     A,D
2268: EEE9 9E                     SBC    A,(HL)               ; hi(dirEntryIndex) - hig(cdrmax)
2269: EEEA         ;condition dirEntryIndex - cdrmax  produces cy if cdrmax>dirEntryIndex
2270: EEEA C9                     RET
2271: EEEB         ;---------------------
2272: EEEB         ;compute fcbRCIndex and NEXT_RECORD addresses for get/setfcb
2273: EEEB         ; returns with DE pointing at RC from FCB
2274: EEEB         ;         with HL pointing at Next Record
2275: EEEB             GetFcbAddress:                      ; getfcba
2276: EEEB 2A C0 EA               LD     HL,(paramDE)
2277: EEEE 11 0F 00               LD     DE,fcbRCIndex
2278: EEF1 19                     ADD    HL,DE
2279: EEF2 EB                     EX     DE,HL                ; DE=.fcb(fcbRCIndex)
2280: EEF3 21 11 00               LD     HL,NEXT_RECORD-fcbRCIndex ;RATS
2281: EEF6 19                     ADD    HL,DE                ; HL=.fcb(NEXT_RECORD)
2282: EEF7 C9                     RET
2283: EEF8         ;---------------------
2284: EEF8         ;set variables from currently fcb - NEXT_RECORD, RC, EXM
2285: EEF8             SetRecordVars:
2286: EEF8 CD EB EE               CALL   GetFcbAddress        ; DE => fcbRCIndex(RC) , HL => NEXT_RECORD
2287: EEFB 7E                     LD     A,(HL)
2288: EEFC 32 69 F5               LD     (cpmRecord),A        ; cpmRecord=fcb(NEXT_RECORD)
2289: EEFF EB                     EX     DE,HL
2290: EF00 7E                     LD     A,(HL)
2291: EF01 32 67 F5               LD     (fcbRecordCount),A   ; fcbRecordCount=fcb(fcbRCIndex)
2292: EF04 CD C4 F3               CALL   GetExtentAddress     ; HL=.fcb(fcbExtIndex)
2293: EF07 3A 4E F5               LD     A,(dpbEXM)           ; extent mask to a
2294: EF0A A6                     AND    M                    ; fcb(fcbExtIndex) and dpbEXM
2295: EF0B 32 68 F5               LD     (extentValue),A      ; save extent number
2296: EF0E C9                     RET
2297: EF0F         ;---------------------
2298: EF0F         ;update variables from I/O in  fcb
2299: EF0F             UpdateRecordVars:
2300: EF0F CD EB EE               CALL   GetFcbAddress        ; DE => fcbRCIndex(RC) , HL => NEXT_RECORD
2301: EF12 3A 5E F5               LD     A,(seqReadFlag)
2302: EF15 4F                     LD     C,A                  ; =1 if sequential i/o
2303: EF16 3A 69 F5               LD     A,(cpmRecord)        ; get NEXT_RECORD
2304: EF19 81                     ADD    A,C
2305: EF1A 77                     LD     (HL),A               ; fcb(NEXT_RECORD)=cpmRecord+seqReadFlag
2306: EF1B EB                     EX     DE,HL
2307: EF1C 3A 67 F5               LD     A,(fcbRecordCount)
2308: EF1F 77                     LD     (HL),A               ; fcb(fcbRCIndex)=fcbRecordCount
2309: EF20 C9                     RET
2310: EF21         ;---------------------
2311: EF21         ;set file Attributes for current fcb
2312: EF21             SetAttributes:
2313: EF21 0E 0C                  LD     C,fcbExtIndex
2314: EF23 CD 3C F3               CALL   Search4DirElement    ; through file type
2315: EF26             SetAttributes1:
2316: EF26 CD E0 ED               CALL   EndOfDirectory
2317: EF29 C8                     RET    Z                    ; exit at end of dir
2318: EF2A 0E 00                  LD     C,0
2319: EF2C 1E 0C                  LD     E,fcbExtIndex        ;copy name
2320: EF2E CD FD F3               CALL   CopyDir
2321: EF31 CD 54 F3               CALL   Search4NextDirElement
2322: EF34 C3 26 EF               JP     SetAttributes1
2323: EF37         ;
2324: EF37         ;*****************************************************************
2325: EF37
2326: EF37         ;*****************************************************************
2327: EF37         ;********************** File  Routines ***************************
2328: EF37         ;*****************************************************************
2329: EF37         ;open file
2330: EF37         ; IN  - (DE)	FCB Address
2331: EF37         ; OUT - (A)	Directory Code
2332: EF37         ;	0-3 = success ; 0FFH = File Not Found
2333: EF37             vOpenFile:                      ;
2334: EF37 CD BD F2               CALL   ClearModuleNum       ; clear the module number
2335: EF3A CD CC F2               CALL   Reselect             ; do we need to reselect disk?
2336: EF3D C3 F9 F2               JP     OpenFile
2337: EF40         ;ret ;jmp goback
2338: EF40         ;-----------------------------------------------------------------
2339: EF40         ;close file
2340: EF40             vCloseFile:                      ; func16: (16 - 10) Close File
2341: EF40 CD CC F2               CALL   Reselect
2342: EF43 C3 A1 F1               JP     CloseDirEntry
2343: EF46         ;-----------------------------------------------------------------
2344: EF46         ;search for first occurrence of a file
2345: EF46         ; In - (DE)	FCB Address
2346: EF46         ; OUT - (A)	Directory Code
2347: EF46         ;	0-3 = success ; 0FFH = File Not Found
2348: EF46             vFindFirst:                      ; func17: (17 - 11) Search for first
2349: EF46 0E 00                  LD     C,0                  ; length assuming '?' true
2350: EF48 2A C0 EA               LD     HL,(paramDE)
2351: EF4B 7E                     LD     A,(HL)
2352: EF4C FE 3F                  CP     QMARK                ; no reselect if ?
2353: EF4E CA 59 EF               JP     Z,QMarkSelect        ; skip reselect if so
2354: EF51
2355: EF51 CD BD F2               CALL   ClearModuleNum       ; module number zeroed
2356: EF54 CD CC F2               CALL   Reselect
2357: EF57 0E 0F                  LD     C,nameLength
2358: EF59             QMarkSelect:                      ; qselect:
2359: EF59 CD 3C F3               CALL   Search4DirElement
2360: EF5C C3 EA F3               JP     CopyDirEntryToUser   ; copy directory entry to user
2361: EF5F         ;-----------------------------------------------------------------
2362: EF5F         ;search for next occurrence of a file name
2363: EF5F         ; OUT - (A)	Directory Code
2364: EF5F         ;	0-3 = success ; 0FFH = File Not Found
2365: EF5F             vFindNext:                      ; func18: (18 - 12) Search for next
2366: EF5F 2A 61 F5               LD     HL,(searchAddress)
2367: EF62 22 C0 EA               LD     (paramDE),HL
2368: EF65 CD CC F2               CALL   Reselect
2369: EF68 CD 54 F3               CALL   Search4NextDirElement
2370: EF6B C3 EA F3               JP     CopyDirEntryToUser   ; copy directory entry to user
2371: EF6E         ;-----------------------------------------------------------------
2372: EF6E         ;search for next occurrence of a file name
2373: EF6E         ; OUT - (A)	Directory Code
2374: EF6E         ;delete a file
2375: EF6E             vDeleteFile:                      ; func18: (19 - 13) Delete File
2376: EF6E CD CC F2               CALL   Reselect
2377: EF71 CD 7F F1               CALL   DeleteFile
2378: EF74 C3 B6 F2               JP     DirLocationToReturnLoc
2379: EF77         ;-----------------------------------------------------------------
2380: EF77         ;read sequential
2381: EF77         ;IN  - (DE) FCB address
2382: EF77         ;OUT - (A) 00 = success and data available. else no read and no data
2383: EF77             vReadSeq:                       ; func20: (20 - 14) read sequential
2384: EF77 CD CC F2               CALL   Reselect
2385: EF7A CD B9 EF               CALL   ReadSeq
2386: EF7D C9                     RET
2387: EF7E         ;-----------------------------------------------------------------
2388: EF7E         ;write sequential
2389: EF7E         ;IN  - (DE) FCB address
2390: EF7E         ;OUT - (A) 00 = success and data available. else no read and no data
2391: EF7E             vWriteSeq:                      ; func21 (21 - 15) write sequention
2392: EF7E CD CC F2               CALL   Reselect
2393: EF81 CD FC EF               CALL   DiskWriteSeq
2394: EF84 C9                     RET
2395: EF85         ;-----------------------------------------------------------------
2396: EF85         ; Make file
2397: EF85         ; In - (DE)	FCB Address
2398: EF85         ; OUT - (A)	Directory Code
2399: EF85         ;	0-3 = success ; 0FFH = File Not Found
2400: EF85             vMakeFile:                      ; func22 (22 - 16) Make file
2401: EF85 CD BD F2               CALL   ClearModuleNum       ; set S2 to Zero
2402: EF88 CD CC F2               CALL   Reselect
2403: EF8B C3 49 F1               JP     MakeNewFile
2404: EF8E         ;-----------------------------------------------------------------
2405: EF8E         ; Rename file
2406: EF8E         ; In - (DE)	FCB Address
2407: EF8E         ; OUT - (A)	Directory Code
2408: EF8E         ;	0-3 = success ; 0FFH = File Not Found
2409: EF8E             vRenameFile:                      ; func23 (23 - 17) Rename File
2410: EF8E CD CC F2               CALL   Reselect
2411: EF91 CD 24 F1               CALL   Rename
2412: EF94 C3 B6 F2               JP     DirLocationToReturnLoc
2413: EF97         ;-----------------------------------------------------------------
2414: EF97         ;-----------------------------------------------------------------
2415: EF97         ;*****************************************************************
2416: EF97         ;-----------------------------------------------------------------
2417: EF97         ;check current directory element for read/only status
2418: EF97             CheckRODirectory:
2419: EF97 CD CC EE               CALL   GetDirElementAddress ; address of element
2420: EF9A         ;	JMP	CheckROFile
2421: EF9A         ;------------
2422: EF9A         ;check current buff(dptr) or fcb(0) for r/o status
2423: EF9A             CheckROFile:
2424: EF9A 11 09 00               LD     DE,fcbROfileIndex
2425: EF9D 19                     ADD    HL,DE                ; offset to ro bit
2426: EF9E 7E                     LD     A,(HL)
2427: EF9F 17                     RLA
2428: EFA0 D0                     RET    NC                   ; return if not set
2429: EFA1 C3 AF F4               JP     errReadOnlyFile      ; exit to read only disk message
2430: EFA4         ;-----------------------------------------------------------------
2431: EFA4         ;check for write protected disk
2432: EFA4             CheckWrite:
2433: EFA4 CD AB EF               CALL   DoNotWrite
2434: EFA7 C8                     RET    Z                    ; ok to write if not rodsk
2435: EFA8 C3 A9 F4               JP     errReadOnlyDisk      ; read only disk error
2436: EFAB         ;-----------------------------------------------------------------
2437: EFAB         ;return true if dir checksum difference occurred
2438: EFAB             DoNotWrite:
2439: EFAB 2A 36 F5               LD     HL,(ReadOnlyVector)
2440: EFAE 3A 34 F5               LD     A,(currentDisk)
2441: EFB1 4F                     LD     C,A
2442: EFB2 CD 57 F4               CALL   ShiftRightHLbyC
2443: EFB5 7D                     LD     A,L
2444: EFB6 E6 1B                  AND    1BH                  ; 01BH
2445: EFB8 C9                     RET                         ; non zero if nowrite
2446: EFB9         ;-----------------------------------------------------------------
2447: EFB9         ;sequential disk read operation
2448: EFB9             ReadSeq:
2449: EFB9 3E 01                  LD     A,1
2450: EFBB 32 5E F5               LD     (seqReadFlag),A      ; set flag for seqential read
2451: EFBE         ;---
2452: EFBE         ; read the disk
2453: EFBE         ; read the next record from the current fcb
2454: EFBE             DiskRead:
2455: EFBE 3E FF                  LD     A,TRUE
2456: EFC0 32 5C F5               LD     (readModeFlag),A     ; read mode flag = true (OpenNextExt)
2457: EFC3
2458: EFC3 CD F8 EE               CALL   SetRecordVars        ; sets cpmRecord, fcbRecordCount and EXM
2459: EFC6 3A 69 F5               LD     A,(cpmRecord)
2460: EFC9 21 67 F5               LD     HL,fcbRecordCount
2461: EFCC BE                     CP     M                    ; cpmRecord-fcbRecordCount
2462: EFCD         ; skip if  cpmRecord < fcbRecordCount
2463: EFCD DA E3 EF               JP     C,RecordOK
2464: EFD0         ; not enough records in the extent
2465: EFD0 FE 80                  CP     RecordsPerExtent     ; cpmRecord = 128?   *** Records in an Extent
2466: EFD2 C2 F9 EF               JP     NZ,DiskEOF           ; skip if cpmRecord<>128
2467: EFD5 CD C1 F0               CALL   OpenNextExt          ; go to next extent if so
2468: EFD8 AF                     XOR    A
2469: EFD9 32 69 F5               LD     (cpmRecord),A        ; cpmRecord=00
2470: EFDC         ; now check for open ok
2471: EFDC 3A C2 EA               LD     A,(exitParameterByte)
2472: EFDF B7                     OR     A
2473: EFE0 C2 F9 EF               JP     NZ,DiskEOF
2474: EFE3         ; stop at eof
2475: EFE3         ; arrive with fcb addressing a record to read
2476: EFE3             RecordOK:                       ; recordok:
2477: EFE3 CD 8A F2               CALL   GetBlockNumber       ; save it in currentBlock
2478: EFE6 CD 97 F2               CALL   IsAllocated          ; currentBlock=0000?
2479: EFE9 CA F9 EF               JP     Z,DiskEOF            ; get out if not allocated already
2480: EFEC
2481: EFEC CD 9D F2               CALL   SetActualRecordAdd   ; currentBlock now a record value
2482: EFEF CD 34 EE               CALL   Seek                 ; to proper track,sector
2483: EFF2 CD 3A F2               CALL   ReadBuffer           ; to dma address
2484: EFF5 CD 0F EF               CALL   UpdateRecordVars     ; update variables from I/O in  fcb
2485: EFF8 C9                     RET
2486: EFF9             DiskEOF:                        ; diskeof:
2487: EFF9 C3 D3 F3               JP     SetLowReturnTo1      ; exitParameterByte = 1
2488: EFFC         ;ret
2489: EFFC         ;-----------------------------------------------------------------
2490: EFFC         ;sequential disk write
2491: EFFC             DiskWriteSeq:
2492: EFFC 3E 01                  LD     A,1
2493: EFFE 32 5E F5               LD     (seqReadFlag),A
2494: F001         ;--------
2495: F001         ;disk write
2496: F001             DiskWrite:
2497: F001 3E 00                  LD     A,FALSE
2498: F003 32 5C F5               LD     (readModeFlag),A
2499: F006         ; write record to currently selected file
2500: F006 CD A4 EF               CALL   CheckWrite           ; in case write protected
2501: F009 2A C0 EA               LD     HL,(paramDE)         ; HL = .fcb(0)
2502: F00C CD 9A EF               CALL   CheckROFile          ; may be a read-only file
2503: F00F CD F8 EE               CALL   SetRecordVars        ; set local Record parameters
2504: F012 3A 69 F5               LD     A,(cpmRecord)
2505: F015 FE 80                  CP     highestRecordNumber+1 ; Still in the same extent?
2506: F017 DA 1E F0               JP     C,DiskWrite1         ; skip if in the same Extent
2507: F01A CD D3 F3               CALL   SetLowReturnTo1
2508: F01D C9                     RET                         ; Exit ???????????
2509: F01E
2510: F01E         ; can write the next record, so continue
2511: F01E             DiskWrite1:
2512: F01E CD 8A F2               CALL   GetBlockNumber       ; sets up actual block number
2513: F021 CD 97 F2               CALL   IsAllocated
2514: F024 0E 00                  LD     C,WriteAllocated     ; assume a normal write operation for WriteBuffer
2515: F026 C2 71 F0               JP     NZ,DiskWrite3
2516: F029         ; not allocated -
2517: F029         ; the argument to getblock is the starting position for the disk search
2518: F029         ; and should be the last allocated block for this file,
2519: F029         ; or the value 0 if no space has been allocated
2520: F029
2521: F029 CD 12 F4               CALL   GetDiskMapIndex      ; return with Disk Map index in Acc
2522: F02C 32 5F F5               LD     (diskMapIndex),A     ; save for later
2523: F02F 01 00 00               LD     BC,0000h             ; may use block zero
2524: F032 B7                     OR     A
2525: F033 CA 3D F0               JP     Z,FirstBlock         ; skip if no previous block
2526: F036         ; previous block exists
2527: F036 4F                     LD     C,A
2528: F037 0B                     DEC    BC                   ; previous block # in BC
2529: F038 CD 32 F4               CALL   GetDiskMapValue      ; previous block # to HL
2530: F03B 44                     LD     B,H
2531: F03C 4D                     LD     C,L                  ; BC=prev block#
2532: F03D         ; BC = 0000, or previous block #
2533: F03D             FirstBlock:
2534: F03D CD 50 F2               CALL   GetClosestBlock      ; block # to HL
2535: F040         ; arrive here with block# or zero
2536: F040 7D                     LD     A,L
2537: F041 B4                     OR     H
2538: F042 C2 4B F0               JP     NZ,BlockOK
2539: F045         ; cannot find a block to allocate
2540: F045 3E 02                  LD     A,2
2541: F047 32 C2 EA               LD     (exitParameterByte),A
2542: F04A C9                     RET                         ; exitParameterByte=2
2543: F04B
2544: F04B             BlockOK:
2545: F04B 22 6B F5               LD     (currentBlock),HL    ; allocated block number is in HL
2546: F04E EB                     EX     DE,HL                ; block number to DE
2547: F04F 2A C0 EA               LD     HL,(paramDE)
2548: F052 01 10 00               LD     BC,fcbDiskMapIndex
2549: F055 09                     ADD    HL,BC                ; HL=.fcb(fcbDiskMapIndex)
2550: F056 3A 63 F5               LD     A,(byteAllocationFlag)
2551: F059 B7                     OR     A                    ; set flags for byteAllocationFlag byte dm
2552: F05A 3A 5F F5               LD     A,(diskMapIndex)     ; recall dm index
2553: F05D CA 67 F0               JP     Z,Allocate16Bit      ; skip if allocating word
2554: F060         ; else allocate using a byte value
2555: F060 CD 4B F4               CALL   AddAtoHL
2556: F063 73                     LD     (HL),E               ; byteAllocationFlag byte alloc
2557: F064 C3 6F F0               JP     DiskWrite2           ; to continue
2558: F067
2559: F067             Allocate16Bit:                      ; allocate a word value
2560: F067
2561: F067 4F                     LD     C,A
2562: F068 06 00                  LD     B,0                  ; double(diskMapIndex)
2563: F06A 09                     ADD    HL,BC
2564: F06B 09                     ADD    HL,BC                ; HL=.fcb(diskMapIndex*2)
2565: F06C 72                     LD     (HL),D
2566: F06D 23                     INC    HL
2567: F06E 73                     LD     (HL),E               ; double wd
2568: F06F         ; disk write to previously unallocated block
2569: F06F             DiskWrite2:
2570: F06F 0E 02                  LD     C,WriteCleanBuffer   ; marked as unallocated write
2571: F071
2572: F071         ; continue the write operation of no allocation error
2573: F071         ; C = 0 if normal write, 1 if directory write, 2 if to prev unalloc block
2574: F071
2575: F071             DiskWrite3:
2576: F071 3A C2 EA               LD     A,(exitParameterByte)
2577: F074 B7                     OR     A
2578: F075 C0                     RET    NZ                   ; stop if non zero returned value
2579: F076
2580: F076 C5                     PUSH   BC                   ; save write flag ( in C see above)
2581: F077 CD 9D F2               CALL   SetActualRecordAdd   ; currentBlock set to actual record number
2582: F07A CD 34 EE               CALL   Seek                 ; to proper file position
2583: F07D C1                     POP    BC                   ; get write flag
2584: F07E C5                     PUSH   BC                   ; restore/save write flag (C=2 if new block)
2585: F07F CD 32 F2               CALL   WriteBuffer          ; written to disk
2586: F082 C1                     POP    BC                   ; C = 2 if a new block was allocated, 0 if not
2587: F083         ; increment record count if fcbRecordCount<=cpmRecord
2588: F083 3A 69 F5               LD     A,(cpmRecord)
2589: F086 21 67 F5               LD     HL,fcbRecordCount
2590: F089 BE                     CP     M                    ; cpmRecord-fcbRecordCount
2591: F08A DA 91 F0               JP     C,DiskWrite4
2592: F08D         ; fcbRecordCount <= cpmRecord
2593: F08D 77                     LD     (HL),A
2594: F08E 34                     INC    M                    ; fcbRecordCount = cpmRecord+1
2595: F08F 0E 02                  LD     C,2                  ; mark as record count incremented
2596: F091             DiskWrite4:
2597: F091         ; A has cpmRecord, C=2 if new block or new record#
2598: F091 0D                     DEC    C
2599: F092 0D                     DEC    C
2600: F093 C2 9E F0               JP     NZ,DiskWrite5
2601: F096 F5                     PUSH   AF                   ; save cpmRecord value
2602: F097 CD C3 F2               CALL   GetModuleNum         ; HL=.fcb(fcbS2Index), A=fcb(fcbS2Index)
2603: F09A         ; reset the file write flag to mark as written fcb
2604: F09A E6 7F                  AND    7FH                  ; not writeFlagMask
2605: F09C 77                     LD     (HL),A               ; fcb(fcbS2Index) = fcb(fcbS2Index) and 7fh
2606: F09D F1                     POP    AF                   ; restore cpmRecord
2607: F09E             DiskWrite5:
2608: F09E         ; check for end of extent, if found attempt to open next extent in preparation for next write
2609: F09E FE 7F                  CP     highestRecordNumber  ; cpmRecord=highestRecordNumber?
2610: F0A0 C2 BE F0               JP     NZ,DiskWrite7        ; skip if not
2611: F0A3         ; may be random access write, if so we are done
2612: F0A3 3A 5E F5               LD     A,(seqReadFlag)
2613: F0A6 B7                     OR     A
2614: F0A7 CA BE F0               JP     Z,DiskWrite7         ; skip next extent open op
2615: F0AA         ; update current fcb before going to next extent
2616: F0AA CD 0F EF               CALL   UpdateRecordVars     ;update variables from I/O in  fcb
2617: F0AD CD C1 F0               CALL   OpenNextExt          ; readModeFlag=false
2618: F0B0         ; cpmRecord remains at highestRecordNumber causing eof if no more directory space is available
2619: F0B0 21 C2 EA               LD     HL,exitParameterByte
2620: F0B3 7E                     LD     A,(HL)
2621: F0B4 B7                     OR     A
2622: F0B5 C2 BC F0               JP     NZ,DiskWrite6        ; no space
2623: F0B8         ; space available, set cpmRecord=255
2624: F0B8 3D                     DEC    A
2625: F0B9 32 69 F5               LD     (cpmRecord),A        ; goes to 00 next time
2626: F0BC             DiskWrite6:
2627: F0BC 36 00                  LD     (HL),0               ; exitParameterByte = 00 for returned value
2628: F0BE             DiskWrite7:
2629: F0BE C3 0F EF               JP     UpdateRecordVars     ; update variables from I/O in  fcb
2630: F0C1         ;ret
2631: F0C1         ;-----------------------------------------------------------------
2632: F0C1         ;close the current extent  and open the next one if possible.
2633: F0C1         ;readModeFlag is true if in read mode
2634: F0C1             OpenNextExt:                      ; open$reel
2635: F0C1 AF                     XOR    A
2636: F0C2 32 5B F5               LD     (fcbCopiedFlag),A    ; set true if actually copied
2637: F0C5 CD A1 F1               CALL   CloseDirEntry        ; close current extent
2638: F0C8         ; exitParameterByte remains at enddir if we cannot open the next ext
2639: F0C8 CD E0 ED               CALL   EndOfDirectory
2640: F0CB C8                     RET    Z                    ; return if end
2641: F0CC 2A C0 EA               LD     HL,(paramDE)         ; increment extent number
2642: F0CF 01 0C 00               LD     BC,fcbExtIndex
2643: F0D2 09                     ADD    HL,BC                ; HL=.fcb(fcbExtIndex)
2644: F0D3 7E                     LD     A,(HL)
2645: F0D4 3C                     INC    A
2646: F0D5 E6 1F                  AND    maxExtValue
2647: F0D7 77                     LD     (HL),A               ; fcb(fcbExtIndex)=++1
2648: F0D8 CA EA F0               JP     Z,OpenNextModule     ; move to next module if zero
2649: F0DB         ; may be in the same extent group
2650: F0DB 47                     LD     B,A
2651: F0DC 3A 4E F5               LD     A,(dpbEXM)
2652: F0DF A0                     AND    B
2653: F0E0         ; if result is zero, then not in the same group
2654: F0E0 21 5B F5               LD     HL,fcbCopiedFlag     ; true if the fcb was copied to directory
2655: F0E3 A6                     AND    M                    ; produces a 00 in accumulator if not written
2656: F0E4 CA F5 F0               JP     Z,OpenNextExt1       ; go to next physical extent
2657: F0E7         ; result is non zero, so we must be in same logical ext
2658: F0E7 C3 13 F1               JP     OpenNextExt2         ; to copy fcb information
2659: F0EA         ; extent number overflow, go to next module
2660: F0EA
2661: F0EA             OpenNextModule:
2662: F0EA 01 02 00               LD     BC,fcbS2Index-fcbExtIndex ;RATS
2663: F0ED 09                     ADD    HL,BC                ; HL=.fcb(fcbS2Index)
2664: F0EE 34                     INC    M                    ; fcb(fcbS2Index)=++1
2665: F0EF         ; module number incremented, check for overflow
2666: F0EF 7E                     LD     A,(HL)
2667: F0F0 E6 0F                  AND    moduleMask           ; mask high order bits
2668: F0F2 CA 1E F1               JP     Z,OpenNextExtError   ; cannot overflow to zero
2669: F0F5         ; otherwise, ok to continue with new module
2670: F0F5
2671: F0F5             OpenNextExt1:
2672: F0F5 0E 0F                  LD     C,nameLength
2673: F0F7 CD 3C F3               CALL   Search4DirElement    ; next extent found?
2674: F0FA CD E0 ED               CALL   EndOfDirectory
2675: F0FD C2 13 F1               JP     NZ,OpenNextExt2
2676: F100         ; end of file encountered
2677: F100 3A 5C F5               LD     A,(readModeFlag)
2678: F103 3C                     INC    A                    ; 0ffh becomes 00 if read
2679: F104 CA 1E F1               JP     Z,OpenNextExtError   ; sets exitParameterByte = 1
2680: F107         ; try to extend the current file
2681: F107 CD 49 F1               CALL   MakeNewFile
2682: F10A         ; cannot be end of directory
2683: F10A CD E0 ED               CALL   EndOfDirectory
2684: F10D CA 1E F1               JP     Z,OpenNextExtError   ; with exitParameterByte = 1
2685: F110 C3 16 F1               JP     OpenNextExt3
2686: F113
2687: F113         ; not end of file, open
2688: F113             OpenNextExt2:
2689: F113 CD 02 F3               CALL   OpenFileCopyFCB
2690: F116             OpenNextExt3:
2691: F116 CD F8 EE               CALL   SetRecordVars        ; Set Record parameters
2692: F119 AF                     XOR    A
2693: F11A 32 C2 EA               LD     (exitParameterByte),A ; exitParameterByte = 0
2694: F11D C9                     RET                         ; with exitParameterByte = 0
2695: F11E
2696: F11E         ; cannot move to next extent of this file
2697: F11E             OpenNextExtError:
2698: F11E CD D3 F3               CALL   SetLowReturnTo1      ; exitParameterByte = 1
2699: F121 C3 CC F3               JP     SetFileWriteFlag     ; ensure that it will not be closed
2700: F124         ;-----------------------------------------------------------------
2701: F124         ;rename the file described by the first half of the currently addressed FCB.
2702: F124         ;the new name is contained in the last half of the FCB. The file name and type
2703: F124         ;are changed, but the reel number is ignored.  the user number is identical
2704: F124             Rename:
2705: F124 CD A4 EF               CALL   CheckWrite           ; may be write protected
2706: F127         ; search up to the extent field
2707: F127 0E 0C                  LD     C,fcbExtIndex        ; extent number field index
2708: F129 CD 3C F3               CALL   Search4DirElement
2709: F12C         ; copy position 0
2710: F12C 2A C0 EA               LD     HL,(paramDE)
2711: F12F 7E                     LD     A,(HL)               ; HL=.fcb(0), A=fcb(0)
2712: F130 11 10 00               LD     DE,fcbDiskMapIndex
2713: F133 19                     ADD    HL,DE                ; HL=.fcb(fcbDiskMapIndex)
2714: F134 77                     LD     (HL),A               ; fcb(fcbDiskMapIndex)=fcb(0)
2715: F135         ; assume the same disk drive for new named file
2716: F135             Rename1:
2717: F135 CD E0 ED               CALL   EndOfDirectory
2718: F138 C8                     RET    Z                    ; stop at end of dir
2719: F139         ; not end of directory, rename next element
2720: F139 CD 97 EF               CALL   CheckRODirectory     ; may be read-only file
2721: F13C 0E 10                  LD     C,fcbDiskMapIndex
2722: F13E 1E 0C                  LD     E,fcbExtIndex
2723: F140 CD FD F3               CALL   CopyDir
2724: F143         ; element renamed, move to next
2725: F143 CD 54 F3               CALL   Search4NextDirElement
2726: F146 C3 35 F1               JP     Rename1
2727: F149         ;-----------------------------------------------------------------
2728: F149         ;create a new file by creating a directory entry then opening the file
2729: F149             MakeNewFile:
2730: F149 CD A4 EF               CALL   CheckWrite           ; may be write protected
2731: F14C 2A C0 EA               LD     HL,(paramDE)
2732: F14F E5                     PUSH   HL                   ; save fcb address, look for e5
2733: F150 21 35 F5               LD     HL,emptyFCB
2734: F153 22 C0 EA               LD     (paramDE),HL         ; paramDE = .empty
2735: F156 0E 01                  LD     C,1
2736: F158 CD 3C F3               CALL   Search4DirElement    ; length 1 match on empty entry
2737: F15B CD E0 ED               CALL   EndOfDirectory       ; zero flag set if no space
2738: F15E E1                     POP    HL                   ; recall paramDE address
2739: F15F 22 C0 EA               LD     (paramDE),HL         ; in case we return here
2740: F162 C8                     RET    Z                    ; return with error condition 255 if not found
2741: F163 EB                     EX     DE,HL                ; DE = paramDE address
2742: F164         ; clear the remainder of the fcb
2743: F164 21 0F 00               LD     HL,nameLength
2744: F167 19                     ADD    HL,DE                ; HL=.fcb(nameLength)
2745: F168 0E 11                  LD     C,fcbLength-nameLength ; number of bytes to fill
2746: F16A AF                     XOR    A                    ; clear accumulator to 00 for fill
2747: F16B             MakeNewFile1:
2748: F16B 77                     LD     (HL),A
2749: F16C 23                     INC    HL
2750: F16D 0D                     DEC    C
2751: F16E C2 6B F1               JP     NZ,MakeNewFile1
2752: F171 21 0D 00               LD     HL,fcbS1Index
2753: F174 19                     ADD    HL,DE                ; HL = .fcb(fcbS1Index)
2754: F175 77                     LD     (HL),A               ; fcb(fcbS1Index) = 0
2755: F176 CD D5 EE               CALL   SetDirectoryEntry    ; may have extended the directory
2756: F179         ; now copy entry to the directory
2757: F179 CD F6 F3               CALL   CopyFCB
2758: F17C         ; and set the file write flag to "1"
2759: F17C C3 CC F3               JP     SetFileWriteFlag
2760: F17F         ;-----------------------------------------------------------------
2761: F17F         ;delete the currently addressed file
2762: F17F             DeleteFile:
2763: F17F CD A4 EF               CALL   CheckWrite           ; write protected ?
2764: F182 0E 0C                  LD     C,fcbExtIndex        ; extent number field
2765: F184 CD 3C F3               CALL   Search4DirElement    ; search through file type
2766: F187             DeleteFile1:
2767: F187         ; loop while directory matches
2768: F187 CD E0 ED               CALL   EndOfDirectory
2769: F18A C8                     RET    Z                    ; exit if end
2770: F18B         ; set each non zero disk map entry to 0 in the allocation vector
2771: F18B CD 97 EF               CALL   CheckRODirectory     ; ro disk error if found
2772: F18E CD CC EE               CALL   GetDirElementAddress ; HL=.buff(dptr)
2773: F191 36 E5                  LD     (HL),emptyDir
2774: F193 0E 00                  LD     C,0
2775: F195 CD 49 ED               CALL   ScanDiskMap          ; alloc elts set to 0
2776: F198 CD 24 F2               CALL   WriteDir             ; write the directory
2777: F19B CD 54 F3               CALL   Search4NextDirElement ; to next element
2778: F19E C3 87 F1               JP     DeleteFile1          ; for another record
2779: F1A1         ;-----------------------------------------------------------------
2780: F1A1         ;locate the directory element and re-write it
2781: F1A1             CloseDirEntry:
2782: F1A1 AF                     XOR    A
2783: F1A2 32 C2 EA               LD     (exitParameterByte),A
2784: F1A5 CD AB EF               CALL   DoNotWrite           ; return TRUE (0) if checksum change
2785: F1A8 C0                     RET    NZ                   ; skip close if r/o disk
2786: F1A9         ; check file write flag - 0 indicates written
2787: F1A9 CD C3 F2               CALL   GetModuleNum         ; fcb(fcbS2Index) in A
2788: F1AC E6 80                  AND    writeFlagMask
2789: F1AE C0                     RET    NZ                   ; return if bit remains set
2790: F1AF 0E 0F                  LD     C,nameLength
2791: F1B1 CD 3C F3               CALL   Search4DirElement    ; locate file
2792: F1B4 CD E0 ED               CALL   EndOfDirectory
2793: F1B7 C8                     RET    Z                    ; return if not found
2794: F1B8         ; merge the disk map at paramDE with that at buff(dptr)
2795: F1B8 01 10 00               LD     BC,fcbDiskMapIndex
2796: F1BB CD CC EE               CALL   GetDirElementAddress
2797: F1BE 09                     ADD    HL,BC
2798: F1BF EB                     EX     DE,HL                ; DE is .buff(dptr+16)
2799: F1C0 2A C0 EA               LD     HL,(paramDE)
2800: F1C3 09                     ADD    HL,BC                ; DE=.buff(dptr+16), HL=.fcb(16)
2801: F1C4 0E 10                  LD     C,(fcbLength-fcbDiskMapIndex) ; length of  byte Allocation Map
2802: F1C6             CloseDirEntry1:
2803: F1C6 3A 63 F5               LD     A,(byteAllocationFlag)
2804: F1C9 B7                     OR     A
2805: F1CA CA E1 F1               JP     Z,CloseDirEntry4     ; skip to double
2806: F1CD         ; this is a  byte map
2807: F1CD         ; if fcb(i) = 0 then fcb(i) = buff(i)
2808: F1CD         ; if buff(i) = 0 then buff(i) = fcb(i)
2809: F1CD         ; if fcb(i) <> buff(i) then error
2810: F1CD 7E                     LD     A,(HL)
2811: F1CE B7                     OR     A
2812: F1CF 1A                     LD     A,(DE)
2813: F1D0 C2 D4 F1               JP     NZ,CloseDirEntry2
2814: F1D3         ; fcb(i) = 0
2815: F1D3 77                     LD     (HL),A               ; fcb(i) = buff(i)
2816: F1D4             CloseDirEntry2:
2817: F1D4 B7                     OR     A
2818: F1D5 C2 DA F1               JP     NZ,CloseDirEntry3
2819: F1D8         ; buff(i) = 0
2820: F1D8 7E                     LD     A,(HL)
2821: F1D9 12                     LD     (DE),AE              ; buff(i)=fcb(i)
2822: F1DA             CloseDirEntry3:
2823: F1DA BE                     CP     M
2824: F1DB C2 19 F2               JP     NZ,CloseDirEntryError ; fcb(i) = buff(i)?
2825: F1DE C3 F6 F1               JP     CloseDirEntry5       ; if merge ok
2826: F1E1
2827: F1E1         ; this is a double byte merge operation
2828: F1E1             CloseDirEntry4:
2829: F1E1 CD 42 F2               CALL   Merge                ; buff = fcb if buff 0000
2830: F1E4 EB                     EX     DE,HL
2831: F1E5 CD 42 F2               CALL   Merge
2832: F1E8 EB                     EX     DE,HL                ; fcb = buff if fcb 0000
2833: F1E9         ; they should be identical at this point
2834: F1E9 1A                     LD     A,(DE)
2835: F1EA BE                     CP     M
2836: F1EB C2 19 F2               JP     NZ,CloseDirEntryError ; low same?
2837: F1EE 13                     INC    DE
2838: F1EF 23                     INC    HL                   ; to high byte
2839: F1F0 1A                     LD     A,(DE)
2840: F1F1 BE                     CP     M
2841: F1F2 C2 19 F2               JP     NZ,CloseDirEntryError ; high same?
2842: F1F5         ;	merge operation ok for this pair
2843: F1F5 0D                     DEC    C                    ; extra count for double byte
2844: F1F6             CloseDirEntry5:
2845: F1F6 13                     INC    DE
2846: F1F7 23                     INC    HL                   ; to next byte position
2847: F1F8 0D                     DEC    C
2848: F1F9 C2 C6 F1               JP     NZ,CloseDirEntry1    ; for more
2849: F1FC         ; end of disk map merge, check record count DE = .buff(dptr)+32, HL = .fcb(32)
2850: F1FC 01 EC FF               LD     BC,-(fcbLength-fcbExtIndex) ;RATS
2851: F1FF 09                     ADD    HL,BC
2852: F200 EB                     EX     DE,HL
2853: F201 09                     ADD    HL,BC
2854: F202         ; DE = .fcb(fcbExtIndex), HL = .buff(dptr+fcbExtIndex)
2855: F202 1A                     LD     A,(DE)               ; current user extent number
2856: F203         ; if fcb(ext) >= buff(fcb) then	buff(ext) := fcb(ext), buff(rec) := fcb(rec)
2857: F203 BE                     CP     M
2858: F204 DA 10 F2               JP     C,CloseDirEntryEnd
2859: F207         ; fcb extent number >= dir extent number
2860: F207 77                     LD     (HL),A               ; buff(ext) = fcb(ext)
2861: F208         ; update directory record count field
2862: F208 01 03 00               LD     BC,fcbRCIndex-fcbExtIndex ;RATS
2863: F20B 09                     ADD    HL,BC
2864: F20C EB                     EX     DE,HL
2865: F20D 09                     ADD    HL,BC
2866: F20E         ; DE=.buff(fcbRCIndex), HL=.fcb(fcbRCIndex)
2867: F20E 7E                     LD     A,(HL)
2868: F20F 12                     LD     (DE),AE              ; buff(fcbRCIndex)=fcb(fcbRCIndex)
2869: F210             CloseDirEntryEnd:
2870: F210 3E FF                  LD     A,TRUE
2871: F212 32 5B F5               LD     (fcbCopiedFlag),A    ; mark as copied
2872: F215 CD 1E F2               CALL   SeekCopy             ; ok to "WriteDir" here - 1.4 compat
2873: F218 C9                     RET
2874: F219
2875: F219         ; elements did not merge correctly
2876: F219             CloseDirEntryError:
2877: F219 21 C2 EA               LD     HL,exitParameterByte
2878: F21C 35                     DEC    M                    ; =255 non zero flag set
2879: F21D C9                     RET
2880: F21E         ;-----------------------------------------------------------------
2881: F21E         ;enter from CloseDirEntry to seek and copy current element
2882: F21E             SeekCopy:
2883: F21E CD 23 EE               CALL   SeekDir              ; to the directory element
2884: F221 C3 24 F2               JP     WriteDir             ; write the directory element
2885: F224         ;ret
2886: F224         ;-----------------------------------------------------------------
2887: F224         ;write the current directory entry, set checksum
2888: F224             WriteDir:
2889: F224 CD 95 EE               CALL   NewCheckSum          ; initialize entry
2890: F227 CD D7 ED               CALL   SetDirDMA            ; directory dma
2891: F22A 0E 01                  LD     C,1                  ; indicates a write directory operation
2892: F22C CD 32 F2               CALL   WriteBuffer          ; write the buffer
2893: F22F C3 D1 ED               JP     SetDataDMA           ; to data dma address
2894: F232         ;ret
2895: F232         ;-----------------------------------------------------------------
2896: F232         ;write buffer and check condition
2897: F232         ;write type (wrtype) is in register C
2898: F232         ;wrtype = 0 => normal write operation		WriteAllocated
2899: F232         ;wrtype = 1 => directory write operation	WriteDirectory
2900: F232         ;wrtype = 2 => start of new block			WriteCleanBuffer
2901: F232             WriteBuffer:
2902: F232 CD 2A F6               CALL   bcWrite              ; current drive, track, sector, dma
2903: F235 B7                     OR     A
2904: F236 C2 C8 F4               JP     NZ,erPermanentNoWait ; error if not 00
2905: F239 C9                     RET
2906: F23A         ;-----------------------------------------------------------------
2907: F23A         ;read buffer and check condition
2908: F23A             ReadBuffer:
2909: F23A CD 27 F6               CALL   bcRead               ; current drive, track, sector, dma
2910: F23D B7                     OR     A
2911: F23E C2 C8 F4               JP     NZ,erPermanentNoWait
2912: F241 C9                     RET
2913: F242         ;-----------------------------------------------------------------
2914: F242         ;HL = .fcb1(i), DE = .fcb2(i),
2915: F242         ;if fcb1(i) = 0 then fcb1(i) := fcb2(i)
2916: F242             Merge:
2917: F242 7E                     LD     A,(HL)
2918: F243 23                     INC    HL
2919: F244 B6                     OR     M
2920: F245 2B                     DEC    HL
2921: F246 C0                     RET    NZ                   ; return if = 0000
2922: F247 1A                     LD     A,(DE)
2923: F248 77                     LD     (HL),A
2924: F249 13                     INC    DE
2925: F24A 23                     INC    HL                   ; low byte copied
2926: F24B 1A                     LD     A,(DE)
2927: F24C 77                     LD     (HL),A
2928: F24D 1B                     DEC    DE
2929: F24E 2B                     DEC    HL                   ; back to input form
2930: F24F C9                     RET
2931: F250         ;-----------------------------------------------------------------
2932: F250         ;compute closest disk block number from current block
2933: F250         ;given allocation vector position BC, find the zero bit closest to this position
2934: F250         ;by searching left and right.
2935: F250         ;if found, set the bit to one and return the bit position in hl.
2936: F250         ;if not found (i.e., we pass 0 on the left, or dpbDSM on the right), return 0000 in hl
2937: F250             GetClosestBlock:
2938: F250 50                     LD     D,B
2939: F251 59                     LD     E,C                  ; copy of starting position to de
2940: F252             TestLeft:
2941: F252 79                     LD     A,C
2942: F253 B0                     OR     B
2943: F254 CA 63 F2               JP     Z,TestRight          ; skip if left=0000
2944: F257         ; left not at position zero, bit zero?
2945: F257 0B                     DEC    BC
2946: F258 D5                     PUSH   DE
2947: F259 C5                     PUSH   BC                   ; left,right pushed
2948: F25A CD 77 ED               CALL   GetAllocBit
2949: F25D 1F                     RRA
2950: F25E D2 7E F2               JP     NC,ReturnBlockNumber ; return block number if zero
2951: F261         ; bit is one, so try the right
2952: F261 C1                     POP    BC
2953: F262 D1                     POP    DE                   ; left, right restored
2954: F263             TestRight:
2955: F263 2A 4F F5               LD     HL,(dpbDSM)          ; value of maximum allocation#
2956: F266 7B                     LD     A,E
2957: F267 95                     SUB    L
2958: F268 7A                     LD     A,D
2959: F269 9C                     SBC    A,H                  ; right=dpbDSM?
2960: F26A D2 86 F2               JP     NC,ReturnBlockZero   ; return block 0000 if so
2961: F26D 13                     INC    DE
2962: F26E C5                     PUSH   BC
2963: F26F D5                     PUSH   DE                   ; left, right pushed
2964: F270 42                     LD     B,D
2965: F271 4B                     LD     C,E                  ; ready right for call
2966: F272 CD 77 ED               CALL   GetAllocBit
2967: F275 1F                     RRA
2968: F276 D2 7E F2               JP     NC,ReturnBlockNumber ; return block number if zero
2969: F279 D1                     POP    DE
2970: F27A C1                     POP    BC                   ; restore left and right pointers
2971: F27B C3 52 F2               JP     TestLeft             ; for another attempt
2972: F27E             ReturnBlockNumber:
2973: F27E 17                     RLA
2974: F27F 3C                     INC    A                    ; bit back into position and set to 1
2975: F280         ; 	D contains the number of shifts required to reposition
2976: F280 CD A9 ED               CALL   RotateAndReplace     ; move bit back to position and store
2977: F283 E1                     POP    HL
2978: F284 D1                     POP    DE                   ; HL returned value, DE discarded
2979: F285 C9                     RET
2980: F286
2981: F286         ; cannot find an available bit, return 0000
2982: F286             ReturnBlockZero:
2983: F286 21 00 00               LD     HL,0000H
2984: F289 C9                     RET
2985: F28A         ;-----------------------------------------------------------------
2986: F28A         ;compute disk block number from current fcb
2987: F28A             GetBlockNumber:
2988: F28A CD 12 F4               CALL   GetDiskMapIndex      ; 0...15 in register A
2989: F28D 4F                     LD     C,A
2990: F28E 06 00                  LD     B,0
2991: F290 CD 32 F4               CALL   GetDiskMapValue      ; return value in HL
2992: F293 22 6B F5               LD     (currentBlock),HL    ; save for later
2993: F296 C9                     RET
2994: F297         ;-----------------------------------------------------------------
2995: F297         ;is  block allocated
2996: F297             IsAllocated:
2997: F297 2A 6B F5               LD     HL,(currentBlock)
2998: F29A 7D                     LD     A,L
2999: F29B B4                     OR     H
3000: F29C C9                     RET
3001: F29D         ;-----------------------------------------------------------------
3002: F29D         ;compute actual record address
3003: F29D         ; result = currentBlock * ( 2**BSH)
3004: F29D             SetActualRecordAdd:
3005: F29D 3A 4C F5               LD     A,(dpbBSH)           ; Block Shift  to reg A
3006: F2A0 2A 6B F5               LD     HL,(currentBlock)
3007: F2A3
3008: F2A3             SetActualRecordAdd1:
3009: F2A3 29                     ADD    HL,HL
3010: F2A4 3D                     DEC    A                    ; shl(currentBlock,dpbBSH)
3011: F2A5 C2 A3 F2               JP     NZ,SetActualRecordAdd1
3012: F2A8         ; HL has Record number for start of the block;
3013: F2A8 3A 4D F5               LD     A,(dpbBLM)           ; get block mask
3014: F2AB 4F                     LD     C,A                  ; to get cpmRecord mod Block
3015: F2AC 3A 69 F5               LD     A,(cpmRecord)        ; get index into block
3016: F2AF A1                     AND    C                    ; masked value in A
3017: F2B0 B5                     OR     L
3018: F2B1 6F                     LD     L,A                  ; to HL
3019: F2B2 22 6B F5               LD     (currentBlock),HL    ; currentBlock=HL or (cpmRecord and dpbBLM)
3020: F2B5         ; *** currentBlock now has current record number - Starting record number + index into block
3021: F2B5 C9                     RET
3022: F2B6         ;-----------------------------------------------------------------
3023: F2B6         ;---------------------
3024: F2B6         ;copy directory location to exitParameterByte
3025: F2B6             DirLocationToReturnLoc:
3026: F2B6 3A 5D F5               LD     A,(directoryFlag)
3027: F2B9 32 C2 EA               LD     (exitParameterByte),A
3028: F2BC C9                     RET
3029: F2BD         ;---------------------
3030: F2BD         ;clear the module number field for user open/make (S2)
3031: F2BD             ClearModuleNum:
3032: F2BD CD C3 F2               CALL   GetModuleNum
3033: F2C0 36 00                  LD     (HL),0               ; fcb(fcbS2Index)=0
3034: F2C2 C9                     RET
3035: F2C3         ;---------------------
3036: F2C3         ;get data module number (high order bit is fwf -file write flag)
3037: F2C3             GetModuleNum:
3038: F2C3 2A C0 EA               LD     HL,(paramDE)
3039: F2C6 11 0E 00               LD     DE,fcbS2Index
3040: F2C9 19                     ADD    HL,DE                ; HL=.fcb(fcbS2Index)
3041: F2CA 7E                     LD     A,(HL)
3042: F2CB C9                     RET                         ; A=fcb(fcbS2Index)
3043: F2CC         ;---------------------
3044: F2CC         ;check current fcb to see if reselection necessary
3045: F2CC             Reselect:
3046: F2CC 3E FF                  LD     A,TRUE
3047: F2CE 32 64 F5               LD     (fResel),A           ;mark possible reselect
3048: F2D1 2A C0 EA               LD     HL,(paramDE)
3049: F2D4 7E                     LD     A,(HL)               ; drive select code
3050: F2D5 E6 1F                  AND    00011111B            ; non zero is auto drive select
3051: F2D7 3D                     DEC    A                    ; drive code normalized to 0..30, or 255
3052: F2D8 32 BF EA               LD     (paramE),A           ; save drive code
3053: F2DB FE 1E                  CP     30
3054: F2DD D2 F0 F2               JP     NC,NoSelect
3055: F2E0         ; auto select function, save currentDisk
3056: F2E0 3A 34 F5               LD     A,(currentDisk)
3057: F2E3 32 65 F5               LD     (entryDisk),A        ; entryDisk=currentDisk
3058: F2E6 7E                     LD     A,(HL)
3059: F2E7 32 66 F5               LD     (fcbDisk),A          ; save drive code
3060: F2EA E6 E0                  AND    11100000B
3061: F2EC 77                     LD     (HL),A               ; preserve hi bits
3062: F2ED CD 4E EC               CALL   SelectCurrent
3063: F2F0             NoSelect:                       ; noselect:
3064: F2F0
3065: F2F0 3A 33 F5               LD     A,(currentUserNumber) ; set user code 0...31
3066: F2F3 2A C0 EA               LD     HL,(paramDE)
3067: F2F6 B6                     OR     M
3068: F2F7 77                     LD     (HL),A
3069: F2F8 C9                     RET
3070: F2F9         ;---------------------
3071: F2F9         ;search for the directory entry, copy to fcb
3072: F2F9             OpenFile:
3073: F2F9 0E 0F                  LD     C,nameLength
3074: F2FB CD 3C F3               CALL   Search4DirElement
3075: F2FE CD E0 ED               CALL   EndOfDirectory
3076: F301 C8                     RET    Z                    ; return with exitParameterByte=255 if end
3077: F302
3078: F302         ; not end of directory, copy fcb information
3079: F302             OpenFileCopyFCB:
3080: F302 CD C4 F3               CALL   GetExtentAddress     ; HL=.fcb(fcbExtIndex)
3081: F305 7E                     LD     A,(HL)
3082: F306 F5                     PUSH   AF
3083: F307 E5                     PUSH   HL                   ; save extent#
3084: F308 CD CC EE               CALL   GetDirElementAddress
3085: F30B EB                     EX     DE,HL                ; DE = .buff(dptr)
3086: F30C 2A C0 EA               LD     HL,(paramDE)         ; HL=.fcb(0)
3087: F30F 0E 20                  LD     C,NEXT_RECORD        ; length of move operation
3088: F311 D5                     PUSH   DE                   ; save .buff(dptr)
3089: F312 CD 6B F4               CALL   Move                 ; from .buff(dptr) to .fcb(0)
3090: F315         ; note that entire fcb is copied, including indicators
3091: F315 CD CC F3               CALL   SetFileWriteFlag     ; sets file write flag
3092: F318 D1                     POP    DE
3093: F319 21 0C 00               LD     HL,fcbExtIndex
3094: F31C 19                     ADD    HL,DE                ; HL=.buff(dptr+fcbExtIndex)
3095: F31D 4E                     LD     C,(HL)               ; C = directory extent number
3096: F31E 21 0F 00               LD     HL,fcbRCIndex        ; point at the record Count field
3097: F321 19                     ADD    HL,DE                ; HL=.buff(dptr+fcbRCIndex)
3098: F322 46                     LD     B,(HL)               ; B holds directory record count
3099: F323 E1                     POP    HL
3100: F324 F1                     POP    AF
3101: F325 77                     LD     (HL),A               ; restore extent number
3102: F326         ; HL = .user extent#, B = dir rec cnt, C = dir extent#
3103: F326         ; if user ext < dir ext then user := 128 records
3104: F326         ; if user ext = dir ext then user := dir records
3105: F326         ; if user ext > dir ext then user := 0 records
3106: F326 79                     LD     A,C
3107: F327 BE                     CP     M
3108: F328 78                     LD     A,B                  ; ready dir fcbRCIndex
3109: F329 CA 33 F3               JP     Z,OpenRecordCount    ; if same, user gets dir fcbRCIndex
3110: F32C 3E 00                  LD     A,0
3111: F32E DA 33 F3               JP     C,OpenRecordCount    ; user is larger
3112: F331 3E 80                  LD     A,RecordsPerExtent   ; directory is larger >>>RecordsPerExtent
3113: F333             OpenRecordCount:                      ;Acc has record count to fill
3114: F333 2A C0 EA               LD     HL,(paramDE)
3115: F336 11 0F 00               LD     DE,fcbRCIndex
3116: F339 19                     ADD    HL,DE
3117: F33A 77                     LD     (HL),A
3118: F33B C9                     RET
3119: F33C
3120: F33C         ;---------------------
3121: F33C         ;search for directory element of length C at info
3122: F33C             Search4DirElement:
3123: F33C 3E FF                  LD     A,0FFH
3124: F33E 32 5D F5               LD     (directoryFlag),A    ; changed if actually found
3125: F341 21 60 F5               LD     HL,searchLength
3126: F344 71                     LD     (HL),C               ; searchLength = C
3127: F345 2A C0 EA               LD     HL,(paramDE)
3128: F348 22 61 F5               LD     (searchAddress),HL   ; searchAddress = paramDE
3129: F34B CD CA ED               CALL   SetEndDirectory      ; dirEntryIndex = enddir
3130: F34E CD B0 ED               CALL   Home                 ; to start at the beginning
3131: F351 C3 54 F3               JP     Search4NextDirElement
3132: F354         ;---------------------
3133: F354         ;search for the next directory element, assuming a previous
3134: F354         ;call on search which sets searchAddress and searchLength
3135: F354             Search4NextDirElement:
3136: F354 0E 00                  LD     C,FALSE
3137: F356 CD F2 ED               CALL   ReadDirectory        ; read next dir element
3138: F359 CD E0 ED               CALL   EndOfDirectory
3139: F35C CA BB F3               JP     Z,SearchDone         ; skip to end if so
3140: F35F         ; not end of directory, scan for match
3141: F35F 2A 61 F5               LD     HL,(searchAddress)
3142: F362 EB                     EX     DE,HL                ; DE=beginning of user fcb
3143: F363 1A                     LD     A,(DE)               ; first character
3144: F364 FE E5                  CP     emptyDir             ; keep scanning if Dir entry is empty
3145: F366 CA 71 F3               JP     Z,Search4NextDirElement1
3146: F369         ; not emptyDir, may be end of logical directory
3147: F369 D5                     PUSH   DE                   ; save search address
3148: F36A CD DE EE               CALL   StillInDirectory     ; past logical end?
3149: F36D D1                     POP    DE                   ; recall address
3150: F36E D2 BB F3               JP     NC,SearchDone        ; artificial stop
3151: F371             Search4NextDirElement1:
3152: F371 CD CC EE               CALL   GetDirElementAddress ; HL = buffa+dptr
3153: F374 3A 60 F5               LD     A,(searchLength)
3154: F377 4F                     LD     C,A                  ; length of search to c
3155: F378 06 00                  LD     B,0                  ; bcounts up, c counts down
3156: F37A             Search4NextLoop:
3157: F37A 79                     LD     A,C
3158: F37B B7                     OR     A
3159: F37C CA AA F3               JP     Z,EndDirElementSearch
3160: F37F 1A                     LD     A,(DE)
3161: F380 FE 3F                  CP     QMARK
3162: F382 CA A3 F3               JP     Z,Search4NextOK      ; ? matches all
3163: F385         ; scan next character if not fcbS1Index
3164: F385 78                     LD     A,B
3165: F386 FE 0D                  CP     fcbS1Index
3166: F388 CA A3 F3               JP     Z,Search4NextOK
3167: F38B         ; not the fcbS1Index field, extent field?
3168: F38B FE 0C                  CP     fcbExtIndex          ; may be extent field
3169: F38D 1A                     LD     A,(DE)               ; fcb character
3170: F38E CA 9A F3               JP     Z,Search4Ext         ; skip to search extent
3171: F391 96                     SUB    M
3172: F392 E6 7F                  AND    07FH                 ; mask-out flags/extent modulus
3173: F394 C2 54 F3               JP     NZ,Search4NextDirElement ; skip if not matched
3174: F397 C3 A3 F3               JP     Search4NextOK        ;matched character
3175: F39A
3176: F39A         ; A has fcb character attempt an extent # match
3177: F39A             Search4Ext:
3178: F39A C5                     PUSH   BC                   ; save counters
3179: F39B 4E                     LD     C,(HL)               ; directory character to c
3180: F39C CD D9 F3               CALL   CompareExtents       ; compare user/dir char
3181: F39F C1                     POP    BC                   ; recall counters
3182: F3A0 C2 54 F3               JP     NZ,Search4NextDirElement ; skip if no match
3183: F3A3
3184: F3A3         ; current character matches
3185: F3A3             Search4NextOK:
3186: F3A3 13                     INC    DE
3187: F3A4 23                     INC    HL
3188: F3A5 04                     INC    B
3189: F3A6 0D                     DEC    C
3190: F3A7 C3 7A F3               JP     Search4NextLoop
3191: F3AA
3192: F3AA         ; entire name matches, return dir position
3193: F3AA             EndDirElementSearch:
3194: F3AA 3A 6E F5               LD     A,(dirEntryIndex)
3195: F3AD E6 03                  AND    dirEntryMask
3196: F3AF 32 C2 EA               LD     (exitParameterByte),A
3197: F3B2         ; exitParameterByte = low(dirEntryIndex) and 11b
3198: F3B2 21 5D F5               LD     HL,directoryFlag
3199: F3B5 7E                     LD     A,(HL)
3200: F3B6 17                     RLA
3201: F3B7 D0                     RET    NC                   ; directoryFlag=0ffh?
3202: F3B8         ; yes, change it to 0 to mark as found
3203: F3B8 AF                     XOR    A
3204: F3B9 77                     LD     (HL),A               ; directoryFlag=0
3205: F3BA C9                     RET
3206: F3BB
3207: F3BB         ; end of directory, or empty name
3208: F3BB             SearchDone:
3209: F3BB CD CA ED               CALL   SetEndDirectory      ; may be artifical end
3210: F3BE 3E FF                  LD     A,0FFH
3211: F3C0 32 C2 EA               LD     (exitParameterByte),A
3212: F3C3 C9                     RET
3213: F3C4         ;---------------------
3214: F3C4         ;get current extent field address to (HL)
3215: F3C4             GetExtentAddress:
3216: F3C4 2A C0 EA               LD     HL,(paramDE)
3217: F3C7 11 0C 00               LD     DE,fcbExtIndex
3218: F3CA 19                     ADD    HL,DE                ;HL=.fcb(fcbExtIndex)
3219: F3CB C9                     RET
3220: F3CC         ;---------------------
3221: F3CC         ;Set file write flag
3222: F3CC             SetFileWriteFlag:
3223: F3CC CD C3 F2               CALL   GetModuleNum         ; HL=.fcb(fcbS2Index), A=fcb(fcbS2Index)
3224: F3CF F6 80                  OR     writeFlagMask        ; set fwf (file write flag) to "1"
3225: F3D1 77                     LD     (HL),A               ; fcb(fcbS2Index)=fcb(fcbS2Index) or 80h
3226: F3D2 C9                     RET                         ; also returns non zero in accumulator
3227: F3D3         ;---------------------
3228: F3D3         ;set exitParameterByte to 1
3229: F3D3             SetLowReturnTo1:
3230: F3D3 3E 01                  LD     A,1
3231: F3D5 32 C2 EA               LD     (exitParameterByte),A
3232: F3D8 C9                     RET
3233: F3D9         ;---------------------
3234: F3D9         ;compare extent# in A with that in C, return nonzero if they do not match
3235: F3D9             CompareExtents:
3236: F3D9 C5                     PUSH   BC                   ; save C's original value
3237: F3DA F5                     PUSH   AF
3238: F3DB 3A 4E F5               LD     A,(dpbEXM)
3239: F3DE 2F                     CPL
3240: F3DF 47                     LD     B,A
3241: F3E0         ; B has negated form of extent mask
3242: F3E0 79                     LD     A,C
3243: F3E1 A0                     AND    B
3244: F3E2 4F                     LD     C,A                  ; low bits removed from C
3245: F3E3 F1                     POP    AF
3246: F3E4 A0                     AND    B                    ; low bits removed from A
3247: F3E5 91                     SUB    C
3248: F3E6 E6 1F                  AND    maxExtValue          ; set flags
3249: F3E8 C1                     POP    BC                   ; restore original values
3250: F3E9 C9                     RET
3251: F3EA         ;---------------------
3252: F3EA         ;copy the directory entry to the user buffer
3253: F3EA             CopyDirEntryToUser:
3254: F3EA 2A 42 F5               LD     HL,(caDirectoryDMA)
3255: F3ED EB                     EX     DE,HL                ; source is directory buffer
3256: F3EE 2A 3A F5               LD     HL,(InitDAMAddress)  ; destination is user dma address
3257: F3F1 0E 80                  LD     C,cpmRecordSize      ; copy entire record
3258: F3F3 C3 6B F4               JP     Move
3259: F3F6         ;---------------------
3260: F3F6         ;copy the whole file control block
3261: F3F6             CopyFCB:
3262: F3F6 0E 00                  LD     C,0
3263: F3F8 1E 20                  LD     E,fcbLength          ; start at 0, to fcblen-1
3264: F3FA C3 FD F3               JP     CopyDir
3265: F3FD         ;---------------------
3266: F3FD         ;copy fcb information starting at C for E bytes into the currently addressed directory entry
3267: F3FD             CopyDir:
3268: F3FD D5                     PUSH   DE                   ; save length for later
3269: F3FE 06 00                  LD     B,0                  ; double index to BC
3270: F400 2A C0 EA               LD     HL,(paramDE)         ; HL = source for data
3271: F403 09                     ADD    HL,BC
3272: F404 EB                     EX     DE,HL                ; DE=.fcb(C), source for copy
3273: F405 CD CC EE               CALL   GetDirElementAddress ; HL=.buff(dptr), destination
3274: F408 C1                     POP    BC                   ; DE=source, HL=dest, C=length
3275: F409 CD 6B F4               CALL   Move                 ; data moved
3276: F40C         ;enter from close to seek and copy current element
3277: F40C             SeekAndCopy:                      ; seek$copy:
3278: F40C CD 23 EE               CALL   SeekDir              ; seek$dir ;to the directory element
3279: F40F C3 24 F2               JP     WriteDir             ; write the directory element
3280: F412         ;---------------------
3281: F412         ;Return the  disk map Index for cpmRecord in the ACC
3282: F412         ;  account for multiple extents in 1 physical Directory entry
3283: F412             GetDiskMapIndex:                      ; dm$position
3284: F412 21 4C F5               LD     HL,dpbBSH            ; get block shift value
3285: F415 4E                     LD     C,(HL)               ; shift count to C
3286: F416 3A 69 F5               LD     A,(cpmRecord)        ; current virtual record to A
3287: F419             GetDiskMapIndex1:
3288: F419 B7                     OR     A                    ; reset the carry flag
3289: F41A 1F                     RRA
3290: F41B 0D                     DEC    C
3291: F41C C2 19 F4               JP     NZ,GetDiskMapIndex1
3292: F41F         ; A = shr(cpmRecord,dpbBSH) = cpmRecord/2**(sect/block)
3293: F41F         ; A has the relative position in the block.
3294: F41F 47                     LD     B,A                  ; save it for later addition
3295: F420 3E 08                  LD     A,8
3296: F422 96                     SUB    M                    ; 8-dpbBSH to accumulator
3297: F423 4F                     LD     C,A                  ; extent shift count in register c
3298: F424 3A 68 F5               LD     A,(extentValue)      ; extent value ani extmsk
3299: F427             GetDiskMapIndex2:                      ; dmpos1:
3300: F427         ; dpbBSH = 3,4,5,6,7, C=5,4,3,2,1
3301: F427         ; shift is 4,3,2,1,0
3302: F427 0D                     DEC    C
3303: F428 CA 30 F4               JP     Z,GetDiskMapIndex3
3304: F42B B7                     OR     A                    ; clear the carry flag
3305: F42C 17                     RLA
3306: F42D C3 27 F4               JP     GetDiskMapIndex2
3307: F430
3308: F430         ; The ACC has the Block Number for this record
3309: F430             GetDiskMapIndex3:
3310: F430         ; arrive here with A = shl(ext and extmsk,7-dpbBSH)
3311: F430 80                     ADD    A,B                  ; add the previous shr(cpmRecord,dpbBSH) value
3312: F431         ; A is one of the following values, depending upon alloc
3313: F431         ; bks dpbBSH
3314: F431         ; 1k   3     v/8 + extentValue * 16
3315: F431         ; 2k   4     v/16+ extentValue * 8
3316: F431         ; 4k   5     v/32+ extentValue * 4
3317: F431         ; 8k   6     v/64+ extentValue * 2
3318: F431         ; 16k  7     v/128+extentValue * 1
3319: F431 C9                     RET                         ; with disk map position in A
3320: F432         ;---------------------
3321: F432         ; Enter with Disk Map Index in BG
3322: F432         ; Return disk map value  in HL
3323: F432             GetDiskMapValue:
3324: F432 2A C0 EA               LD     HL,(paramDE)         ; base address of file control block
3325: F435 11 10 00               LD     DE,fcbDiskMapIndex   ; offset to the disk map
3326: F438 19                     ADD    HL,DE                ; HL =.diskmap
3327: F439 09                     ADD    HL,BC                ; index by a  byte value
3328: F43A 3A 63 F5               LD     A,(byteAllocationFlag) ;  byte map entry?
3329: F43D B7                     OR     A
3330: F43E CA 45 F4               JP     Z,GetDiskMap16Bit    ; get disk map  byte
3331: F441 6E                     LD     L,(HL)
3332: F442 26 00                  LD     H,0
3333: F444 C9                     RET                         ; with HL=00bb
3334: F445             GetDiskMap16Bit:                      ; getdmd:
3335: F445 09                     ADD    HL,BC                ; HL=.fcb(dm+i*2)
3336: F446         ; double precision value returned
3337: F446 56                     LD     D,(HL)
3338: F447 23                     INC    HL
3339: F448 5E                     LD     E,(HL)
3340: F449 EB                     EX     DE,HL
3341: F44A C9                     RET
3342: F44B         ;---------------------
3343: F44B         ;---------------------
3344: F44B         ;*****************************************************************
3345: F44B         ;************************ Utilities ******************************
3346: F44B         ;*****************************************************************
3347: F44B             AddAtoHL:
3348: F44B 85                     ADD    A,L
3349: F44C 6F                     LD     L,A
3350: F44D D0                     RET    NC
3351: F44E 24                     INC    H
3352: F44F C9                     RET
3353: F450         ;----------
3354: F450             DEminusHL2HL:
3355: F450 7B                     LD     A,E
3356: F451 95                     SUB    L
3357: F452 6F                     LD     L,A
3358: F453 7A                     LD     A,D
3359: F454 9C                     SBC    A,H
3360: F455 67                     LD     H,A
3361: F456 C9                     RET
3362: F457         ;-------------
3363: F457             ShiftRightHLbyC:
3364: F457 0C                     INC    C
3365: F458             ShiftRightHLbyC0:
3366: F458 0D                     DEC    C
3367: F459 C8                     RET    Z
3368: F45A 7C                     LD     A,H
3369: F45B B7                     OR     A
3370: F45C 1F                     RRA
3371: F45D 67                     LD     H,A
3372: F45E 7D                     LD     A,L
3373: F45F 1F                     RRA
3374: F460 6F                     LD     L,A
3375: F461 C3 58 F4               JP     ShiftRightHLbyC0
3376: F464         ;-------
3377: F464             ShiftLeftHLbyC:
3378: F464 0C                     INC    C
3379: F465             ShiftLeftHLbyC0:
3380: F465 0D                     DEC    C
3381: F466 C8                     RET    Z                    ; exit when done
3382: F467 29                     ADD    HL,HL
3383: F468 C3 65 F4               JP     ShiftLeftHLbyC0
3384: F46B         ;*****************************************************************
3385: F46B         ;move data length of length C from source DE to HL
3386: F46B             Move:
3387: F46B 0C                     INC    C
3388: F46C             Move0:
3389: F46C 0D                     DEC    C
3390: F46D C8                     RET    Z
3391: F46E 1A                     LD     A,(DE)
3392: F46F 77                     LD     (HL),A
3393: F470 13                     INC    DE
3394: F471 23                     INC    HL
3395: F472 C3 6C F4               JP     Move0
3396: F475
3397: F475         ;********** Console OUT Routines*******************??????
3398: F475
3399: F475         ;---------------------------------- Is Bit Set ------------------------------;
3400: F475         ; Enter HL  contains the bit map                                             ;
3401: F475         ;       B   Has the bit number (0...F)                                       ;
3402: F475         ; Return ZFlag = 1 if bit is reset (0)                                       ;
3403: F475         ;              = 0 if bit is set (1)                                         ;
3404: F475             IsBitSet:                       ;
3405: F475 04                     INC    B                    ;
3406: F476             IsBitSetLoop:                      ;
3407: F476 37                     SCF                         ; Set carry flag, expect LSBit = 1   ;
3408: F477 CB 45                  BIT    0,L                  ; is LSB set?                        ;
3409: F479 20 01                  JR     NZ,IsBitSet1         ; Skip if LSB set                ;
3410: F47B 3F                     CCF                         ; else Clear Carry flag              ;
3411: F47C             IsBitSet1:                      ;
3412: F47C CB 1C                  RR     H                    ; Shift thru CY                      ;
3413: F47E CB 1D                  RR     L                    ; ditto                              ;
3414: F480 10 F4                  DJNZ   IsBitSetLoop         ;
3415: F482 CB 7C                  BIT    7,H                  ; Bit moved from L LSBit to H MSBit	 ;
3416: F484 C9                     RET                         ;
3417: F485         ;---------------------------------- Is Bit Set ------------------------------;
3418: F485
3419: F485         ;============================ Set/Reset Map Bit =============================;
3420: F485         ;---------------------------------- Set Map Bit ----------------------------;;
3421: F485         ; Enter  HL  contains the bit map                                           ;;
3422: F485         ;        B   Has the bit number (0...F)                                     ;;
3423: F485         ; Return HL  Contains the modified bit map                                  ;;
3424: F485             SetMapBit:                      ;;
3425: F485 C5                     PUSH   BC                   ; Save the Bit Number               ;;
3426: F486 CD 75 F4               CALL   IsBitSet             ; Put the bit in the LSBit          ;;
3427: F489         ;;
3428: F489 C1                     POP    BC                   ; Get the bit position              ;;
3429: F48A CB FC                  SET    7,H                  ;;
3430: F48C 18 07                  JR     ReAlignMap           ;                                    ;
3431: F48E         ;---------------------------------- Set Map Bit ----------------------------;;
3432: F48E         ;---------------------------------- Reset Map Bit --------------------------;;
3433: F48E         ; Enter  HL  contains the bit map                                           ;;
3434: F48E         ;        B   Has the bit number (0...F)                                     ;;
3435: F48E         ; Return HL  Contains the modified bit map                                  ;;
3436: F48E             ResetMapBit:                      ;;
3437: F48E C5                     PUSH   BC                   ; Save the Bit Number               ;;
3438: F48F CD 75 F4               CALL   IsBitSet             ; Put the bit in the LSBit          ;;
3439: F492         ;;
3440: F492 C1                     POP    BC                   ; Get the bit position              ;;
3441: F493 CB BC                  RES    7,H                  ;;
3442: F495         ; Fall thru to ReAlignMap                                                    ;
3443: F495         ;---------------------------------- Reset Map Bit --------------------------;;
3444: F495         ;---------------------------------- Set Map Bit ----------------------------;;
3445: F495         ; Adjusts the HL register to its Original Alignment after IsBitSet           ;
3446: F495         ;
3447: F495             ReAlignMap:                      ;
3448: F495 04                     INC    B                    ;
3449: F496             ReAlignMapLoop:                      ;
3450: F496 37                     SCF                         ; Set carry flag, expect LSBit = 1   ;
3451: F497 CB 7C                  BIT    7,H                  ; is LSB set?                        ;
3452: F499 20 01                  JR     NZ,ReAlignMap1       ; Skip if LSB set                ;
3453: F49B 3F                     CCF                         ; else Clear Carry flag              ;
3454: F49C             ReAlignMap1:                      ;
3455: F49C CB 15                  RL     L                    ; Shift thru CY                      ;
3456: F49E CB 14                  RL     H                    ; ditto                              ;
3457: F4A0 10 F4                  DJNZ   ReAlignMapLoop       ;
3458: F4A2 C9                     RET                         ;
3459: F4A3         ;============================ Set/Reset Map Bit =============================;
3460: F4A3
3461: F4A3
3462: F4A3         ;? ;********************************************************
3463: F4A3         ;? ;return version number
3464: F4A3         ;? vGetVersion:								; func12 (12 - 0C)	 Get Verson
3465: F4A3         ;?	LD		A,VERSION
3466: F4A3         ;?	LD		(exitParameterByte),A 				;exitParameterByte = VERSION (high = 00)
3467: F4A3         ;?	RET
3468: F4A3         ;************Error message World*************************
3469: F4A3             errSelect:
3470: F4A3 21 C2 F4               LD     HL,evSelection
3471: F4A6 C3 BB F4               JP     GoToError
3472: F4A9             errReadOnlyDisk:
3473: F4A9 21 C4 F4               LD     HL,evReadOnlyDisk
3474: F4AC C3 BB F4               JP     GoToError
3475: F4AF             errReadOnlyFile:
3476: F4AF 21 C6 F4               LD     HL,evReadOnlyFile
3477: F4B2 C3 BB F4               JP     GoToError
3478: F4B5             errPermanent:
3479: F4B5 21 C0 F4               LD     HL,evPermanent
3480: F4B8 C3 BB F4               JP     GoToError
3481: F4BB         ;************Error message handler **********************
3482: F4BB             GoToError:
3483: F4BB         ;HL = .errorhandler, call subroutine
3484: F4BB 5E                     LD     E,(HL)
3485: F4BC 23                     INC    HL
3486: F4BD 56                     LD     D,(HL)               ; address of routine in DE
3487: F4BE EB                     EX     DE,HL
3488: F4BF E9                     JP     (HL)                 ; vector to subroutine
3489: F4C0         ;************ Error Vectors *****************************
3490: F4C0 CE F4       evPermanent: DW     erPermanent          ; pererr permanent error subroutine
3491: F4C2 DA F4       evSelection: DW     erSelection          ; selerr select error subroutine
3492: F4C4 E0 F4       evReadOnlyDisk: DW     erReadOnlyDisk       ; roderr ro disk error subroutine
3493: F4C6 E6 F4       evReadOnlyFile: DW     erReadOnlyFile       ; roferr ro file error subroutine
3494: F4C8         ;************Error Routines ******************************
3495: F4C8             erPermanentNoWait:
3496: F4C8 21 18 F5               LD     HL,emPermanent
3497: F4CB C3 BB F4               JP     GoToError
3498: F4CE             erPermanent:
3499: F4CE 21 18 F5               LD     HL,emPermanent
3500: F4D1 CD EF F4               CALL   displayAndWait       ; to report the error
3501: F4D4 FE 03                  CP     CTRL_C
3502: F4D6 CA 00 00               JP     Z,WarmBoot           ; reboot if response is CTRL_C
3503: F4D9 C9                     RET                         ; and ignore the error
3504: F4DA         ;
3505: F4DA             erSelection:
3506: F4DA 21 23 F5               LD     HL,emSelection
3507: F4DD C3 E9 F4               JP     waitB4boot           ; wait console before boot
3508: F4E0         ;
3509: F4E0             erReadOnlyDisk:
3510: F4E0 21 2F F5               LD     HL,emReadOnlyDisk
3511: F4E3 C3 E9 F4               JP     waitB4boot           ; wait console before boot
3512: F4E6         ;
3513: F4E6             erReadOnlyFile:
3514: F4E6 21 2A F5               LD     HL,emReadOnlyFile    ; drop through to wait for console
3515: F4E9         ;
3516: F4E9         ; wait for response before boot
3517: F4E9             waitB4boot:
3518: F4E9 CD EF F4               CALL   displayAndWait
3519: F4EC C3 00 00               JP     WarmBoot
3520: F4EF
3521: F4EF         ;report error to console, message address in HL
3522: F4EF             displayAndWait:
3523: F4EF E5                     PUSH   HL                   ; save message pointer
3524: F4F0 CD D3 E9               CALL   showCRLF             ; stack mssg address, new line
3525: F4F3 3A 34 F5               LD     A,(currentDisk)
3526: F4F6 C6 41                  ADD    A,ASCII_A
3527: F4F8 32 14 F5               LD     (emDisk),A           ; Problem disk name
3528: F4FB 01 08 F5               LD     BC,emDisk0
3529: F4FE CD 38 E9               CALL   Print                ; the error message
3530: F501 C1                     POP    BC
3531: F502 CD 38 E9               CALL   Print                ; error mssage tail
3532: F505 C3 1E E9               JP     ConIn                ; to get the input character
3533: F508         ;ret
3534: F508         ;**************Error Messages*******************************
3535: F508 42 64 6F 73 20 45 72 72 20 4F 6E 20     emDisk0:   DB     'Bdos Err On '
3536: F514 20 3A 20 24     emDisk:    DB     ' : $'
3537: F518 42 61 64 20 53 65 63 74 6F 72 24     emPermanent: DB     'Bad Sector$'
3538: F523 53 65 6C 65 63 74 24     emSelection: DB     'Select$'
3539: F52A 46 69 6C 65 20     emReadOnlyFile: DB     'File '
3540: F52F 52 2F 4F 24     emReadOnlyDisk: DB     'R/O$'
3541: F533         ;*****************************************************************
3542: F533
3543: F533         ;********* file control block (fcb) constants ********************
3544: F533             fcbLength  EQU    32                   ; fcblen file control block size
3545: F533             fcbROfileIndex EQU    9                    ; high order of first type char
3546: F533             fcbHiddenfileIndex EQU    10                   ; invisible file in dir command
3547: F533             fcbExtIndex EQU    12                   ; extent number field index
3548: F533             fcbS1Index EQU    13                   ; S1 index
3549: F533             fcbS2Index EQU    14                   ; S2 data module number index
3550: F533             fcbRCIndex EQU    15                   ; record count field index
3551: F533             fcbDiskMapIndex EQU    16                   ; dskmap disk map field
3552: F533
3553: F533             highestRecordNumber EQU    RecordsPerExtent - 1 ; last record# in extent
3554: F533
3555: F533             dirEntriesPerRecord EQU    cpmRecordSize/fcbLength ; directory elts / record
3556: F533             dirEntryShift EQU    2                    ; log2(dirEntriesPerRecord)
3557: F533             dirEntryMask EQU    dirEntriesPerRecord-1
3558: F533             fcbShift   EQU    5                    ; log2(fcbLength)
3559: F533         ;
3560: F533
3561: F533
3562: F533
3563: F533             maxExtValue EQU    31                   ; largest extent number
3564: F533             moduleMask EQU    15                   ; limits module number value
3565: F533             writeFlagMask EQU    80h                  ; file write flag is high order fcbS2Index
3566: F533             nameLength EQU    15                   ; namlen name length
3567: F533
3568: F533             emptyDir   EQU    0E5H                 ; empty empty directory entry
3569: F533             NEXT_RECORD EQU    fcbLength            ; nxtrec
3570: F533             RANDOM_REC_FIELD EQU    NEXT_RECORD + 1      ;ranrec random record field (2 bytes)
3571: F533         ;
3572: F533         ;	reserved file indicators
3573: F533         ;	equ	11				; reserved
3574: F533         ;*****************************************************************
3575: F533         ;*****************************************************************
3576: F533
3577: F533         ;***common values shared between bdosi and bdos******************
3578: F533 00          currentUserNumber: DB     0                    ; usrcode current user number
3579: F534         ; paramDE:			DS	2					; ParamsDE information address
3580: F534         ; exitParameterByte:
3581: F534         ; exitParameterWord:	DS	2					; address value to return
3582: F534 FF          currentDisk: DB     -1                   ; curdsk current disk number
3583: F535         ; exitParameterByte		EQU	exitParameterWord	; lret low(exitParameterWord)
3584: F535
3585: F535         ;********************* Local Variables ***************************
3586: F535         ;     ************************
3587: F535         ;     *** Initialized Data ***
3588: F535
3589: F535 E5          emptyFCB:  DB     emptyDir             ; efcb 0E5 = available dir entry
3590: F536 00 00       ReadOnlyVector: DW     0                    ; rodsk read only disk vector
3591: F538 00 00       loggedDisks: DW     0                    ; dlog	 logged-in disks
3592: F53A 80 00       InitDAMAddress: DW     DMABuffer            ; dmaad tbuff initial dma address
3593: F53C
3594: F53C         ;     *** Current Disk attributes ****
3595: F53C         ; These are set upon disk select
3596: F53C         ; data must be adjacent, do not insert variables
3597: F53C         ; address of translate vector, not used
3598: F53C         ; ca - currentAddress
3599: F53C
3600: F53C 00 00       caDirMaxValue: DW     0000H                ; cdrmaxa pointer to cur dir max value
3601: F53E 00 00       caTrack:   DW     0000H                ; curtrka current track address
3602: F540 00 00       caSector:  DW     0000H                ; current Sector
3603: F542             caListSizeStart:
3604: F542 00 00       caDirectoryDMA: DW     0000H                ; buffa pointer to directory dma address
3605: F544 00 00       caDiskParamBlock: DW     0000H                ; dpbaddr current disk parameter block address
3606: F546 00 00       caCheckSum: DW     0000H                ; checka current checksum vector address
3607: F548 00 00       caAllocVector: DW     0000H                ; alloca current allocation vector address
3608: F54A             caListSizeEnd:
3609: F54A             caListSize EQU    caListSizeEnd - caListSizeStart
3610: F54A
3611: F54A         ;     ***** Disk Parameter Block *******
3612: F54A         ; data must be adjacent, do not insert variables
3613: F54A         ; dpb - Disk Parameter Block
3614: F54A             dpbStart:
3615: F54A 00 00       dpbSPT:    DW     0000H                ; sectpt sectors per track
3616: F54C 00          dpbBSH:    DB     0000H                ; blkshf block shift factor
3617: F54D 00          dpbBLM:    DB     00H                  ; blkmsk block mask
3618: F54E 00          dpbEXM:    DB     00H                  ; extmsk extent mask
3619: F54F 00 00       dpbDSM:    DW     0000H                ; maxall maximum allocation number
3620: F551 00 00       dpbDRM:    DW     0000H                ; dirmax largest directory number
3621: F553 00 00       dpbDABM:   DW     0000H                ; dirblk reserved allocation bits for directory
3622: F555 00 00       dpbCKS:    DW     0000H                ; chksiz size of checksum vector
3623: F557 00 00       dpbOFF:    DW     0000H                ; offset offset tracks at beginning
3624: F559             dpbEnd:
3625: F559             dpbSize    EQU    dpbEnd - dpbStart
3626: F559         ;
3627: F559
3628: F559         ;     ************************
3629: F559
3630: F559 00 00       caSkewTable: DW     0000H                ; tranv address of translate vector
3631: F55B 00          fcbCopiedFlag: DB     00H                  ; fcb$copied set true if CopyFCB called
3632: F55C 00          readModeFlag: DB     00H                  ; rmf read mode flag for OpenNextExt
3633: F55D 00          directoryFlag: DB     00H                  ; dirloc directory flag in rename, etc.
3634: F55E 00          seqReadFlag: DB     00H                  ; seqio  1 if sequential i/o
3635: F55F 00          diskMapIndex: DB     00H                  ; dminx  local for DiskWrite
3636: F560 00          searchLength: DB     00H                  ; searchl search length
3637: F561 00 00       searchAddress: DW     0000H                ; searcha search address
3638: F563         ;tinfo:	ds	word							; temp for info in "make"
3639: F563 00          byteAllocationFlag: DB     00H                  ; set true if single byte allocation map
3640: F564 00          fResel:    DB     00H                  ; resel reselection flag
3641: F565 00          entryDisk: DB     00H                  ; olddsk disk on entry to bdos
3642: F566 00          fcbDisk:   DB     00H                  ; fcbdsk disk named in fcb
3643: F567 00          fcbRecordCount: DB     00H                  ; record count from current fcb
3644: F568 00          extentValue: DB     00H                  ; extent number and dpbEXM from current fcb
3645: F569 00 00       cpmRecord: DW     0000H                ; current virtual record - NEXT_RECORD
3646: F56B 00 00       currentBlock: DW     0000H                ; arecord current actual record
3647: F56D         ;
3648: F56D         ;	local variables for directory access
3649: F56D 00          dirBlockIndex: DB     00H                  ; directory block Index 0,1,2,3
3650: F56E 00 00       dirEntryIndex: DW     00H                  ; directory entry Index  0,1,...,dpbDRM
3651: F570 00 00       dirRecord: DW     00H                  ; drec:	ds	word	;directory record 0,1,...,dpbDRM/4
3652: F572
3653: F572         ;********************** data areas ******************************
3654: F572
3655: F572
3656: F572         ;---------------------------------- Stack Area--------------------------------;
3657: F572             stackBottom: DS     STACK_SIZE * 2       ; stack size                      ;
3658: F5B2             bdosStack:
3659: F5B2         ;
3660: F5B2         ;---------------------------------- Stack Area--------------------------------;
3661: F5B2         ;	end of Basic I/O System
3662: F5B2         ;-----------------------------------------------------------------;
3663: F5B2
3664: F5B2
3665: F5B2         ;
3666: F5B2             Z_HighestLocation:
3667: F5B2             Z_MemoryLeft EQU    (BIOSStart-1) - Z_HighestLocation
3668: F5B2
3669: F5B2
           ************************   Xref   ************************
0000: $               F5B2   0414 0444
3347: AddAtoHL        F44B   2246 2555
2559: Allocate16Bit   F067   2553
1041: AreWeAtEndOfBuffer EA37   1037
0083: ASCII_A         0041   3526
0084: ASCII_C         0043
0085: ASCII_K         004B
0092: ASCII_LO_A      0061
0093: ASCII_LO_K      006B
0094: ASCII_LO_P      0070
0035: ASCII_MASK      007F   0984
0086: ASCII_N         004E
0087: ASCII_Q         0051
0088: ASCII_R         0052
0089: ASCII_W         0057
0090: ASCII_Y         0059
0070: ASCII_ZERO      0030
0064: ASTERISK        002A
1133: BackUp          EA9C   1061 1129
1138: BackUp1         EAA4   1134
0292: bcBoot          F600
0295: bcConin         F609   0614 0799 0910 0928
0296: bcConout        F60C   0606 0872 1136 1140 1146 1148
0294: bcConst         F606   0611 0906
0300: bcHome          F618   1994
0297: bcList          F60F   0579 0878
0307: bcListst        F62D
0298: bcPunch         F612   0564
0305: bcRead          F627   2909
0299: bcReader        F615   0545
0308: bcSectran       F630
0301: bcSeldsk        F61B   1702
0304: bcSetdma        F624   2034
0303: bcSetsec        F621   2190
0302: bcSettrk        F61E   1999 2170
0293: bcWboot         F603   0465
0306: bcWrite         F62A   2902
0150: BDOSBase        E800   0151 0153 0324
0119: BDOSE           0005   0120
0151: BDOSEntry       E800
0140: BDOSLength      0E00   0143 0153 0154
3658: bdosStack       F5B2
0330: BdosStart       E800
0053: BELL            0007
0153: BIOSBase        F600
0141: BIOSLength      0A00   0143
0113: BIOSPAGE        0002
0154: BIOSStart       F600   0292 0293 0294 0295 0296 0297 0298 0299 0300 0301 0302 0303 0304 0305 0306 0307 0308 3667
2544: BlockOK         F04B   2538
0250: BlockSize       0800   0272
1056: BSspaceBS       EA45   0995
0031: BYTE            0001   1169
3639: byteAllocationFlag F563   1735 1896 2550 2803 3328
3607: caAllocVector   F548   1291 1824 1836 1959
3606: caCheckSum      F546   2209
3604: caDirectoryDMA  F542   1722 2028 2233 2244 3254
3600: caDirMaxValue   F53C   1713 1806 1843 2263
3605: caDiskParamBlock F544   1325 1727
2201: CalculateCheckSum EE97   2090
3609: caListSize      0008   1723
3608: caListSizeEnd   F54A   3609
3603: caListSizeStart F542   3609
0091: CARET           005E   0838
0832: CaretOut        E945   1030 1111
3602: caSector        F540   1719 2006 2109 2179
3630: caSkewTable     F559   1711
3601: caTrack         F53E   1716 2002 2113 2173
0148: CCPEntry        E000   0150 0154
0139: CCPLength       0800   0143 0150 0154
0924: CheckCTL_S      E9A9   0913
2418: CheckRODirectory EF97   2720 2771
2423: CheckROFile     EF9A   2502
2432: CheckWrite      EFA4   2500 2705 2730 2763
3031: ClearModuleNum  F2BD   2334 2355 2401
2781: CloseDirEntry   F1A1   1495 2342 2637
2802: CloseDirEntry1  F1C6   2848
2816: CloseDirEntry2  F1D4   2813
2822: CloseDirEntry3  F1DA   2818
2828: CloseDirEntry4  F1E1   2805
2844: CloseDirEntry5  F1F6   2825
2869: CloseDirEntryEnd F210   2858
2876: CloseDirEntryError F219   2824 2836 2841
0071: COLON           003A
1167: columnPosition  EABE   0857 0882 0947 0967 1125
0066: COMMA           002C
3235: CompareExtents  F3D9   3180
2231: ComputeCheckSum EEBF   2208
2235: ComputeCheckSum0 EEC5   2239
0125: ComTail         0080   0126
0127: ComTailChars    0082
0126: ComTailCount    0081   0127
0901: ConBreak        E989   0725 0868
0934: ConBreak0       E9B7   0926
0936: ConBreak1       E9BA   0904
0792: ConIn           E91E   0497 0983 3532
0865: ConsoleOut      E968   0839 0851 0856 0944 0952 0959 0961 1053
3267: CopyDir         F3FD   2320 2723 3264
3253: CopyDirEntryToUser F3EA   2360 2370
3261: CopyFCB         F3F6   2757
3645: cpmRecord       F569   2288 2303 2459 2469 2504 2588 2625 3015 3286
0227: cpmRecordSize   0080   0229 0232 0234 2232 3257 3555
0056: CR              000D   0805 0958 0988 1052
0039: CTRL_C          0003   0929 1035 3501
0040: CTRL_E          0005   1000
0041: CTRL_H          0008   0811 0994 1139
0042: CTRL_K          000B
0043: CTRL_L          000C
0044: CTRL_P          0010   0912 1003
0045: CTRL_R          0012   1012
0046: CTRL_S          0013   0925
0047: CTRL_U          0015   1009
0048: CTRL_X          0018   1006
0049: CTRL_Z          001A
3646: currentBlock    F56B   2098 2105 2545 2992 2997 3006 3019
3582: currentDisk     F534   1204 1253 1669 1680 1686 1700 1782 2440 3056 3525
3578: currentUserNumber F533   0776 0782 1759 3065
0067: DASH            002D
0261: DataBlocks      02C7   0271
0260: DataSectors     0B1C   0261
2762: DeleteFile      F17F   2377
2766: DeleteFile1     F187   2778
1120: DeleteTheLine   EA8B   1007
1123: DeleteTheLine1  EA8C   1130
3354: DEminusHL2HL    F450   2067 2205
3649: dirBlockIndex   F56D   2083 2245
0232: DirBuffSize     0080
0247: DirectoryBlockCount 0002   0272
0234: DirectoryEntryPerRecord 0004   0275
3633: directoryFlag   F55D   3026 3124 3198
3555: dirEntriesPerRecord 0004   3557
3650: dirEntryIndex   F56E   2020 2040 2063 2065 2075 2095 2261 3194
3557: dirEntryMask    0003   2076 3195
3556: dirEntryShift   0002   2096
0231: DirEntrySize    0020   0234 0272
3025: DirLocationToReturnLoc F2B6   1664 2378 2412
3651: dirRecord       F570   2099 2202 2211
0219: DiskCommandBlock 0046
0218: DiskControlByte 0045
0221: DiskControlTable 0040
2486: DiskEOF         EFF9   2466 2473 2479
0414: diskf           000B
3635: diskMapIndex    F55F   2522 2552
2454: DiskRead        EFBE   1424
0223: DiskReadCode    0001
0228: diskSectorSize  0200   0229 0250 0258
0217: DiskStatusLocation 0043
2496: DiskWrite       F001   1431
2511: DiskWrite1      F01E   2506
2569: DiskWrite2      F06F   2557
2575: DiskWrite3      F071   2515
2596: DiskWrite4      F091   2591
2607: DiskWrite5      F09E   2600
2626: DiskWrite6      F0BC   2622
2628: DiskWrite7      F0BE   2610 2614
0224: DiskWriteCode   0002
2491: DiskWriteSeq    EFFC   2393
3522: displayAndWait  F4EF   3500 3518
0130: DMABuffer       0080   1206 3592
0060: DOLLAR          0024   0820 1765
2438: DoNotWrite      EFAB   2433 2784
0273: dpb3hdAL0       00C0
0274: dpb3hdAL1       0000
0269: dpb3hdBLM       000F
0268: dpb3hdBSH       0004
0275: dpb3hdCKS       0020
0272: dpb3hdDRM       007F   0275
0271: dpb3hdDSM       02C6
0270: dpb3hdEXM       0000
0277: dpb3hdNOH       0002
0276: dpb3hdOFF       0001
0267: dpb3hdSPT       0090
3617: dpbBLM          F54D   3013
3616: dpbBSH          F54C   3005 3284
3622: dpbCKS          F555   2204
3621: dpbDABM         F553   1834
3620: dpbDRM          F551   1804 2061
3619: dpbDSM          F54F   1733 1817 2955
3624: dpbEnd          F559   3625
3618: dpbEXM          F54E   2293 2651 3238
3623: dpbOFF          F557   1995 2166
3625: dpbSize         000F   1729
3615: dpbSPT          F54A   2131 2145
3614: dpbStart        F54A   1728 3625
0446: DUMMY           E8A6   0441 0442
3536: emDisk          F514   3527
3535: emDisk0         F508   3528
3537: emPermanent     F518   3496 3499
3568: emptyDir        00E5   1755 2773 3144 3589
3589: emptyFCB        F535   2733
3540: emReadOnlyDisk  F52F   3510
3539: emReadOnlyFile  F52A   3514
3538: emSelection     F523   3506
0134: END_OF_FILE     001A
3193: EndDirElementSearch F3AA   3159
2039: EndOfDirectory  EDE0   1574 1751 2316 2639 2674 2683 2717 2737 2768 2792 3075 3138
0037: EndOfMessage    0000
1046: EndRead         EA3B   0989 0992
3641: entryDisk       F565   0387 3057
0289: EOD             FFFF   2019
0075: EQUAL_SIGN      003D
3498: erPermanent     F4CE   3490
3495: erPermanentNoWait F4C8   2904 2911
3509: erReadOnlyDisk  F4E0   3492
3513: erReadOnlyFile  F4E6   3493
3478: errPermanent    F4B5
3472: errReadOnlyDisk F4A9   2435
3475: errReadOnlyFile F4AF   2429
3469: errSelect       F4A3   1679
3505: erSelection     F4DA   3491
3490: evPermanent     F4C0   3479
3492: evReadOnlyDisk  F4C4   3473
3493: evReadOnlyFile  F4C6   3476
3491: evSelection     F4C2   3470
0058: EXCLAIM_POINT   0021
1171: exitParameterByte EAC2   0506 0615 0726 0752 0777 1254 1499 1509 1520 1527 1540 1769 2471 2541 2576 2619 2693 2783 2877 3027 3196 3211 3231
1172: exitParameterWord EAC2   0343 0394 0546 0635 1231 1292 1311 1326
3644: extentValue     F568   2295 3298
0026: FALSE           0000   0919 1091 1429 1739 2497 3136
0122: FCB1            005C   0123
0123: FCB2            006C
3631: fcbCopiedFlag   F55B   2636 2654 2871
3642: fcbDisk         F566   0345 0382 3059
3551: fcbDiskMapIndex 0010   1885 1888 2548 2712 2721 2795 2801 3325
3547: fcbExtIndex     000C   1478 1502 1561 1613 2313 2319 2642 2662 2707 2722 2764 2850 2862 3093 3168 3217
3546: fcbHiddenfileIndex 000A
3544: fcbLength       0020   1888 2745 2801 2850 3263 3555 3569
3550: fcbRCIndex      000F   1578 2277 2280 2862 3096 3115
3643: fcbRecordCount  F567   2291 2307 2460 2589
3545: fcbROfileIndex  0009   2424
3548: fcbS1Index      000D   2752 3165
3549: fcbS2Index      000E   1484 1505 1630 2662 3039
3558: fcbShift        0005   2077
0167: fCloseFile      0010
0158: fConsoleIn      0001
0159: fConsoleOut     0002
0170: fDeleteFile     0013
0162: fGetConsoleStatus 000B
0176: fGetCurrentDisk 0019
0175: fGetLoginVector 0018
0178: fGetSetUserNumber 0020
0163: fGetVersion     000C
2533: FirstBlock      F03D   2525
0173: fMakeFile       0016
0166: fOpenFile       000F
0160: fPrintString    0009
0171: fReadSeq        0014
0161: fReadString     000A
0174: fRenameFile     0017
3640: fResel          F564   0346 0376 3047
0164: fResetSystem    000D
0168: fSearchFirst    0011
0169: fSearchNext     0012
0165: fSelectDisk     000E
0177: fSetDMA         001A
0444: functionCount   0028   0355
0401: functionTable   E854   0360 0414 0444
0172: fWriteSeq       0015
1932: GetAllocBit     ED77   1974 2948 2966
1963: GetAllocBitl    ED98   1966
2987: GetBlockNumber  F28A   2477 2512
2937: GetClosestBlock F250   2534
2243: GetDirElementAddress EECC   1577 1754 1883 2419 2772 2796 3084 3152 3273
3334: GetDiskMap16Bit F445   3330
3283: GetDiskMapIndex F412   2521 2988
3287: GetDiskMapIndex1 F419   3291
3299: GetDiskMapIndex2 F427   3306
3309: GetDiskMapIndex3 F430   3303
3323: GetDiskMapValue F432   2529 2991
3215: GetExtentAddress F3C4   2292 3080
2275: GetFcbAddress   EEEB   2286 2300
1560: GetFileSize     EBD9   1395
1573: GetFileSize1    EBEB   1601
1599: GetFileSize2    EC0D   1592
1602: GetFileSizeExit EC13   1575
3037: GetModuleNum    F2C3   1534 2602 2787 3032 3223
1607: GetRandomRecordPosition EC15   1549 1579
3482: GoToError       F4BB   3471 3474 3477 3480 3497
0076: GREATER_THAN    003E
0059: HASH_TAG        0023   0943
3553: highestRecordNumber 007F   2505 2609
1993: Home            EDB0   1841 3130
1143: IgnoreTheLine   EAA9   1010
3592: InitDAMAddress  F53A   1207 1275 2024 3256
1816: InitDisk        ED1A   1692
1826: InitDisk0       ED28   1832
1748: InitDisk1       ECC1   1757 1775
1770: InitDisk2       ECE5   1761 1766
0114: IOBYTE          0003   0634 0654
2996: IsAllocated     F297   2478 2513
3404: IsBitSet        F475   1683 3426 3438
3411: IsBitSet1       F47C   3409
3406: IsBitSetLoop    F476   3414
1008: IsItDeleteTheLineU EA16
1005: IsItDeleteTheLineX EA11
1002: IsItPrintToggle EA0C
1092: IsItPrintToggle1 EA6D   1090
0996: IsItRubout      EA02
0999: IsPhysicalEOL   EA07
0804: IsPrintableASCII E929   0498 0834
1077: ItIsPhysicalEOL EA5A   1001
1084: ItIsPrintToggle EA62   1004
1065: ItIsRubout      EA4F   0998
1161: keyboardByte    EABB   0793 0902 0935
0062: L_PAREN         0028
0079: LEFT_ARROW      005F
0095: LEFT_CURLY      007B
0143: LengthInBytes   2000   0144 0148 0258
0144: LengthInK       0009
0074: LESS_THAN       003C
0055: LF              000A   0807 0888 0960 0990
1106: LL1             EA7B   1114
0029: LO_NIBBLE_MASK  000F   0781 1626
3591: loggedDisks     F538   1202 1230 1682 1688 1690
2729: MakeNewFile     F149   1518 2403 2681
2747: MakeNewFile1    F16B   2751
3563: maxExtValue     001F   2646 3248
0146: MemorySize      0040   0148
2916: Merge           F242   2829 2831
3564: moduleMask      000F   2667
3386: Move            F46B   3089 3258 3275
3388: Move0           F46C   3395
0259: myOffset        0001   0260 0276
3566: nameLength      000F   2357 2672 2743 2745 2790 3073
2198: NewCheckSum     EE95   2889
3569: NEXT_RECORD     0020   1473 1548 2280 3087 3570
3063: NoSelect        F2F0   3054
0931: NothingWaiting  E9B5   0922
0051: NULL            0000
0243: NumberOfHeads   0002   0254 0256 0267 0277
0240: NumberOfLogicalDisks 0004
0028: OFF             0000
0027: ON              FFFF
3072: OpenFile        F2F9   1508 2336
3079: OpenFileCopyFCB F302   2689
2634: OpenNextExt     F0C1   2467 2617
2671: OpenNextExt1    F0F5   2656
2688: OpenNextExt2    F113   2658 2675
2690: OpenNextExt3    F116   2685
2697: OpenNextExtError F11E   2668 2679 2684
2661: OpenNextModule  F0EA   2648
3113: OpenRecordCount F333   3109 3111
1170: paramDE         EAC0   0335 0380 0677 0969 1048 1103 1274 1442 1547 1564 2276 2350 2367 2501 2547 2641 2710 2731 2734 2739 2799 3038 3048 3066 3086 3114 3127 3216 3270 3324
1169: paramE          EABF   0337 0388 0773 1668 3052
0061: PERCENT         0025
0068: PERIOD          002E
0117: Pg0CurentDisk   0004
0116: Pg0CurentUser   0004   0117
0065: PLUS_SIGN       002B
0818: Print           E938   0680 0827 3529 3531
1163: printEchoFlag   EABC   0876 0915 1087
0077: QMARK           003F   2352 3161
2358: QMarkSelect     EF59   2353
0063: R_PAREN         0029
0110: RAM             0000   0112 0113 0114 0116 0119 0122 0125 0130 0132
3570: RANDOM_REC_FIELD 0021   1444 1550 1565
1421: RandomDiskRead  EB23   1376
1428: RandomDiskWrite EB2C   1388
1438: RandomSeek      EB35   1423 1430
1492: RandomSeekClose EB79   1482
1537: RandomSeekError EBBE   1471
1530: RandomSeekErrorBadSeek EBB7   1501 1517 1522
1524: RandomSeekExit  EBB1   1491 1511
2908: ReadBuffer      F23A   2053 2483
2060: ReadDirectory   EDF2   1750 3137
2074: ReadDirectory0  EE07   2068
2078: ReadDirectory1  EE0E   2081
2051: ReadDirRecord   EDE9   2088
1026: ReadEchoRubOut  EA23   1074
3632: readModeFlag    F55C   2456 2498 2677
0979: ReadNext        E9EA   1043 1069 1095 1117
0982: ReadNext0       E9EC   1062 1081
3590: ReadOnlyVector  F536   1201 1310 1797 1802 2439
2448: ReadSeq         EFB9   2385
0966: ReadString      E9DD   0710 1127 1149
3447: ReAlignMap      F495   3430
3454: ReAlignMap1     F49C   3452
3449: ReAlignMapLoop  F496   3457
2476: RecordOK        EFE3   2463
0252: RecordsPerBlock 0010
0236: RecordsPerExtent 0080   2465 3112 3553
0229: recordsPerSector 0004   0252 0267
2704: Rename          F124   2411
2716: Rename1         F135   2726
1098: RepeatLine      EA72   1013
3045: Reselect        F2CC   1375 1387 1394 1662 2335 2341 2356 2368 2376 2384 2392 2402 2410
3436: ResetMapBit     F48E
2972: ReturnBlockNumber F27E   2950 2968
2982: ReturnBlockZero F286   2960
0375: ReturnToCaller  E82F   0349
0391: ReturnToCaller1 E84A   0378 0384 0613
1984: RotateAndReplace EDA9   1978 1987 2976
0080: RUBOUT          007F   0997
1882: ScanDiskMap     ED49   1773 2775
1890: ScanDiskMap0    ED53   1922
1906: ScanDiskMap1    ED66   1898
1915: ScanDiskMap2    ED6C   1904
3122: Search4DirElement F33C   1562 2314 2359 2673 2708 2736 2765 2791 3074
3177: Search4Ext      F39A   3170
3135: Search4NextDirElement F354   1600 2321 2369 2725 2777 3131 3173 3182
3151: Search4NextDirElement1 F371   3145
3156: Search4NextLoop F37A   3190
3185: Search4NextOK   F3A3   3162 3166 3174
3637: searchAddress   F561   2366 3128 3141
3208: SearchDone      F3BB   3139 3150
3636: searchLength    F560   3125 3153
0281: SectorMask      0003
0246: SectorsPerBlock 0004   0250 0252 0255 0261 0281
0256: SectorsPerCylinder 0024   0259 0260
0245: SectorsPerTrack 0012   0254 0256 0267
2102: Seek            EE34   2100 2482 2582
2123: Seek0           EE47   2140
2142: Seek1           EE5D   2128 2157
2159: Seek2           EE6F   2151
3277: SeekAndCopy     F40C
2882: SeekCopy        F21E   2872
2094: SeekDir         EE23   2087 2883 3278
1677: Select          EC5A   1209 1673
1667: SelectCurrent   EC4E   0389 1361 3062
1699: SelectDisk      EC7B   1678
1742: SelectDisk1     ECBD   1738
0073: SEMICOLON       003B
3634: seqReadFlag     F55E   1440 2301 2450 2493 2612
3004: SetActualRecordAdd F29D   2481 2581
3008: SetActualRecordAdd1 F2A3   3011
1972: SetAllocBit     ED9E   1918
2312: SetAttributes   EF21   1663
2315: SetAttributes1  EF26   2322
1780: SetCurrentDiskBit ECF0   1801
2023: SetDataDMA      EDD1   1208 1276 2054 2893
2027: SetDirDMA       EDD7   2052 2890
2249: SetDirectoryEntry EED5   1774 2755
1796: SetDiskReadOnly ED03   1658 2222
2030: SetDMA          EDDA   2025
2018: SetEndDirectory EDCA   1848 2070 3129 3209
3222: SetFileWriteFlag F3CC   1542 2699 2759 3091
3229: SetLowReturnTo1 F3D3   2487 2507 2698
3424: SetMapBit       F485   1689
2226: SetNewCheckSum  EEBD   2215
1546: SetRandomRecord EBC6   1401
2285: SetRecordVars   EEF8   2458 2503 2691
0780: SetUserNumber   E918   0775
3377: ShiftLeftHLbyC  F464   1785
3379: ShiftLeftHLbyC0 F465   3383
3363: ShiftRightHLbyC F457   1820 2097 2442
3365: ShiftRightHLbyC0 F458   3375
0957: showCRLF        E9D3   0945 1080 3524
0942: showHashCRLF    E9BD   1101 1144
0946: showHashCRLF1   E9C5   0953
0069: SLASH           002F
0052: SOH             0001
0057: SPACE           0020   0813 0855 0885 0951 1135 1145 1147
0288: STACK_SIZE      0020   3657
3657: stackBottom     F572
1166: startingColumn  EABD   0948 0968 1124
2260: StillInDirectory EEDE   2220 2250 3148
0258: SystemSectors   0011   0259
0054: TAB             0009   0809 0850
0848: TabOut          E955   0503 0525 0825 0835
0854: TabOut0         E95B   0859
2940: TestLeft        F252   2971
2954: TestRight       F263   2943
0920: ToggleFlag1     E9A6   0918
0120: TopRAM          0007
0255: TotalNumberOfBlocks 02D0
0254: TotalNumberOfSectors 0B40   0255 0260
0132: TPA             0100
0244: TracksPerHead   0050   0254
0025: TRUE            FFFF   0916 0937 1088 1422 1736 1743 1749 2199 2455 2870 3046
0078: UNDER_SCORE     005F
2299: UpdateRecordVars EF0F   2484 2616 2629
1159: usersStack      EAB9   0339 0392
2340: vCloseFile      EF40   0419
1393: vComputeFileSize EB19   0438
0496: vConsoleIn      E8AA   0403
0524: vConsoleOut     E8BB   0404
2375: vDeleteFile     EF6E   0422
0601: vDirectConIO    E8CE   0408
0610: vDirectConIO1   E8D6   0604
0287: VERSION         0020   0751
2348: vFindFirst      EF46   0420
2365: vFindNext       EF5F   0421
1290: vGetAllocAddr   EAF4   0430
0724: vGetConsoleStatus E8FD   0413
1252: vGetCurrentDisk EAE4   0428
1324: vGetDiskParamBlock EB02   0434
0633: vGetIOBYTE      E8E4   0409
1229: vGetLoginVector EADD   0427
1309: vGetReadOnlyMap EAFB   0432
0772: vGetSetUserNumber E90A   0435
0750: vGetVersion     E904   0415
0578: vListOut        E8CA   0407
2400: vMakeFile       EF85   0425
2333: vOpenFile       EF37   0418
0676: vPrintString    E8F0   0411
0563: vPunchOut       E8C6   0406
0544: vReaderIn       E8BF   0405
1374: vReadRandom     EB0D   0436
2383: vReadSeq        EF77   0423
0709: vReadString     E8F9   0412
2409: vRenameFile     EF8E   0426
1352: vResetDrive     EB09   0440
1199: vResetSystem    EAC4   0416
1360: vSelectDisk     EB0A   0417
1273: vSetDMA         EAEB   0429
1661: vSetFileAttributes EC45   0433
0653: vSetIOBYTE      E8EB   0410
1400: vSetRandomRecord EB1F   0439
0464: vSystemReset    E8A7   0402
1657: vWriteProtectDisk EC42   0431
1386: vWriteRandom    EB13   0437
1414: vWriteRandom0Fill EB22   0443
2391: vWriteSeq       EF7E   0424
3517: waitB4boot      F4E9   3507 3511
0112: WarmBoot        0000   0930 1039 3502 3519
0032: WORD            0002   1170 1172
0192: WriteAllocated  0000   2514
2901: WriteBuffer     F232   2585 2892
0194: WriteCleanBuffer 0002   2570
2888: WriteDir        F224   2776 2884 3279
0193: WriteDirectory  0001
3565: writeFlagMask   0080   2788 3224
3666: Z_HighestLocation F5B2   3667
3667: Z_MemoryLeft    004D
0036: ZERO            0000
