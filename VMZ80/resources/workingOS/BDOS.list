0001: E800         ;     File created by MakeZ80Source on Tue Sep 18 12:41:03 EDT 2018 from:
0002: E800         ;     C:\Users\admin\Dropbox\Resources\CPM\CurrentOS\8080\BDOSX.asm
0003: E800         ; BDOS.Z80
0004: E800         ;  in process vWriteSeq - 15 (21)
0005: E800
0006: E800         ; 2019-02-04 Fixed bdosStack problem
0007: E800         ; 2019-01-10	Last rev before remaking  FInd nearest Block
0008: E800         ; 2019-01-11 - BDOS 0.B  - Function 0-A Refactored to Z80 idiom
0009: E800         ; 2018-12-28 Started to refactor to Z80 idiom
0010: E800         ; 2018-03-31 added vector for BDOS Call 5 -ListOut
0011: E800         ; 2018-03-02 Refactored the CP/M Suite
0012: E800         ; 2018-02-12 fixed allocate 16 bit problem
0013: E800         ; 2014-01-16 extended from part of newOS (newBDOS)
0014: E800         ; 2014-03-14  :  Frank Martyn
0015: E800             fcbExtIndexLSB EQU    0CH                  ; 12
0016: E800             fcbExtIndexMSB EQU    0EH                  ; 14   Bit 7 = Write protected
0017: E800
0018: E800                        Include ./stdHeader.Z80
0019: E800         ;<<<<<<<<<<<<<<<<<<<<<<< Include >>>>>>>>>>>>>>>>
0020: E800         ;     File created by MakeZ80Source on Mon Sep 17 16:25:01 EDT 2018 from:
0021: E800         ;     C:\Users\admin\Dropbox\Resources\CPM\CurrentOS\8080\stdHeader.asm
0022: E800         ; stdHeader.asm
0023: E800         ; standard equates
0024: E800
0025: E800         ; 2017-03-02 Refactored the CP/M Suite
0026: E800
0027: E800
0028: E800             TRUE       EQU    -1                   ; not false
0029: E800             FALSE      EQU    0000H
0030: E800             ON         EQU    -1
0031: E800             OFF        EQU    0000H
0032: E800             LO_NIBBLE_MASK EQU    0FH                  ; mask used to obtain the bytes low four bits
0033: E800
0034: E800             BYTE       EQU    1                    ; number of bytes for "byte" type
0035: E800             WORD       EQU    2                    ; number of bytes for "word" type
0036: E800
0037: E800
0038: E800             ASCII_MASK EQU    7FH                  ; Ascii mask 7 bits
0039: E800             ZERO       EQU    00H                  ; Zero
0040: E800             EndOfMessage EQU    00H
0041: E800
0042: E800             CTRL_C     EQU    03H                  ; ETX
0043: E800             CTRL_E     EQU    05H                  ; physical eol
0044: E800             CTRL_H     EQU    08H                  ; backspace
0045: E800             CTRL_K     EQU    0BH                  ; VT - Vertical tab
0046: E800             CTRL_L     EQU    0CH                  ; FF - Form feed
0047: E800             CTRL_P     EQU    10H                  ; prnt toggle
0048: E800             CTRL_R     EQU    12H                  ; repeat line
0049: E800             CTRL_S     EQU    13H                  ; X-OFF stop/start screen
0050: E800             CTRL_U     EQU    15H                  ; line delete
0051: E800             CTRL_X     EQU    18H                  ; =ctl-u
0052: E800             CTRL_Z     EQU    1AH                  ; end of file
0053: E800
0054: E800             NULL       EQU    00H                  ; Null
0055: E800             SOH        EQU    01H                  ; Start of Heading
0056: E800             BELL       EQU    07H                  ; Bell
0057: E800             TAB        EQU    09H                  ; Tab
0058: E800             LF         EQU    0AH                  ; Line Feed
0059: E800             CR         EQU    0DH                  ; Carriage Return
0060: E800             SPACE      EQU    20H                  ; Space
0061: E800             EXCLAIM_POINT EQU    21H                  ; Exclamtion Point
0062: E800             HASH_TAG   EQU    23H                  ; Sharp sign #
0063: E800             DOLLAR     EQU    24H                  ; Dollar Sign
0064: E800             PERCENT    EQU    25H                  ; Percent Sign
0065: E800             L_PAREN    EQU    28H                  ; Left Paenthesis (
0066: E800             R_PAREN    EQU    29H                  ; Right Paenthesis )
0067: E800             ASTERISK   EQU    2AH                  ; Asterisk *
0068: E800             PLUS_SIGN  EQU    2BH                  ; Plus sign +
0069: E800             COMMA      EQU    2CH                  ; Comma
0070: E800             DASH       EQU    2DH                  ; Dash Hyphen -
0071: E800             PERIOD     EQU    2EH                  ; Period
0072: E800             SLASH      EQU    2FH                  ; /
0073: E800             ASCII_ZERO EQU    30H                  ; zero
0074: E800             COLON      EQU    3AH                  ; Colon
0075: E800
0076: E800             SEMICOLON  EQU    3BH                  ; Semi Colon
0077: E800             LESS_THAN  EQU    3CH                  ; Less Than <
0078: E800             EQUAL_SIGN EQU    3DH                  ; Equal Sign
0079: E800             GREATER_THAN EQU    3EH                  ; Greater Than >
0080: E800             QMARK      EQU    3FH                  ; Question Mark
0081: E800             UNDER_SCORE EQU    5FH                  ; under score _
0082: E800             LEFT_ARROW EQU    5FH                  ; Left Arrow ?
0083: E800             RUBOUT     EQU    7FH                  ; Delete Key
0084: E800
0085: E800
0086: E800             ASCII_A    EQU    'A'
0087: E800             ASCII_C    EQU    'C'
0088: E800             ASCII_K    EQU    'K'
0089: E800             ASCII_N    EQU    'N'
0090: E800             ASCII_Q    EQU    'Q'
0091: E800             ASCII_R    EQU    'R'
0092: E800             ASCII_W    EQU    'W'
0093: E800             ASCII_Y    EQU    'Y'
0094: E800             CARET      EQU    '^'
0095: E800             ASCII_LO_A EQU    'a'
0096: E800             ASCII_LO_K EQU    'k'
0097: E800             ASCII_LO_P EQU    'p'
0098: E800             LEFT_CURLY EQU    '{'                  ; Left curly Bracket
0099: E800
0100: E800         ;<<<<<<<<<<<<<<<<<<<<<<< Include >>>>>>>>>>>>>>>>
0101: E800                        Include ./osHeader.Z80
0102: E800         ;<<<<<<<<<<<<<<<<<<<<<<< Include >>>>>>>>>>>>>>>>
0103: E800         ;     File created by MakeZ80Source on Mon Sep 17 16:25:47 EDT 2018 from:
0104: E800         ;     C:\Users\admin\Dropbox\Resources\CPM\CurrentOS\8080\osHeader.asm
0105: E800         ; osHeader.Z80
0106: E800
0107: E800         ; 2018-12-28 Changed BDOSEntry to remove dead space in BDOS
0108: E800         ; 2017-03-02 Refactored the CP/M Suite
0109: E800
0110: E800         ; Contains the Equates used by the CP/M system
0111: E800
0112: E800         ;------------------------Page Zero Constants ---------------------------------
0113: E800             RAM        EQU    0                    ; Start of RAM ( and the Base page)
0114: E800
0115: E800             WarmBoot   EQU    RAM + 0              ; Contains a JMP instruction to warm boot in BIOS
0116: E800             BIOSPAGE   EQU    RAM + 2              ; BIOS Jump Vector Page
0117: E800             IOBYTE     EQU    RAM + 3              ; Input/Output redirection byte
0118: E800
0119: E800             Pg0CurentUser EQU    RAM + 4              ; Current user ( bits 7-4)
0120: E800             Pg0CurentDisk EQU    Pg0CurentUser        ; Default logical disk (bits 0-3)
0121: E800
0122: E800             BDOSE      EQU    RAM + 5              ; Contains a JMP to BDOS entry
0123: E800             TopRAM     EQU    BDOSE+2              ; Top page of usable RAM
0124: E800
0125: E800             FCB1       EQU    RAM + 05CH           ; File Control Block #1
0126: E800             FCB2       EQU    FCB1 + 16            ; File Control Block #2
0127: E800
0128: E800             ComTail    EQU    RAM + 080H           ; Complete command tail
0129: E800             ComTailCount EQU    ComTail + 1          ; Count of the number of char in tail
0130: E800             ComTailChars EQU    ComTailCount + 1     ; Complete Command tail up-cased, w/o trailing CR
0131: E800         ;-----------------------------------------------------------------------
0132: E800
0133: E800             DMABuffer  EQU    RAM + 080H           ; Default "DMA" address used as buffer
0134: E800         ;-----------------------------------------------------------------------
0135: E800             TPA        EQU    RAM + 0100H          ; Start of Transient program Area
0136: E800         ;-----------------------------------------------------------------------
0137: E800             END_OF_FILE EQU    1AH                  ; end of file
0138: E800         ;-----------------------------------------------------------------------
0139: E800
0140: E800         ;--------------- CP/M Constants -----------------------------------------
0141: E800
0142: E800             CCPLength  EQU    0800H                ; Constant
0143: E800             BDOSLength EQU    0E00H                ; Constant 0E00H
0144: E800             BIOSLength EQU    0A00H                ; Constant 0900H
0145: E800
0146: E800             LengthInBytes EQU    CCPLength + BDOSLength + BIOSLength
0147: E800             LengthInK  EQU    (LengthInBytes/1024) + 1
0148: E800
0149: E800             MemorySize EQU    64
0150: E800
0151: E800             CCPEntry   EQU    (MemorySize * 1024) - LengthInBytes
0152: E800
0153: E800             BDOSBase   EQU    CCPEntry + CCPLength
0154: E800             BDOSEntry  EQU    BDOSBase
0155: E800
0156: E800             BIOSBase   EQU    BDOSBase + BDOSLength
0157: E800             BIOSStart  EQU    CCPEntry + CCPLength + BDOSLength
0158: E800         ;-----------------------------------------------------------------------
0159: E800
0160: E800         ;------------------- BDOS System Call Equates --------------------------
0161: E800             fConsoleIn EQU    01H                  ; rcharf - Console Input
0162: E800             fConsoleOut EQU    02H                  ; pcharf - Console Output
0163: E800             fPrintString EQU    09H                  ; pbuff	- Print String
0164: E800             fReadString EQU    0AH                  ; rbuff	- Read Console String
0165: E800             fGetConsoleStatus EQU    0BH                  ; breakf - Get Console Status
0166: E800             fGetVersion EQU    0CH                  ; liftf	- Return Version Number
0167: E800             fResetSystem EQU    0DH                  ; initf	- Reset Disk System
0168: E800             fSelectDisk EQU    0EH                  ; self	- Select Disk
0169: E800             fOpenFile  EQU    0FH                  ; openf	- Open File
0170: E800             fCloseFile EQU    10H                  ; closef - Close File
0171: E800             fSearchFirst EQU    11H                  ; searf	- Search For First
0172: E800             fSearchNext EQU    12H                  ; searnf - Search for Next
0173: E800             fDeleteFile EQU    13H                  ; delf - Delete File
0174: E800             fReadSeq   EQU    14H                  ; dreadf - Read Sequential
0175: E800             fWriteSeq  EQU    15H                  ; dwritf - Write Sequential
0176: E800             fMakeFile  EQU    16H                  ; makef	- Make File
0177: E800             fRenameFile EQU    17H                  ; renf	- Rename File
0178: E800             fGetLoginVector EQU    18H                  ; logf	- Return Login Vector
0179: E800             fGetCurrentDisk EQU    19H                  ; cself	- Return Current Disk
0180: E800             fSetDMA    EQU    1AH                  ; dmaf	- Set DMA address
0181: E800             fGetSetUserNumber EQU    20H                  ; userf	- Set/Get User Code
0182: E800         ;-----------------------------------------------------------------------
0183: E800
0184: E800
0185: E800
0186: E800
0187: E800
0188: E800         ;*******************************************************************************
0189: E800         ; These are the values handed over by the BDOS when it calls the Writer operation
0190: E800         ; The allocated.unallocated indicates whether the BDOS is set to write to an
0191: E800         ; unallocated allocation block (it only indicates this for the first 128 byte
0192: E800         ; sector write) or to an allocation block that has already been allocated to a
0193: E800         ; file. The BDOS also indicates if it is set to write to the file directory
0194: E800         ;*******************************************************************************
0195: E800             WriteAllocated EQU    00H
0196: E800             WriteDirectory EQU    01H
0197: E800             WriteCleanBuffer EQU    02H
0198: E800
0199: E800
0200: E800         ;<<<<<<<<<<<<<<<<<<<<<<< Include >>>>>>>>>>>>>>>>
0201: E800                        Include ./diskHeader.Z80
0202: E800         ;<<<<<<<<<<<<<<<<<<<<<<< Include >>>>>>>>>>>>>>>>
0203: E800         ;     File created by MakeZ80Source on Mon Sep 17 16:26:22 EDT 2018 from:
0204: E800         ;     C:\Users\admin\Dropbox\Resources\CPM\CurrentOS\8080\diskHeader.asm
0205: E800         ; diskHeader.asm
0206: E800
0207: E800         ; 2017-03-02 Refactored the CP/M Suite
0208: E800
0209: E800         ; needs osHeader.asm declared before this is used !!!!!!!
0210: E800
0211: E800         ; Contains the Equates used by the CP/M system to handle disks
0212: E800
0213: E800
0214: E800         ;*******************************************************************************
0215: E800         ;
0216: E800         ;     Disk related values
0217: E800         ;
0218: E800         ;
0219: E800         ;*******************************************************************************
0220: E800             DiskStatusLocation EQU    043H                 ; status after disk I/O placed here
0221: E800             DiskControlByte EQU    045H                 ; control byte for disk I/O
0222: E800             DiskCommandBlock EQU    046H                 ; Control Table Pointer
0223: E800         ; for boot
0224: E800             DiskControlTable EQU    0040H
0225: E800
0226: E800             DiskReadCode EQU    01H                  ; Code for Read
0227: E800             DiskWriteCode EQU    02H                  ; Code for Write
0228: E800
0229: E800
0230: E800             cpmRecordSize EQU    080H                 ; (128) record size that CP/M uses
0231: E800             diskSectorSize EQU    200H                 ; (512) size of physical disk I/O
0232: E800             recordsPerSector EQU    diskSectorSize/cpmRecordSize
0233: E800
0234: E800             DirEntrySize EQU    20H                  ; (32)
0235: E800             DirBuffSize EQU    cpmRecordSize
0236: E800
0237: E800             DirectoryEntryPerRecord EQU    cpmRecordSize / DirEntrySize
0238: E800
0239: E800             RecordsPerExtent EQU    080H                 ; extent Record capacity
0240: E800
0241: E800
0242: E800         ;-------------------------------------------------------------------------------------
0243: E800             NumberOfLogicalDisks EQU    4                    ; max number of disk in this system
0244: E800
0245: E800         ;----------------------3.5 Double Density Disk Geometry----------------------------------------
0246: E800             NumberOfHeads EQU    02H                  ; number of heads
0247: E800             TracksPerHead EQU    50H                  ; 80
0248: E800             SectorsPerTrack EQU    12H                  ; 18 -  1 head only
0249: E800             SectorsPerBlock EQU    04H                  ; 2048 bytes
0250: E800             DirectoryBlockCount EQU    02H                  ;
0251: E800         ;-----------------------------------------------------------------------
0252: E800
0253: E800             BlockSize  EQU    SectorsPerBlock * 	diskSectorSize ; Size in Bytes
0254: E800
0255: E800             RecordsPerBlock EQU    recordsPerSector * SectorsPerBlock
0256: E800
0257: E800             TotalNumberOfSectors EQU    SectorsPerTrack * TracksPerHead * NumberOfHeads
0258: E800             TotalNumberOfBlocks EQU    TotalNumberOfSectors / SectorsPerBlock
0259: E800             SectorsPerCylinder EQU    SectorsPerTrack * NumberOfHeads
0260: E800
0261: E800             SystemSectors EQU    LengthInBytes / diskSectorSize + 1 ; need to account for boot sector
0262: E800             myOffset   EQU    (SystemSectors / SectorsPerCylinder) + 1 ;
0263: E800             DataSectors EQU    TotalNumberOfSectors - (SectorsPerCylinder * myOffset)
0264: E800             DataBlocks EQU    DataSectors / 	SectorsPerBlock
0265: E800
0266: E800         ;-----------------------------------------------------------------------
0267: E800         ;; Disk block parameters for F3HD - 3.5 HD   1.44 MB Diskette
0268: E800         ;-----------------------------------------------------------------------
0269: E800         ;dpb3hdSPT				EQU		0090H			; cpmRecords per track- (144)
0270: E800             dpb3hdSPT  EQU    recordsPerSector * SectorsPerTrack * NumberOfHeads ; SPT - records per Clynder
0271: E800             dpb3hdBSH  EQU    04H                  ; Block Shift Factor - BlockSize = 128 * (2**BSH)											; BSH = Log2(BlockSize/cpmRecordSize)
0272: E800             dpb3hdBLM  EQU    0FH                  ; BlockMask = (2**BSH) -1
0273: E800             dpb3hdEXM  EQU    00H                  ; Extent mask = (PhysicalExtents/LogicalExtents) - 1
0274: E800             dpb3hdDSM  EQU    DataBlocks -1        ; Maximum allocation block number (710)
0275: E800             dpb3hdDRM  EQU    ((BlockSize *  DirectoryBlockCount)	/	DirEntrySize) -1 ; DRM Number of directory entries - 1 (127)
0276: E800             dpb3hdAL0  EQU    0C0H                 ; Bit map for reserving 1 alloc. block
0277: E800             dpb3hdAL1  EQU    00H                  ;  for each file directory
0278: E800             dpb3hdCKS  EQU    (dpb3hdDRM +1)/ DirectoryEntryPerRecord ; Disk change work area size (32)
0279: E800             dpb3hdOFF  EQU    myOffset             ; Number of tracks before directory
0280: E800             dpb3hdNOH  EQU    NumberOfHeads
0281: E800
0282: E800         ;*******************************************************************************
0283: E800
0284: E800             SectorMask EQU    SectorsPerBlock - 1
0285: E800
0286: E800         ;***************************************************************************
0287: E800
0288: E800         ;<<<<<<<<<<<<<<<<<<<<<<< Include >>>>>>>>>>>>>>>>
0289: E800
0290: E800             VERSION    EQU    20H                  ; Version 2.0
0291: E800             STACK_SIZE EQU    20H                  ; Make stack big enough
0292: E800             EOD        EQU    -1                   ; End of Directory
0293: E800
0294: E800         ;************************ BIOS Function Constants ***************************;
0295: E800             bcBoot     EQU    BIOSStart+3*0        ; Cold Boot function	             ;
0296: E800             bcWboot    EQU    BIOSStart+3*1        ; Warm Boot function                 ;
0297: E800             bcConst    EQU    BIOSStart+3*2        ; Console Status function            ;
0298: E800             bcConin    EQU    BIOSStart+3*3        ; Console Input function             ;
0299: E800             bcConout   EQU    BIOSStart+3*4        ; Console Output function            ;
0300: E800             bcList     EQU    BIOSStart+3*5        ; List Output function               ;
0301: E800             bcPunch    EQU    BIOSStart+3*6        ; Punch Output function              ;
0302: E800             bcReader   EQU    BIOSStart+3*7        ; Reader Input function              ;
0303: E800             bcHome     EQU    BIOSStart+3*8        ; Disk Home function                 ;
0304: E800             bcSeldsk   EQU    BIOSStart+3*9        ; Select Disk function               ;
0305: E800             bcSettrk   EQU    BIOSStart+3*10       ; Set Track function                 ;
0306: E800             bcSetsec   EQU    BIOSStart+3*11       ; Set Sector function                ;
0307: E800             bcSetdma   EQU    BIOSStart+3*12       ; Set DMA function                   ;
0308: E800             bcRead     EQU    BIOSStart+3*13       ; Read Disk function                 ;
0309: E800             bcWrite    EQU    BIOSStart+3*14       ; Write Disk function                ;
0310: E800             bcListst   EQU    BIOSStart+3*15       ; List Status function               ;
0311: E800             bcSectran  EQU    BIOSStart+3*16       ; Sector Translate                   ;
0312: E800         ;************************ BIOS Function Constants ***************************;
0313: E800
0314: E800         ;============================================================================;
0315: E800         ;	BDOS                                                                     ;
0316: E800         ; Calling into   :                                                           ;
0317: E800         ;					Register  C - Contains BDOS Function Code                ;
0318: E800         ;					Register  A - Holds the Byte argument if any             ;
0319: E800         ;					Register DE - Holds the Word argument if any             ;
0320: E800         ; Returning from :                                                           ;
0321: E800         ;					Register  A - The Byte return value if any               ;
0322: E800         ;					Register HL - The Word return value if any               ;
0323: E800         ;                   ( Register A=L and B=H)                                  ;
0324: E800         ;============================================================================;
0325: E800
0326: E800
0327: E800                        ORG    BDOSBase
0328: E800
0329: E800         ;===========================BDOS Entry=======================================;
0330: E800         ;BDOSEntry:                                                                  ;
0331: E800         ;
0332: E800         ;
0333: E800             BdosStart:                      ;
0334: E800         ;	LD		A,C                                                              ;
0335: E800         ; 	LD		(FunctionValue),A			; Save the function number           ;
0336: E800         ;
0337: E800         ; Save Calling Arguments                                                     ;
0338: E800 ED 53 C3 EA               LD     (paramDE),DE         ; Save the Word Argument             ;
0339: E804 7B                     LD     A,E                  ;
0340: E805 32 C2 EA               LD     (paramE),A           ; Save the Byte argument             ;
0341: E808         ; Save users Stack pointer                                                   ;
0342: E808 ED 73 BC EA               LD     (usersStack),SP      ; Save the User's stack				 ;
0343: E80C 31 9B F5               LD     SP,bdosStack         ; We will use our own stack			 ;
0344: E80F         ;
0345: E80F         ; initialize variables                                                       ;
0346: E80F 21 00 00               LD     HL,0000H             ;
0347: E812 22 C5 EA               LD     (exitParameterWord),HL ; Assume all is well for return      ;
0348: E815 AF                     XOR    A                    ;
0349: E816 32 4F F5               LD     (fcbDisk),A          ; Initialize to 00                   ;
0350: E819 32 4D F5               LD     (fResel),A           ; Clear re selection flag            ;
0351: E81C         ;
0352: E81C         ; Set up for return to caller when Function Completes                        ;
0353: E81C 21 32 E8               LD     HL,ReturnToCaller    ;
0354: E81F E5                     PUSH   HL                   ;Set up to ReturnToCaller            ;
0355: E820         ;
0356: E820         ; is it a valid function number ?	                                         ;
0357: E820         ;	LD		A,(FunctionValue)			; Get the Function Number            ;
0358: E820 79                     LD     A,C                  ;
0359: E821 FE 28                  CP     functionCount        ; make sure its a good number        ;
0360: E823 D0                     RET    NC                   ; exit if not a valid function       ;
0361: E824         ;
0362: E824         ; Calculate the index and get vector to go to	                             ;
0363: E824 4B                     LD     C,E                  ; Assume byte argument               ;
0364: E825 21 57 E8               LD     HL,functionTable     ; Get table base                     ;
0365: E828 5F                     LD     E,A                  ; Function number in E               ;
0366: E829 16 00                  LD     D,0                  ;
0367: E82B 19                     ADD    HL,DE                ; Have byte location                 ;
0368: E82C 19                     ADD    HL,DE                ;  but we want a Word offset         ;
0369: E82D 5E                     LD     E,(HL)               ; Get LSB of vector                  ;
0370: E82E 23                     INC    HL                   ;
0371: E82F 56                     LD     D,(HL)               ; Get MSB of vector                  ;
0372: E830 EB                     EX     DE,HL                ; Vector now in HL                   ;
0373: E831         ;
0374: E831         ; Vector to Function is in HL                                                ;
0375: E831 E9                     JP     (HL)                 ; Put it into the Program Counter    ;
0376: E832         ;===========================BDOS Entry=======================================;
0377: E832         ;===========================BDOS Exit =======================================;
0378: E832         ;arrive here at end of processing to return to user                          ;
0379: E832             ReturnToCaller:                      ;
0380: E832 3A 4D F5               LD     A,(fResel)           ; get re-selection flag              ;
0381: E835 B7                     OR     A                    ; is it set?                         ;
0382: E836 28 15                  JR     Z,ReturnToCaller1    ;
0383: E838         ;re-selection  may have taken place                                         ;
0384: E838 2A C3 EA               LD     HL,(paramDE)         ;
0385: E83B 36 00                  LD     (HL),0               ;
0386: E83D 3A 4F F5               LD     A,(fcbDisk)          ;
0387: E840 B7                     OR     A                    ; Disk = 0?                          ;
0388: E841 28 0A                  JR     Z,ReturnToCaller1    ; exit if yes                  		 ;
0389: E843         ;
0390: E843 77                     LD     (HL),A               ;
0391: E844 3A 4E F5               LD     A,(entryDisk)        ; get back original Disk             ;
0392: E847 32 C2 EA               LD     (paramE),A           ; and select it                      ;
0393: E84A CD F8 ED               CALL   SelectCurrent        ;
0394: E84D         ;
0395: E84D             ReturnToCaller1:                      ;
0396: E84D 2A BC EA               LD     HL,(usersStack)      ;
0397: E850 F9                     LD     SP,HL                ; restore callers stack              ;
0398: E851 2A C5 EA               LD     HL,(exitParameterWord) ;
0399: E854 7D                     LD     A,L                  ;
0400: E855 44                     LD     B,H                  ; BA = exitParameterWord             ;
0401: E856 C9                     RET                         ;
0402: E857         ;===========================BDOS Exit =======================================;
0403: E857
0404: E857         ;++++++++++++++++++++++++++++ Function Vector Table +++++++++++++++++++++++++;
0405: E857             functionTable:                      ;
0406: E857 AA E8                  DW     vSystemReset         ;   0 - System Reset                 ;
0407: E859 AD E8                  DW     vConsoleIn           ;   1 - Console Input                ;
0408: E85B BE E8                  DW     vConsoleOut          ;   2 - Console Output               ;
0409: E85D C2 E8                  DW     vReaderIn            ;   3 - Reader Input                 ;
0410: E85F C9 E8                  DW     vPunchOut            ;   4 - Punch Output                 ;
0411: E861 CD E8                  DW     vListOut             ;   5 - List Output                  ;
0412: E863 D1 E8                  DW     vDirectConIO         ;   6 - Direct Console I/O           ;
0413: E865 E7 E8                  DW     vGetIOBYTE           ;   7 - Get I/O Byte                 ;
0414: E867 EE E8                  DW     vSetIOBYTE           ;   8 - Set I/O Byte                 ;
0415: E869 F3 E8                  DW     vPrintString         ;   9 - Print String                 ;
0416: E86B FC E8                  DW     vReadString          ;   A - Read Console String          ;
0417: E86D 00 E9                  DW     vGetConsoleStatus    ;   B - Get Console Status           ;
0418: E86F             diskf      EQU    ($-functionTable)/2  ; disk functions                     ;
0419: E86F 07 E9                  DW     vGetVersion          ;   C - Return Version Number        ;
0420: E871 C7 EA                  DW     vResetSystem         ;   D - Reset Disk System            ;
0421: E873 E0 EA                  DW     vSelectDisk          ;   E - Select Disk                  ;
0422: E875 E3 EA                  DW     vOpenFile            ;   F - Open File                    ;
0423: E877 EC EA                  DW     vCloseFile           ;  10 - Close File                   ;
0424: E879 F2 EA                  DW     vFindFirst           ;  11 - Search For First             ;
0425: E87B 0B EB                  DW     vFindNext            ;  12 - Search for Next              ;
0426: E87D 1A EB                  DW     vDeleteFile          ;  13 - Delete File                  ;
0427: E87F 41 EB                  DW     vReadSeq             ;  14 - Read Sequential              ;
0428: E881 87 EB                  DW     vWriteSeq            ;  15 - Write Sequential             ;
0429: E883 49 EC                  DW     vMakeFile            ;  16 - Make File                    ;
0430: E885 52 EC                  DW     vRenameFile          ;  17 - Rename File                  ;
0431: E887 7C EC                  DW     vGetLoginVector      ;  18 - Return Login Vector          ;
0432: E889 83 EC                  DW     vGetCurrentDisk      ;  19 - Return Current Disk          ;
0433: E88B 8A EC                  DW     vSetDMA              ;  1A - Set DMA address              ;
0434: E88D 93 EC                  DW     vGetAllocAddr        ;  1B - Get ADDR (ALLOC)             ;
0435: E88F 9A EC                  DW     vWriteProtectDisk    ;  1C - Write Protect Disk           ;
0436: E891 9D EC                  DW     vGetReadOnlyMap      ;  1D - Get Read/Only MAP	         ;
0437: E893 A4 EC                  DW     vSetFileAttributes   ;  1E - Set File Attributes ??       ;
0438: E895 BF EC                  DW     vGetDiskParamBlock   ;  1F - Get ADDR (Disk Parameters)   ;
0439: E897 0D E9                  DW     vGetSetUserNumber    ;  20 - Set/Get User Code            ;
0440: E899 1B ED                  DW     vReadRandom          ;  21 - Read Random                  ;
0441: E89B 21 ED                  DW     vWriteRandom         ;  22 - Write Random                 ;
0442: E89D C6 EC                  DW     vComputeFileSize     ;  23 - Compute File Size            ;
0443: E89F 05 ED                  DW     vSetRandomRecord     ;  24 - Set Random Record            ;
0444: E8A1 18 ED                  DW     vResetDrive          ;  25 - Reset Drive                  ;
0445: E8A3 A9 E8                  DW     DUMMY                ;  26 - Access Drive (not supported) ;
0446: E8A5 A9 E8                  DW     DUMMY                ;  27 - Free Drive (not supported)   ;
0447: E8A7 27 ED                  DW     vWriteRandom0Fill    ;  28 - Write random w/Fill          ;
0448: E8A9             functionCount EQU    ($-functionTable)/2  ; Number of  functions               ;
0449: E8A9         ;
0450: E8A9             DUMMY:                          ;
0451: E8A9 76                     HALT                        ;
0452: E8AA         ;++++++++++++++++++++++++++++ Function Vector Table +++++++++++++++++++++++++;
0453: E8AA
0454: E8AA         ;-------------------------- System Reset - 0 (0) ----------------------------;
0455: E8AA         ;  The system reset function makes CP/M do a complete reset, exactly the     ;
0456: E8AA         ; same as the warm boot function invoked when you transfer control to the    ;
0457: E8AA         ; WARMBOOT point. In addition to resetting the BDOS, this function reloads   ;
0458: E8AA         ; the CCP, rebuilds the allocation vectors for the currently logged disks,   ;
0459: E8AA         ; sets the DMA address (used byCP/M to address the disk read/write buffer)   ;
0460: E8AA         ; to 80H, marks all disks as being Read/Write status, and transfers control  ;
0461: E8AA         ; to the  CCP. The CCP then outputs its prompt to the console.               ;
0462: E8AA         ;																			 ;
0463: E8AA         ;			Function Code	 :	C = 00H                                      ;
0464: E8AA         ;			Entry Parameters:	None                                         ;
0465: E8AA         ;			Exit Parameters :	Does Not Return								 ;
0466: E8AA         ;																			 ;
0467: E8AA         ;-------------------------- System Reset - 0 (0) ----------------------------;
0468: E8AA             vSystemReset:
0469: E8AA C3 03 F6               JP     bcWboot              ; do a Warm Boot
0470: E8AD
0471: E8AD         ;****************************************************************************;
0472: E8AD         ;								IOByte device I/O							 ;
0473: E8AD         ;****************************************************************************;
0474: E8AD
0475: E8AD
0476: E8AD         ;-------------------------- Read Console Byte - 1 (1) -----------------------;
0477: E8AD         ;  This function reads the next byte of data from the console keyboard and   ;
0478: E8AD         ; puts it into register A. If the character input is a graphic character, it ;
0479: E8AD         ; will be echoed back to the console. The only control characters that are   ;
0480: E8AD         ; echoed are  CARRIAGE RETURN, LINE FEED, BACKSPACE, and TAB. In the case    ;
0481: E8AD         ; of a TAB character, the BDOS outputs as many spaces as are required to     ;
0482: E8AD         ; move the cursor to the next multiple of eight columns. All of the other    ;
0483: E8AD         ; control characters, including CONTROL-C, are input but are not echoed.     ;
0484: E8AD         ;  This function also checks for CONTROL-S (XOFF) to see if console output   ;
0485: E8AD         ; should be suspended, and for CONTROL-P (printer echo toggle) to see if     ;
0486: E8AD         ; console output should also be sent to the list device. If CONTROL-S is     ;
0487: E8AD         ; found, further output will be suspended until you type another character.  ;
0488: E8AD         ; CONTROL-P will enable the echoing of console output the first time it is   ;
0489: E8AD         ; pressed and disable it the second time. If there is no incoming data       ;
0490: E8AD         ; character, this function will wait until there is one.                     ;
0491: E8AD         ;                                                                            ;
0492: E8AD         ; This is a blocking function                                                ;
0493: E8AD         ;																			 ;
0494: E8AD         ;																			 ;
0495: E8AD         ;			Function Code	:	C = 01H                                      ;
0496: E8AD         ;			Entry Parameters:	None                                         ;
0497: E8AD         ;			Exit Parameters :	A = Data byte from console					 ;
0498: E8AD         ;																			 ;
0499: E8AD         ;-------------------------- Read Console Byte - 1 (1) -----------------------;
0500: E8AD             vConsoleIn:
0501: E8AD CD 21 E9               CALL   ConIn                ; Don't come back without input
0502: E8B0 CD 2C E9               CALL   IsPrintableASCII     ; CR,LF,TAB,BACK_SPACE or GE SPACE
0503: E8B3 D8                     RET    C                    ; return nothing to echo
0504: E8B4
0505: E8B4 F5                     PUSH   AF                   ; Save printable character
0506: E8B5 4F                     LD     C,A
0507: E8B6 CD 58 E9               CALL   TabOut               ; Send to console. if TAB expand
0508: E8B9 F1                     POP    AF                   ; retrieve exit value
0509: E8BA
0510: E8BA 32 C5 EA               LD     (exitParameterByte),A
0511: E8BD C9                     RET
0512: E8BE
0513: E8BE         ;------------------------- Write Console Byte - 2 (2) -----------------------;
0514: E8BE         ;  This function outputs the data byte in register E to the console. As with ;
0515: E8BE         ; function 1, if the data byte is a TAB character, it will be expanded by    ;
0516: E8BE         ; the BDOS to the next column that is a multiple of eight. The BDOS also     ;
0517: E8BE         ; checks to see if there is an incoming character, and if there is,          ;
0518: E8BE         ; checks to see if it is a CONTROL-S ,in which case console output is        ;
0519: E8BE         ; suspended or CONTROL-P, in which case echoing of console output to the     ;
0520: E8BE         ; printer is  toggled on or off                                              ;
0521: E8BE         ;																			 ;
0522: E8BE         ;			Function Code	:	C = 02H                                      ;
0523: E8BE         ;			Entry Parameters:	E = Data byte to be output					 ;
0524: E8BE         ;			Exit Parameters :	None										 ;
0525: E8BE         ;																			 ;
0526: E8BE         ;------------------------- Write Console Byte - 2 (2) -----------------------;
0527: E8BE         ;BDOS put parameter in C before entering this routine
0528: E8BE             vConsoleOut:
0529: E8BE CD 58 E9               CALL   TabOut
0530: E8C1 C9                     RET
0531: E8C2
0532: E8C2         ;--------------------------- Read Reader Byte - 3 (3) -----------------------;
0533: E8C2         ;   function reads the next character from the logical "reader" device into  ;
0534: E8C2         ; register A. In practice, the physical device that is accessed depends      ;
0535: E8C2         ; entirely on how your BIOS is configured. In some systems, there is no      ;
0536: E8C2         ; reader at all; this function will return some arbitrary value such as lAH  ;
0537: E8C2         ; (the ASCII CONTROL-Z character, used by CP/M to denote "End of File').     ;
0538: E8C2         ; Control is not returned to the calling program until a character has been  ;
0539: E8C2         ; read.                                                                      ;
0540: E8C2         ;                                                                            ;
0541: E8C2         ; This is a blocking function                                                ;
0542: E8C2         ;																			 ;
0543: E8C2         ;			Function Code	:	C = 03H                                      ;
0544: E8C2         ;			Entry Parameters:	None										 ;
0545: E8C2         ;			Exit Parameters :	A = Character Input							 ;
0546: E8C2         ;																			 ;
0547: E8C2         ;--------------------------- Read Reader Byte - 3 (3) -----------------------;
0548: E8C2             vReaderIn:
0549: E8C2 CD 15 F6               CALL   bcReader
0550: E8C5 32 C5 EA               LD     (exitParameterWord),A
0551: E8C8 C9                     RET
0552: E8C9
0553: E8C9         ;--------------------------- Write Punch Byte - 4 (4) -----------------------;
0554: E8C9         ;  This function is a counterpart to the Read "Reader" Byte It outputs the   ;
0555: E8C9         ; specified character from register E to the logical punch device. Again,    ;
0556: E8C9         ; the actual physical device used, if any, is determined by the BIOS.        ;
0557: E8C9         ; There is no set standard for this device; in some systems the punch        ;
0558: E8C9         ; device is a "bit bucket," so called because it absorbs all data that you   ;
0559: E8C9         ; output to it.                                                              ;
0560: E8C9         ;																			 ;
0561: E8C9         ;			Function Code	:	C = 04H                                      ;
0562: E8C9         ;			Entry Parameters:	E = Data byte to be output					 ;
0563: E8C9         ;			Exit Parameters :	None										 ;
0564: E8C9         ;																			 ;
0565: E8C9         ;--------------------------- Write Punch Byte - 4 (4) -----------------------;
0566: E8C9         ;BDOS put parameter in C before entering this routine
0567: E8C9             vPunchOut:
0568: E8C9 CD 12 F6               CALL   bcPunch
0569: E8CC C9                     RET
0570: E8CD
0571: E8CD         ;---------------------------- Write List Byte - 5 (5) -----------------------;
0572: E8CD         ;  This function outputs the specified byte in register E to the logical     ;
0573: E8CD         ; list device. As with the reader and the punch, the physical device used    ;
0574: E8CD         ; depends entirely on the BIOS.                                              ;
0575: E8CD         ;																			 ;
0576: E8CD         ;			Function Code	:	C = 05H                                      ;
0577: E8CD         ;			Entry Parameters:	E = Data byte to be output					 ;
0578: E8CD         ;			Exit Parameters :	None										 ;
0579: E8CD         ;																			 ;
0580: E8CD         ;---------------------------- Write List Byte - 5 (5) -----------------------;
0581: E8CD         ;BDOS put parameter in C before entering this routine
0582: E8CD             vListOut:                       ; func5 (05 - 05) List Output
0583: E8CD CD 0F F6               CALL   bcList               ; direct call to BIOS
0584: E8D0 C9                     RET
0585: E8D1
0586: E8D1         ;--------------------------- Direct Console I/O - 6 (6) ---------------------;
0587: E8D1         ;  This function serves double duty: it both inputs and outputs characters   ;
0588: E8D1         ; from the console. However, it bypasses the normal control characters and   ;
0589: E8D1         ; line editing features (such as CONTROL-P and CONTROL-S) normally           ;
0590: E8D1         ; associated with console I( O. Hence the name "direct" (or "unadorned" as   ;
0591: E8D1         ; Digital Research describes it). If the value in register E is not OFFH,    ;
0592: E8D1         ; then E contains a valid ASCII character that is output to the console.     ;
0593: E8D1         ;  This function works well provided you never have to send a value ofOFFH   ;
0594: E8D1         ; or expect to receive a value ofOOH. If you do need to send or receive pure ;
0595: E8D1         ; binary data, you cannot use this function, since these values are likely   ;
0596: E8D1         ; to be part of the data stream.                                             ;
0597: E8D1         ;                                                                            ;
0598: E8D1         ;			Function Code	:	C = 06H                                      ;
0599: E8D1         ;			Entry Parameters:	E = 0FFH for Input					  		 ;
0600: E8D1         ;								E = Other than 0FFH for Output				 ;
0601: E8D1         ;			Exit Parameters :	A = Input byte or status					 ;
0602: E8D1         ;																			 ;
0603: E8D1         ;--------------------------- Direct Console I/O - 6 (6) ---------------------;
0604: E8D1         ;BDOS put parameter in C before entering this routine
0605: E8D1             vDirectConIO:
0606: E8D1 79                     LD     A,C
0607: E8D2 3C                     INC    A
0608: E8D3 28 04                  JR     Z,vDirectConIO1      ; 0ffh => 00h, means input mode
0609: E8D5         ; send byte to console
0610: E8D5 CD 0C F6               CALL   bcConout             ; Send the byte to the console
0611: E8D8 C9                     RET
0612: E8D9
0613: E8D9         ;read byte/status from console
0614: E8D9             vDirectConIO1:
0615: E8D9 CD 06 F6               CALL   bcConst              ; Check Status
0616: E8DC B7                     OR     A                    ; 00 means not data ready
0617: E8DD CA 4D E8               JP     Z,ReturnToCaller1    ; If no data return  00 to caller
0618: E8E0 CD 09 F6               CALL   bcConin              ; Data is available, get it to A
0619: E8E3 32 C5 EA               LD     (exitParameterByte),A ; Save it
0620: E8E6 C9                     RET
0621: E8E7
0622: E8E7         ;--------------------------- Get IOBYTE Setting - 7 (7) ---------------------;
0623: E8E7         ; This function places the current value of the IOBYTE in register A.        ;
0624: E8E7         ;                                                                            ;
0625: E8E7         ; The IOBYTE structure:                                                      ;
0626: E8E7         ;								+-------+-------+-------+-------+            ;
0627: E8E7         ;						Bit No. | 7 : 6 | 5 : 4 | 3 : 2 | 1 : 0 |            ;
0628: E8E7         ;								+-------+-------+-------+-------+            ;
0629: E8E7         ;				Logical Device     List | Punch | Reader|Console             ;
0630: E8E7         ;                                                                            ;
0631: E8E7         ;                                                                            ;
0632: E8E7         ;			Function Code	:	C = 07H                                      ;
0633: E8E7         ;			Entry Parameters:	None					  		  			 ;
0634: E8E7         ;			Exit Parameters :	A = Current IOBYTE value					 ;
0635: E8E7         ;																			 ;
0636: E8E7         ;--------------------------- Get IOBYTE Setting - 7 (7) ---------------------;
0637: E8E7             vGetIOBYTE:
0638: E8E7 3A 03 00               LD     A,(IOBYTE)           ; Get the IOBYTE
0639: E8EA 32 C5 EA               LD     (exitParameterWord),A ; Return it to caller
0640: E8ED C9                     RET
0641: E8EE         ;--------------------------- Set IOBYTE Setting - 8 (8) ---------------------;
0642: E8EE         ; This function sets the IOBYTE         									 ;
0643: E8EE         ;                                                                            ;
0644: E8EE         ; The IOBYTE structure:                                                      ;
0645: E8EE         ;								+-------+-------+-------+-------+            ;
0646: E8EE         ;						Bit No. | 7 : 6 | 5 : 4 | 3 : 2 | 1 : 0 |            ;
0647: E8EE         ;								+-------+-------+-------+-------+            ;
0648: E8EE         ;				Logical Device     List | Punch | Reader|Console             ;
0649: E8EE         ;                                                                            ;
0650: E8EE         ;                                                                            ;
0651: E8EE         ;			Function Code	:	C = 08H                                      ;
0652: E8EE         ;			Entry Parameters:	E = New IOBYTE value	  		  			 ;
0653: E8EE         ;			Exit Parameters :	None                                         ;
0654: E8EE         ;																			 ;
0655: E8EE         ;--------------------------- Get IOBYTE Setting - 8 (8) ---------------------;
0656: E8EE         ;BDOS put parameter in C before entering this routine
0657: E8EE             vSetIOBYTE:
0658: E8EE 21 03 00               LD     HL,IOBYTE            ; point at The IOBYTE
0659: E8F1 71                     LD     (HL),C               ; Place new vale in it
0660: E8F2 C9                     RET
0661: E8F3
0662: E8F3         ;---------------------- Display $ terminated String - 9 (9) -----------------;
0663: E8F3         ;  This function outputs a string of characters to the console device. The   ;
0664: E8F3         ; address of this string is in registers DE. You must make sure that the last;
0665: E8F3         ; character of the string is "$"; the BDOS uses this character as a marker   ;
0666: E8F3         ; for the end of the string.                                                 ;
0667: E8F3         ;  The "$" itself does not get output to the console.                        ;
0668: E8F3         ;                                                                            ;
0669: E8F3         ; While the BDOS is outputting the string, it expands tabs as previously     ;
0670: E8F3         ; described, checks to see if there is an incoming character, and checks for ;
0671: E8F3         ; CONTROL-S (XOFF, which stops the output until another character is entered);
0672: E8F3         ; or CONTROL-P (which turns on or off echoing of console characters to       ;
0673: E8F3         ; the printer).                                                              ;
0674: E8F3         ;                                                                            ;
0675: E8F3         ;			Function Code	:	C = 09H                                      ;
0676: E8F3         ;			Entry Parameters:	DE = Address of the first byte of the string ;
0677: E8F3         ;			Exit Parameters :	None							             ;
0678: E8F3         ;																			 ;
0679: E8F3         ;---------------------- Display $ terminated String - 9 (9) -----------------;
0680: E8F3             vPrintString:
0681: E8F3 2A C3 EA               LD     HL,(paramDE)         ; Get address of the string
0682: E8F6 4D                     LD     C,L
0683: E8F7 44                     LD     B,H                  ; Put it into BC for call
0684: E8F8 CD 3B E9               CALL   Print                ; out to console
0685: E8FB C9                     RET
0686: E8FC
0687: E8FC         ;-------------------------- Read Console String - A (10) --------------------;
0688: E8FC         ;  This function reads a string of characters from the console device        ;
0689: E8FC         ; and stores them in a buffer (address in DE) that you define. Full line     ;
0690: E8FC         ; editing is possible: the operator can backspace, cancel the line and start ;
0691: E8FC         ; over, and use all the normal control functions. What you will ultimately   ;
0692: E8FC         ; see in the buffer is the final version of the character string entered,    ;
0693: E8FC         ; without any of the errors or control characters used to do the line editing;
0694: E8FC         ;                                                                            ;
0695: E8FC         ;  The buffer that you define has a special format. The first byte in the    ;
0696: E8FC         ; buffer tells the BDOS the maximum number of characters to be accepted.     ;
0697: E8FC         ; The second byte is reserved for the BDOS to tell you how many characters   ;
0698: E8FC         ; were actually placed in the buffer. The following bytes contain            ;
0699: E8FC         ; the characters of the string. Character input will cease either when a     ;
0700: E8FC         ; CARRIAGE RETURN is entered or when the maximum number of characters,       ;
0701: E8FC         ; as specified in the buffer, has been received. The CARRIAGE RETURN is not  ;
0702: E8FC         ; stored in the buffer as a character-it just serves as a terminator. If     ;
0703: E8FC         ; the first character entered is a CARRIAGE RETURN, then the BDOS sets       ;
0704: E8FC         ; the "characters input" byte to O. If you attempt to input more than the    ;
0705: E8FC         ; maximum number of characters, the "characters input" count will be the     ;
0706: E8FC         ; same as the maximum value allowed.                                         ;
0707: E8FC         ;                                                                            ;
0708: E8FC         ;			Function Code	:	C = 0AH                                      ;
0709: E8FC         ;			Entry Parameters:	DE = Address string buffer					 ;
0710: E8FC         ;			Exit Parameters :	String Buffer with console bytes in it       ;
0711: E8FC         ;																			 ;
0712: E8FC         ;-------------------------- Read Console String - A (10) --------------------;
0713: E8FC             vReadString:
0714: E8FC CD E0 E9               CALL   ReadString
0715: E8FF C9                     RET
0716: E900
0717: E900         ;------------------------- Read Console Status - B (11) ---------------------;
0718: E900         ; This function tells you whether a console input character is waiting to be ;
0719: E900         ;processed. Unlike the Console Input functions, which will wait until there  ;
0720: E900         ;is input,this function simply checks and returns immediately.               ;
0721: E900         ;                                                                            ;
0722: E900         ;			Function Code	:	C = 0BH                                      ;
0723: E900         ;			Entry Parameters:	None										 ;
0724: E900         ;			Exit Parameters :	A = 00H if no incoming Data					 ;
0725: E900         ;								A = FFH	if incoming Data					 ;
0726: E900         ;																			 ;
0727: E900         ;------------------------- Read Console Status - B (11) ---------------------;
0728: E900             vGetConsoleStatus:
0729: E900 CD 8C E9               CALL   ConBreak
0730: E903 32 C5 EA               LD     (exitParameterByte),A
0731: E906 C9                     RET
0732: E907
0733: E907         ;--------------------------- Get CP/M Version - C (12) ----------------------;
0734: E907         ;  This function tells you which version of CP/M you are currently running.  ;
0735: E907         ; A two-byte value is returned:                                              ;
0736: E907         ;	H = OOH for CP/M, H = OlH for MP/M                                       ;
0737: E907         ;	L = OOH for all releases before CP/M 2.0                                 ;
0738: E907         ;	L = 20H for CP/M 2.0,21 H for 2.1, 22H for 2.2,                          ;
0739: E907         ;		and so on for any subsequent releases.                               ;
0740: E907         ;                                                                            ;
0741: E907         ; This information is of interest only if your program has some version      ;
0742: E907         ; specific logic built into it. For example, CP/M version 1.4 does not       ;
0743: E907         ; support the same Random File Input/ Output operations that CP/M 2.2 does.  ;
0744: E907         ; Therefore, if your program uses Random I/O, put this check at the          ;
0745: E907         ; beginning to ensure that it is indeed running under the appropriate        ;
0746: E907         ; version of CP/M.                                                           ;
0747: E907         ;                                                                            ;
0748: E907         ;			Function Code	:	C = 0CH                                      ;
0749: E907         ;			Entry Parameters:	None										 ;
0750: E907         ;			Exit Parameters :	HL =Version Number Code						 ;
0751: E907         ;								A = FFH	if incoming Data					 ;
0752: E907         ;																			 ;
0753: E907         ;--------------------------- Get CP/M Version - C (12) ----------------------;
0754: E907             vGetVersion:                      ; func12 (12 - 0C)	 Get Version
0755: E907 3E 20                  LD     A,VERSION
0756: E909 32 C5 EA               LD     (exitParameterByte),A ;exitParameterByte = VERSION
0757: E90C C9                     RET
0758: E90D
0759: E90D         ;--------------------------- Get/Set User Number - 20 (32) ------------------;
0760: E90D         ;  This subroutine either sets or gets the current user number. The current  ;
0761: E90D         ; user number determines which file directory entries are matched during all ;
0762: E90D         ; disk file operations. When you call this function, the contents of the     ;
0763: E90D         ; E register specify what action is to be taken. IfE=OFFH, then the function ;
0764: E90D         ; will return the current user number in the A register. If you set E to a   ;
0765: E90D         ; number in the range 0 to 15 (that is, a valid user number), the function   ;
0766: E90D         ; will set the current user number to this value.                            ;
0767: E90D         ;                                                                            ;
0768: E90D         ;			Function Code	:	C = 0CH                                      ;
0769: E90D         ;			Entry Parameters:	E = 0FFH to get User Number  				 ;
0770: E90D         ;								  = 0 to 15 to set User Number				 ;
0771: E90D         ;			Exit Parameters :	A = Current user Number if E was set to 0FFH ;
0772: E90D         ;								A = FFH	if incoming Data					 ;
0773: E90D         ;																			 ;
0774: E90D         ;                                                                            ;
0775: E90D         ;--------------------------- Get/Set User Number - 20 (32) ------------------;
0776: E90D             vGetSetUserNumber:
0777: E90D 3A C2 EA               LD     A,(paramE)
0778: E910 FE FF                  CP     0FFH
0779: E912 20 07                  JR     NZ,SetUserNumber     ; interrogate user code instead
0780: E914 3A 1C F5               LD     A,(currentUserNumber)
0781: E917 32 C5 EA               LD     (exitParameterByte),A ; exitParameterByte=currentUserNumber
0782: E91A C9                     RET
0783: E91B
0784: E91B             SetUserNumber:
0785: E91B E6 0F                  AND    LO_NIBBLE_MASK
0786: E91D 32 1C F5               LD     (currentUserNumber),A
0787: E920 C9                     RET
0788: E921
0789: E921         ;****************************************************************************;
0790: E921         ;								Character Support Routines					 ;
0791: E921         ;****************************************************************************;
0792: E921
0793: E921
0794: E921         ;-------------------- Return a Character from the console -------------------;
0795: E921         ;return byte from buffer or read from the console                            ;
0796: E921             ConIn:                          ;
0797: E921 21 BE EA               LD     HL,keyboardByte      ; is there a Byte waiting?           ;
0798: E924 7E                     LD     A,(HL)               ;
0799: E925 36 00                  LD     (HL),0               ;
0800: E927 B7                     OR     A                    ;
0801: E928 C0                     RET    NZ                   ;
0802: E929         ;
0803: E929 C3 09 F6               JP     bcConin              ; Go get byte from Console           ;
0804: E92C         ;-------------------- Return a Character from the console -------------------;
0805: E92C
0806: E92C         ;----------- Is the Character ASCII printable, CR,LF,TAB,BACKSPACE ----------;
0807: E92C         ; Resets Carry Flag if ASCII Printable, CR,LF,TAB,BackSpace or GE SPACE      ;
0808: E92C             IsPrintableASCII:                      ;
0809: E92C FE 0D                  CP     CR                   ;
0810: E92E C8                     RET    Z                    ; carriage return?                                                  ;
0811: E92F FE 0A                  CP     LF                   ;
0812: E931 C8                     RET    Z                    ; line feed?                                                        ;
0813: E932 FE 09                  CP     TAB                  ;
0814: E934 C8                     RET    Z                    ; TAB?                                                              ;
0815: E935 FE 08                  CP     CTRL_H               ;
0816: E937 C8                     RET    Z                    ; backspace?                                                        ;
0817: E938 FE 20                  CP     SPACE                ; Reset Carry if ASCII printable         ;
0818: E93A C9                     RET                         ;
0819: E93B         ;----------- Is the Character ASCII printable, CR,LF,TAB,BACKSPACE ----------;
0820: E93B
0821: E93B         ;------------------ Print character from (BC) until  $ found ----------------;
0822: E93B             Print:                          ;
0823: E93B 0A                     LD     A,(BC)               ; Get the next character             ;
0824: E93C FE 24                  CP     DOLLAR               ; Is it the end ?                    ;
0825: E93E C8                     RET    Z                    ;  exit if yes                       ;
0826: E93F 03                     INC    BC                   ; Update the pointer                 ;
0827: E940 C5                     PUSH   BC                   ; Save it                            ;
0828: E941 4F                     LD     C,A                  ; Does Byte require                  ;
0829: E942 CD 58 E9               CALL   TabOut               ;  special attention - check         ;
0830: E945 C1                     POP    BC                   ; Retrieve the pointer				 ;
0831: E946 18 F3                  JR     Print                ; Loop back                          ;
0832: E948         ;------------------ Print character from (BC) until  $ found ----------------;
0833: E948
0834: E948         ;-- Send printable character to console. Precede with Caret if needed -------;
0835: E948         ; character is in Reg C                                                      ;
0836: E948             CaretOut:                       ;
0837: E948 79                     LD     A,C                  ;
0838: E949 CD 2C E9               CALL   IsPrintableASCII     ;
0839: E94C 30 0A                  JR     NC,TabOut            ; Skip if Caret not needed           ;
0840: E94E         ; send preceding up arrow                                                    ;
0841: E94E F5                     PUSH   AF                   ; Save the character                 ;
0842: E94F 0E 5E                  LD     C,CARET              ;
0843: E951 CD 6B E9               CALL   ConsoleOut           ; Send Caret to Console              ;
0844: E954 F1                     POP    AF                   ; Get the character                  ;
0845: E955 F6 40                  OR     40H                  ; Make the graphic a letter          ;
0846: E957 4F                     LD     C,A                  ; Set up to print                    ;
0847: E958         ; fall thru to TabbOut                                                       ;
0848: E958         ;-- Send printable character to console. Precede with Caret if needed -------;
0849: E958
0850: E958         ;------------- Send printable character to console. Expand if TAB -----------;
0851: E958         ; character is in Reg C                                                      ;
0852: E958             TabOut:                         ;
0853: E958 79                     LD     A,C                  ;
0854: E959 FE 09                  CP     TAB                  ; Is it a TAB                        ;
0855: E95B C2 6B E9               JP     NZ,ConsoleOut        ; Go directly to ConsoleOut if not   ;
0856: E95E         ;
0857: E95E         ; TAB encountered                                                           ;
0858: E95E             TabOut0:                        ;
0859: E95E 0E 20                  LD     C,SPACE              ; Expand TABs with SPACEs            ;
0860: E960 CD 6B E9               CALL   ConsoleOut           ; Send to Console                    ;
0861: E963 3A C1 EA               LD     A,(columnPosition)   ; Get Column position                ;
0862: E966 E6 07                  AND    111b                 ; (ColumnPosition mod 8) = 0 ?       ;
0863: E968 20 F4                  JR     NZ,TabOut0           ; Do again if not                    ;
0864: E96A C9                     RET                         ;
0865: E96B         ;------------- Send printable character to console. Expand if TAB -----------;
0866: E96B
0867: E96B         ;-------------------------- Send character to console -----------------------;
0868: E96B         ; C  = Character to be output                                                ;
0869: E96B             ConsoleOut:                      ;
0870: E96B         ; Look for CNTL_S from keyboard and save it in keyboardByte                  ;
0871: E96B C5                     PUSH   BC                   ; Save character and Count           ;
0872: E96C CD 8C E9               CALL   ConBreak             ; Check for screen stop key stroke   ;
0873: E96F C1                     POP    BC                   ;
0874: E970 C5                     PUSH   BC                   ; Get/save character                 ;
0875: E971         ; Send character to Console	                                                 ;
0876: E971 CD 0C F6               CALL   bcConout             ; Send character to the console      ;
0877: E974 C1                     POP    BC                   ;
0878: E975 C5                     PUSH   BC                   ; Get/save character                 ;
0879: E976         ; is the data to be output to print device?                                  ;
0880: E976 3A BF EA               LD     A,(printEchoFlag)    ;
0881: E979 B7                     OR     A                    ;
0882: E97A C4 0F F6               CALL   NZ,bcList            ; Send it to printer, if so          ;
0883: E97D C1                     POP    BC                   ; Get the character                  ;
0884: E97E         ;
0885: E97E 79                     LD     A,C                  ; Put character to ACC               ;
0886: E97F 21 C1 EA               LD     HL,columnPosition    ; A = char, HL = .columnPosition     ;
0887: E982 34                     INC    M                    ; increment the ColumnPosition       ;
0888: E983         ;
0889: E983 FE 20                  CP     SPACE                ;
0890: E985 D0                     RET    NC                   ; Exit if ASCII printable            ;
0891: E986         ;
0892: E986 FE 0A                  CP     LF                   ;
0893: E988 C0                     RET    NZ                   ; Exit if not a Line Feed            ;
0894: E989         ;
0895: E989 36 00                  LD     (HL),0               ;  else force columnPosition = 0     ;
0896: E98B C9                     RET                         ;
0897: E98C         ;-------------------------- Send character to console -----------------------;
0898: E98C
0899: E98C         ;--------------------  Check for Status and Control S or C ------------------;
0900: E98C         ;  Returns:																	 ;
0901: E98C         ;			ACC = 0FFH if Saved keyboard byte or CNTL_S entered from console ;
0902: E98C         ;			ACC = 00   No data Pending										 ;
0903: E98C         ;			DOES NOT RETURN if CTRL_C is entered from the keyboard           ;
0904: E98C         ;                                                                            ;
0905: E98C             ConBreak:                       ;
0906: E98C 3A BE EA               LD     A,(keyboardByte)     ;
0907: E98F B7                     OR     A                    ; If there is a char waiting         ;
0908: E990 20 2B                  JR     NZ,ConBreak1         ;  return with FF in ACC             ;
0909: E992         ;
0910: E992 CD 06 F6               CALL   bcConst              ; Get status                         ;
0911: E995 FE 00                  CP     00H                  ; If 00 => No data pending	         ;
0912: E997 C8                     RET    Z                    ; Return 00 No data pending          ;
0913: E998         ;
0914: E998 CD 09 F6               CALL   bcConin              ; Read the byte                      ;
0915: E99B         ;
0916: E99B FE 10                  CP     CTRL_P               ;
0917: E99D 20 0D                  JR     NZ,CheckCTL_S        ;
0918: E99F         ;<><><><><><><><><><><><><> Toggle Print Echo Flag<><><><><><><>             ;
0919: E99F 21 BF EA               LD     HL,printEchoFlag     ;
0920: E9A2 3E FF                  LD     A,TRUE               ;
0921: E9A4 BE                     CP     (HL)                 ;
0922: E9A5 20 02                  JR     NZ,ToggleFlag1       ;
0923: E9A7 3E 00                  LD     A,FALSE              ;
0924: E9A9             ToggleFlag1:                      ;
0925: E9A9 77                     LD     (HL),A               ;
0926: E9AA 18 0C                  JR     NothingWaiting       ;
0927: E9AC         ;<><><><><><><><><><><><><> Toggle Print Echo Flag<><><><><><><>             ;
0928: E9AC             CheckCTL_S:                      ;
0929: E9AC FE 13                  CP     CTRL_S               ; If it is not Stop Screen, save     ;
0930: E9AE 20 0A                  JR     NZ,ConBreak0         ;   and and return 0FFH              ;
0931: E9B0         ;
0932: E9B0 CD 09 F6               CALL   bcConin              ; Else Read next byte                ;
0933: E9B3 FE 03                  CP     CTRL_C               ;
0934: E9B5 CA 00 00               JP     Z,WarmBoot           ; do WarmBoot if  CTRL_C             ;
0935: E9B8             NothingWaiting:                      ;
0936: E9B8 AF                     XOR    A                    ;
0937: E9B9 C9                     RET                         ; Set ACC = 0 and return             ;
0938: E9BA             ConBreak0:                      ;
0939: E9BA 32 BE EA               LD     (keyboardByte),A     ; save the byte                      ;
0940: E9BD             ConBreak1:                      ;
0941: E9BD 3E FF                  LD     A,TRUE               ; return with true set in ACC        ;
0942: E9BF C9                     RET                         ;
0943: E9C0         ;--------------------  Check for Status and Control S or C ------------------;
0944: E9C0
0945: E9C0         ;------------------------  Console Output Utilities -------------------------;
0946: E9C0             showHashCRLF:                      ;
0947: E9C0 0E 23                  LD     C,HASH_TAG           ;
0948: E9C2 CD 6B E9               CALL   ConsoleOut           ; Send # to console                  ;
0949: E9C5 CD D6 E9               CALL   showCRLF             ;
0950: E9C8             showHashCRLF1:                      ;
0951: E9C8 3E C1                  LD     A,columnPosition     ;
0952: E9CA 21 C0 EA               LD     HL,startingColumn    ;
0953: E9CD BF                     CP     A,M                  ;
0954: E9CE D0                     RET    NC                   ;
0955: E9CF 0E 20                  LD     C,SPACE              ;
0956: E9D1 CD 6B E9               CALL   ConsoleOut           ;
0957: E9D4 18 F2                  JR     showHashCRLF1        ;
0958: E9D6         ;------------------------  Console Output Utilities -------------------------;
0959: E9D6
0960: E9D6         ;------------------------  Send Carriage Return and Line Feed ---------------;
0961: E9D6             showCRLF:                       ;
0962: E9D6 0E 0D                  LD     C,CR                 ;
0963: E9D8 CD 6B E9               CALL   ConsoleOut           ;
0964: E9DB 0E 0A                  LD     C,LF                 ;
0965: E9DD C3 6B E9               JP     ConsoleOut           ; exit via ConsoleOuts RET           ;
0966: E9E0         ;------------------------  Send Carriage Return and Line Feed ---------------;
0967: E9E0
0968: E9E0         ;------------------------- Read a $ terminated String -----------------------;
0969: E9E0         ;read to paramDE address (max length, current length, buffer)               ;
0970: E9E0             ReadString:                      ;
0971: E9E0 3A C1 EA               LD     A,(columnPosition)   ;
0972: E9E3 32 C0 EA               LD     (startingColumn),A   ; Save start for CTRL_X and CTRL_R   ;
0973: E9E6 2A C3 EA               LD     HL,(paramDE)         ; Get the start of the String        ;
0974: E9E9 4E                     LD     C,(HL)               ; Get Max Count  					 ;
0975: E9EA 23                     INC    HL                   ; Point at actual bytes read         ;
0976: E9EB 06 00                  LD     B,0                  ; Initialize Current Count           ;
0977: E9ED         ;
0978: E9ED         ; B = Current Count                                                      ;
0979: E9ED         ; C = Maximum characters                                                 ;
0980: E9ED         ; HL= Insertion Pointer                                                  ;
0981: E9ED         ;
0982: E9ED         ; read next character, BC, HL active                                        ;
0983: E9ED             ReadNext:                       ;
0984: E9ED C5                     PUSH   BC                   ; Save Current Index and Max Count   ;
0985: E9EE E5                     PUSH   HL                   ; Save pointer                       ;
0986: E9EF             ReadNext0:                      ;
0987: E9EF CD 21 E9               CALL   ConIn                ; Get the next Character             ;
0988: E9F2 E6 7F                  AND    ASCII_MASK           ; Mask parity bit                    ;
0989: E9F4 E1                     POP    HL                   ; Restore Pointer					 ;
0990: E9F5 C1                     POP    BC                   ; Restore Current Index and Max Count;
0991: E9F6         ;Is It Carriage Return                                                       ;
0992: E9F6 FE 0D                  CP     CR                   ;
0993: E9F8 CA 3E EA               JP     Z,EndRead            ; End the read if yes                ;
0994: E9FB FE 0A                  CP     LF                   ;
0995: E9FD         ;Is It Linefeed                                                              ;
0996: E9FD CA 3E EA               JP     Z,EndRead            ; End the read if yes                ;
0997: EA00         ;Is It BackSpace                                                             ;
0998: EA00 FE 08                  CP     CTRL_H               ;
0999: EA02 CA 48 EA               JP     Z,BSspaceBS          ;
1000: EA05             IsItRubout:                      ;
1001: EA05 FE 7F                  CP     RUBOUT               ; Non destructive delete             ;
1002: EA07 CA 52 EA               JP     Z,ItIsRubout         ;
1003: EA0A             IsPhysicalEOL:                      ;
1004: EA0A FE 05                  CP     CTRL_E               ;
1005: EA0C CA 5D EA               JP     Z,ItIsPhysicalEOL    ;
1006: EA0F             IsItPrintToggle:                      ;
1007: EA0F FE 10                  CP     CTRL_P               ;
1008: EA11 CA 65 EA               JP     Z,ItIsPrintToggle    ;
1009: EA14             IsItDeleteTheLineX:                      ;
1010: EA14 FE 18                  CP     CTRL_X               ;
1011: EA16 CA 8E EA               JP     Z,DeleteTheLine      ; If CTRL_X go delete the line       ;
1012: EA19             IsItDeleteTheLineU:                      ;
1013: EA19 FE 15                  CP     CTRL_U               ;
1014: EA1B CA AC EA               JP     Z,IgnoreTheLine      ; If CTRL_U ignore the line          ;
1015: EA1E         ;Retype the line                                                             ;
1016: EA1E FE 12                  CP     CTRL_R               ;
1017: EA20 CA 75 EA               JP     Z,RepeatLine         ;
1018: EA23
1019: EA23         ;....................... Echo input back to the Console  ....................;
1020: EA23         ; Full Duplex								                                 ;
1021: EA23         ; A = Character to display	                                                 ;
1022: EA23         ; B = current char count                                                     ;
1023: EA23         ; C = maximum buffer length                                                  ;
1024: EA23         ; HL= buffer pointer                                                         ;
1025: EA23         ;ReadEcho                                                                    ;
1026: EA23 04                     INC    B                    ; Increment byte count		         ;
1027: EA24 23                     INC    HL                   ; Advance the Pointer                ;
1028: EA25 77                     LD     (HL),A               ; Put char in buffer                 ;
1029: EA26         ;
1030: EA26             ReadEchoRubOut:                      ;
1031: EA26 C5                     PUSH   BC                   ; Save index and length              ;
1032: EA27 E5                     PUSH   HL                   ; Save the Pointer                   ;
1033: EA28 4F                     LD     C,A                  ; Get char                           ;
1034: EA29 CD 48 E9               CALL   CaretOut             ; Output to Console (^ if needed)    ;
1035: EA2C E1                     POP    HL                   ; Restore the Pointer                ;
1036: EA2D C1                     POP    BC                   ; Restore index and length           ;
1037: EA2E 7E                     LD     A,(HL)               ; Recall char                        ;
1038: EA2F         ; check for Warm Boot                                                        ;
1039: EA2F FE 03                  CP     CTRL_C               ;
1040: EA31 78                     LD     A,B                  ; Get Line position                  ;
1041: EA32 C2 3A EA               JP     NZ,AreWeAtEndOfBuffer ; Skip if not CTRL_C                 ;
1042: EA35 FE 01                  CP     1                    ; Beginning of the Line?             ;
1043: EA37 CA 00 00               JP     Z,WarmBoot           ;   if yes do the Boot               ;
1044: EA3A         ; Check to see if we are at the end of the buffer                            ;
1045: EA3A             AreWeAtEndOfBuffer:                      ;
1046: EA3A B9                     CP     C                    ; Over Max ?					     ;
1047: EA3B DA ED E9               JP     C,ReadNext           ;  no, Go for more				     ;
1048: EA3E         ;
1049: EA3E         ; At the end of read                                  					     ;
1050: EA3E             EndRead:                        ;
1051: EA3E         ; 	POP		HL                                                               ;
1052: EA3E 2A C3 EA               LD     HL,(paramDE)         ;
1053: EA41 23                     INC    HL                   ;
1054: EA42         ;
1055: EA42 70                     LD     (HL),B               ; Actual length at Pos 0 of Buffer   ;
1056: EA43 0E 0D                  LD     C,CR                 ;
1057: EA45 C3 6B E9               JP     ConsoleOut           ; Send CR to the Console			 ;
1058: EA48         ;....................... Echo input back to the Console  ....................;
1059: EA48         ;.......................... Backspace SPACE BackSpace .......................;
1060: EA48             BSspaceBS:                      ;
1061: EA48 05                     DEC    B                    ;
1062: EA49 2B                     DEC    HL                   ;
1063: EA4A C5                     PUSH   BC                   ;
1064: EA4B E5                     PUSH   HL                   ;
1065: EA4C CD 9F EA               CALL   BackUp               ;
1066: EA4F C3 EF E9               JP     ReadNext0            ;
1067: EA52         ;.......................... Backspace SPACE BackSpace .......................;
1068: EA52         ;.......................... It is RubOut ....................................;
1069: EA52             ItIsRubout:                      ;
1070: EA52         ; RUBOUT if possible                                                         ;
1071: EA52 78                     LD     A,B                  ; Are we at the start of the line    ;
1072: EA53 B7                     OR     A                    ;
1073: EA54 CA ED E9               JP     Z,ReadNext           ; then ignore and go for next char   ;
1074: EA57         ;adjust pointers back one                                                    ;
1075: EA57 7E                     LD     A,(HL)               ; ACC = current character            ;
1076: EA58 05                     DEC    B                    ; Adjust the index			    	 ;
1077: EA59 2B                     DEC    HL                   ; Adjust the pointer                 ;
1078: EA5A C3 26 EA               JP     ReadEchoRubOut       ; Echo back - Full Duplex            ;
1079: EA5D         ;.......................... It is RubOut ....................................;
1080: EA5D         ;.......................... It is PhysicalEOL ...............................;
1081: EA5D             ItIsPhysicalEOL:                      ;
1082: EA5D C5                     PUSH   BC                   ; Save Current Index and Max Count   ;
1083: EA5E E5                     PUSH   HL                   ; Save pointer                       ;
1084: EA5F CD D6 E9               CALL   showCRLF             ; Make new line                      ;
1085: EA62 C3 EF E9               JP     ReadNext0            ;   and go for next char   			 ;
1086: EA65         ;.......................... It is PhysicalEOL ...............................;
1087: EA65         ;.......................... It is PrintToggle ...............................;
1088: EA65             ItIsPrintToggle:                      ;
1089: EA65 E5                     PUSH   HL                   ; Save pointer                       ;
1090: EA66         ; Toggle the printEcho Flag                                                  ;
1091: EA66 21 BF EA               LD     HL,printEchoFlag     ; Point at the flag                  ;
1092: EA69 3E FF                  LD     A,TRUE               ; Load ACC with TRUE                 ;
1093: EA6B BE                     CP     (HL)                 ; Is the flag true?                  ;
1094: EA6C 20 02                  JR     NZ,IsItPrintToggle1  ; Skip if not                        ;
1095: EA6E 3E 00                  LD     A,FALSE              ;   else. load ACC with FALSE        ;
1096: EA70             IsItPrintToggle1:                      ;
1097: EA70 77                     LD     (HL),A               ; Set the Flags new Value	         ;
1098: EA71 E1                     POP    HL                   ; Restore pointer                    ;
1099: EA72 C3 ED E9               JP     ReadNext             ;   and for another char             ;
1100: EA75         ;.......................... It is PrintToggle ...............................;
1101: EA75         ;.......................... RepeatLine ......................................;
1102: EA75             RepeatLine:                      ;
1103: EA75 C5                     PUSH   BC                   ; Save Current Index and Max Count   ;
1104: EA76 E5                     PUSH   HL                   ;  for exit                          ;
1105: EA77 CD C0 E9               CALL   showHashCRLF         ; Display Hash, new Line			 ;
1106: EA7A         ;
1107: EA7A 2A C3 EA               LD     HL,(paramDE)         ; Get start of Buffer                ;
1108: EA7D 23                     INC    HL                   ; Skip past character count          ;
1109: EA7E         ;
1110: EA7E             LL1:                            ;
1111: EA7E 23                     INC    HL                   ; Point at next char to display      ;
1112: EA7F C5                     PUSH   BC                   ; Save counter, in B                 ;
1113: EA80 E5                     PUSH   HL                   ; Save buffer pointer                ;
1114: EA81 4E                     LD     C,M                  ; Get the next character             ;
1115: EA82 CD 48 E9               CALL   CaretOut             ; Display it                         ;
1116: EA85 E1                     POP    HL                   ; Restore                            ;
1117: EA86 C1                     POP    BC                   ;  the counter and pointer           ;
1118: EA87 10 F5                  DJNZ   LL1                  ; loop if still more to show         ;
1119: EA89 E1                     POP    HL                   ; Restore values                     ;
1120: EA8A C1                     POP    BC                   ;  from routine entry                ;
1121: EA8B C3 ED E9               JP     ReadNext             ; Done here !                        ;
1122: EA8E         ;.......................... RepeatLine ......................................;
1123: EA8E         ;.......................... Delete The Line .................................;
1124: EA8E             DeleteTheLine:                      ;
1125: EA8E E1                     POP    HL                   ; Adjust Stack                       ;
1126: EA8F         ;                                             ;
1127: EA8F             DeleteTheLine1:                      ;
1128: EA8F 3A C0 EA               LD     A,(startingColumn)   ;
1129: EA92 21 C1 EA               LD     HL,columnPosition    ;
1130: EA95 BE                     CP     M                    ; Start of line ?                    ;
1131: EA96 D2 E0 E9               JP     NC,ReadString        ;  If yes get out and go for more    ;
1132: EA99 35                     DEC    M                    ; Adjust the ColumnPosition          ;
1133: EA9A CD 9F EA               CALL   BackUp               ; Clear 1 column                     ;
1134: EA9D 18 F0                  JR     DeleteTheLine1       ; Loop for more                      ;
1135: EA9F         ;.......................... Delete The Line .................................;
1136: EA9F         ;------------------------ Back-up one screen position -----------------------;
1137: EA9F             BackUp:                         ;
1138: EA9F CD A7 EA               CALL   BackUp1              ; Send Backspace                     ;
1139: EAA2 0E 20                  LD     C,SPACE              ; Overwrite with SPACE               ;
1140: EAA4 CD 0C F6               CALL   bcConout             ; Overwrite with SPACE				 ;
1141: EAA7         ;does not affect column count                                                ;
1142: EAA7             BackUp1:                        ;
1143: EAA7 0E 08                  LD     C,CTRL_H             ;
1144: EAA9 C3 0C F6               JP     bcConout             ; Send Backspace                     ;
1145: EAAC         ;------------------------ Back-up one screen position -----------------------;
1146: EAAC         ;.......................... Ignore The Line .................................;
1147: EAAC             IgnoreTheLine:                      ;
1148: EAAC CD C0 E9               CALL   showHashCRLF         ; Display Hash, new Line			 ;
1149: EAAF 0E 20                  LD     C,SPACE              ; We want to add a few spaces        ;
1150: EAB1 CD 0C F6               CALL   bcConout             ;  to the console                    ;
1151: EAB4 0E 20                  LD     C,SPACE              ;
1152: EAB6 CD 0C F6               CALL   bcConout             ;
1153: EAB9 C3 E0 E9               JP     ReadString           ; Start all over                     ;
1154: EABC         ;.......................... Ignore The Line .................................;
1155: EABC
1156: EABC         ;------------------------- Read a $ terminated String -----------------------;
1157: EABC
1158: EABC         ;****************************************************************************
1159: EABC         ;                           DATA AREA                                       *
1160: EABC         ;****************************************************************************
1161: EABC
1162: EABC         ;------------------------------Non Disk Data Area ---------------------------;
1163: EABC             usersStack: DS     2                    ; entry stack pointer                ;
1164: EABE         ;
1165: EABE 00          keyboardByte: DB     00                   ; Saved keyboard character           ;
1166: EABF         ;
1167: EABF 00          printEchoFlag: DB     00                   ; Controlled by ^P                   ;
1168: EAC0         ;
1169: EAC0         ; FunctionValue:DB	00H					; Reg C on BDOS Entry                ;
1170: EAC0 00          startingColumn: DB     0                    ; Starting col pos after read        ;
1171: EAC1 00          columnPosition: DB     0                    ; Current Column position            ;
1172: EAC2         ;
1173: EAC2             paramE:    DS     BYTE                 ; Byte Argument for BDOS Call        ;
1174: EAC3             paramDE:   DS     WORD                 ; Word Argument for BDOS Call	     ;
1175: EAC5             exitParameterByte:                      ; Byte returned Value                ;
1176: EAC5             exitParameterWord: DS     WORD                 ; Word                           ;
1177: EAC7         ;
1178: EAC7         ;
1179: EAC7         ;------------------------------------ Data Area -----------------------------;
1180: EAC7
1181: EAC7
1182: EAC7
1183: EAC7         ;****************************************************************************;
1184: EAC7         ;								Disk I/O									 ;
1185: EAC7         ;****************************************************************************;
1186: EAC7
1187: EAC7         ;---------------------------- Reset Disk System - D (13) --------------------;
1188: EAC7         ;  This function requests CP/M to completely reset the disk file system.     ;
1189: EAC7         ; CP/M then resets its internal tables, selects logical disk A as the        ;
1190: EAC7         ; default disk, resets the DMAaddress back to 0080H (the address of the      ;
1191: EAC7         ; buffer used by the BDOS to read and write to the disk), and marks all      ;
1192: EAC7         ; logical disks as having Read/Write status. The BDOS will then have to log  ;
1193: EAC7         ; in each logical disk as each disk is accessed. This involves reading the   ;
1194: EAC7         ; entire file directory for the disk and rebuilding the allocation vectors   ;
1195: EAC7         ; which keep track of which allocation blocks are free and which             ;
1196: EAC7         ; are used for file storage.                                                 ;
1197: EAC7         ;                                                                            ;
1198: EAC7         ;			Function Code	:	C = 0DH                                      ;
1199: EAC7         ;			Entry Parameters:	None										 ;
1200: EAC7         ;			Exit Parameters :	None										 ;
1201: EAC7         ;																			 ;
1202: EAC7         ;---------------------------- Reset Disk System - D (13) --------------------;
1203: EAC7             vResetSystem:
1204: EAC7 21 00 00               LD     HL,0
1205: EACA 22 1F F5               LD     (readOnlyVector),HL  ; Clear the vectors for
1206: EACD 22 21 F5               LD     (loggedDisks),HL     ;   R/O and Logged Disks
1207: EAD0 AF                     XOR    A                    ; Clear the current disk
1208: EAD1 32 1D F5               LD     (currentDisk),A
1209: EAD4         ; note that currentUserNumber remains unchanged
1210: EAD4 21 80 00               LD     HL,DMABuffer
1211: EAD7 22 23 F5               LD     (initDAMAddress),HL  ; initDAMAddress = DMABuffer
1212: EADA CD 0C F0               CALL   SetDataDMA           ; to data DMA address
1213: EADD C3 04 EE               JP     Select
1214: EAE0         ;---------------------------- Select Disk - E (14) -------------------------;
1215: EAE0         ;  This function makes the logical disk named in register E the default disk;
1216: EAE0         ; All subsequent references to disk files that do not specify the disk will ;
1217: EAE0         ; use this default. When you reference a disk file that does have an        ;
1218: EAE0         ; explicit logical disk in its name you do not have to issue another        ;
1219: EAE0         ; Select Disk function; the BDOS will take care of that for you.            ;
1220: EAE0         ;                                                                           ;
1221: EAE0         ;  Notice the way in which the logical disk is specified in register E.     ;
1222: EAE0         ; It is not the same as the disk drive specification in the first byte of   ;
1223: EAE0         ; the file control block. In the FeB, a value ofOOH is used to mean         ;
1224: EAE0         ; "use the current default disk" (as specified in the last Select Disk      ;
1225: EAE0         ; call or by the operator on the console). With this function, a value      ;
1226: EAE0         ; of OOH in register A means that A is the selected drive, a value of       ;
1227: EAE0         ; 01H means drive B, and so on to OFR for drive P, allowing                 ;
1228: EAE0         ; 16 drives in the system.                                                  ;
1229: EAE0         ;                                                                           ;
1230: EAE0         ;			Function Code	:	C = 0EH                                     ;
1231: EAE0         ;			Entry Parameters:	E = Logical Disk Code (00H = A,01H = B ..)	;
1232: EAE0         ;			Exit Parameters :	None										;
1233: EAE0         ;																			;
1234: EAE0         ;---------------------------- Select Disk - E (14) -------------------------;
1235: EAE0
1236: EAE0             vSelectDisk:
1237: EAE0 C3 F8 ED               JP     SelectCurrent
1238: EAE3
1239: EAE3         ;---------------------------- Open File - F (15) ---------------------------;
1240: EAE3         ;  This function opens a specified file for reading or writing. The FCB,    ;
1241: EAE3         ; whose address must be in register DE, tells CP/M the user number,         ;
1242: EAE3         ; the logical disk, the file name, and the file type. All other bytes of    ;
1243: EAE3         ; the FCB will normally be set to O.                                        ;
1244: EAE3         ;  The code returned by the BDOS in register A indicates whether the file   ;
1245: EAE3         ; has been opened successfully. If A contains OFFH, then the BOOS was       ;
1246: EAE3         ; unable to find the correct entry in the directory. If A= 0,1,2, or 3,     ;
1247: EAE3         ; then the file has been opened.                                            ;
1248: EAE3         ;			Function Code	:	C  = 0FH                                    ;
1249: EAE3         ;			Entry Parameters:	DE = Address of File Control Block			;
1250: EAE3         ;			Exit Parameters :	A  = Directory Code							;
1251: EAE3         ;																			;
1252: EAE3         ;---------------------------- Open File - F (15) ---------------------------;
1253: EAE3             vOpenFile:
1254: EAE3 CD C4 F0               CALL   InitializeExtentNumberMSB ; Clear the Extent number
1255: EAE6 CD 45 F0               CALL   ReselectDisk         ; do we need to reselect disk?
1256: EAE9 C3 DB EE               JP     OpenFile
1257: EAEC
1258: EAEC         ;---------------------------- Close File - 10 (16) -------------------------;
1259: EAEC         ;  This function terminates the processing of a file to which you have      ;
1260: EAEC         ; written information. Under CP/M you do not need to close a file that you  ;
1261: EAEC         ; have been reading. However, if you ever intend for your program to        ;
1262: EAEC         ; function correctly under MP/M (the multi-user version of CP/M) you        ;
1263: EAEC         ; should close all files regardless of their use.                           ;
1264: EAEC         ;  The Close File function, like Open File, returns a directory code in     ;
1265: EAEC         ; the A register. Register A will contain OFFH if the BOOS could not        ;
1266: EAEC         ; close the file successfully. If A is 0, 1, 2, or 3, then the file has     ;
1267: EAEC         ; been closed.                                                              ;
1268: EAEC         ;                                                                           ;
1269: EAEC         ;  When the BDOS closes a file to which data has been written, it writes    ;
1270: EAEC         ; the current contents of the FCB out to the disk directory, updating       ;
1271: EAEC         ; an existing directory entry by matching the disk, name, type, and         ;
1272: EAEC         ; extent number in the same manner that the Open File function does.        ;
1273: EAEC         ; Note that the BDOS does not transfer the last record of the file to the   ;
1274: EAEC         ; disk during the close operation. It merely updates the file directory.    ;
1275: EAEC         ; You must arrange to flush any partly filled record to the disk. If the    ;
1276: EAEC         ; file that you have created is a standard CP/M ASCII text file, you must   ;
1277: EAEC         ; arrange to fill the unused portion of the record with the standard lAH    ;
1278: EAEC         ; end-of-file characters as CP/M expects.                                   ;
1279: EAEC         ;                                                                           ;
1280: EAEC         ;			Function Code	:	C  = 10H                                    ;
1281: EAEC         ;			Entry Parameters:	DE = Address of File Control Block			;
1282: EAEC         ;			Exit Parameters :	A  = Directory Code							;
1283: EAEC         ;																			;
1284: EAEC         ;---------------------------- Close File - 10 (16) -------------------------;
1285: EAEC             vCloseFile:
1286: EAEC CD 45 F0               CALL   ReselectDisk
1287: EAEF C3 1E EF               JP     CloseDirEntry
1288: EAF2         ;---------------------Search for First Name Match - 11 (17) ----------------;
1289: EAF2         ;  This function scans down the file directory for the first entry that     ;
1290: EAF2         ; matches the file name, type, and extent in the FCB addressed by DE.       ;
1291: EAF2         ; The file name, type, and extent may contain a "?" (ASCII 3FH) in one or   ;
1292: EAF2         ; more character positions. Where a "?" occurs, the BDOS will match any     ;
1293: EAF2         ; character in the corresponding position in the file directory. This is    ;
1294: EAF2         ; known as ambiguous file name matching.                                    ;
1295: EAF2         ;  The first byte of an FCB normally contains the logical disk number code. ;
1296: EAF2         ; A value of 0 indicates the default disk, while 1 means disk A, 2 is B,    ;
1297: EAF2         ; and so on up to a possible maximum of 16 for disk P. However, if this     ;
1298: EAF2         ; byte contains a "?", the BDOS will search the default logical disk and    ;
1299: EAF2         ; will match the file name and type regardless of the user number. This     ;
1300: EAF2         ; function is normally used in conjunction with the Search Next function.   ;
1301: EAF2         ; Search First, in the process of matching a file, leaves certain           ;
1302: EAF2         ; variables in the BDOS set, ready for a subsequent Search Next.            ;
1303: EAF2         ;  Both Search First and Search Next return a directory code in the         ;
1304: EAF2         ; A register. With Search First, A = OFFH when no files match the FCB,      ;
1305: EAF2         ; if a file match is found, A will have a value of 0, I, 2, or 3.           ;
1306: EAF2         ;                                                                           ;
1307: EAF2         ;  To locate the particular directory entry that either the Search First    ;
1308: EAF2         ; or Search Next function matched, multiply the directory code returned     ;
1309: EAF2         ; in A by the length of a directory entry (32 bytes). This is easily done   ;
1310: EAF2         ; by adding the A register to itself five times. Then add the DMA address   ;
1311: EAF2         ; to get the actual address where the matched directory entry is stored.    ;
1312: EAF2         ;  There are many occasions when you may need to write a program that will  ;
1313: EAF2         ; accept an ambiguous file name and operate on all of the file names that   ;
1314: EAF2         ; match it. (The DIR and ERA commands built into the CCP are examples that  ;
1315: EAF2         ; use ambiguous file names.) To do this, you must use several BDOS          ;
1316: EAF2         ; functions: the Set DMA Address function (code 26), this function          ;
1317: EAF2         ; (Search First), and Search Next (code 18). All of this is shown in the    ;
1318: EAF2         ; subroutine given in Figure 5-17.                                          ;
1319: EAF2         ;                                                                           ;
1320: EAF2         ;                                                                           ;
1321: EAF2         ;			Function Code	:	C  = 11H                                    ;
1322: EAF2         ;			Entry Parameters:	DE = Address of File Control Block			;
1323: EAF2         ;			Exit Parameters :	A  = Directory Code							;
1324: EAF2         ;																			;
1325: EAF2         ;---------------------Search for First Name Match - 11 (17) ----------------;
1326: EAF2             vFindFirst:
1327: EAF2 0E 00                  LD     C,0                  ; Length assuming '?' true
1328: EAF4 2A C3 EA               LD     HL,(paramDE)         ; Get the FCB
1329: EAF7 7E                     LD     A,(HL)               ; DIsk/User No
1330: EAF8 FE 3F                  CP     QMARK                ; Does it contain '?' ?
1331: EAFA CA 05 EB               JP     Z,QMarkFind          ;  if Yes, skip disk reselect
1332: EAFD         ;  and reset of EXT
1333: EAFD
1334: EAFD CD C4 F0               CALL   InitializeExtentNumberMSB ; Set Ext to 0
1335: EB00 CD 45 F0               CALL   ReselectDisk         ; Use FCB to set currentDisk
1336: EB03 0E 0F                  LD     C,nameLength         ; Match name,type and extent
1337: EB05
1338: EB05             QMarkFind:
1339: EB05 CD F0 F0               CALL   SearchForDirectoryRecord ; Find the directory record
1340: EB08 C3 6D F2               JP     CopyDirEntryToUserDMA ; Move it to the User's buffer
1341: EB0B
1342: EB0B         ;---------------------Search for Next Name Match - 12 (18) -----------------;
1343: EB0B         ;	This function searches down the file directory for the next file name,  ;
1344: EB0B         ; type, and extent that match the FCB specified in a previous Search First  ;
1345: EB0B         ; function call. Search First and Search Next are the only BDOS functions   ;
1346: EB0B         ; that must be used together. As you can see, the Search Next function      ;
1347: EB0B         ; does not require an FCB address as an input parameter-all the necessary   ;
1348: EB0B         ; information will have been left in the BDOS on the Search First call.     ;
1349: EB0B         ; Like Search First, Search Next returns a directory code in the A register,;
1350: EB0B         ; in this case, if A = OFFH, it means that there are no more files that     ;
1351: EB0B         ; match the file control block. If A is not OFFH, it will be a value of     ;
1352: EB0B         ; 0, 1, 2, or 3, indicating the relative directory entry number.            ;
1353: EB0B         ;                                                                           ;
1354: EB0B         ;  There are two ways of using the Search First/ Next calls. Consider a     ;
1355: EB0B         ; simple file copying program that takes as input an ambiguous file name.   ;
1356: EB0B         ; You could scan the file directory, matching all of the possible file      ;
1357: EB0B         ; names, possibly displaying them on the console, and storing the names of  ;
1358: EB0B         ; the files to be copied in a table inside your program. This would have    ;
1359: EB0B         ; the advantage of enabling you to present the file names to the operator   ;
1360: EB0B         ; before any copying occurred. You could even arrange for the operator to   ;
1361: EB0B         ; select which files to copy on a file-by-file basis. One disadvantage      ;
1362: EB0B         ; would be that you could not accurately predict how many files might be    ;
1363: EB0B         ; selected. On some hard disk systems you might have to accommodate several ;
1364: EB0B         ; thousand file names.                                                      ;
1365: EB0B         ;  The alternative way of handling the problem would be to match one file   ;
1366: EB0B         ; name, copy it, then match the next file name, copy it, and so on. If you  ;
1367: EB0B         ; gave the operator the choice of selecting which files to copy, this person;
1368: EB0B         ; would have to wait at the terminal as each file was being copied, but the ;
1369: EB0B         ; program would not need to have large table areas set aside to hold file   ;
1370: EB0B         ; names. This solution to the problem is slightly more complicated, as you  ;
1371: EB0B         ; can see from the logic in Figure 5-17.                                    ;
1372: EB0B         ;  The subroutine in Figure 5-17, Get Next File (GNF), contains all of the  ;
1373: EB0B         ; necessary logic to search down a directory for both alternatives described;
1374: EB0B         ; It does require that you indicate on entry whether it should search for   ;
1375: EB0B         ; the first or next file match, by setting A to zero or some nonzero value  ;
1376: EB0B         ; respectively.                                                             ;
1377: EB0B         ;  You can see from Figure 5-17 that whenever the subroutine is called to   ;
1378: EB0B         ; get the next file, you must execute a Search First function to re-find    ;
1379: EB0B         ; the  previous file. Only then can a Search Next be issued. As with all    ;
1380: EB0B         ; functions that return a directory code in A, if this value is not OFFH, it;
1381: EB0B         ; will be the relative directory entry number in the directory record       ;
1382: EB0B         ; currently in memory. This directory record will have been read into memory;
1383: EB0B         ; at whatever address was specified at the last Set DMA Address function    ;
1384: EB0B         ; call. Notwithstanding its odd name, the DMA Address is simply the address ;
1385: EB0B         ; into which any record input from disk will be placed. If the Set DMA      ;
1386: EB0B         ; Address function has not been used to change the value, then the CP/M     ;
1387: EB0B         ; default DMA address, location 0080H, will be used to hold the directory   ;
1388: EB0B         ; record.                                                                   ;
1389: EB0B         ;  The actual code for locating the address of the particular directory     ;
1390: EB0B         ;  entry matched by the Search First/ Next functions is shown in Figure 5-17;
1391: EB0B         ;  near the label GNFC. The method involves multiplying the directory code  ;
1392: EB0B         ;  by 32 and then adding this product to the current DMA address.	        ;
1393: EB0B         ;                                                                           ;
1394: EB0B         ;                                                                           ;
1395: EB0B         ;			Function Code	:	C  = 12H                                    ;
1396: EB0B         ;			Entry Parameters:	None , Assume previous Search First Call	;
1397: EB0B         ;			Exit Parameters :	A  = Directory Code							;
1398: EB0B         ;																			;
1399: EB0B         ;---------------------Search for Next Name Match - 12 (18) -----------------;
1400: EB0B             vFindNext:
1401: EB0B 2A 4A F5               LD     HL,(searchAddress)   ; Get Current Dir Entry
1402: EB0E 22 C3 EA               LD     (paramDE),HL         ; Get the user's FCB
1403: EB11 CD 45 F0               CALL   ReselectDisk         ; Reselect if needed
1404: EB14 CD 05 F1               CALL   GetNextDirectoryRecord ; Go find the next directory record
1405: EB17 C3 6D F2               JP     CopyDirEntryToUserDMA ; Copy directory entry to user
1406: EB1A
1407: EB1A         ;--------------------------------Delete File - 13 (19) ---------------------;
1408: EB1A         ; This function logically deletes from the file directory files that match  ;
1409: EB1A         ; the FCB addressed by DE. It does so by replacing the first byte of each   ;
1410: EB1A         ; relevant directory entry (remember, a single file can have several        ;
1411: EB1A         ; entries, one for each extent) by the value OE5H. This flags the directory ;
1412: EB1A         ; entry as being available for use.                                         ;
1413: EB1A         ;                                                                           ;
1414: EB1A         ;  Like the previous two functions, Search First and Search Next, this      ;
1415: EB1A         ; function can take an ambiguous file name and type as part of the          ;
1416: EB1A         ; File Control Block, but unlike those functions, the logical disk select   ;
1417: EB1A         ; code cannot be a"?". This function returns a directory code in A in the   ;
1418: EB1A         ; same way as the previous file operations.                                 ;
1419: EB1A         ;                                                                           ;
1420: EB1A         ;                                                                           ;
1421: EB1A         ;			Function Code	:	C  = 13H                                    ;
1422: EB1A         ;			Entry Parameters:	DE = Address of File Control Block			;
1423: EB1A         ;			Exit Parameters :	A  = Directory Code							;
1424: EB1A         ;																			;
1425: EB1A         ;--------------------------------Delete File - 13 (19) ---------------------;
1426: EB1A             vDeleteFile:
1427: EB1A CD 45 F0               CALL   ReselectDisk         ; Reselect if needed
1428: EB1D CD 81 F2               CALL   CheckWrite           ; Terminate with error if Disk R/O
1429: EB20 0E 0C                  LD     C,fcbExtIndex        ; Load the extent number field
1430: EB22 CD F0 F0               CALL   SearchForDirectoryRecord ; Look for directory entry
1431: EB25
1432: EB25             DeleteFileLoop:
1433: EB25 CD 9E F1               CALL   AtEndOfDirectory     ; Have we worked thru all entries
1434: EB28 CA 7A F2               JP     Z,DirLocationToReturnLoc ; Return directory Index to caller
1435: EB2B
1436: EB2B         ; set each non zero disk map entry to 0 in the allocation vector
1437: EB2B CD 88 F2               CALL   CheckRODirectory     ; Terminate with error if File R/O
1438: EB2E CD A7 F1               CALL   GetCurrentDirectoryRecord ; Point to Directory Entry
1439: EB31 36 E5                  LD     (HL),emptyDir        ; Mark as Empty
1440: EB33 0E 00                  LD     C,FALSE              ; Set flag for remove
1441: EB35 CD CB F1               CALL   ScanDiskMap          ; Reclaim Bisk Blocks, set to 0
1442: EB38 CD 6D F1               CALL   WriteDir             ; Update the directory
1443: EB3B CD 05 F1               CALL   GetNextDirectoryRecord ; Look for more
1444: EB3E C3 25 EB               JP     DeleteFileLoop       ; Loop
1445: EB41
1446: EB41         ;----------------------------Read Sequential - 14 (20) ---------------------;
1447: EB41         ;  This function reads the next record (l28-byte sector) from the designated;
1448: EB41         ; file into memory at the address set by the last Set DMA function call     ;
1449: EB41         ; (code 26, lAH). The record read is specified by the FCB's sequential      ;
1450: EB41         ; record field. This field is incremented by 1 so that a subsequent call    ;
1451: EB41         ; to Read Sequential will get the next record from the file. If the end of  ;
1452: EB41         ; the current extent is reached, then the BDOS will automatically open the  ;
1453: EB41         ; next extent and reset the sequential record field to 0, ready for the     ;
1454: EB41         ; next Read function call.                                                  ;
1455: EB41         ;  The file specified in the FCB must have been readied for input by        ;
1456: EB41         ; issuing an Open File (code 15, OFH) or a Create File (code 22, 16H)       ;
1457: EB41         ; BDOS call. The value OOH is returned in A to indicate a successful Read   ;
1458: EB41         ; Sequential operation, while a nonzero value shows that the Read could     ;
1459: EB41         ; not be completed because there was no data in the next record, as at the  ;
1460: EB41         ; end of file.                                                              ;
1461: EB41         ;                                                                           ;
1462: EB41         ;  Although it is not immediately obvious, you can change the sequential    ;
1463: EB41         ; record number, FCB$SEQREC, and within a given extent, read a record at    ;
1464: EB41         ; random. If you want to access any given record within a file, you must    ;
1465: EB41         ; compute which extent that record would be in and set the extent field in  ;
1466: EB41         ; the file control block (FCB$EXTENT) before you open the file. Thus,       ;
1467: EB41         ; although the function name implies sequential access, in practice you can ;
1468: EB41         ; use it to perform a simple type of random access. If you need to do true  ;
1469: EB41         ; random access, look ahead to the Random Read function (code 33), which    ;
1470: EB41         ; takes care of opening the correct extent automatically.                   ;
1471: EB41         ;  When you read data from a CP/M text file, the normal convention is to    ;
1472: EB41         ; fill the last record of the file with lAH characters (CONTROL-Z).         ;
1473: EB41         ; Therefore, two possible conditions can indicate end-of-file: either       ;
1474: EB41         ; encountering a IAH, or receiving a return code from the BDOS function     ;
1475: EB41         ; (in the A register) of OFFH. However, if the file that you are reading    ;
1476: EB41         ; is not an ASCII text file, then a IAH character has no special meaning,   ;
1477: EB41         ; it is just a normal data byte in the body of the file.	                ;
1478: EB41         ;                                                                           ;
1479: EB41         ;			Function Code	:	C  = 14H                                    ;
1480: EB41         ;			Entry Parameters:	DE = Address of File Control Block			;
1481: EB41         ;			Exit Parameters :	A  = 0  => Success							;
1482: EB41         ;								  <> 0  => No data read, Probably EOF		;
1483: EB41         ;																			;
1484: EB41         ;----------------------------Read Sequential - 14 (20) ---------------------;
1485: EB41             vReadSeq:
1486: EB41 CD 45 F0               CALL   ReselectDisk         ; Reselect if needed
1487: EB44         ;ReadSeq:
1488: EB44 3E 01                  LD     A,SEQ_ACCESS
1489: EB46 32 42 F5               LD     (diskAccessType),A   ; Set flag as sequential Disk I/O
1490: EB49
1491: EB49             DiskRead:
1492: EB49 3E FF                  LD     A,TRUE
1493: EB4B 32 46 F5               LD     (readModeFlag),A     ; Set Flag for read
1494: EB4E
1495: EB4E CD 72 F0               CALL   SetRecordVars        ; Set variables for current FCB
1496: EB51 3A 52 F5               LD     A,(currentFileRecord)
1497: EB54 21 50 F5               LD     HL,fcbRecordCount
1498: EB57 BE                     CP     M                    ; is File Record < fcbRecordCount
1499: EB58 DA 6E EB               JP     C,RecordOK           ; skip if  yes
1500: EB5B         ; not enough records in the extent
1501: EB5B FE 80                  CP     RecordsPerExtent     ; Is record count the Max ?
1502: EB5D C2 84 EB               JP     NZ,NothingRead       ;  No, Exit with EOF
1503: EB60
1504: EB60 CD 00 F3               CALL   OpenNextExt          ; Need to open the next extent
1505: EB63 AF                     XOR    A
1506: EB64 32 52 F5               LD     (currentFileRecord),A ; Reset the record count
1507: EB67 3A C5 EA               LD     A,(exitParameterByte) ; Was it a good Open
1508: EB6A B7                     OR     A
1509: EB6B C2 84 EB               JP     NZ,NothingRead       ;  exit if No
1510: EB6E
1511: EB6E             RecordOK:
1512: EB6E CD B0 F2               CALL   GetBlockNumber       ; Put it in absoluteCPMRecord
1513: EB71 CD E2 F2               CALL   WasBlockAllocated    ; Was it a good Allocation ?
1514: EB74 CA 84 EB               JP     Z,NothingRead        ; get out if not allocated
1515: EB77
1516: EB77 CD E8 F2               CALL   SetActualRecordAdd   ; Absolute CPM Record
1517: EB7A CD D4 F3               CALL   Seek                 ; Go to proper track,sector
1518: EB7D CD 1A F0               CALL   ReadBuffer           ; Read into DMA address
1519: EB80 CD 85 F1               CALL   UpdateRecordVariables ; update Record info
1520: EB83 C9                     RET
1521: EB84
1522: EB84             NothingRead:
1523: EB84 C3 86 F3               JP     SetExitParamTo1      ; No Data read
1524: EB87
1525: EB87         ;----------------------------Write Sequential - 15 (21) --------------------;
1526: EB87         ;	This function writes a record from the address specified in the last Set;
1527: EB87         ; DMA (code 26, lAH) function call to the file defined in the FCB. The      ;
1528: EB87         ; sequential record number in the FCB (RC) is updated by 1 so that          ;
1529: EB87         ; the next call to Write Sequential will write to the next record position  ;
1530: EB87         ; in the file. If necessary, a new extent will be opened to receive the new ;
1531: EB87         ; record.                                                                   ;
1532: EB87         ;  This function is directly analogous to the Read Sequential function,     ;
1533: EB87         ; writing instead of reading. The file specified in the FCB must first be   ;
1534: EB87         ; activated by an Open File (code 15,OFH) or create File call (code 22,16H).;
1535: EB87         ;  A directory code of OOH is returned in A to indicate that the Write was  ;
1536: EB87         ; successful, a nonzero value is returned if the Write could not be         ;
1537: EB87         ; completed because the disk was full.                                      ;
1538: EB87         ;                                                                           ;
1539: EB87         ;  As with the Read Sequential function (code 20, 14H), you can achieve     ;
1540: EB87         ; a simple form of random writing to the file by manipulating the           ;
1541: EB87         ; sequential record number (RC). However, you can only overwrite existing   ;
1542: EB87         ; records in the file, and if you want to move to another extent, you       ;
1543: EB87         ; must close the file and reopen it with the FCB$EXTENT field set to the    ;
1544: EB87         ; correct value.                                                            ;
1545: EB87         ;  The only logical error condition that can occur when writing to a file   ;
1546: EB87         ; is insufficient room on the disk to accommodate the next extent of the    ;
1547: EB87         ; file. Any hardware errors detected will be handled by the disk driver     ;
1548: EB87         ; built into the BIOS or BDOS.                                              ;
1549: EB87         ;                                                                           ;
1550: EB87         ;                                                                           ;
1551: EB87         ;			Function Code	:	C  = 15H                                    ;
1552: EB87         ;			Entry Parameters:	DE = Address of File Control Block			;
1553: EB87         ;			Exit Parameters :	A  = 0  => Success							;
1554: EB87         ;								  <> 0  => No data read, Probably EOF		;
1555: EB87         ;																			;
1556: EB87         ;----------------------------Write Sequential - 15 (21) --------------------;
1557: EB87
1558: EB87             vWriteSeq:
1559: EB87 CD 45 F0               CALL   ReselectDisk         ; Reselect if needed
1560: EB8A         ;	CALL	DiskWriteSeq
1561: EB8A         ;	RET
1562: EB8A         ;====================
1563: EB8A         ;sequential disk write
1564: EB8A             DiskWriteSeq:
1565: EB8A 3E 01                  LD     A,SEQ_ACCESS
1566: EB8C 32 42 F5               LD     (diskAccessType),A   ; Set flag as sequential Disk I/O
1567: EB8F
1568: EB8F             DiskWrite:
1569: EB8F 3E 00                  LD     A,FALSE
1570: EB91 32 46 F5               LD     (readModeFlag),A     ; Set Flag for Write
1571: EB94
1572: EB94 CD 81 F2               CALL   CheckWrite           ; Terminate with error if Disk R/O
1573: EB97 2A C3 EA               LD     HL,(paramDE)         ; Put FCB in HL
1574: EB9A CD 8B F2               CALL   CheckROFile          ; Terminate with error if File R/O
1575: EB9D CD 72 F0               CALL   SetRecordVars        ; Set variables for current FCB
1576: EBA0 3A 52 F5               LD     A,(currentFileRecord) ; Get current record number
1577: EBA3 FE 80                  CP     highestRecordNumber+1 ; Is it still in the same extent?
1578: EBA5 D2 86 F3               JP     NC,SetExitParamTo1   ; Exit with NO WRITE set
1579: EBA8
1580: EBA8 CD B0 F2               CALL   GetBlockNumber       ; Compute disk block number
1581: EBAB CD E2 F2               CALL   WasBlockAllocated    ; Is it really allocated ?
1582: EBAE 0E 00                  LD     C,WriteAllocated     ; Assume a normal write operation
1583: EBB0 C2 FA EB               JP     NZ,HaveWriteBlock    ;  Skip if block already allocated
1584: EBB3         ; not allocated -
1585: EBB3         ; the argument to getblock is the starting position for the disk search
1586: EBB3         ; and should be the last allocated block for this file,
1587: EBB3         ; or the value 0 if no space has been allocated
1588: EBB3
1589: EBB3 CD BD F2               CALL   GetDiskMapIndex      ; Disk Map Index in ACC
1590: EBB6 32 48 F5               LD     (diskMapIndex),A     ; Save it
1591: EBB9 01 00 00               LD     BC,0000h             ; Anticipate using 0000
1592: EBBC B7                     OR     A                    ; Is it block 0?
1593: EBBD 28 07                  JR     Z,FindAvailableBlock ;  skip if yes
1594: EBBF
1595: EBBF 4F                     LD     C,A                  ;  else a previous block exists
1596: EBC0 0B                     DEC    BC                   ; Adjust the index
1597: EBC1 CD CA F2               CALL   GetDiskMapValue      ; Put previous block # into HL
1598: EBC4 44                     LD     B,H                  ; Move previous block
1599: EBC5 4D                     LD     C,L                  ;  number into BC
1600: EBC6
1601: EBC6             FindAvailableBlock:
1602: EBC6 CD F7 F1               CALL   GetClosestBlock      ; Block number in HL
1603: EBC9 7D                     LD     A,L                  ; If no available blocks HL
1604: EBCA B4                     OR     H                    ;  HL set to 0000H
1605: EBCB 20 06                  JR     NZ,FoundAvailableBlock ; Skip if found
1606: EBCD
1607: EBCD 3E 02                  LD     A,2                  ; Load return value
1608: EBCF 32 C5 EA               LD     (exitParameterByte),A ; Save for caller
1609: EBD2 C9                     RET                         ; Exit with exitParameterByte=2
1610: EBD3
1611: EBD3             FoundAvailableBlock:
1612: EBD3 22 54 F5               LD     (absoluteCPMRecord),HL ; Save the block number
1613: EBD6 EB                     EX     DE,HL                ; block number to DE (E)
1614: EBD7 2A C3 EA               LD     HL,(paramDE)         ; HL at FCB
1615: EBDA 01 10 00               LD     BC,fcbDiskMapIndex   ; Index to start of FCB Map
1616: EBDD 09                     ADD    HL,BC                ; HL=.start of FCB Map
1617: EBDE
1618: EBDE
1619: EBDE 3A 48 F5               LD     A,(diskMapIndex)     ; Get target block index
1620: EBE1 4F                     LD     C,A                  ; Map index to C
1621: EBE2 06 00                  LD     B,0                  ; Set MSB to 00
1622: EBE4 09                     ADD    HL,BC                ; Calculate 8 bit block's location
1623: EBE5 3A 4C F5               LD     A,(byteAllocationFlag) ; Get allocation size flag
1624: EBE8 B7                     OR     A                    ; Test it
1625: EBE9 28 04                  JR     Z,Allocate16Bit      ; Skip if allocating word
1626: EBEB
1627: EBEB 73                     LD     (HL),E               ; Update the Map
1628: EBEC C3 F3 EB               JP     MarkNewBlock         ; Skip 16 bit calculations
1629: EBEF
1630: EBEF             Allocate16Bit:
1631: EBEF 09                     ADD    HL,BC                ; Adjust for 16 bit value
1632: EBF0 72                     LD     (HL),D               ; Save MSB
1633: EBF1 23                     INC    HL
1634: EBF2 73                     LD     (HL),E               ; SAVE LSB
1635: EBF3             MarkNewBlock:
1636: EBF3         ;	CALL	ResetFileWriteFlag
1637: EBF3 CD CA F0               CALL   GetWriteFileFlagValue ; HL = Address of fcbS2
1638: EBF6 CB BE                  RES    7,(HL)               ; Reset the FileWriteFlag
1639: EBF8 0E 02                  LD     C,WriteCleanBuffer   ; Marked as unallocated write
1640: EBFA
1641: EBFA             HaveWriteBlock:
1642: EBFA 3A C5 EA               LD     A,(exitParameterByte)
1643: EBFD B7                     OR     A
1644: EBFE C0                     RET    NZ                   ; Exit if non zero returned value ??
1645: EBFF
1646: EBFF C5                     PUSH   BC                   ; Write flag (in C)
1647: EC00 CD E8 F2               CALL   SetActualRecordAdd   ; Set absoluteCPMRecord
1648: EC03 CD D4 F3               CALL   Seek                 ; Seek to o proper file position
1649: EC06 C1                     POP    BC                   ; Write flag (in C)
1650: EC07 C5                     PUSH   BC                   ; Write flag (in C)
1651: EC08 CD 7D F1               CALL   WriteBuffer          ; Write buffer and check result
1652: EC0B C1                     POP    BC                   ; Write flag (in C)
1653: EC0C
1654: EC0C 3A 52 F5               LD     A,(currentFileRecord) ; Get the current record
1655: EC0F 21 50 F5               LD     HL,fcbRecordCount    ; Get the starting FCB record count
1656: EC12 BE                     CP     M                    ; Current File Record > fcbRecordCount
1657: EC13 DA 1A EC               JP     C,DiskWrite1         ;  skip if yes
1658: EC16 77                     LD     (HL),A               ; update the FCB RC
1659: EC17 34                     INC    M                    ; fcbRecordCount = current File Record+1
1660: EC18 0E 02                  LD     C,WriteCleanBuffer   ; Marked as unallocated write
1661: EC1A             DiskWrite1:
1662: EC1A         ; A has current File Record, C=2 if new block or new record#
1663: EC1A 0D                     DEC    C
1664: EC1B 0D                     DEC    C                    ; Check if C = unallocated write
1665: EC1C C2 26 EC               JP     NZ,DiskWrite2        ; Skip if C not unallocated write
1666: EC1F F5                     PUSH   AF                   ; currentFileRecord
1667: EC20 CD CA F0               CALL   GetWriteFileFlagValue ; HL points to FCB s2
1668: EC23 CB BE                  RES    7,(HL)               ; Reset WriteFileFlag
1669: EC25 F1                     POP    AF                   ; currentFileRecord
1670: EC26             DiskWrite2:
1671: EC26         ; check for end of extent, if found attempt
1672: EC26         ; to open next extent in preparation for next write
1673: EC26 FE 7F                  CP     highestRecordNumber  ; Space for more records ?
1674: EC28 C2 46 EC               JP     NZ,DiskWriteCleanup  ;  finish up if Yes
1675: EC2B
1676: EC2B 3A 42 F5               LD     A,(diskAccessType)   ; Is this using Random Access
1677: EC2E B7                     OR     A
1678: EC2F CA 46 EC               JP     Z,DiskWriteCleanup   ;  finish up if Yes
1679: EC32
1680: EC32 CD 85 F1               CALL   UpdateRecordVariables ; Update variables from I/O in  FCB
1681: EC35 CD 00 F3               CALL   OpenNextExt          ; Acc = 0 OK, Acc = 1 Failed
1682: EC38 21 C5 EA               LD     HL,exitParameterByte
1683: EC3B 7E                     LD     A,(HL)               ; Put Open  result in parameter
1684: EC3C B7                     OR     A                    ; Is it 00
1685: EC3D C2 44 EC               JP     NZ,DiskWriteCleanup0 ;  no, skip currentRecord update
1686: EC40 3D                     DEC    A                    ; A gets FF
1687: EC41 32 52 F5               LD     (currentFileRecord),A ; Update currentFileRecord
1688: EC44
1689: EC44             DiskWriteCleanup0:
1690: EC44 36 00                  LD     (HL),0               ; Set exitParameterByte
1691: EC46             DiskWriteCleanup:
1692: EC46 C3 85 F1               JP     UpdateRecordVariables ; update variables from I/O in  FCB
1693: EC49
1694: EC49
1695: EC49         ;--------------------------------- Make File - 16 (22) ---------------------;
1696: EC49         ;  This function creates a new file of the specified name and type. You must;
1697: EC49         ; first ensure that no file of the same name and type already exists on the ;
1698: EC49         ; same logical disk, either by trying to open the file (if this succeeds,   ;
1699: EC49         ; the file already exists) or by unconditionally erasing the file.          ;
1700: EC49         ;  In addition to creating the file and its associated file directory entry,;
1701: EC49         ; this function also effectively opens the file so that it is ready for     ;
1702: EC49         ; records to be written to it.                                              ;
1703: EC49         ;  This function returns a normal directory code if the file creation has   ;
1704: EC49         ; completed successfully or a value of OFFH if there is insufficient        ;
1705: EC49         ; disk or directory space.                                                  ;
1706: EC49         ;  Note that this function cannot accept an ambiguous file name in the FCB. ;
1707: EC49         ;                                                                           ;
1708: EC49         ;                                                                           ;
1709: EC49         ;			Function Code	:	C  = 16H                                    ;
1710: EC49         ;			Entry Parameters:	DE = Address of File Control Block			;
1711: EC49         ;			Exit Parameters :	A  = Directory Code							;
1712: EC49         ;																			;
1713: EC49         ;---------------------------- Make File - 16 (22) --------------------------;
1714: EC49             vMakeFile:
1715: EC49 CD C4 F0               CALL   InitializeExtentNumberMSB ; Clear the Extent number
1716: EC4C CD 45 F0               CALL   ReselectDisk         ; Reselect if needed
1717: EC4F C3 9E EF               JP     MakeNewFile          ; Go Make it
1718: EC52
1719: EC52         ;-------------------------- Rename File - 17 (23) --------------------------;
1720: EC52         ;  This function renames an existing file name and type to a new name and   ;
1721: EC52         ; type. It is unusual in that it uses a single FCB to store both the old    ;
1722: EC52         ; file name and type (in the first 16 bytes) and the new file name and type ;
1723: EC52         ; (in the second 16 bytes).                                                 ;
1724: EC52         ;  This function returns a normal directory code if the file rename was     ;
1725: EC52         ; completed successfully or a value of OFFH if the old file name could not  ;
1726: EC52         ; be found.                                                                 ;
1727: EC52         ;                                                                           ;
1728: EC52         ;  The Rename File function only checks that the old file name and type     ;
1729: EC52         ; exist; it makes no check to ensure that the new name and type combination ;
1730: EC52         ; does not already exist. Therefore, you should try to open the new file    ;
1731: EC52         ; name and type. If you succeed, do not attempt the rename operation.       ;
1732: EC52         ; CP/M will create more than one file of the same name and type, and you    ;
1733: EC52         ; stand to lose the information in both files as you attempt to sort out    ;
1734: EC52         ; the problem.                                                              ;
1735: EC52         ;  Never use ambiguous file names in a rename operation; it produces strange;
1736: EC52         ; effects and may result in files being irreparably damaged. This function  ;
1737: EC52         ; will change all occurrences of the old file name to the new name.         ;
1738: EC52         ;                                                                           ;
1739: EC52         ;                                                                           ;
1740: EC52         ;			Function Code	:	C  = 17H                                   ;
1741: EC52         ;			Entry Parameters:	DE = Address of File Control Block			;
1742: EC52         ;			Exit Parameters :	A  = Directory Code							;
1743: EC52         ;																			;
1744: EC52         ;-------------------------- Rename File - 17 (23) --------------------------;
1745: EC52             vRenameFile:
1746: EC52 CD 45 F0               CALL   ReselectDisk         ; Reselect if needed
1747: EC55 CD 81 F2               CALL   CheckWrite           ; Terminate with error if Disk R/O
1748: EC58 0E 0C                  LD     C,fcbExtIndex        ; Match user#, Name & Type only
1749: EC5A CD F0 F0               CALL   SearchForDirectoryRecord
1750: EC5D
1751: EC5D         ; Move the old use number to the new entry (2nd half of FCB)
1752: EC5D 2A C3 EA               LD     HL,(paramDE)         ; FCB pointer
1753: EC60 7E                     LD     A,(HL)               ; First byte of Dir entry
1754: EC61 11 10 00               LD     DE,fcbDiskMapIndex   ; Use second half of FCB
1755: EC64 19                     ADD    HL,DE                ; Point at the second half of FCB
1756: EC65 77                     LD     (HL),A               ; Put into new name user position
1757: EC66
1758: EC66             RenameLoop:
1759: EC66 CD 9E F1               CALL   AtEndOfDirectory     ; If have we checked the whole dir
1760: EC69 CA 7A F2               JP     Z,DirLocationToReturnLoc ;  return directory Index to caller
1761: EC6C         ; process this match
1762: EC6C CD 88 F2               CALL   CheckRODirectory     ; Terminate with error if File R/O
1763: EC6F 0E 10                  LD     C,fcbDiskMapIndex    ; Set starting position
1764: EC71 1E 0C                  LD     E,fcbExtIndex        ; Set Length
1765: EC73 CD 99 F2               CALL   CopyDir              ; copy from FCB to dir entry
1766: EC76         ; element renamed, look for more
1767: EC76 CD 05 F1               CALL   GetNextDirectoryRecord ; Look for more dir entries
1768: EC79 C3 66 EC               JP     RenameLoop           ; Loop
1769: EC7C
1770: EC7C         ;---------------------------- Get Active Disks - 18 (24) --------------------;
1771: EC7C         ; This function returns a bit map, called the login vector, in register pair ;
1772: EC7C         ; HL, indicating which logical disk drives have been selected since the last ;
1773: EC7C         ; warm boot or Reset Disk function (code 13, ODH). The least significant bit ;
1774: EC7C         ; of L corresponds to disk A, while the highest order bit in H maps disk P.  ;
1775: EC7C         ; The bit corresponding to the specific logical disk is set to 1 if the      ;
1776: EC7C         ; disk has been selected or to 0 if the disk is not currently on-line.       ;
1777: EC7C         ;  Logical disks can be selected programmatically through any file operation ;
1778: EC7C         ; that sets the drive field to a nonzero value, through the Select Disk      ;
1779: EC7C         ; function (code 14, OEH), or by the operator entering an "X:" command       ;
1780: EC7C         ; where "X" is equal to A, B, ... , P.                                       ;
1781: EC7C         ;                                                                            ;
1782: EC7C         ;			Function Code	:	C = 018H                                     ;
1783: EC7C         ;			Entry Parameters:	None										 ;
1784: EC7C         ;			Exit Parameters :	HL = Active disk map (login vector)			 ;
1785: EC7C         ;																			 ;
1786: EC7C         ;---------------------------- Get Active Disks - 18 (24) --------------------;
1787: EC7C             vGetLoginVector:
1788: EC7C 2A 21 F5               LD     HL,(loggedDisks)
1789: EC7F 22 C5 EA               LD     (exitParameterWord),HL
1790: EC82 C9                     RET
1791: EC83
1792: EC83         ;---------------------------- Get Current Disk- 19 (25) ---------------------;
1793: EC83         ;   This function returns the current default disk set by the last Select    ;
1794: EC83         ; Disk function call (code 14, OEH) or by the operator entering the          ;
1795: EC83         ; "X:"command (where "X" is A, B, ..., P) to the CCP.                        ;
1796: EC83         ;                                                                            ;
1797: EC83         ;  This function returns the current default disk in coded form.             ;
1798: EC83         ; Register A= 0 if drive A is the current drive, I if drive B, and so on.    ;
1799: EC83         ; If you need to convert this to the corresponding ASCII character, simply   ;
1800: EC83         ; add 41H to register A. Use this function when you convert a file name and  ;
1801: EC83         ; type in an FCB to an ASCII string in order to display it. If the first     ;
1802: EC83         ; byte of the FCB is OOH, the current default drive is to be used.           ;
1803: EC83         ; You must therefore use this function to determine the logical disk letter  ;
1804: EC83         ; for the default drive.                                                     ;
1805: EC83         ;                                                                            ;
1806: EC83         ;			Function Code	:	C = 019H                                     ;
1807: EC83         ;			Entry Parameters:	None										 ;
1808: EC83         ;			Exit Parameters :	A = Current Disk (0=A,1=B...,F=P)			 ;
1809: EC83         ;																			 ;
1810: EC83         ;---------------------------- Get Current Disk- 19 (25) ---------------------;
1811: EC83             vGetCurrentDisk:
1812: EC83 3A 1D F5               LD     A,(currentDisk)
1813: EC86 32 C5 EA               LD     (exitParameterByte),A
1814: EC89 C9                     RET
1815: EC8A
1816: EC8A         ;---------------------------- Set DMA Address - 1A (26) ---------------------;
1817: EC8A         ;  This function sets the BDOS's direct memory access (DMA) address to a new ;
1818: EC8A         ; value. The name is an historic relic dating back to the Intel Development  ;
1819: EC8A         ; System on which CP/M was originally developed. This machine, by virtue of  ;
1820: EC8A         ; its hardware, could read data from a diskette directly into memory or      ;
1821: EC8A         ; write data to a diskette directly from memory. The name DMA address now    ;
1822: EC8A         ; applies to the address of the buffer to and from which data is             ;
1823: EC8A         ; transferred whenever a diskette Read, Write, or directory operation is     ;
1824: EC8A         ; performed. Whenever CP/M first starts up (cold boot) m a warm boot or      ;
1825: EC8A         ; Reset Disk operation occurs, the DMA address is reset to its default       ;
1826: EC8A         ; value of 0080H.                                                            ;
1827: EC8A         ;                                                                            ;
1828: EC8A         ;			Function Code	:	C = 0A9H                                     ;
1829: EC8A         ;			Entry Parameters:	DE = DMA Address							 ;
1830: EC8A         ;			Exit Parameters :	None										 ;
1831: EC8A         ;																			 ;
1832: EC8A         ;---------------------------- Set DMA Address - 1A (26) ---------------------;
1833: EC8A             vSetDMA:
1834: EC8A 2A C3 EA               LD     HL,(paramDE)
1835: EC8D 22 23 F5               LD     (initDAMAddress),HL
1836: EC90 C3 0C F0               JP     SetDataDMA
1837: EC93
1838: EC93         ;---------------------------- Get Allocation Vector - 1B (27) ---------------;
1839: EC93         ;  This function returns the base, or starting, address of the allocation    ;
1840: EC93         ; vector for the currently selected logical disk. This information,          ;
1841: EC93         ; indicating which parts of the disk are assigned, is used by utility        ;
1842: EC93         ; programs and the BDOS itself to determine how much unused space is on the  ;
1843: EC93         ; logical disk, to locate an unused allocation block in order to extend      ;
1844: EC93         ; a file, or to relinquish an allocation block when a file is deleted.       ;
1845: EC93         ;                                                                            ;
1846: EC93         ;			Function Code	:	C = 01BH                                     ;
1847: EC93         ;			Entry Parameters:	None										 ;
1848: EC93         ;			Exit Parameters :	HL = Address of allocation vector			 ;
1849: EC93         ;																			 ;
1850: EC93         ;---------------------------- Get Allocation Vector - 1B (27) ---------------;
1851: EC93             vGetAllocAddr:
1852: EC93 2A 31 F5               LD     HL,(caAllocVector)
1853: EC96 22 C5 EA               LD     (exitParameterWord),HL
1854: EC99 C9                     RET
1855: EC9A
1856: EC9A         ;---------------------------- Write Protect Disk - 1C (28) ------------------;
1857: EC9A         ;  This function logically sets the currently selected disk to a Read-Only   ;
1858: EC9A         ; state. Any attempts to execute a Write Sequential or Write Random function ;
1859: EC9A         ; to the selected disk will be intercepted by the BDOS, and the following    ;
1860: EC9A         ; message will appear on the console:                                        ;
1861: EC9A         ;	BDOS Err on X: R/O                                                       ;
1862: EC9A         ;	where X: is the selected disk.                                           ;
1863: EC9A         ;                                                                            ;
1864: EC9A         ;  Once you have requested Read-Only status for the currently selected       ;
1865: EC9A         ; logical disk, this status will persist even if you proceed to select       ;
1866: EC9A         ; other logical disks. In fact, it will remain in force until the next warm  ;
1867: EC9A         ; boot or Reset Disk System function call.                                   ;
1868: EC9A         ;  Digital Research documentation refers to this function code as Disk Write ;
1869: EC9A         ; Protect. The Read-Only description is used here because it corresponds     ;
1870: EC9A         ; to the error message produced if your program attempts to write on         ;
1871: EC9A         ; the disk.                                                                  ;
1872: EC9A         ;                                                                            ;
1873: EC9A         ;			Function Code	:	C = 01CH                                     ;
1874: EC9A         ;			Entry Parameters:	None										 ;
1875: EC9A         ;			Exit Parameters :	None										 ;
1876: EC9A         ;																			 ;
1877: EC9A         ;---------------------------- Write Protect Disk - 1C (28) ------------------;
1878: EC9A         ;;write protect current disk
1879: EC9A             vWriteProtectDisk:
1880: EC9A C3 22 F0               JP     SetDiskReadOnly
1881: EC9D
1882: EC9D         ;---------------------------- Get Read-Only Map - 1D (29) -------------------;
1883: EC9D         ;  This function returns a bit map in registers H and L showing which logical;
1884: EC9D         ; disks in the system have been set to Read-Only status, either by the       ;
1885: EC9D         ; Set Logical Disk to Read-Only function call (code 28, ICH), or by the      ;
1886: EC9D         ; BDOS itself, because it detected that a diskette had been changed.         ;
1887: EC9D         ;  The least significant bit of L corresponds to logical disk A, while the   ;
1888: EC9D         ; most significant bit of H corresponds to disk P. The bit corresponding to  ;
1889: EC9D         ; the specific logical disk is set to I if the disk has been set to          ;
1890: EC9D         ; Read-Only status.                                                          ;
1891: EC9D         ;                                                                            ;
1892: EC9D         ;			Function Code	:	C = 01DH                                     ;
1893: EC9D         ;			Entry Parameters:	None										 ;
1894: EC9D         ;			Exit Parameters :	HL = Read-Only Vector						 ;
1895: EC9D         ;																			 ;
1896: EC9D         ;---------------------------- Get Read-Only Map - 1D (29) -------------------;
1897: EC9D             vGetReadOnlyMap:
1898: EC9D 2A 1F F5               LD     HL,(readOnlyVector)
1899: ECA0 22 C5 EA               LD     (exitParameterWord),HL
1900: ECA3 C9                     RET
1901: ECA4
1902: ECA4         ;---------------------- Set File Attributes - 1E (30) ----------------------;
1903: ECA4         ;  This function sets the bits that describe attributes of a file in the    ;
1904: ECA4         ; relevant directory entries for the specified file. Each file can be       ;
1905: ECA4         ; assigned up to 11 file attributes. Of these 11, two have predefined       ;
1906: ECA4         ; meanings, four others are available for you to use, and the remaining     ;
1907: ECA4         ; five are reserved for future use by CP/M.                                 ;
1908: ECA4         ;  Each attribute consists of a single bit. The most significant bit of     ;
1909: ECA4         ; each byte of the file name and type is used to store the attributes.      ;
1910: ECA4         ; The file attributes are known by a code consisting of the letter "f"      ;
1911: ECA4         ; (for file name) or "t" (for file type), followed by the number of the     ;
1912: ECA4         ; character position and a single quotation mark. For example, the Read-Only;
1913: ECA4         ; attribute is tl'.                                                         ;
1914: ECA4         ;	The significance of the attributes is as follows:                       ;
1915: ECA4         ;			fl' to f4' Available for you to use                             ;
1916: ECA4         ;			f5' to fS' Reserved for future CP/M use                         ;
1917: ECA4         ;			tl' Read-Only File attribute                                    ;
1918: ECA4         ;			t2' System File attribute                                       ;
1919: ECA4         ;			t3' Reserved for future CP/M use                                ;
1920: ECA4         ;			                                                                ;
1921: ECA4         ;  Attributes are set by presenting this function with an FCB in which the  ;
1922: ECA4         ; unambiguous file name has been preset with the most significant bits      ;
1923: ECA4         ; set appropriately. This function then searches the directory for a match  ;
1924: ECA4         ; and changes the matched entries to contain the attributes which have been ;
1925: ECA4         ; set in the FCB.                                                           ;
1926: ECA4         ;  The BDOS will intercept any attempt to write on a file that has the      ;
1927: ECA4         ; Read-Only attribute set. The DIR command in the CCP does not display any  ;
1928: ECA4         ; file with System status.                                                  ;
1929: ECA4         ;                                                                           ;
1930: ECA4         ;  You can use the four attributes available to you to set up a file        ;
1931: ECA4         ; security system, or perhaps to flag certain files that must be backed up  ;
1932: ECA4         ; to other disks. The Search First and Search Next functions allow you to   ;
1933: ECA4         ; view the complete file directory entry, so your programs can test the     ;
1934: ECA4         ; attributes easily.                                                        ;
1935: ECA4         ;                                                                           ;
1936: ECA4         ;                                                                           ;
1937: ECA4         ;			Function Code	:	C  = 1EH                                    ;
1938: ECA4         ;			Entry Parameters:	DE = Address of File Control Block			;
1939: ECA4         ;			Exit Parameters :	A  = Directory Code							;
1940: ECA4         ;																			;
1941: ECA4         ;---------------------- Set File Attributes - 1E (30) ----------------------;
1942: ECA4             vSetFileAttributes:
1943: ECA4 CD 45 F0               CALL   ReselectDisk         ; Reselect if needed
1944: ECA7 0E 0C                  LD     C,fcbExtIndex        ; Size of search/match
1945: ECA9 CD F0 F0               CALL   SearchForDirectoryRecord ; Find a match
1946: ECAC
1947: ECAC             SetAttributesLoop:
1948: ECAC CD 9E F1               CALL   AtEndOfDirectory     ; Any more dir entries ?
1949: ECAF CA 7A F2               JP     Z,DirLocationToReturnLoc ; Return directory Index to caller							;  exit if yes
1950: ECB2         ; Directory entry found
1951: ECB2 0E 00                  LD     C,0                  ; Set starting position
1952: ECB4 1E 0C                  LD     E,fcbExtIndex        ; Set Length
1953: ECB6 CD 99 F2               CALL   CopyDir              ; copy from FCB to dir entry
1954: ECB9 CD 05 F1               CALL   GetNextDirectoryRecord ; Go find the next directory record
1955: ECBC C3 AC EC               JP     SetAttributesLoop    ; Loop
1956: ECBF
1957: ECBF         ;------------------ Get Disk Parameter Block Address - 1F (31) --------------;
1958: ECBF         ;  This function returns the address of the disk parameter block (DPB) for   ;
1959: ECBF         ; the last selected logical disk. The DPB describes the physical             ;
1960: ECBF         ; characteristics of a specific logical disk-information mainly of interest  ;
1961: ECBF         ; for system utility programs.                                               ;
1962: ECBF         ;                                                                            ;
1963: ECBF         ;			Function Code	:	C = 1FH                                      ;
1964: ECBF         ;			Entry Parameters:	None										 ;
1965: ECBF         ;			Exit Parameters :	HL = Address of Disk Parameter Block		 ;
1966: ECBF         ;																			 ;
1967: ECBF         ;------------------ Get Disk Parameter Block Address - 1F (31) --------------;
1968: ECBF             vGetDiskParamBlock:                      ; func31 (31 - 1F)
1969: ECBF 2A 2D F5               LD     HL,(caDiskParamBlock)
1970: ECC2 22 C5 EA               LD     (exitParameterWord),HL
1971: ECC5 C9                     RET
1972: ECC6
1973: ECC6         ;------------------------- Get File Size - 23 (35) -------------------------;
1974: ECC6         ;  This function returns the virtual size of the specified file. It does so ;
1975: ECC6         ; by setting the random record number (bytes 33-35) in the specified FCB to ;
1976: ECC6         ; the maximum 128-byte record number in the file. The virtual file size is  ;
1977: ECC6         ; calculated from the record address of the record following the end of the ;
1978: ECC6         ; file. Bytes 33 and 34 form a 16-bit value that contains the record number,;
1979: ECC6         ; with overflow indicated in byte 35. If byte 35 is 01, this means that the ;
1980: ECC6         ; file has the maximum record count of 65,536.                              ;
1981: ECC6         ;  If the function cannot find the file specified by the FCB, it returns    ;
1982: ECC6         ; with the random record field set to O.                                    ;
1983: ECC6         ;  You can use this function when you want to add data to the end of an     ;
1984: ECC6         ; existing file. By calling this function first, the random record bytes    ;
1985: ECC6         ; will be set to the end of file. Subsequent Write Random calls will write  ;
1986: ECC6         ; out records to this preset address.                                       ;
1987: ECC6         ;                                                                           ;
1988: ECC6         ;  Do not confuse the virtual file size with the actual file size. In a     ;
1989: ECC6         ; random file, if you write just a single CP/M record to record number      ;
1990: ECC6         ; 1000 and then call this function, it will return with the random record   ;
1991: ECC6         ; number field set in the FCB to 1000, even though only a single record     ;
1992: ECC6         ; exists in the file. For sequential files, this function returns the       ;
1993: ECC6         ; number of records in the file. In this case, the virtual and actual file  ;
1994: ECC6         ; sizes coincide.                                                           ;
1995: ECC6         ;                                                                           ;
1996: ECC6         ;                                                                           ;
1997: ECC6         ;			Function Code	:	C  = 23H                                    ;
1998: ECC6         ;			Entry Parameters:	DE = Address of File Control Block			;
1999: ECC6         ;			Exit Parameters :	Random record field set in FCB				;
2000: ECC6         ;																			;
2001: ECC6         ;------------------------- Get File Size - 23 (35) -------------------------;
2002: ECC6             vComputeFileSize:
2003: ECC6 CD 45 F0               CALL   ReselectDisk         ; Reselect if needed
2004: ECC9         ;	JP		GetFileSize
2005: ECC9
2006: ECC9         ;compute logical file size for current fcb
2007: ECC9         ; GetFileSize:
2008: ECC9 0E 0C                  LD     C,fcbExtIndex        ; Set search/match length
2009: ECCB CD F0 F0               CALL   SearchForDirectoryRecord ; Set directoryIndex
2010: ECCE         ; zero the receiving FCB Random Record field
2011: ECCE 2A C3 EA               LD     HL,(paramDE)         ; Point at FCB
2012: ECD1 11 21 00               LD     DE,recordRandom      ; Random Record index
2013: ECD4 19                     ADD    HL,DE                ; Point at Random Record
2014: ECD5 E5                     PUSH   HL                   ; Random Record LSB pointer
2015: ECD6 72                     LD     (HL),D               ; Set Random Record LSB = 0
2016: ECD7 23                     INC    HL                   ; Random Record MSB pointer
2017: ECD8 72                     LD     (HL),D               ; Set Random Record MSB = 0
2018: ECD9 23                     INC    HL                   ; Random Record overflow pointer
2019: ECDA 72                     LD     (HL),D               ; Set Random Record overflow = 0
2020: ECDB
2021: ECDB             GetFileSize1:
2022: ECDB CD 9E F1               CALL   AtEndOfDirectory     ; Any more dir entries ?
2023: ECDE CA 03 ED               JP     Z,GetFileSizeExit    ;  exit if no
2024: ECE1
2025: ECE1 CD A7 F1               CALL   GetCurrentDirectoryRecord ; HL points at Directory entry
2026: ECE4 11 0F 00               LD     DE,fcbRCIndex        ; FCB Record Count index
2027: ECE7 CD CB ED               CALL   GetRandomRecordPosition
2028: ECEA         ; A=0000 000? BC = mmmm eeee errr rrrr compare with memory, larger?
2029: ECEA E1                     POP    HL
2030: ECEB E5                     PUSH   HL                   ; recall, replace .fcb(Random record Field)
2031: ECEC 5F                     LD     E,A                  ; save cy
2032: ECED 79                     LD     A,C
2033: ECEE 96                     SUB    M
2034: ECEF 23                     INC    HL                   ; ls byte
2035: ECF0 78                     LD     A,B
2036: ECF1 9E                     SBC    A,(HL)
2037: ECF2 23                     INC    HL                   ; middle byte
2038: ECF3 7B                     LD     A,E
2039: ECF4 9E                     SBC    A,(HL)               ; carry if .fcb(random record field) > directory
2040: ECF5 DA FD EC               JP     C,GetFileSize2       ; for another try
2041: ECF8         ; fcb is less or equal, fill from directory
2042: ECF8 73                     LD     (HL),E
2043: ECF9 2B                     DEC    HL
2044: ECFA 70                     LD     (HL),B
2045: ECFB 2B                     DEC    HL
2046: ECFC 71                     LD     (HL),C
2047: ECFD             GetFileSize2:                      ; getnextsize:
2048: ECFD CD 05 F1               CALL   GetNextDirectoryRecord
2049: ED00 C3 DB EC               JP     GetFileSize1
2050: ED03             GetFileSizeExit:                      ; setsize:
2051: ED03 E1                     POP    HL                   ; discard .fcb(random record field)
2052: ED04 C9                     RET
2053: ED05
2054: ED05         ;------------------ Set Random Record Number - 24 (36) ---------------------;
2055: ED05         ;  This function sets the random record number in the FCB to the correct    ;
2056: ED05         ; value for the last record read or written sequentially to the file.       ;
2057: ED05         ;                                                                           ;
2058: ED05         ;  This function provides you with a convenient way to build an index file  ;
2059: ED05         ;  so that you can randomly access a sequential file. Open the sequential   ;
2060: ED05         ;  file, and as you read each record, extract the appropriate key field from;
2061: ED05         ;  the data record. Make the BDOS Set Random Record request and create a new;
2062: ED05         ; data record with just the key field and the random record number. Write   ;
2063: ED05         ; the new data record out to the index file.                                ;
2064: ED05         ;  Once you have done this for each record in the file, your index file     ;
2065: ED05         ; provides a convenient method, given a search key value, of finding the    ;
2066: ED05         ; appropriate CP/M record in which the data lies.                           ;
2067: ED05         ;  You can also use this function as a means offinding out where you are    ;
2068: ED05         ; currently positioned in a sequential file-either to relate a CP/M record  ;
2069: ED05         ; number to the position, or simply as a place-marker to allow a            ;
2070: ED05         ; repositioning to the same place later.                                    ;
2071: ED05         ;                                                                           ;
2072: ED05         ;                                                                           ;
2073: ED05         ;			Function Code	:	C  = 24H                                    ;
2074: ED05         ;			Entry Parameters:	DE = Address of File Control Block			;
2075: ED05         ;			Exit Parameters :	Random record field set in FCB				;
2076: ED05         ;																			;
2077: ED05         ;------------------ Set Random Record Number - 24 (36) ---------------------;
2078: ED05             vSetRandomRecord:
2079: ED05         ;	JP		SetRandomRecord
2080: ED05         ; SetRandomRecord:
2081: ED05 2A C3 EA               LD     HL,(paramDE)         ; FCB
2082: ED08 11 20 00               LD     DE,recordSeq         ; Sequential record pointer
2083: ED0B CD CB ED               CALL   GetRandomRecordPosition ; DE=paramDE, A=cy, BC=mmmm eeee errr rrrr
2084: ED0E 21 21 00               LD     HL,recordRandom
2085: ED11 19                     ADD    HL,DE                ; HL = .FCB(RANDOM_REC_FIELD)
2086: ED12 71                     LD     (HL),C
2087: ED13 23                     INC    HL
2088: ED14 70                     LD     (HL),B
2089: ED15 23                     INC    HL
2090: ED16 77                     LD     (HL),A               ; to RANDOM_REC_FIELD
2091: ED17 C9                     RET
2092: ED18
2093: ED18         ;*****************************************************************
2094: ED18
2095: ED18         ;------------------------ Reset Logical Disk Drive - 25 (37) ----------------;
2096: ED18         ;  This function resets individual disk drives. It is a more precise version ;
2097: ED18         ; of the Reset Disk System function (code 13,ODH), in that you can set       ;
2098: ED18         ; specific logical; disks rather than all of them.                           ;
2099: ED18         ;  The bit map in DE shows which disks are to be reset. The least significant;
2100: ED18         ; bit of; E represents disk A, and the most significant bit of D, disk P.    ;
2101: ED18         ; The bits set to 1 indicate the disks to be reset.                          ;
2102: ED18         ;  Note that this function returns a zero value in A in order to maintain    ;
2103: ED18         ; compatibility with MP/ M.                                                  ;
2104: ED18         ;                                                  ;                         ;
2105: ED18         ;  Use this function when only specific diskettes need to be changed.        ;
2106: ED18         ; Changing a diskette without requesting CP/M to log it in will cause the    ;
2107: ED18         ; BDOS to assume that an error has occurred and to set the new diskette to   ;
2108: ED18         ; Read-Only status as a protective measure                                   ;
2109: ED18         ;                                                                            ;
2110: ED18         ;			Function Code	:	C = 25H                                      ;
2111: ED18         ;			Entry Parameters:	DE = Logical Drive Bit Vector				 ;
2112: ED18         ;			Exit Parameters :	A = 00H										 ;
2113: ED18         ;																			 ;
2114: ED18         ;------------------------ Reset Logical Disk Drive - 25 (37) ----------------;
2115: ED18         ;  **************  Not Yet Implemented   **************
2116: ED18             vResetDrive:
2117: ED18 3E FF                  LD     A,-1                 ; Error return
2118: ED1A C9                     RET
2119: ED1B
2120: ED1B
2121: ED1B
2122: ED1B         ;-----------------------------------------------------------------
2123: ED1B
2124: ED1B         ;*****************************************************************
2125: ED1B         ;random disk read
2126: ED1B         ;IN  - (DE) FCB address
2127: ED1B         ;OUT - (A) 01 = Reading unwritten data
2128: ED1B         ;	 02 = N/U
2129: ED1B         ;	 03 = Cannot close current extent
2130: ED1B         ;	 04 = Seek to unwriten Extent
2131: ED1B         ;	 05 = N/U
2132: ED1B         ;	 06 = Seek past Physical end of Disk
2133: ED1B             vReadRandom:                      ; func33 (33 - 21) Read Random record
2134: ED1B CD 45 F0               CALL   ReselectDisk
2135: ED1E C3 28 ED               JP     RandomDiskRead       ; to perform the disk read
2136: ED21         ;*****************************************************************
2137: ED21         ;write random record
2138: ED21         ;IN  - (DE) FCB address
2139: ED21         ;OUT - (A) 01 = Reading unwritten data
2140: ED21         ;	 02 = N/U
2141: ED21         ;	 03 = Cannot close current extent
2142: ED21         ;	 04 = Seek to unwriten Extent
2143: ED21         ;	 05 = Cannot create new Extent because of directory overflow
2144: ED21         ;	 06 = Seek past Physical end of Disk
2145: ED21             vWriteRandom:                      ; func34 (34 - 22) Write Random record
2146: ED21 CD 45 F0               CALL   ReselectDisk
2147: ED24 C3 31 ED               JP     RandomDiskWrite      ; to perform the disk write
2148: ED27         ;ret ;jmp goback
2149: ED27         ;? ;*****************************************************************
2150: ED27         ;? ;Reset Drive
2151: ED27         ;? ;IN  - (DE) Drive Vector
2152: ED27         ;? ;OUT - (A) 00
2153: ED27         ;? vResetDrive:								; func37 (37 - 25) Reset Drive
2154: ED27         ;? ; Not Yet Implemented   **************
2155: ED27         ;?	RET
2156: ED27         ;*****************************************************************
2157: ED27         ;*****************************************************************
2158: ED27         ;Write Random With Zero Fill
2159: ED27         ;IN  - (DE) FCB address
2160: ED27         ;OUT - (A) Return Code		see Function 34
2161: ED27             vWriteRandom0Fill:                      ; func40 (40 - 28) Reset Drive
2162: ED27         ; Not Yet Implemented   **************
2163: ED27 C9                     RET
2164: ED28         ;*****************************************************************
2165: ED28         ;******************< Random I/O Stuff ****************************
2166: ED28         ;*****************************************************************
2167: ED28         ;random disk read
2168: ED28             RandomDiskRead:                      ; randiskread
2169: ED28 0E FF                  LD     C,TRUE               ; marked as read operation
2170: ED2A CD 3A ED               CALL   RandomSeek
2171: ED2D CC 49 EB               CALL   Z,DiskRead           ; if seek successful
2172: ED30 C9                     RET
2173: ED31         ;*****************************************************************
2174: ED31         ;random disk write
2175: ED31             RandomDiskWrite:                      ; randiskwrite
2176: ED31 0E 00                  LD     C,FALSE              ; marked as read operation
2177: ED33 CD 3A ED               CALL   RandomSeek
2178: ED36 CC 8F EB               CALL   Z,DiskWrite          ; if seek successful
2179: ED39 C9                     RET
2180: ED3A         ;*****************************************************************
2181: ED3A         ;*****************************************************************
2182: ED3A         ;random access seek operation, C=0ffh if read mode
2183: ED3A         ;fcb is assumed to address an active file control block
2184: ED3A         ;(fcbS2Index has been set to 11000000b if previous bad seek)
2185: ED3A             RandomSeek:
2186: ED3A AF                     XOR    A
2187: ED3B 32 42 F5               LD     (diskAccessType),A   ; marked as random access operation
2188: ED3E C5                     PUSH   BC                   ; save r/w flag
2189: ED3F 2A C3 EA               LD     HL,(paramDE)
2190: ED42 EB                     EX     DE,HL                ; DE will hold base of fcb
2191: ED43 21 21 00               LD     HL,recordRandom
2192: ED46 19                     ADD    HL,DE                ; HL=.fcb(RANDOM_REC_FIELD)
2193: ED47 7E                     LD     A,(HL)
2194: ED48 E6 7F                  AND    7FH
2195: ED4A F5                     PUSH   AF                   ; record number
2196: ED4B 7E                     LD     A,(HL)
2197: ED4C 17                     RLA                         ; cy=lsb of extent#
2198: ED4D 23                     INC    HL
2199: ED4E 7E                     LD     A,(HL)
2200: ED4F 17                     RLA
2201: ED50 E6 1F                  AND    11111B               ; A=ext#
2202: ED52 4F                     LD     C,A                  ; C holds extent number, record stacked
2203: ED53 7E                     LD     A,(HL)
2204: ED54 1F                     RRA
2205: ED55 1F                     RRA
2206: ED56 1F                     RRA
2207: ED57 1F                     RRA
2208: ED58 E6 0F                  AND    1111B                ; mod#
2209: ED5A 47                     LD     B,A                  ; B holds module#, C holds ext#
2210: ED5B F1                     POP    AF                   ; recall sought record #
2211: ED5C         ;check to insure that high byte of ran rec = 00
2212: ED5C 23                     INC    HL
2213: ED5D 6E                     LD     L,(HL)               ; l=high byte (must be 00)
2214: ED5E 2C                     INC    L
2215: ED5F 2D                     DEC    L
2216: ED60 2E 06                  LD     L,06                 ; zero flag, l=6
2217: ED62         ; produce error 6, seek past physical eod
2218: ED62 C2 C3 ED               JP     NZ,RandomSeekError
2219: ED65         ; otherwise, high byte = 0, A = sought record
2220: ED65 21 20 00               LD     HL,recordSeq
2221: ED68 19                     ADD    HL,DE                ; HL = .fcb(NEXT_RECORD)
2222: ED69 77                     LD     (HL),A               ; sought rec# stored away
2223: ED6A         ; arrive here with B=mod#, C=ext#, DE=.fcb, rec stored
2224: ED6A         ; the r/w flag is still stacked.  compare fcb values
2225: ED6A 21 0C 00               LD     HL,fcbExtIndex       ; extent number field
2226: ED6D 19                     ADD    HL,DE
2227: ED6E 79                     LD     A,C                  ; A=seek ext#
2228: ED6F 96                     SUB    M
2229: ED70 C2 7E ED               JP     NZ,RandomSeekClose   ; tests for = extents
2230: ED73         ; extents match, check mod#
2231: ED73 21 0E 00               LD     HL,fcbS2Index
2232: ED76 19                     ADD    HL,DE
2233: ED77 78                     LD     A,B                  ; B=seek mod#
2234: ED78         ; could be overflow at eof, producing module#
2235: ED78         ; of 90H or 10H, so compare all but fwf
2236: ED78 96                     SUB    M
2237: ED79 E6 7F                  AND    7FH
2238: ED7B CA B6 ED               JP     Z,RandomSeekExit     ; same?
2239: ED7E             RandomSeekClose:
2240: ED7E C5                     PUSH   BC
2241: ED7F D5                     PUSH   DE                   ; save seek mod#,ext#, .fcb
2242: ED80 CD 1E EF               CALL   CloseDirEntry        ; current extent closed
2243: ED83 D1                     POP    DE
2244: ED84 C1                     POP    BC                   ; recall parameters and fill
2245: ED85 2E 03                  LD     L,03                 ; cannot close error #3
2246: ED87 3A C5 EA               LD     A,(exitParameterByte)
2247: ED8A 3C                     INC    A
2248: ED8B CA BC ED               JP     Z,RandomSeekErrorBadSeek
2249: ED8E 21 0C 00               LD     HL,fcbExtIndex
2250: ED91 19                     ADD    HL,DE
2251: ED92 71                     LD     (HL),C               ; fcb(fcbExtIndex)=ext#
2252: ED93 21 0E 00               LD     HL,fcbS2Index
2253: ED96 19                     ADD    HL,DE
2254: ED97 70                     LD     (HL),B               ; fcb(fcbS2Index)=mod#
2255: ED98 CD DB EE               CALL   OpenFile             ; is the file present?
2256: ED9B 3A C5 EA               LD     A,(exitParameterByte)
2257: ED9E 3C                     INC    A
2258: ED9F C2 B6 ED               JP     NZ,RandomSeekExit    ; open successful?
2259: EDA2         ; cannot open the file, read mode?
2260: EDA2 C1                     POP    BC                   ; r/w flag to c (=0ffh if read)
2261: EDA3 C5                     PUSH   BC                   ; everyone expects this item stacked
2262: EDA4 2E 04                  LD     L,04                 ; seek to unwritten extent #4
2263: EDA6 0C                     INC    C                    ; becomes 00 if read operation
2264: EDA7 CA BC ED               JP     Z,RandomSeekErrorBadSeek ; skip to error if read operation
2265: EDAA CD 9E EF               CALL   MakeNewFile          ; write operation, make new extent
2266: EDAD 2E 05                  LD     L,05                 ; cannot create new extent #5
2267: EDAF 3A C5 EA               LD     A,(exitParameterByte)
2268: EDB2 3C                     INC    A
2269: EDB3 CA BC ED               JP     Z,RandomSeekErrorBadSeek ; no dir space
2270: EDB6         ; file make operation successful
2271: EDB6             RandomSeekExit:                      ; seekok:
2272: EDB6 C1                     POP    BC                   ; discard r/w flag
2273: EDB7 AF                     XOR    A
2274: EDB8 32 C5 EA               LD     (exitParameterByte),A
2275: EDBB C9                     RET                         ; with zero set
2276: EDBC
2277: EDBC             RandomSeekErrorBadSeek:
2278: EDBC         ; fcb no longer contains a valid fcb, mark with 11000000b in fcbS2Index field so that it
2279: EDBC         ; appears as overflow with file write flag set
2280: EDBC E5                     PUSH   HL                   ; save error flag
2281: EDBD CD CA F0               CALL   GetExtentNumberMSB   ; HL = .fcbS2Index
2282: EDC0 36 C0                  LD     (HL),11000000B
2283: EDC2 E1                     POP    HL                   ; and drop through
2284: EDC3             RandomSeekError:                      ; seekerr:
2285: EDC3 C1                     POP    BC                   ; discard r/w flag
2286: EDC4 7D                     LD     A,L
2287: EDC5 32 C5 EA               LD     (exitParameterByte),A ; exitParameterByte=#, nonzero
2288: EDC8         ; SetFileWriteFlag returns non-zero accumulator for err
2289: EDC8 C3 D3 F0               JP     SetFileWriteFlag     ; flag set, so subsequent close ok
2290: EDCB         ;ret
2291: EDCB         ;
2292: EDCB         ;*****************************************************************
2293: EDCB         ;*****************************************************************
2294: EDCB         ;--------------------------- Get Random Record Position --------------------;
2295: EDCB         ; on Entry :
2296: EDCB         ;			HL = pointer to directory entry
2297: EDCB         ;			DE = fcbRCIndex/seqRecord index
2298: EDCB             GetRandomRecordPosition:
2299: EDCB EB                     EX     DE,HL                ; DE = pointer to directory entry
2300: EDCC 19                     ADD    HL,DE
2301: EDCD         ; DE=.buf(dptr) or .fcb(0), HL = .f(NEXT_RECORD/fcbRCIndex)
2302: EDCD 4E                     LD     C,(HL)               ; C = record count
2303: EDCE 06 00                  LD     B,0                  ; Make count a word value
2304: EDD0
2305: EDD0 21 0C 00               LD     HL,fcbExtIndex       ; FCB Extent index
2306: EDD3 19                     ADD    HL,DE
2307: EDD4 7E                     LD     A,(HL)               ; ACC has Extent value
2308: EDD5 0F                     RRCA
2309: EDD6 E6 80                  AND    80H                  ; A=e000 0000
2310: EDD8 81                     ADD    A,C
2311: EDD9 4F                     LD     C,A
2312: EDDA 3E 00                  LD     A,0
2313: EDDC 88                     ADC    A,B
2314: EDDD 47                     LD     B,A
2315: EDDE         ; BC = 0000 000? errrr rrrr
2316: EDDE 7E                     LD     A,(HL)
2317: EDDF 0F                     RRCA
2318: EDE0 E6 0F                  AND    LO_NIBBLE_MASK
2319: EDE2 80                     ADD    A,B
2320: EDE3 47                     LD     B,A
2321: EDE4         ; BC = 000? eeee errrr rrrr
2322: EDE4 21 0E 00               LD     HL,fcbS2Index
2323: EDE7 19                     ADD    HL,DE
2324: EDE8 7E                     LD     A,(HL)               ; A=XXX? mmmm
2325: EDE9 87                     ADD    A,A
2326: EDEA 87                     ADD    A,A
2327: EDEB 87                     ADD    A,A
2328: EDEC 87                     ADD    A,A                  ; cy=? A=mmmm 0000
2329: EDED F5                     PUSH   AF
2330: EDEE 80                     ADD    A,B
2331: EDEF 47                     LD     B,A
2332: EDF0         ; cy=?, BC = mmmm eeee errr rrrr
2333: EDF0 F5                     PUSH   AF                   ; possible second carry
2334: EDF1 E1                     POP    HL                   ; cy = lsb of L
2335: EDF2 7D                     LD     A,L                  ; cy = lsb of A
2336: EDF3 E1                     POP    HL                   ; cy = lsb of L
2337: EDF4 B5                     OR     L                    ; cy/cy = lsb of A
2338: EDF5 E6 01                  AND    1                    ; A = 0000 000? possible carry-out
2339: EDF7 C9                     RET
2340: EDF8         ;--------------------------- Get Random Record Position --------------------;
2341: EDF8
2342: EDF8
2343: EDF8
2344: EDF8         ;*****************************************************************
2345: EDF8         ;********************** Disk  I/O ********************************
2346: EDF8         ;*****************************************************************
2347: EDF8         ;-----------------------------------------------------------------
2348: EDF8         ;-----------------------------------------------------------------
2349: EDF8         ;--------------------------- Select  Drive ---------------------------------;
2350: EDF8         ; Establish the disk found in (paramE) as the current disk drive            ;
2351: EDF8             SelectCurrent:                      ;
2352: EDF8 3A C2 EA               LD     A,(paramE)           ; Get Disk (00H = A,01H = B ..)     ;
2353: EDFB 21 1D F5               LD     HL,currentDisk       ; Get the current disk              ;
2354: EDFE BE                     CP     M                    ; Are the the same ?                ;
2355: EDFF C8                     RET    Z                    ; Exit if yes, nothing to do        ;
2356: EE00 77                     LD     (HL),A               ;  else update curretDisk and       ;
2357: EE01 C3 04 EE               JP     Select               ;  select it                        ;
2358: EE04         ;--------------------------- Select  Drive ---------------------------------;
2359: EE04         ;--------------------------- Select Login Drive ----------------------------;
2360: EE04         ; select Login Drive                                                       ;
2361: EE04             Select:                         ;
2362: EE04 CD 25 EE               CALL   SelectDisk           ; Select the Disk                   ;
2363: EE07 CC 8C F4               CALL   Z,errSelect          ;
2364: EE0A 21 1D F5               LD     HL,currentDisk       ;
2365: EE0D 46                     LD     B,(HL)               ; Get Current Disk                  ;
2366: EE0E 2A 21 F5               LD     HL,(loggedDisks)     ; Load Logged Disk MAP              ;
2367: EE11 CD 5E F4               CALL   IsBitSet             ;
2368: EE14 C0                     RET    NZ                   ; Exit if already logged in         ;
2369: EE15         ;                                                                           ;
2370: EE15 21 1D F5               LD     HL,currentDisk       ;
2371: EE18 46                     LD     B,(HL)               ; Get Current Disk                  ;
2372: EE19 2A 21 F5               LD     HL,(loggedDisks)     ; else log in a different disk	    ;
2373: EE1C CD 6E F4               CALL   SetVectorBit         ;
2374: EE1F 22 21 F5               LD     (loggedDisks),HL     ; Update the Vector                 ;
2375: EE22         ;
2376: EE22 C3 6B EE               JP     InitDisk             ;
2377: EE25         ;--------------------------- Select Login Drive ----------------------------;
2378: EE25         ;--------------------------- Select Disk ------------------------------------;
2379: EE25         ;*****************************************************************          ;
2380: EE25         ; select the disk drive given by currentDisk, and fill the base addresses   ;
2381: EE25         ; caTrack - caAllocVector, then fill the values of the disk parameter block ;
2382: EE25             SelectDisk:                      ;
2383: EE25 3A 1D F5               LD     A,(currentDisk)      ; Get current disk (0=A,1=B...)      ;
2384: EE28 4F                     LD     C,A                  ; Prepare for BIOS Call              ;
2385: EE29 CD 1B F6               CALL   bcSeldsk             ; Select the disk                    ;
2386: EE2C 7C                     LD     A,H                  ; Return Pointer to                  ;
2387: EE2D B5                     OR     L                    ;  Disk Parameter Header             ;
2388: EE2E C8                     RET    Z                    ; exit if error, with HL = 0000      ;
2389: EE2F         ;
2390: EE2F 5E                     LD     E,(HL)               ;
2391: EE30 23                     INC    HL                   ;
2392: EE31 56                     LD     D,(HL)               ; Skew Table in DE                   ;
2393: EE32 23                     INC    HL                   ; HL = DPH + 2, Rel Pos for File     ;
2394: EE33 ED 53 43 F5               LD     (caSkewTable),DE     ; Move to Current Skew Table         ;
2395: EE37         ;
2396: EE37 22 25 F5               LD     (caDirMaxValue),HL   ; Move to Current Dir max            ;
2397: EE3A 23                     INC    HL                   ;
2398: EE3B 23                     INC    HL                   ; HL = Last Track #                  ;
2399: EE3C 22 27 F5               LD     (caTrack),HL         ; Move to Current Track #            ;
2400: EE3F 23                     INC    HL                   ;
2401: EE40 23                     INC    HL                   ; HL = Last Sector #                 ;
2402: EE41 22 29 F5               LD     (caSector),HL        ; Move to Current Sector #           ;
2403: EE44 23                     INC    HL                   ;
2404: EE45 23                     INC    HL                   ;
2405: EE46 11 2B F5               LD     DE,caDirectoryDMA    ;
2406: EE49 01 08 00               LD     BC,caListSize        ;
2407: EE4C ED B0                  LDIR                        ;
2408: EE4E         ;
2409: EE4E         ; finish filling in address list                                             ;
2410: EE4E 2A 2D F5               LD     HL,(caDiskParamBlock) ; Point Disk Parameter Block         ;
2411: EE51 11 33 F5               LD     DE,dpbStart          ; Point at BIOS DPB                  ;
2412: EE54 01 0F 00               LD     BC,dpbSize           ;
2413: EE57 ED B0                  LDIR                        ; Move DPB to current                ;
2414: EE59         ;
2415: EE59         ; Determine if Byte or Word Allocation Table	                             ;
2416: EE59 2A 38 F5               LD     HL,(dpbDSM)          ; Get max entry number               ;
2417: EE5C 7C                     LD     A,H                  ; If  its 00 then < 255              ;
2418: EE5D 21 4C F5               LD     HL,byteAllocationFlag ; Point at the  flag				 ;
2419: EE60 36 FF                  LD     (HL),TRUE            ; Assume its less than 255           ;
2420: EE62 B7                     OR     A                    ;  is the assumption confirmed ?     ;
2421: EE63 28 02                  JR     Z,SelectDisk1        ;  skip if yes                       ;
2422: EE65 36 00                  LD     (HL),FALSE           ; Fix assumption,set flag to false   ;
2423: EE67         ;
2424: EE67         ; Set Sign, reset Carry and Zero to indicate success                         ;
2425: EE67             SelectDisk1:                      ;
2426: EE67 3E FF                  LD     A,TRUE               ;
2427: EE69 B7                     OR     A                    ;
2428: EE6A C9                     RET                         ;
2429: EE6B         ;--------------------------- Select Disk ------------------------------------;
2430: EE6B         ;--------------------------- Initialize Disk --------------------------------;
2431: EE6B             InitDisk:                       ;
2432: EE6B 2A 38 F5               LD     HL,(dpbDSM)          ; Maximum allocation value           ;
2433: EE6E CD 64 F3               CALL   DivideHLby8          ; Length of Map                      ;
2434: EE71 E5                     PUSH   HL                   ; Save Length                        ;
2435: EE72 E5                     PUSH   HL                   ; Save for end of MAP                ;
2436: EE73 C1                     POP    BC                   ; BC = dpbDSM/8                      ;
2437: EE74         ; Clear the Allocation Vector	                                             ;
2438: EE74 2A 31 F5               LD     HL,(caAllocVector)   ; Allocation vector Start            ;
2439: EE77 36 00                  LD     (HL),0               ; Clear location                     ;
2440: EE79 ED 5B 31 F5               LD     DE,(caAllocVector)   ;
2441: EE7D 13                     INC    DE                   ; Allocation vector Start + 1        ;
2442: EE7E ED B0                  LDIR                        ; Cascade 00 thru Map                ;
2443: EE80         ; Force bits at End of Map                                                   ;
2444: EE80 EB                     EX     DE,HL                ; Put last Map byte into DE          ;
2445: EE81 E1                     POP    HL                   ;
2446: EE82 23                     INC    HL                   ;
2447: EE83 CD 6E F3               CALL   MultiplyHLby8        ; Blocks if all bits used            ;
2448: EE86 ED 4B 38 F5               LD     BC,(dpbDSM)          ; Actual block max                   ;
2449: EE8A 03                     INC    BC                   ; Now has size of the Map            ;
2450: EE8B AF                     XOR    A                    ; Clear CY                           ;
2451: EE8C ED 42                  SBC    HL,BC                ; Extra unused bits                  ;
2452: EE8E BD                     CP     L                    ;  are there any                     ;
2453: EE8F 28 07                  JR     Z,Mark4Directory     ;
2454: EE91 45                     LD     B,L                  ; Number of bits to set              ;
2455: EE92 EB                     EX     DE,HL                ; Put last Map byte into HL          ;
2456: EE93             SetBitLoop:                      ;
2457: EE93 37                     SCF                         ;
2458: EE94 CB 16                  RL     (HL)                 ; Set LSB                            ;
2459: EE96 10 FB                  DJNZ   SetBitLoop           ; Loop thru the bits                 ;
2460: EE98         ;
2461: EE98             Mark4Directory:                      ;
2462: EE98         ; Mark the reserved space for the directory                                  ;
2463: EE98 2A 3C F5               LD     HL,(dpbDABM)         ; Directory block reserved bits      ;
2464: EE9B EB                     EX     DE,HL                ;
2465: EE9C 2A 31 F5               LD     HL,(caAllocVector)   ; HL Start of Allocation Vector      ;
2466: EE9F 73                     LD     (HL),E               ;
2467: EEA0 23                     INC    HL                   ;
2468: EEA1 72                     LD     (HL),D               ; Put reserved blocks in Vector      ;
2469: EEA2         ; end of Map                                                                 ;
2470: EEA2         ; Home disk, and set current track and sector to 00                          ;
2471: EEA2 CD F2 EF               CALL   Home                 ;
2472: EEA5 2A 25 F5               LD     HL,(caDirMaxValue)   ;
2473: EEA8 36 03                  LD     (HL),3               ;
2474: EEAA 23                     INC    HL                   ;
2475: EEAB 36 00                  LD     (HL),0               ; Current Max Dir Value = 0003       ;
2476: EEAD CD 97 F1               CALL   SetEndDirectory      ; dirEntryIndex = EOD (-1)           ;
2477: EEB0         ;
2478: EEB0             InitDisk1:                      ;
2479: EEB0         ; Process the directory                                                      ;
2480: EEB0 0E FF                  LD     C,TRUE               ; Set flag for setting CheckSum	     ;
2481: EEB2 CD 95 F3               CALL   ReadDirectory        ; Get the directory Record           ;
2482: EEB5 CD 9E F1               CALL   AtEndOfDirectory     ; Are we Done ?                      ;
2483: EEB8 C8                     RET    Z                    ;  Exit if Yes                       ;
2484: EEB9         ; Not end of directory, valid entry?                                         ;
2485: EEB9 CD A7 F1               CALL   GetCurrentDirectoryRecord ; Calculate location of the element  ;
2486: EEBC 3E E5                  LD     A,emptyDir           ;
2487: EEBE BE                     CP     M                    ; Is it an Empty Dir Entry           ;
2488: EEBF 28 EF                  JR     Z,InitDisk1          ;   Loop back if yes                 ;
2489: EEC1         ; Not emptyDir, user code the same?                                          ;
2490: EEC1 3A 1C F5               LD     A,(currentUserNumber) ;
2491: EEC4 BE                     CP     M                    ;
2492: EEC5 20 0A                  JR     NZ,InitDisk2         ; Skip if this entry not the users   ;
2493: EEC7         ; Same user, check for '$' submit                                            ;
2494: EEC7 23                     INC    HL                   ;
2495: EEC8 7E                     LD     A,(HL)               ;
2496: EEC9 D6 24                  SUB    DOLLAR               ; Is first Char a $                  ;
2497: EECB 20 04                  JR     NZ,InitDisk2         ;
2498: EECD         ; dollar file found, mark in exitParameterByte                               ;
2499: EECD 3D                     DEC    A                    ; Set A to FFH                       ;
2500: EECE 32 C5 EA               LD     (exitParameterByte),A ; Return it the exit parameter       ;
2501: EED1             InitDisk2:                      ;
2502: EED1         ; now scan the disk map for allocated blocks                                 ;
2503: EED1 0E FF                  LD     C,TRUE               ; set to allocated                   ;
2504: EED3 CD CB F1               CALL   ScanDiskMap          ;
2505: EED6 CD B5 F1               CALL   SetDirectoryEntry    ; Mark directory entry               ;
2506: EED9 18 D5                  JR     InitDisk1            ; Loop for another entry             ;
2507: EEDB         ;--------------------------- Initialize Disk --------------------------------;
2508: EEDB         ;----------------------------- Open File -----------------------------------;
2509: EEDB         ;search for the directory entry matching FCB at paramDE						;
2510: EEDB             OpenFile:                       ;
2511: EEDB 0E 0F                  LD     C,nameLength         ;
2512: EEDD CD F0 F0               CALL   SearchForDirectoryRecord ;
2513: EEE0 CD 9E F1               CALL   AtEndOfDirectory     ; Have we gone thru all the dir    	;
2514: EEE3 C8                     RET    Z                    ; Exit exitParameterByte=255 if yes	;
2515: EEE4         ;
2516: EEE4             CopyDirRecordToFCB:                      ;
2517: EEE4 CD 96 F0               CALL   GetExtentAddress     ; HL points to FCB's EXT           	;
2518: EEE7 7E                     LD     A,(HL)               ; Get the EXT                      	;
2519: EEE8 F5                     PUSH   AF                   ; Save the FCB's EXT value         	;
2520: EEE9 E5                     PUSH   HL                   ;  also save FCB's pointer         	;
2521: EEEA CD A7 F1               CALL   GetCurrentDirectoryRecord ; Get pointer to Dir record in HL  	;
2522: EEED E5                     PUSH   HL                   ; Save Directory Record address    	;
2523: EEEE         ;
2524: EEEE ED 5B C3 EA               LD     DE,(paramDE)         ;
2525: EEF2 01 20 00               LD     BC,fcbLength         ;
2526: EEF5 ED B0                  LDIR                        ; Move dir record to FCB           	;
2527: EEF7         ;
2528: EEF7         ; note that entire fcb is copied, including indicators                    	;
2529: EEF7 CD D3 F0               CALL   SetFileWriteFlag     ; Set clean file flag				;
2530: EEFA D1                     POP    DE                   ; Get Directory Record address     	;
2531: EEFB 21 0C 00               LD     HL,fcbExtIndex       ; Extent Index                     	;
2532: EEFE 19                     ADD    HL,DE                ; Directory's EXT address          	;
2533: EEFF 4E                     LD     C,(HL)               ; Dir's EXT is in B		           	;
2534: EF00 21 0F 00               LD     HL,fcbRCIndex        ; Get Record Count Index           	;
2535: EF03 19                     ADD    HL,DE                ; Directory's RC address           	;
2536: EF04 46                     LD     B,(HL)               ; B holds Dir's  record count      	;
2537: EF05 E1                     POP    HL                   ; Get FCB's Extent Address         	;
2538: EF06 F1                     POP    AF                   ; Get FCB's Extent Value           	;
2539: EF07 77                     LD     (HL),A               ; Restore Extent Value             	;
2540: EF08         ; if user ext < dir ext then user := 128 records                           	;
2541: EF08         ; if user ext = dir ext then user := dir records                           	;
2542: EF08         ; if user ext > dir ext then user := 0 records                             	;
2543: EF08 79                     LD     A,C                  ; Get the Dir's EXT                	;
2544: EF09 BE                     CP     M                    ; Does it match the FCB'd          	;
2545: EF0A 78                     LD     A,B                  ; Get the Dir's  record count      	;
2546: EF0B CA 15 EF               JP     Z,OpenSetRecordCount ; If same EXT value, use it.       	;
2547: EF0E 3E 00                  LD     A,0                  ;   else prepare for RC = 0        	;
2548: EF10 DA 15 EF               JP     C,OpenSetRecordCount ; If FCB EXT > Dir EXTr            	;
2549: EF13 3E 80                  LD     A,RecordsPerExtent   ;   else max record count out      	;
2550: EF15             OpenSetRecordCount:                      ;
2551: EF15 2A C3 EA               LD     HL,(paramDE)         ; Get FCB's address                	;
2552: EF18 11 0F 00               LD     DE,fcbRCIndex        ; Get record count index           	;
2553: EF1B 19                     ADD    HL,DE                ; FCB's record count               	;
2554: EF1C 77                     LD     (HL),A               ; Set the value                    	;
2555: EF1D C9                     RET                         ;
2556: EF1E         ;----------------------------- Open File -----------------------------------;
2557: EF1E         ;---------------------------- Close Directory Entry ------------------------;
2558: EF1E             CloseDirEntry:                      ;
2559: EF1E AF                     XOR    A                    ;
2560: EF1F 32 C5 EA               LD     (exitParameterByte),A ; Clear exit parameter              ;
2561: EF22 CD 3A F0               CALL   IsDiskWriteProtected ; Return Z set if writable          ;
2562: EF25 C0                     RET    NZ                   ; Skip close if r/o disk            ;
2563: EF26         ; check file write flag - 0 indicates written                               ;
2564: EF26 CD CA F0               CALL   GetWriteFileFlagValue ; Get file's WriteFileFlag          ;
2565: EF29 CB 7F                  BIT    7,A                  ;  Has it changed ?					;
2566: EF2B         ;	AND		writeFlagMask				; Apply the RO Flag for S2          ;
2567: EF2B C0                     RET    NZ                   ; Skip close if clean file          ;
2568: EF2C         ;
2569: EF2C 0E 0F                  LD     C,nameLength         ;
2570: EF2E CD F0 F0               CALL   SearchForDirectoryRecord ; Find the file's directory record  ;
2571: EF31 CD 9E F1               CALL   AtEndOfDirectory     ; If EOD then there is no more      ;
2572: EF34 C8                     RET    Z                    ;  exit if at EOD                   ;
2573: EF35         ;
2574: EF35         ; merge the FCB's Disk Map with the Directory record Disk Map               ;
2575: EF35 CD A7 F1               CALL   GetCurrentDirectoryRecord ; HL points to directory record     ;
2576: EF38 01 10 00               LD     BC,fcbDiskMapIndex   ; Disk Alloc block map index        ;
2577: EF3B 09                     ADD    HL,BC                ;
2578: EF3C EB                     EX     DE,HL                ; DE = Directory Entry Map pointer  ;
2579: EF3D 2A C3 EA               LD     HL,(paramDE)         ;
2580: EF40 09                     ADD    HL,BC                ; HL = FCB Map Pointer              ;
2581: EF41 0E 10                  LD     C,(fcbLength-fcbDiskMapIndex) ; Size Allocation Map              ;
2582: EF43         ;
2583: EF43             MergeAllocationMaps:                      ;
2584: EF43 3A 4C F5               LD     A,(byteAllocationFlag) ;
2585: EF46 B7                     OR     A                    ;
2586: EF47 CA 5E EF               JP     Z,MergeWordMaps      ; Process Word size Block Numbers   ;
2587: EF4A         ; process byte size Map	                                                    ;
2588: EF4A 7E                     LD     A,(HL)               ; FCB Block number                  ;
2589: EF4B B7                     OR     A                    ; Is it 0 ?                         ;
2590: EF4C 1A                     LD     A,(DE)               ;  anticipate yes                   ;
2591: EF4D C2 51 EF               JP     NZ,MergeFCBisNot0    ;  Skip if no	                    ;
2592: EF50 77                     LD     (HL),A               ; Move Dir Entry Value to FCB		;
2593: EF51             MergeFCBisNot0:                      ;
2594: EF51 B7                     OR     A                    ; Is Dir Entry Value = 0 ?          ;
2595: EF52 C2 57 EF               JP     NZ,MergeDirEntryNot0 ; Skip if no                        ;
2596: EF55 7E                     LD     A,(HL)               ;  else move FCB map value          ;
2597: EF56 12                     LD     (DE),A               ;  to Dir Entry Value 	            ;
2598: EF57             MergeDirEntryNot0:                      ;
2599: EF57 BE                     CP     M                    ; Do FCB and Dir match values       ;
2600: EF58 C2 99 EF               JP     NZ,CloseDirEntryError ;  If not then report error         ;
2601: EF5B C3 73 EF               JP     MergeMapLoop         ; Go see if there is more           ;
2602: EF5E         ;
2603: EF5E             MergeWordMaps:                      ;
2604: EF5E CD 78 F3               CALL   Merge                ; If FCB map value = 0 move Dir's   ;
2605: EF61 EB                     EX     DE,HL                ;
2606: EF62 CD 78 F3               CALL   Merge                ; IF Dir Map value = 0 move FCB's   ;
2607: EF65 EB                     EX     DE,HL                ; HL = FCB Map pointer, DE = Dir's  ;
2608: EF66 1A                     LD     A,(DE)               ; Does the FCB Map value            ;
2609: EF67 BE                     CP     M                    ;  = Dir record Map pointer ?       ;
2610: EF68 C2 99 EF               JP     NZ,CloseDirEntryError ;  If not then report error         ;
2611: EF6B 13                     INC    DE                   ;
2612: EF6C 23                     INC    HL                   ; move on to the MSB                ;
2613: EF6D 1A                     LD     A,(DE)               ;
2614: EF6E BE                     CP     M                    ; do the check for equality         ;
2615: EF6F C2 99 EF               JP     NZ,CloseDirEntryError ;  If not then report error         ;
2616: EF72 0D                     DEC    C                    ; Extra count for 2 bytes           ;
2617: EF73             MergeMapLoop:                      ;
2618: EF73 13                     INC    DE                   ; Advance to the next positions     ;
2619: EF74 23                     INC    HL                   ; in The Maps                       ;
2620: EF75 0D                     DEC    C                    ; Are we done ?                     ;
2621: EF76 C2 43 EF               JP     NZ,MergeAllocationMaps ;  No, do it again                  ;
2622: EF79         ;
2623: EF79         ; Check the EXT                                                             ;
2624: EF79 01 EC FF               LD     BC,-(fcbLength-fcbExtIndex) ;Adjust to get Ext pointer          ;
2625: EF7C 09                     ADD    HL,BC                ;
2626: EF7D EB                     EX     DE,HL                ; HL = Directory Entry EXT pointer  ;
2627: EF7E 09                     ADD    HL,BC                ; DE = FCB EXT Pointer              ;
2628: EF7F 1A                     LD     A,(DE)               ; FCB's extent number               ;
2629: EF80 BE                     CP     M                    ; Is it < Dir Record EXT ?          ;
2630: EF81 DA 8D EF               JP     C,CloseDirEntryEnd   ;  we are done if yes               ;
2631: EF84 77                     LD     (HL),A               ; Else replace the Dir Record EXT   ;
2632: EF85         ; Update directory record count field                                       ;
2633: EF85 01 03 00               LD     BC,fcbRCIndex-fcbExtIndex ; Need to adjust to the record Count;
2634: EF88 09                     ADD    HL,BC                ;
2635: EF89 EB                     EX     DE,HL                ; DE = = Directory Entry EXT pointer;
2636: EF8A 09                     ADD    HL,BC                ; HL = FCB EXT Pointer              ;
2637: EF8B 7E                     LD     A,(HL)               ; Copy the FCB RC to                ;
2638: EF8C 12                     LD     (DE),A               ;  the Directory Record RC          ;
2639: EF8D         ;
2640: EF8D             CloseDirEntryEnd:                      ;
2641: EF8D 3E FF                  LD     A,TRUE               ;
2642: EF8F 32 45 F5               LD     (fcbCopiedFlag),A    ; Set copied flag as true           ;
2643: EF92         ;/	CALL	SeekCopy					; ok to "Write Dir" here            ;
2644: EF92 CD C3 F3               CALL   SeekDir              ; Set up parameters for a Disk I/O  ;
2645: EF95 C3 6D F1               JP     WriteDir             ; Write the directory element       ;
2646: EF98 C9                     RET                         ;
2647: EF99         ;
2648: EF99             CloseDirEntryError:                      ;
2649: EF99 21 C5 EA               LD     HL,exitParameterByte ;
2650: EF9C 35                     DEC    M                    ; Set Exit value to 0FFH            ;
2651: EF9D C9                     RET                         ;
2652: EF9E         ;---------------------------- Close Directory Entry ------------------------;
2653: EF9E         ;----------------------------------- Make new File -------------------------;
2654: EF9E         ;create a new file by creating a directory entry then opening the file      ;
2655: EF9E             MakeNewFile:                      ;
2656: EF9E CD 81 F2               CALL   CheckWrite           ; Terminate with error if Disk R/O  ;
2657: EFA1 2A C3 EA               LD     HL,(paramDE)         ; Get the FCB                       ;
2658: EFA4 E5                     PUSH   HL                   ; FCB                               ;
2659: EFA5 21 1E F5               LD     HL,emptyFCB          ;
2660: EFA8 22 C3 EA               LD     (paramDE),HL         ; Find the first empty dir record   ;
2661: EFAB 0E 01                  LD     C,1                  ;
2662: EFAD CD F0 F0               CALL   SearchForDirectoryRecord ; 0F5H in first position            ;
2663: EFB0 CD 9E F1               CALL   AtEndOfDirectory     ; Check if at end of directory      ;
2664: EFB3 E1                     POP    HL                   ; Recall the FCB pointer            ;
2665: EFB4 22 C3 EA               LD     (paramDE),HL         ;  in case we return here           ;
2666: EFB7 C8                     RET    Z                    ; Exit with No Dir space error      ;
2667: EFB8         ; fill Allocation Map with Zeros	                                        ;
2668: EFB8 11 0F 00               LD     DE,nameLength        ;
2669: EFBB 19                     ADD    HL,DE                ; Start of fill                     ;
2670: EFBC 36 00                  LD     (HL),00              ; Prime the values                  ;
2671: EFBE E5                     PUSH   HL                   ;
2672: EFBF D1                     POP    DE                   ; Copy to DE                        ;
2673: EFC0 13                     INC    DE                   ; adjust the to pointer             ;
2674: EFC1 01 10 00               LD     BC,fcbLength-nameLength-1 ; number of bytes to fill           ;
2675: EFC4 ED B0                  LDIR                        ;
2676: EFC6         ;
2677: EFC6 2A C3 EA               LD     HL,(paramDE)         ; get FCB                           ;
2678: EFC9 11 0D 00               LD     DE,fcbS1Index        ; Get the S1 index                  ;
2679: EFCC 19                     ADD    HL,DE                ; Point to S1                       ;
2680: EFCD 36 00                  LD     (HL),0               ; Set to 0                          ;
2681: EFCF CD B5 F1               CALL   SetDirectoryEntry    ; Update directory entry            ;
2682: EFD2 CD 95 F2               CALL   CopyFCB              ; Update dir entry to Disk          ;
2683: EFD5         ; and set the file write flag to "1"                                        ;
2684: EFD5 C3 D3 F0               JP     SetFileWriteFlag     ; Set the clean entry flag          ;
2685: EFD8         ;----------------------------------- Make new File -------------------------;
2686: EFD8
2687: EFD8         ; DIO
2688: EFD8
2689: EFD8         ;---------------
2690: EFD8         ; set a "1" value in currentDisk position of BC
2691: EFD8         ; return in HL
2692: EFD8             SetCurrentDiskBit:
2693: EFD8 C5                     PUSH   BC                   ; save input parameter
2694: EFD9 3A 1D F5               LD     A,(currentDisk)
2695: EFDC 4F                     LD     C,A                  ; ready parameter for shift
2696: EFDD 21 01 00               LD     HL,1                 ; number to shift
2697: EFE0 CD 57 F4               CALL   ShiftLeftHLbyC       ; HL = mask to integrate
2698: EFE3 C1                     POP    BC                   ; original mask
2699: EFE4 79                     LD     A,C
2700: EFE5 B5                     OR     L
2701: EFE6 6F                     LD     L,A
2702: EFE7 78                     LD     A,B
2703: EFE8 B4                     OR     H
2704: EFE9 67                     LD     H,A                  ; HL = mask or rol(1,currentDisk)
2705: EFEA C9                     RET
2706: EFEB         ;--------------
2707: EFEB
2708: EFEB         ;--------------------------- Scan      Map ----------------------------------;
2709: EFEB         ;-----------------------------------
2710: EFEB         ; byte value from ALLOC is in register A, with shift count
2711: EFEB         ; in register C (to place bit back into position), and
2712: EFEB         ; target ALLOC position in registers HL, rotate and replace
2713: EFEB             RotateAndReplace:
2714: EFEB 0F                     RRCA
2715: EFEC 15                     DEC    D
2716: EFED C2 EB EF               JP     NZ,RotateAndReplace  ; back into position
2717: EFF0 77                     LD     (HL),A               ; back to ALLOC
2718: EFF1 C9                     RET
2719: EFF2         ;-----------------------------------
2720: EFF2
2721: EFF2         ;*****************************************************************
2722: EFF2
2723: EFF2         ;*****************************************************************
2724: EFF2         ;=========================== Disk Utilities ================================;
2725: EFF2         ;--------------------------- Home The Current Disk ------------------------;
2726: EFF2         ;move to home position, then offset to start of dir                        ;
2727: EFF2             Home:                           ;
2728: EFF2 CD 18 F6               CALL   bcHome               ; Sets Track to 0, and checks      ;
2729: EFF5         ; if Buffer needs to be written    ;
2730: EFF5 21 40 F5               LD     HL,dpbOFF            ; Number of tracks before directory;
2731: EFF8 4E                     LD     C,(HL)               ;
2732: EFF9 23                     INC    HL                   ;
2733: EFFA 46                     LD     B,(HL)               ;
2734: EFFB CD 1E F6               CALL   bcSettrk             ; Point at 1st directory position  ;
2735: EFFE         ;
2736: EFFE         ; Set Current Track and Sector to 00                                       ;
2737: EFFE AF                     XOR    A                    ; set ACC to 00                    ;
2738: EFFF 2A 27 F5               LD     HL,(caTrack)         ;
2739: F002 77                     LD     (HL),A               ;
2740: F003 23                     INC    HL                   ;
2741: F004 77                     LD     (HL),A               ;
2742: F005 2A 29 F5               LD     HL,(caSector)        ;
2743: F008 77                     LD     (HL),A               ;
2744: F009 23                     INC    HL                   ;
2745: F00A 77                     LD     (HL),A               ;
2746: F00B C9                     RET                         ;
2747: F00C         ;
2748: F00C         ;--------------------------- Home The Current Disk ------------------------;
2749: F00C         ;--------------------------- Set DMAs -------------------------------------;
2750: F00C             SetDataDMA:                      ;
2751: F00C 21 23 F5               LD     HL,initDAMAddress    ;
2752: F00F 18 03                  JR     SetDMA               ; Skip to complete the call        ;
2753: F011         ;	LD		BC,initDAMAddress                                              ;
2754: F011         ;	JP		bcSetdma					; Call BIOS to set                 ;
2755: F011         ;
2756: F011             SetDirDMA:                      ;
2757: F011 21 2B F5               LD     HL,caDirectoryDMA    ; Load current directory Buffer    ;
2758: F014         ;	LD		BC,caDirectoryDMA			; Load current directory Buffer    ;
2759: F014         ;	JP		bcSetdma					; Call BIOS to set                 ;
2760: F014         ;
2761: F014             SetDMA:                         ;
2762: F014 4E                     LD     C,(HL)               ;
2763: F015 23                     INC    HL                   ;
2764: F016 46                     LD     B,(HL)               ; parameter ready              ;
2765: F017 C3 24 F6               JP     bcSetdma             ; call bios to set             ;
2766: F01A         ;--------------------------- Set DMAs -------------------------------------;
2767: F01A         ;--------------------------- Read Buffer ----------------------------------;
2768: F01A         ;reads into current DMA, using current Disk,Track and Sector               ;
2769: F01A             ReadBuffer:                      ;
2770: F01A CD 27 F6               CALL   bcRead               ; Do the read at the BIOS level    ;
2771: F01D B7                     OR     A                    ; Check status                     ;
2772: F01E C2 B1 F4               JP     NZ,erPermanentNoWait ; Report if Status not OK          ;
2773: F021 C9                     RET                         ;
2774: F022         ;--------------------------- Read Buffer ----------------------------------;
2775: F022         ;--------------------------- Set Current Disk Read Only --------------------;
2776: F022         ;set current disk to read only                                              ;
2777: F022             SetDiskReadOnly:                      ;
2778: F022 2A 1F F5               LD     HL,(readOnlyVector)  ; Get the Vector                    ;
2779: F025         ;
2780: F025 3A 1D F5               LD     A,(currentDisk)      ; Get the current disk              ;
2781: F028 47                     LD     B,A                  ; Move into B                       ;
2782: F029 CD 6E F4               CALL   SetVectorBit         ; Set the bit	                    ;
2783: F02C 22 1F F5               LD     (readOnlyVector),HL  ; Update the Vector                 ;
2784: F02F         ;
2785: F02F 2A 3A F5               LD     HL,(dpbDRM)          ; Directory Max Value               ;
2786: F032 EB                     EX     DE,HL                ;
2787: F033 2A 25 F5               LD     HL,(caDirMaxValue)   ; HL = .Directory max value         ;
2788: F036 73                     LD     (HL),E               ;
2789: F037 23                     INC    HL                   ;
2790: F038 72                     LD     (HL),D               ;
2791: F039 C9                     RET                         ;
2792: F03A         ;--------------------------- Set disk Read Only ----------------------------;
2793: F03A         ;--------------------------- Is Disk Write Protected -----------------------;
2794: F03A         ;Returns:	Z flag	= Set if not Write Protected	(Z)                     ;
2795: F03A         ;					= reset if Write Protected		(NZ)					;
2796: F03A             IsDiskWriteProtected:                      ;
2797: F03A 2A 1F F5               LD     HL,(readOnlyVector)  ; Get Read Only Vector              ;
2798: F03D 3A 1D F5               LD     A,(currentDisk)      ; Get current disk                  ;
2799: F040 47                     LD     B,A                  ;
2800: F041 CD 5E F4               CALL   IsBitSet             ; Check the bit                     ;
2801: F044 C9                     RET                         ; NZ if Disk is RO                  ;
2802: F045         ;--------------------------- Is Disk Write Protected -----------------------;
2803: F045
2804: F045         ;------------------------- Reselect Disk if Necessary ----------------------;
2805: F045         ;check current fcb to see if reselection necessary                         ;
2806: F045             ReselectDisk:                      ;
2807: F045 3E FF                  LD     A,TRUE               ;
2808: F047 32 4D F5               LD     (fResel),A           ; Mark as possible reselect         ;
2809: F04A 2A C3 EA               LD     HL,(paramDE)         ; Point at current FCB              ;
2810: F04D 7E                     LD     A,(HL)               ; Load disk drive (0 = current)     ;
2811: F04E E6 1F                  AND    01FH                 ; Mask out user Number ??           ;
2812: F050 3D                     DEC    A                    ; Normalized to 0..29, or 255       ;
2813: F051 32 C2 EA               LD     (paramE),A           ; Save drive code                   ;
2814: F054 FE 1E                  CP     30                   ;
2815: F056 D2 69 F0               JP     NC,NoSelect          ; Skip drive >= 30                  ;
2816: F059         ;
2817: F059 3A 1D F5               LD     A,(currentDisk)      ; Determine the current drive       ;
2818: F05C 32 4E F5               LD     (entryDisk),A        ; Save it                           ;
2819: F05F 7E                     LD     A,(HL)               ;
2820: F060 32 4F F5               LD     (fcbDisk),A          ; Get calling disk                  ;
2821: F063 E6 E0                  AND    11100000B            ;
2822: F065 77                     LD     (HL),A               ; Preserve User Number              ;
2823: F066 CD F8 ED               CALL   SelectCurrent        ; Select the new disk               ;
2824: F069         ;
2825: F069             NoSelect:                       ;
2826: F069 3A 1C F5               LD     A,(currentUserNumber) ; Get user code 0...31              ;
2827: F06C 2A C3 EA               LD     HL,(paramDE)         ; Point at disk number              ;
2828: F06F B6                     OR     M                    ; Combine                           ;
2829: F070 77                     LD     (HL),A               ; FCB[0] = user number & disk       ;
2830: F071 C9                     RET                         ;
2831: F072         ;------------------------- Reselect Disk if Necessary ----------------------;
2832: F072
2833: F072
2834: F072         ;=========================== Disk Utilities ================================;
2835: F072
2836: F072         ;=========================== File Utilities ================================;
2837: F072         ;--------------------------- Set Record Variables -------------------------;
2838: F072         ;set variables from currently FCB - Current Record, RC, EXM                ;
2839: F072             SetRecordVars:                      ;
2840: F072 CD 89 F0               CALL   GetFcbRecordDetails  ; DE = .RecordCount                ;
2841: F075         ;  and HL => .CurrentRecord        ;
2842: F075 7E                     LD     A,(HL)               ;
2843: F076 32 52 F5               LD     (currentFileRecord),A ; Save current record              ;
2844: F079 EB                     EX     DE,HL                ;
2845: F07A 7E                     LD     A,(HL)               ;
2846: F07B 32 50 F5               LD     (fcbRecordCount),A   ; Save the FCBs RC                 ;
2847: F07E CD 96 F0               CALL   GetExtentAddress     ; HL=.FCB(fcbExtIndex)             ;
2848: F081 3A 37 F5               LD     A,(dpbEXM)           ; Extent mask                      ;
2849: F084 A6                     AND    M                    ; Remove unwanted bits             ;
2850: F085 32 51 F5               LD     (extentValue),A      ; Store the value                  ;
2851: F088 C9                     RET                         ;
2852: F089         ;--------------------------- Set Record Variables -------------------------;
2853: F089         ;----------------------Get File Record Count and Current Record------------;
2854: F089         ; returns with DE pointing at RC from FCB                                  ;
2855: F089         ;         with HL pointing at Current Record                               ;
2856: F089             GetFcbRecordDetails:                      ;
2857: F089 2A C3 EA               LD     HL,(paramDE)         ; Get FCB start                    ;
2858: F08C 11 0F 00               LD     DE,fcbRCIndex        ; Offset to Record Count           ;
2859: F08F 19                     ADD    HL,DE                ;
2860: F090 EB                     EX     DE,HL                ; DE Points to Record Count        ;
2861: F091 21 11 00               LD     HL,recordSeq-fcbRCIndex ;
2862: F094 19                     ADD    HL,DE                ; HL Points to Current Record      ;
2863: F095 C9                     RET                         ;
2864: F096         ;----------------------Get File Record Count and Current Record------------;
2865: F096         ;----------------------Get FileExtent--------------------------------------;
2866: F096         ;get current extent field address to (HL)                                 ;
2867: F096             GetExtentAddress:                      ;
2868: F096 2A C3 EA               LD     HL,(paramDE)         ; Get FCB                          ;
2869: F099 11 0C 00               LD     DE,fcbExtIndex       ; Get EXT offset                   ;
2870: F09C 19                     ADD    HL,DE                ; HL=.fcb(fcbExtIndex)             ;
2871: F09D C9                     RET                         ;
2872: F09E         ;----------------------Get FileExtent--------------------------------------;
2873: F09E         ;--------------------- Set/Reset Disk Map Allocation Bit ------------------;
2874: F09E         ; At Entry:	BC Contains to the Block to be modified                        ;
2875: F09E         ;			E  = TRUE if bit is to be set                                  ;
2876: F09E         ;			E  <> TRUE if bit is to be reset                               ;
2877: F09E         ; At Exit:  The target bit in the target Octet will be set/reset	       ;
2878: F09E             SetResetMapBit:                      ;
2879: F09E         ;
2880: F09E 21 00 00               LD     HL,0000H             ; Move the block number from BC    ;
2881: F0A1 09                     ADD    HL,BC                ;  to HL                           ;
2882: F0A2 4B                     LD     C,E                  ; Move the flag to E               ;
2883: F0A3         ;
2884: F0A3 7D                     LD     A,L                  ; LSB of the Block Number          ;
2885: F0A4 E6 07                  AND    07H                  ; Calculate Mod(Block,8)           ;
2886: F0A6 F5                     PUSH   AF                   ; Save the OctetBit                ;
2887: F0A7 06 03                  LD     B,3                  ;
2888: F0A9 CD 66 F3               CALL   ShiftRightHLbyB      ; Calculate Block / 8              ;
2889: F0AC ED 5B 31 F5               LD     DE,(caAllocVector)   ; Start Of Map                     ;
2890: F0B0 19                     ADD    HL,DE                ; Address of targeted Octet        ;
2891: F0B1 F1                     POP    AF                   ;
2892: F0B2 47                     LD     B,A                  ; Get the bit                      ;
2893: F0B3         ;
2894: F0B3 04                     INC    B                    ; Adjust for looping               ;
2895: F0B4 C5                     PUSH   BC                   ; Will need this later             ;
2896: F0B5             Left:                           ;
2897: F0B5 CB 16                  RL     (HL)                 ; Rotate the Octet                 ;
2898: F0B7 10 FC                  DJNZ   Left                 ;  to move target bit to bit 0     ;
2899: F0B9 C1                     POP    BC                   ; Restore loop limit and           ;
2900: F0BA 37                     SCF                         ;  set/reset flag                  ;
2901: F0BB 0C                     INC    C                    ; was C = TRUE                     ;
2902: F0BC 28 01                  JR     Z,Right              ; Skip if Set                      ;
2903: F0BE 3F                     CCF                         ; Set for Reset                    ;
2904: F0BF             Right:                          ;
2905: F0BF CB 1E                  RR     (HL)                 ; Move the Octet back              ;
2906: F0C1 10 FC                  DJNZ   Right                ;  to its original alignment       ;
2907: F0C3 C9                     RET                         ;
2908: F0C4         ;--------------------- Set/Reset Disk Map Allocation Bit ------------------;
2909: F0C4         ;--------------------- Initialize Extent Number MSB -----------------------;
2910: F0C4         ;clear the Extent number field for user open/make (S2)                    ;
2911: F0C4             InitializeExtentNumberMSB:                      ;
2912: F0C4 CD CA F0               CALL   GetExtentNumberMSB   ;
2913: F0C7 36 00                  LD     (HL),0               ; Set it to = 0            ;
2914: F0C9 C9                     RET                         ;
2915: F0CA         ;--------------------- Initialize Extent Number MSB -----------------------;
2916: F0CA         ;--------------------- Get Extent Number MSB| Write Protect ---------------;
2917: F0CA         ; Get S2 value                                                             ;
2918: F0CA         ;  Returns:	A = S2 Value (bit 7 write protect, bits 0-6 Ext MSB)           ;
2919: F0CA         ;			HL = Address of S2 for the FCB pointed to by paramDE           ;
2920: F0CA             GetWriteFileFlagValue:                      ; S2 bit 7                 ;
2921: F0CA             GetExtentNumberMSB:                      ; S2 bits 0-6              ;
2922: F0CA 2A C3 EA               LD     HL,(paramDE)         ; FCB address              ;
2923: F0CD 11 0E 00               LD     DE,fcbS2Index        ; Index to value           ;
2924: F0D0 19                     ADD    HL,DE                ; Address of value         ;
2925: F0D1 7E                     LD     A,(HL)               ; load into ACC            ;
2926: F0D2 C9                     RET                         ;
2927: F0D3         ;--------------------- Get Extent Number MSB| Write Protect ---------------;
2928: F0D3         ;--------------------------- Set File Write Flag----------------------------;
2929: F0D3         ;Set file write flag in FCB in (paramDE)									;
2930: F0D3         ; Used to indicate the FCB is clean. No need to write on close				;
2931: F0D3             SetFileWriteFlag:                      ;
2932: F0D3 CD CA F0               CALL   GetWriteFileFlagValue ; A= Value, HL = Address of fcbS2   ;
2933: F0D6 CB FE                  SET    7,(HL)               ; Set the FileWriteFlag				;
2934: F0D8 C9                     RET                         ;
2935: F0D9         ;?	OR		writeFlagMask				; Set the flag , bit 7 of S2        ;
2936: F0D9         ;?	LD		(HL),A						; Put into FCB                      ;
2937: F0D9         ;?	RET	                                                                    ;
2938: F0D9         ;--------------------------- Set File Write Flag----------------------------;
2939: F0D9         ;--------------------------- Reset File Write Flag--------------------------;
2940: F0D9         ;Reset file write flag in FCB in (paramDE)									;
2941: F0D9         ; Used to indicate the FCB is dirty. Need to write on close					;
2942: F0D9             ResetFileWriteFlag:                      ;
2943: F0D9 CD CA F0               CALL   GetWriteFileFlagValue ; A= Value, HL = Address of fcbS2   ;
2944: F0DC CB BE                  RES    7,(HL)               ; Reset the FileWriteFlag			;
2945: F0DE C9                     RET                         ;
2946: F0DF         ;?	AND		0FFH-writeFlagMask			; Remove the flag bit		        ;
2947: F0DF         ;?	LD		(HL),A						; Put into FCB                      ;
2948: F0DF         ;?	RET	                                                                    ;
2949: F0DF         ;--------------------------- Reset File Write Flag--------------------------;
2950: F0DF         ;-------------------------- Compare FCB Extents ----------------------------;
2951: F0DF         ; Enters:	A containing Target FCB EXT value								;
2952: F0DF         ;			HL Points at Possible FCB EXT value								;
2953: F0DF         ;compare extent# in A with that in C, return nonzero if they do not match	;
2954: F0DF             CompareExtents:                      ;
2955: F0DF C5                     PUSH   BC                   ; Save Callers Registers			;
2956: F0E0 F5                     PUSH   AF                   ; Save Target FCB EXT value    		;
2957: F0E1 3A 37 F5               LD     A,(dpbEXM)           ; Load the Extent Mask         		;
2958: F0E4 2F                     CPL                         ; Complement for And           		;
2959: F0E5 47                     LD     B,A                  ; Put negated Mask into B      		;
2960: F0E6 7E                     LD     A,(HL)               ; Get Possible FCBs EXT        		;
2961: F0E7 A0                     AND    B                    ; Apply the Mask               		;
2962: F0E8 4F                     LD     C,A                  ; Low bits removed from C      		;
2963: F0E9 F1                     POP    AF                   ; Restore Target FCB EXT value 		;
2964: F0EA A0                     AND    B                    ; Apply the Mask               		;
2965: F0EB 91                     SUB    C                    ; Test if Equal ( Z Flag)      		;
2966: F0EC E6 1F                  AND    maxExtValue          ; Limit Size ?                 		;
2967: F0EE C1                     POP    BC                   ; Restore Callers Registers    		;
2968: F0EF C9                     RET                         ;
2969: F0F0         ;-------------------------- Compare FCB Extents ----------------------------;
2970: F0F0         ;---------------------Search for Directory Record --------------------------;
2971: F0F0         ;  Search for directory record of length C.									;
2972: F0F0         ; Target is pointed to by paramDE. The whole directory is searched.			;
2973: F0F0         ; If not found then dirEntryIndex is set to -1, else it points to the		;
2974: F0F0         ; matched directory record													;
2975: F0F0         ; Entry:	C = Search Length                                               ;
2976: F0F0         ; Exit		dirEntryIndex  =	Matched directory index, if found			;
2977: F0F0         ;								-1 (EOD) if there is no match				;
2978: F0F0             SearchForDirectoryRecord:                      ;
2979: F0F0 3E FF                  LD     A,0FFH               ;
2980: F0F2 32 47 F5               LD     (directoryIndex),A   ; Initialize directory Index        ;
2981: F0F5 21 49 F5               LD     HL,searchLength      ;
2982: F0F8 71                     LD     (HL),C               ; Save Search Length                ;
2983: F0F9 2A C3 EA               LD     HL,(paramDE)         ; Active FCB                        ;
2984: F0FC 22 4A F5               LD     (searchAddress),HL   ; Start of search                   ;
2985: F0FF CD 97 F1               CALL   SetEndDirectory      ; DirEntryIndex = -1                ;
2986: F102 CD F2 EF               CALL   Home                 ; Reset Disk,Track, & Sector        ;
2987: F105         ;
2988: F105             GetNextDirectoryRecord:                      ;
2989: F105 0E 00                  LD     C,FALSE              ;
2990: F107 CD 95 F3               CALL   ReadDirectory        ; Read next Dir Record              ;
2991: F10A CD 9E F1               CALL   AtEndOfDirectory     ;
2992: F10D CA 64 F1               JP     Z,NoDirRecordsMatch  ; Done if at EOD                ;
2993: F110         ;
2994: F110 2A 4A F5               LD     HL,(searchAddress)   ; Get Current Dir Entry             ;
2995: F113 EB                     EX     DE,HL                ; DE=beginning of Directory Entry   ;
2996: F114 1A                     LD     A,(DE)               ; User Number                       ;
2997: F115 FE E5                  CP     emptyDir             ; Is Dir entry is empty             ;
2998: F117 CA 22 F1               JP     Z,GetNextDirectoryRecord1 ; Skip if empty                     ;
2999: F11A         ;
3000: F11A         ; Check to be sure we are sill in the Directory                             ;
3001: F11A D5                     PUSH   DE                   ; Save search address               ;
3002: F11B CD BE F1               CALL   StillInDirectory     ; Still in the directorY            ;
3003: F11E D1                     POP    DE                   ; Recall address                    ;
3004: F11F D2 64 F1               JP     NC,NoDirRecordsMatch ; Get out if past directory			;
3005: F122         ;
3006: F122             GetNextDirectoryRecord1:                      ;
3007: F122 CD A7 F1               CALL   GetCurrentDirectoryRecord ; Point at next directory record    ;
3008: F125 3A 49 F5               LD     A,(searchLength)     ;
3009: F128 4F                     LD     C,A                  ; SearchLength to c (down)          ;
3010: F129 06 00                  LD     B,0                  ; Character Index (up)              ;
3011: F12B         ;
3012: F12B             TestNextPosition:                      ;
3013: F12B 1A                     LD     A,(DE)               ;
3014: F12C FE 3F                  CP     QMARK                ; ? is always a char match          ;
3015: F12E CA 4C F1               JP     Z,SetNextPosition    ; Done with this if it is ?		;
3016: F131         ;
3017: F131 78                     LD     A,B                  ;
3018: F132 FE 0D                  CP     fcbS1Index           ; At File S1 position ?             ;
3019: F134 CA 4C F1               JP     Z,SetNextPosition    ; Done with this if it is ?		;
3020: F137         ; not the fcbS1Index field, extent field?                                  ;
3021: F137 FE 0C                  CP     fcbExtIndex          ; Past File Type position ?         ;
3022: F139 1A                     LD     A,(DE)               ; Get next character                ;
3023: F13A CA 46 F1               JP     Z,CheckExtents       ; Skip to search extent             ;
3024: F13D 96                     SUB    M                    ; Do they match ?                   ;
3025: F13E E6 7F                  AND    07FH                 ; Strip MSBit                       ;
3026: F140 C2 05 F1               JP     NZ,GetNextDirectoryRecord ; Skip if not matched               ;
3027: F143 C3 4C F1               JP     SetNextPosition      ; Matched the character             ;
3028: F146         ;                                                                           ;
3029: F146             CheckExtents:                      ;
3030: F146 CD DF F0               CALL   CompareExtents       ; Matching EXTs is work             ;
3031: F149 C2 05 F1               JP     NZ,GetNextDirectoryRecord ; Get out if not matched            ;
3032: F14C         ;
3033: F14C             SetNextPosition:                      ;
3034: F14C 13                     INC    DE                   ; Pointer to Looking FOR            ;
3035: F14D 23                     INC    HL                   ; Pointer to Looking IN             ;
3036: F14E 04                     INC    B                    ; Character Index in FCB            ;
3037: F14F 0D                     DEC    C                    ; Length of search                  ;
3038: F150 C2 2B F1               JP     NZ,TestNextPosition  ;
3039: F153         ; Match Found, entire name matches                                          ;
3040: F153 3A 57 F5               LD     A,(dirEntryIndex)    ; Get current Directory Index       ;
3041: F156 E6 03                  AND    dirEntryMask         ; Apply the mask                    ;
3042: F158 32 C5 EA               LD     (exitParameterByte),A ; Put 0...3. Match FOund            ;
3043: F15B         ;
3044: F15B 21 47 F5               LD     HL,directoryIndex    ; Point at Directory Flag           ;
3045: F15E 7E                     LD     A,(HL)               ; Get value                         ;
3046: F15F 17                     RLA                         ; Set Carry if Flag = -1            ;
3047: F160 D0                     RET    NC                   ; Return with flag still -1         ;
3048: F161         ;
3049: F161 AF                     XOR    A                    ; Else Clear the flag               ;
3050: F162 77                     LD     (HL),A               ;
3051: F163 C9                     RET                         ;  and exit                         ;
3052: F164         ;------                                                                     ;
3053: F164             NoDirRecordsMatch:                      ;
3054: F164 CD 97 F1               CALL   SetEndDirectory      ; Set End of Directory -1           ;
3055: F167 3E FF                  LD     A,-1                 ; Put Failure Code                  ;
3056: F169 32 C5 EA               LD     (exitParameterByte),A ;  into return parameter            ;
3057: F16C C9                     RET                         ;
3058: F16D         ;---------------------Search for Directory Record --------------------------;
3059: F16D         ;---------------------------- Write Current Directory Entry ----------------;
3060: F16D             WriteDir:                       ;
3061: F16D         ;	CALL	NewCheckSum						; initialize entry              ;
3062: F16D 0E FF                  LD     C,TRUE               ;
3063: F16F CD 0E F4               CALL   CheckSumUtility      ; Set New CheckSum              ;
3064: F172         ;
3065: F172 CD 11 F0               CALL   SetDirDMA            ; Directory DMA                 ;
3066: F175 0E 01                  LD     C,WriteDirectory     ; Write type                    ;
3067: F177 CD 7D F1               CALL   WriteBuffer          ; Write the buffer              ;
3068: F17A C3 0C F0               JP     SetDataDMA           ; Reset DMA to default			;
3069: F17D         ;
3070: F17D         ;---------------------------- Write Current Directory Entry ----------------;
3071: F17D         ;----------------------------------- Write Buffer --------------------------;
3072: F17D         ; Write buffer and check result. Current drive,Track, Sector and DMA		;
3073: F17D         ; Are set up prior to calling this routine                                  ;
3074: F17D         ;                                                                           ;
3075: F17D         ; On Entry: C = 0 => normal write operation		WriteAllocated              ;
3076: F17D         ;				1 => directory write operation	WriteDirectory              ;
3077: F17D         ;				2 => start of new block			WriteCleanBuffer			;
3078: F17D             WriteBuffer:                      ;
3079: F17D CD 2A F6               CALL   bcWrite              ; Call into BIOS                    ;
3080: F180 B7                     OR     A                    ; Get return code                   ;
3081: F181 C2 B1 F4               JP     NZ,erPermanentNoWait ; Error if not 00                   ;
3082: F184 C9                     RET                         ;
3083: F185         ;----------------------------------- Write Buffer --------------------------;
3084: F185         ;---------------------------- Update Record Vars ---------------------------;
3085: F185         ;update variables from I/O in  FCB                                          ;
3086: F185             UpdateRecordVariables:                      ;
3087: F185 CD 89 F0               CALL   GetFcbRecordDetails  ; DE => FCB RC, HL => CurrentRecord ;
3088: F188 3A 42 F5               LD     A,(diskAccessType)   ; If Seq IO it is set to 1			;
3089: F18B 4F                     LD     C,A                  ;  and move it to C                 ;
3090: F18C 3A 52 F5               LD     A,(currentFileRecord) ; Get NEXT_RECORD                   ;
3091: F18F 81                     ADD    A,C                  ; Update record count               ;
3092: F190 77                     LD     (HL),A               ;  for CurrentRecord                ;
3093: F191 EB                     EX     DE,HL                ;
3094: F192 3A 50 F5               LD     A,(fcbRecordCount)   ;
3095: F195 77                     LD     (HL),A               ;  and FCB RC                       ;
3096: F196 C9                     RET                         ;
3097: F197         ;---------------------------- Update Record Vars ---------------------------;
3098: F197
3099: F197         ; FU
3100: F197         ;=========================== File Utilities ================================;
3101: F197
3102: F197         ;=========================== Directory Utilities ===========================;
3103: F197         ;--------------------------- Set End of Directory indicator ----------------;
3104: F197             SetEndDirectory:                      ;
3105: F197 21 FF FF               LD     HL,EOD               ; Put -1 (0FFFFH) in index          ;
3106: F19A 22 57 F5               LD     (dirEntryIndex),HL   ;
3107: F19D C9                     RET                         ;
3108: F19E         ;--------------------------- Set End of Directory indicator ----------------;
3109: F19E         ;--------------------------- Are we at End Of Directory --------------------;
3110: F19E         ; Tests to see if we are at the End Of the Directory                        ;
3111: F19E         ;                                                                           ;
3112: F19E         ; exits With Z Flag Set if at EOD (dirEntryIndex = -1)                      ;
3113: F19E         ;			 Z Flag reset if still in directory                             ;
3114: F19E         ;
3115: F19E             AtEndOfDirectory:                      ;
3116: F19E 21 57 F5               LD     HL,dirEntryIndex     ; Point at LSB of Dir index         ;
3117: F1A1 7E                     LD     A,(HL)               ; Get it                            ;
3118: F1A2 23                     INC    HL                   ; Point at MSB	of Dir Index		;
3119: F1A3 BE                     CP     M                    ; LSB = MSB ?                       ;
3120: F1A4 C0                     RET    NZ                   ;  exit if not if different         ;
3121: F1A5         ; Same.  are they = 0ffh?           ;
3122: F1A5 3C                     INC    A                    ;  if yes, A= 0, set Z flag         ;
3123: F1A6 C9                     RET                         ;
3124: F1A7         ;--------------------------- Are we at End Of Directory --------------------;
3125: F1A7         ;--------------------------- Get Directory Element -------------------------;
3126: F1A7         ; compute the address of a directory element in Directory Buffer            ;
3127: F1A7         ; Returns:  HL = Address of the specific directory Entry                    ;
3128: F1A7             GetCurrentDirectoryRecord:                      ;
3129: F1A7 C5                     PUSH   BC                   ; Save BC                           ;
3130: F1A8 2A 2B F5               LD     HL,(caDirectoryDMA)  ; Get the Directory Buffer base     ;
3131: F1AB 3A 56 F5               LD     A,(dirBlockIndex)    ; Get the index value               ;
3132: F1AE 4F                     LD     C,A                  ;
3133: F1AF AF                     XOR    A                    ; Set to Zero and reset CY          ;
3134: F1B0 47                     LD     B,A                  ;
3135: F1B1 ED 4A                  ADC    HL,BC                ; Compute the Entry Location        ;
3136: F1B3 C1                     POP    BC                   ; Restore	                        ;
3137: F1B4 C9                     RET                         ;
3138: F1B5         ;--------------------------- Get Directory Element -------------------------;
3139: F1B5         ;--------------------------- Set Directory Entry ---------------------------;
3140: F1B5         ; Will update directory if not in the directory                             ;
3141: F1B5         ;
3142: F1B5             SetDirectoryEntry:                      ;
3143: F1B5 CD BE F1               CALL   StillInDirectory     ;
3144: F1B8 D8                     RET    C                    ; Exit if still in the Directory  	;
3145: F1B9         ;
3146: F1B9         ; StillInDirectory will return with:                                        ;
3147: F1B9         ;									DE = Directory entry number             ;
3148: F1B9         ;									HL = Address of entry number + 1        ;
3149: F1B9 13                     INC    DE                   ;
3150: F1BA 72                     LD     (HL),D               ;
3151: F1BB 2B                     DEC    HL                   ;
3152: F1BC 73                     LD     (HL),E               ;
3153: F1BD C9                     RET                         ;
3154: F1BE         ;--------------------------- Set Directory Entry ---------------------------;
3155: F1BE         ;--------------------------- Are we sill in the Directory ------------------;
3156: F1BE         ;Returns	:                                                               ;
3157: F1BE         ;			CY Set   if dirEntryIndex <= Directory Max Value                ;
3158: F1BE         ;			CY Reset if dirEntryIndex  > Directory Max Value                ;
3159: F1BE         ;			HL = (address of Index Value) + 1                               ;
3160: F1BE         ;			DE = Directory Index Value                                      ;
3161: F1BE             StillInDirectory:                      ;
3162: F1BE 2A 57 F5               LD     HL,(dirEntryIndex)   ;
3163: F1C1 EB                     EX     DE,HL                ; DE = directory counter            ;
3164: F1C2 2A 25 F5               LD     HL,(caDirMaxValue)   ; HL = caDirMaxValue              	;
3165: F1C5 7B                     LD     A,E                  ;
3166: F1C6 96                     SUB    M                    ;
3167: F1C7 23                     INC    HL                   ;
3168: F1C8 7A                     LD     A,D                  ;
3169: F1C9 9E                     SBC    A,(HL)               ; Set CY if dirEntryIndex           ;
3170: F1CA C9                     RET                         ;  <= Directory Max Value       ;
3171: F1CB         ;--------------------------- Are we sill in the Directory ------------------;
3172: F1CB         ;--------------------------- Scan Disk Map ---------------------------------;
3173: F1CB         ; Will Set/Reset the Allocation Map bit(s) for the current directory entry. ;
3174: F1CB         ;                                                                           ;
3175: F1CB         ; On Entry  C = TRUE	Set the Map bits for each block found in FCB        ;
3176: F1CB         ;           C = FALSE	reset the Map bits for each block found in FCB      ;
3177: F1CB         ;
3178: F1CB             ScanDiskMap:                      ;
3179: F1CB C5                     PUSH   BC                   ; Save the Set/Reset Info           ;
3180: F1CC CD A7 F1               CALL   GetCurrentDirectoryRecord ; HL points at the directory record ;
3181: F1CF 11 10 00               LD     DE,fcbDiskMapIndex   ; DE is the index to the FCBs Map   ;
3182: F1D2 19                     ADD    HL,DE                ; HL is now at start of the MAP     ;
3183: F1D3 0E 11                  LD     C,fcbLength-fcbDiskMapIndex+1 ; Size of Disk Allocation Map + 1  ;
3184: F1D5         ;
3185: F1D5             ScanDiskMap0:                      ;
3186: F1D5 D1                     POP    DE                   ; Recall the set/reset Info         ;
3187: F1D6 0D                     DEC    C                    ;
3188: F1D7 C8                     RET    Z                    ; Loop once for each disk map entry ;
3189: F1D8         ;
3190: F1D8 D5                     PUSH   DE                   ; Save the Set/Reset Info           ;
3191: F1D9 3A 4C F5               LD     A,(byteAllocationFlag) ; Is Map Byte or Word sized         ;
3192: F1DC B7                     OR     A                    ;
3193: F1DD 28 07                  JR     Z,ScanDiskMapWord    ; Skip if Word Sized                ;
3194: F1DF         ;  Byte Allocation scan operation                                           ;
3195: F1DF C5                     PUSH   BC                   ; Save counter                      ;
3196: F1E0 E5                     PUSH   HL                   ; Save map address                  ;
3197: F1E1 4E                     LD     C,(HL)               ;
3198: F1E2 06 00                  LD     B,0                  ; BC=block# for Byte                ;
3199: F1E4 18 06                  JR     ScanDiskMap2         ;
3200: F1E6         ; Word scan operation                                                       ;
3201: F1E6             ScanDiskMapWord:                      ;
3202: F1E6 0D                     DEC    C                    ; Adjust counter for 2 bytes        ;
3203: F1E7 C5                     PUSH   BC                   ; Save counter                      ;
3204: F1E8 46                     LD     B,(HL)               ;
3205: F1E9 23                     INC    HL                   ;
3206: F1EA 4E                     LD     C,(HL)               ; BC=block# for Word                ;
3207: F1EB E5                     PUSH   HL                   ; Save map address                  ;
3208: F1EC         ;
3209: F1EC         ; Arrive here with BC=block#, E=0/1	                                        ;
3210: F1EC             ScanDiskMap2:                      ;
3211: F1EC 79                     LD     A,C                  ;
3212: F1ED B0                     OR     B                    ; Skip if = 0000 (No Block)         ;
3213: F1EE C4 9E F0               CALL   NZ,SetResetMapBit    ; bit set to 0/1 its in C           ;
3214: F1F1 E1                     POP    HL                   ;
3215: F1F2 23                     INC    HL                   ; to next bit position              ;
3216: F1F3 C1                     POP    BC                   ; recall counter                    ;
3217: F1F4 C3 D5 F1               JP     ScanDiskMap0         ; for another item                  ;
3218: F1F7         ;
3219: F1F7         ;--------------------------- Scan Disk Map ---------------------------------;
3220: F1F7         ;--------------------------- Get Closest Disk Block ------------------------;
3221: F1F7         ; Find the closest available disk block, and mark in Map as allocated       ;
3222: F1F7         ; Enter	BC	= Block number to base the search on                            ;
3223: F1F7         ; Exit	HL	= 0000 if There are no available open blocks                    ;
3224: F1F7         ;			= block number of available and marked block                    ;
3225: F1F7         ;
3226: F1F7             GetClosestBlock:                      ;
3227: F1F7 C5                     PUSH   BC                   ; save the starting Block #         ;
3228: F1F8         ;
3229: F1F8 2A 38 F5               LD     HL,(dpbDSM)          ; Maximum allocation value          ;
3230: F1FB CD 64 F3               CALL   DivideHLby8          ; Length of Map	                    ;
3231: F1FE EB                     EX     DE,HL                ; put size into DE			        ;
3232: F1FF E1                     POP    HL                   ; Block number into HL              ;
3233: F200 CD 64 F3               CALL   DivideHLby8          ; Length of Map                     ;
3234: F203 EB                     EX     DE,HL                ; Size in HL, Start in DE           ;
3235: F204 AF                     XOR    A                    ; Reset CY                          ;
3236: F205 ED 52                  SBC    HL,DE                ; Size for right                    ;
3237: F207         ; DE = Start Index                                                          ;
3238: F207         ; DE = Left Size                                                            ;
3239: F207         ; HL	= Right Size                                                        ;
3240: F207 E5                     PUSH   HL                   ; Save right size                   ;
3241: F208 D5                     PUSH   DE                   ; Save left size & Start Index      ;
3242: F209 3E FF                  LD     A,0FFH               ; Full Octet                        ;
3243: F20B         ;
3244: F20B 2A 31 F5               LD     HL,(caAllocVector)   ; Start of Map                      ;
3245: F20E 19                     ADD    HL,DE                ; Determine initial Octet			;
3246: F20F         ; Set up Left side                                                          ;
3247: F20F C1                     POP    BC                   ; Left size                         ;
3248: F210 03                     INC    BC                   ; adjust                            ;
3249: F211 E5                     PUSH   HL                   ; Save initial Octet                ;
3250: F212 11 FF FF               LD     DE,-1                ; Flag as Left register set         ;
3251: F215         ; HL = Initial Octet                                                        ;
3252: F215         ; BC = Left Size                                                            ;
3253: F215 D9                     EXX                         ; Use alternate registers           ;
3254: F216 11 00 00               LD     DE,0000H             ; Flag as Right register set        ;
3255: F219 E1                     POP    HL                   ; Get Initial Octet                 ;
3256: F21A C1                     POP    BC                   ; Get Right Size                    ;
3257: F21B 03                     INC    BC                   ; adjust                            ;
3258: F21C             LookRight:                      ;
3259: F21C ED A1                  CPI                         ; UnSet Bit?                        ;
3260: F21E 20 28                  JR     NZ,FoundFreeOctet    ;  Then get out of search           ;
3261: F220 E2 39 F2               JP     PO,NoMoreRight       ; Exhausted Map to the right        ;
3262: F223         ;
3263: F223 D9                     EXX                         ; Switch to the Left                ;
3264: F224 ED A9                  CPD                         ; UnSet Bit?                        ;
3265: F226 20 20                  JR     NZ,FoundFreeOctet    ;  Then get out of search           ;
3266: F228 E2 2E F2               JP     PO,NoMoreLeft        ; Exhausted Map to the right        ;
3267: F22B D9                     EXX                         ; switch to right                   ;
3268: F22C 18 EE                  JR     LookRight            ; Keep on looking                   ;
3269: F22E         ;			----------------			                                    ;
3270: F22E             NoMoreLeft:                      ;
3271: F22E D9                     EXX                         ; Switch to Right                   ;
3272: F22F             NoMoreLeftLoop:                      ;
3273: F22F ED A1                  CPI                         ;
3274: F231 20 15                  JR     NZ,FoundFreeOctet    ;  Then get out of search           ;
3275: F233 E2 44 F2               JP     PO,NoFreeBlocks      ; Exhausted Map to the right		;
3276: F236 18 F7                  JR     NoMoreLeftLoop       ; Keep looking                      ;
3277: F238 76                     HALT                        ;
3278: F239             NoMoreRight:                      ;
3279: F239 D9                     EXX                         ; Switch to Left                    ;
3280: F23A             NoMoreRightLoop:                      ;
3281: F23A ED A9                  CPD                         ;
3282: F23C 20 0A                  JR     NZ,FoundFreeOctet    ;  Then get out of search           ;
3283: F23E E2 44 F2               JP     PO,NoFreeBlocks      ; Exhausted Map to the right        ;
3284: F241 18 F7                  JR     NoMoreRightLoop      ; Keep looking                      ;
3285: F243 76                     HALT                        ;
3286: F244             NoFreeBlocks:                      ;
3287: F244 21 00 00               LD     HL,0000H             ; Return 0000 in HL                 ;
3288: F247 C9                     RET                         ;
3289: F248         ;			----------------			                                    ;
3290: F248             FoundFreeOctet:                      ;
3291: F248 BB                     CP     E                    ; Left or Right                     ;
3292: F249 28 03                  JR     Z,FoundFreeOctet1    ;  it was left                      ;
3293: F24B 2B                     DEC    HL                   ; Adjust for direction              ;
3294: F24C 18 01                  JR     FoundFreeOctet2      ;
3295: F24E         ;
3296: F24E             FoundFreeOctet1:                      ;
3297: F24E 23                     INC    HL                   ; Adjust for direction              ;
3298: F24F             FoundFreeOctet2:                      ;
3299: F24F 01 00 00               LD     BC,00                ; need to keep track of bit         ;
3300: F252             FoundFreeOctet3:                      ;
3301: F252 CB 06                  RLC    (HL)                 ;
3302: F254 03                     INC    BC                   ;
3303: F255 38 FB                  JR     C,FoundFreeOctet3    ; Loop if Bit 7 set                 ;
3304: F257 CB C6                  SET    0,(HL)               ; Make map bit set                  ;
3305: F259 41                     LD     B,C                  ; Put count in B                    ;
3306: F25A             FoundFreeOctet4:                      ;
3307: F25A CB 0E                  RRC    (HL)                 ;
3308: F25C 10 FC                  DJNZ   FoundFreeOctet4      ; Restore the Octet                 ;
3309: F25E 0B                     DEC    BC                   ; adjust for Zero based value       ;
3310: F25F C5                     PUSH   BC                   ; Save the bit index                ;
3311: F260 ED 4B 31 F5               LD     BC,(caAllocVector)   ; Get Map start                     ;
3312: F264 AF                     XOR    A                    ; Clear CY                          ;
3313: F265 ED 42                  SBC    HL,BC                ; Get how far in the map            ;
3314: F267 CD 6E F3               CALL   MultiplyHLby8        ; Calculate the Octet           ;
3315: F26A C1                     POP    BC                   ; Restore index into Octet          ;
3316: F26B 09                     ADD    HL,BC                ; This is the Block Number          ;
3317: F26C C9                     RET                         ;
3318: F26D         ;--------------------------- Get Closest Disk Block ------------------------;
3319: F26D         ;---------------------------- Copy Dir Entry To User's Buffer --------------;
3320: F26D             CopyDirEntryToUserDMA:                      ;
3321: F26D 2A 2B F5               LD     HL,(caDirectoryDMA)  ; Point at Directory buffer         ;
3322: F270 ED 5B 23 F5               LD     DE,(initDAMAddress)  ; Point at User's Buffer            ;
3323: F274 01 80 00               LD     BC,cpmRecordSize     ; The entire record                 ;
3324: F277 ED B0                  LDIR                        ; Move it                           ;
3325: F279 C9                     RET                         ;
3326: F27A         ;---------------------------- Copy Dir Entry To User's Buffer --------------;
3327: F27A         ;--------------------- Return last Directory Index to Caller ---------------;
3328: F27A             DirLocationToReturnLoc:                      ;
3329: F27A 3A 47 F5               LD     A,(directoryIndex)   ; Get last directory Index          ;
3330: F27D 32 C5 EA               LD     (exitParameterByte),A ; Save for return to Caller         ;
3331: F280 C9                     RET                         ;
3332: F281         ;--------------------- Return last Directory Index to Caller ---------------;
3333: F281         ;--------------------------- Check OK to Write to Disk ---------------------;
3334: F281             CheckWrite:                      ;
3335: F281 CD 3A F0               CALL   IsDiskWriteProtected ; Is this disk Write Protected?     ;
3336: F284 C8                     RET    Z                    ; OK to write                       ;
3337: F285 C3 92 F4               JP     errReadOnlyDisk      ; Report read only disk error		;
3338: F288         ;--------------------------- Check OK to Write to Disk ---------------------;
3339: F288         ;--------------------------- Check File Write Protect Status ---------------;
3340: F288             CheckRODirectory:                      ;
3341: F288 CD A7 F1               CALL   GetCurrentDirectoryRecord ; Use Entry in Directory Buffer     ;
3342: F28B         ; Use HL as the directory entry in Question                                 ;
3343: F28B             CheckROFile:                      ;
3344: F28B 11 09 00               LD     DE,fcbROfileIndex    ; Index into FC for RO              ;
3345: F28E 19                     ADD    HL,DE                ; point at the byte                 ;
3346: F28F 7E                     LD     A,(HL)               ;
3347: F290 17                     RLA                         ; Set CY if RO bit set              ;
3348: F291 D0                     RET    NC                   ; Return OK                         ;
3349: F292 C3 98 F4               JP     errReadOnlyFile      ; Report to read only File          ;
3350: F295         ;--------------------------- Check File Write Protect Status ---------------;
3351: F295         ;------------------------- Copy FCB To Directory record --------------------;
3352: F295         ; On Entry:                                                                 ;
3353: F295         ;			C = Starting position                                           ;
3354: F295         ;			E = length of copy                                              ;
3355: F295         ;copy the whole file control block                                          ;
3356: F295             CopyFCB:                        ;
3357: F295 0E 00                  LD     C,0                  ;
3358: F297 1E 20                  LD     E,fcbLength          ; Copy all of the FCB		    ;
3359: F299         ; On Entry:                                                                 ;
3360: F299         ;			C = Starting position                                           ;
3361: F299         ;			E = length of copy                                              ;
3362: F299             CopyDir:                        ;
3363: F299 16 00                  LD     D,0                  ; Make length a word value      ;
3364: F29B D5                     PUSH   DE                   ; Length                        ;
3365: F29C 06 00                  LD     B,0                  ; Make index a word             ;
3366: F29E 2A C3 EA               LD     HL,(paramDE)         ; HL = source for data          ;
3367: F2A1 09                     ADD    HL,BC                ;
3368: F2A2 EB                     EX     DE,HL                ;
3369: F2A3 CD A7 F1               CALL   GetCurrentDirectoryRecord ; HL pointer to Dir Record      ;
3370: F2A6 EB                     EX     DE,HL                ;
3371: F2A7 C1                     POP    BC                   ; Length                        ;
3372: F2A8 ED B0                  LDIR                        ;
3373: F2AA CD C3 F3               CALL   SeekDir              ; Seek to the dir entry         ;
3374: F2AD C3 6D F1               JP     WriteDir             ; Write the directory element   ;
3375: F2B0         ;------------------------- Copy FCB from Directory record ------------------;
3376: F2B0         ;-------------------------------- Get Block Number -------------------------;
3377: F2B0         ;compute disk block number from current FCB                                ;
3378: F2B0             GetBlockNumber:                      ;
3379: F2B0 CD BD F2               CALL   GetDiskMapIndex      ;Return Alloc block index           ;
3380: F2B3 4F                     LD     C,A                  ;
3381: F2B4 06 00                  LD     B,0                  ;
3382: F2B6 CD CA F2               CALL   GetDiskMapValue      ; Convert to Disk record            ;
3383: F2B9 22 54 F5               LD     (absoluteCPMRecord),HL ; Save                              ;
3384: F2BC C9                     RET                         ;
3385: F2BD         ;-------------------------------- Get Block Number -------------------------;
3386: F2BD         ;-------------------------------- Get Disk Map Index -----------------------;
3387: F2BD         ;Return the  disk map Index for current File Record in the ACC              ;
3388: F2BD             GetDiskMapIndex:                      ;
3389: F2BD 21 35 F5               LD     HL,dpbBSH            ; Block# = Record# / (2***dpbBSH)   ;
3390: F2C0 46                     LD     B,(HL)               ; shift count                       ;
3391: F2C1 3A 52 F5               LD     A,(currentFileRecord) ;
3392: F2C4             GetDiskMapIndexLoop:                      ;
3393: F2C4 CB 3F                  SRL    A                    ;
3394: F2C6 10 FC                  DJNZ   GetDiskMapIndexLoop  ; Loop till done                    ;
3395: F2C8 00                     NOP                         ;
3396: F2C9 C9                     RET                         ;
3397: F2CA         ;-------------------------------- Get Disk Map Index -----------------------;
3398: F2CA         ;-------------------------------- Get Disk Map Value -----------------------;
3399: F2CA         ; Enter with Disk Map Index in BC                                           ;
3400: F2CA         ; Return disk map value  in HL                                              ;
3401: F2CA             GetDiskMapValue:                      ;
3402: F2CA 2A C3 EA               LD     HL,(paramDE)         ; FCB                               ;
3403: F2CD 11 10 00               LD     DE,fcbDiskMapIndex   ; Index to Allocation Map           ;
3404: F2D0 19                     ADD    HL,DE                ; Address of Allocation Map Start   ;
3405: F2D1 09                     ADD    HL,BC                ; Point at the targeted map entry   ;
3406: F2D2 3A 4C F5               LD     A,(byteAllocationFlag) ; Is this a byte or word            ;
3407: F2D5 B7                     OR     A                    ;
3408: F2D6 28 04                  JR     Z,GetDiskMap16Bit    ; Skip if word value                ;
3409: F2D8 6E                     LD     L,(HL)               ;  else its a byte value            ;
3410: F2D9 26 00                  LD     H,0                  ;load the byte into HL              ;
3411: F2DB C9                     RET                         ;
3412: F2DC         ;
3413: F2DC             GetDiskMap16Bit:                      ;
3414: F2DC 09                     ADD    HL,BC                ; make it double width              ;
3415: F2DD 56                     LD     D,(HL)               ;
3416: F2DE 23                     INC    HL                   ;
3417: F2DF 5E                     LD     E,(HL)               ; Load word value into DE           ;
3418: F2E0 EB                     EX     DE,HL                ; return value in HL                ;
3419: F2E1 C9                     RET                         ;
3420: F2E2         ;-------------------------------- Get Disk Map Value -----------------------;
3421: F2E2         ;-------------------------------- Allocate The Block -----------------------;
3422: F2E2         ;is  block allocated                                                        ;
3423: F2E2             WasBlockAllocated:                      ;
3424: F2E2 2A 54 F5               LD     HL,(absoluteCPMRecord) ; Get the Block Number              ;
3425: F2E5 7D                     LD     A,L                  ; ZFlag set if                      ;
3426: F2E6 B4                     OR     H                    ;  absoluteCPMRecord = 0            ;
3427: F2E7 C9                     RET                         ;
3428: F2E8         ;-------------------------------- Allocate The Block -----------------------;
3429: F2E8         ;----------------------------- Set Actual Record Add -----------------------;
3430: F2E8         ;
3431: F2E8         ;compute actual record address                                              ;
3432: F2E8         ; result = absolute CPMRecord * ( 2**BSH)                                  ;
3433: F2E8             SetActualRecordAdd:                      ;
3434: F2E8 3A 35 F5               LD     A,(dpbBSH)           ; Block Shift to loop control       ;
3435: F2EB 47                     LD     B,A
3436: F2EC 2A 54 F5               LD     HL,(absoluteCPMRecord) ;
3437: F2EF         ;
3438: F2EF             SetActualRecordAddLoop:                      ;
3439: F2EF 29                     ADD    HL,HL                ;
3440: F2F0 10 FD                  DJNZ   SetActualRecordAddLoop ;
3441: F2F2         ;?	DEC		A								; shl(absolute CPMRecord,dpbBSH);
3442: F2F2         ;?	JP	NZ,SetActualRecordAddLoop                                           ;
3443: F2F2         ;
3444: F2F2         ; HL has Record number for start of the block;                              ;
3445: F2F2 3A 36 F5               LD     A,(dpbBLM)           ; Get block mask to get current     ;
3446: F2F5 4F                     LD     C,A                  ;  File Record mod Block            ;
3447: F2F6 3A 52 F5               LD     A,(currentFileRecord) ; Get index into block              ;
3448: F2F9 A1                     AND    C                    ; Record index in Block             ;
3449: F2FA B5                     OR     L                    ;
3450: F2FB 6F                     LD     L,A                  ; to HL                             ;
3451: F2FC 22 54 F5               LD     (absoluteCPMRecord),HL ; Absolute CPM Record=HL            ;
3452: F2FF         ; *** Absolute CPM Record now has current record number                     ;
3453: F2FF         ; - Starting record number + index into block                               ;
3454: F2FF C9                     RET                         ;
3455: F300         ;----------------------------- Set Actual Record Add -----------------------;
3456: F300         ;-------------------------------- Open Next Extent -------------------------;
3457: F300         ;close the current extent  and open the next one if possible.              ;
3458: F300         ;readModeFlag is true if in read mode                                      ;
3459: F300             OpenNextExt:                      ;
3460: F300 AF                     XOR    A                    ; Set to 00                         ;
3461: F301 32 45 F5               LD     (fcbCopiedFlag),A    ; Clear Flag                        ;
3462: F304 CD 1E EF               CALL   CloseDirEntry        ; Close current extent.             ;
3463: F307 CD 9E F1               CALL   AtEndOfDirectory     ; Is the directory full?            ;
3464: F30A C8                     RET    Z                    ;  exit it yes                      ;
3465: F30B         ;
3466: F30B CD 96 F0               CALL   GetExtentAddress     ; HL at FCB's EXT                   ;
3467: F30E 7E                     LD     A,(HL)               ; Get previous EXT value            ;
3468: F30F 3C                     INC    A                    ; Add one to it                     ;
3469: F310 E6 1F                  AND    maxExtValue          ; Limit to max value                ;
3470: F312 77                     LD     (HL),A               ; Put it back into the FCB          ;
3471: F313 28 0D                  JR     Z,OpenNextModule     ;  if = 0, need to open new Module  ;
3472: F315         ;
3473: F315 47                     LD     B,A                  ; put Ext value in B                ;
3474: F316 3A 37 F5               LD     A,(dpbEXM)           ; Get the Extent Mask               ;
3475: F319 A0                     AND    B                    ; Mask out unwanted bits            ;
3476: F31A         ; if result is zero, then not in the same group                             ;
3477: F31A 21 45 F5               LD     HL,fcbCopiedFlag     ; Point at Copied Flag              ;
3478: F31D A6                     AND    M                    ;  00 in Acc if not written         ;
3479: F31E 28 0C                  JR     Z,OpenNextExt1       ;  go to next physical extent if 0  ;
3480: F320 18 24                  JR     UpdateFCB            ;  else continue                    ;
3481: F322         ;
3482: F322             OpenNextModule:                      ;
3483: F322 01 02 00               LD     BC,fcbS2Index-fcbExtIndex ; Index difference between EXT & S2 ;
3484: F325 09                     ADD    HL,BC                ; Add to HL( at EXT) gives S2       ;
3485: F326 34                     INC    M                    ; Increment the Module number       ;
3486: F327 7E                     LD     A,(HL)               ; get the new Module number         ;
3487: F328 E6 0F                  AND    moduleMask           ; Mask out unwanted bits            ;
3488: F32A 28 25                  JR     Z,OpenNextExtError   ; If overflow to zero, error exit   ;
3489: F32C         ;
3490: F32C             OpenNextExt1:                      ;
3491: F32C 0E 0F                  LD     C,nameLength         ; Set search/match size             ;
3492: F32E CD F0 F0               CALL   SearchForDirectoryRecord ; Find the file's directory record  ;
3493: F331 CD 9E F1               CALL   AtEndOfDirectory     ; At end of Directory ?             ;
3494: F334 20 10                  JR     NZ,UpdateFCB         ;  No, then keep going              ;
3495: F336         ;
3496: F336 3A 46 F5               LD     A,(readModeFlag)     ;  else at EOD                      ;
3497: F339 3C                     INC    A                    ; 0ffh becomes 00 if read           ;
3498: F33A 28 15                  JR     Z,OpenNextExtError   ; All done if a read                ;
3499: F33C         ;
3500: F33C CD 9E EF               CALL   MakeNewFile          ; With write we can extend file     ;
3501: F33F CD 9E F1               CALL   AtEndOfDirectory     ; Is there room in the directory ?  ;
3502: F342 28 0D                  JR     Z,OpenNextExtError   ;  no, exitParameterByte = 1        ;
3503: F344 18 03                  JR     OpenNextExt3         ;
3504: F346         ;
3505: F346             UpdateFCB:                      ;
3506: F346 CD E4 EE               CALL   CopyDirRecordToFCB   ; Update FCB                        ;
3507: F349             OpenNextExt3:                      ;
3508: F349 CD 72 F0               CALL   SetRecordVars        ; Set variables for current FCB     ;
3509: F34C AF                     XOR    A                    ;
3510: F34D 32 C5 EA               LD     (exitParameterByte),A ; Set exitParameterByte = 0         ;
3511: F350 C9                     RET                         ;
3512: F351         ;
3513: F351             OpenNextExtError:                      ;
3514: F351 CD 86 F3               CALL   SetExitParamTo1      ; ExitParameterByte = 1             ;
3515: F354 C3 D3 F0               JP     SetFileWriteFlag     ; Ensure that it will not be closed ;
3516: F357         ;-------------------------------- Open Next Extent -------------------------;
3517: F357
3518: F357         ;=========================== Directory Utilities ===========================;
3519: F357         ; DU
3520: F357
3521: F357         ;=========================== General   Utilities ===========================;
3522: F357
3523: F357         ;--------------------------- Rotate HL right by value in C ----------------;
3524: F357         ;
3525: F357         ; HL = Value to be rotated Right                                           ;
3526: F357         ;  B = Amount to shift                                                     ;
3527: F357             RotateRightHLbyB:                      ;
3528: F357 37                     SCF                         ; Set carry flag, expect LSBit = 1 ;
3529: F358 CB 45                  BIT    0,L                  ; is LSB set?                      ;
3530: F35A 20 01                  JR     NZ,RotateRightHLbyB1 ; Skip if LSB set              ;
3531: F35C 3F                     CCF                         ; else Clear Carry flag            ;
3532: F35D             RotateRightHLbyB1:                      ;
3533: F35D CB 1C                  RR     H                    ; Shift thru CY                    ;
3534: F35F CB 1D                  RR     L                    ; ditto                            ;
3535: F361 10 F4                  DJNZ   RotateRightHLbyB     ;
3536: F363 C9                     RET                         ;
3537: F364         ;
3538: F364         ;--------------------------- Rotate HL right by value in C ----------------;
3539: F364         ;---------Divide HL by 8  &&  Shift HL right by value in C ----------------;
3540: F364         ; HL = Value to be shifted Right                                           ;
3541: F364             DivideHLby8:                      ;
3542: F364 06 03                  LD     B,3                  ; 8 = 2**3						   ;
3543: F366         ;  B = Amount to shift                                                     ;
3544: F366             ShiftRightHLbyB:                      ;
3545: F366 AF                     XOR    A                    ; else Clear Carry flag            ;
3546: F367 CB 1C                  RR     H                    ; Shift thru CY                    ;
3547: F369 CB 1D                  RR     L                    ; ditto                            ;
3548: F36B 10 F9                  DJNZ   ShiftRightHLbyB      ;
3549: F36D C9                     RET                         ;
3550: F36E         ;---------Divide HL by 8  &&  Shift HL right by value in C ----------------;
3551: F36E         ;---------Multiply HL by 8  &&  Shift HL left by value in C ---------------;
3552: F36E         ; HL = Value to be shifted Left                                            ;
3553: F36E             MultiplyHLby8:                      ;
3554: F36E 06 03                  LD     B,3                  ; 8 = 2**3						   ;
3555: F370         ;  B = Amount to shift                                                     ;
3556: F370             ShiftLeftHLbyB:                      ;
3557: F370 AF                     XOR    A                    ; else Clear Carry flag            ;
3558: F371 CB 15                  RL     L                    ; Shift thru CY                    ;
3559: F373 CB 14                  RL     H                    ; ditto                            ;
3560: F375 10 F9                  DJNZ   ShiftLeftHLbyB       ;
3561: F377 C9                     RET                         ;
3562: F378         ;---------Multiply HL by 8  &&  Shift HL left by value in C ---------------;
3563: F378         ;----------------------------- Merge ---------------------------------------;
3564: F378         ; Merge Map Block Numbers between FCB and directory record                  ;
3565: F378         ; HL has pointer to map for either dir record or FCB,                       ;
3566: F378         ; DE has the other pointer. If HL is pointing to a non empty block, then    ;
3567: F378         ; it just returns, Else it copies the block number to where DE is pointing  ;
3568: F378         ;
3569: F378             Merge:                          ;
3570: F378 7E                     LD     A,(HL)               ; Get the first byte                ;
3571: F379 23                     INC    HL                   ;
3572: F37A B6                     OR     M                    ; OR it with the second byte        ;
3573: F37B 2B                     DEC    HL                   ; Restore HL to start               ;
3574: F37C C0                     RET    NZ                   ; Exit if both are 0s               ;
3575: F37D         ; HL points to a non Zero value	                                            ;
3576: F37D 1A                     LD     A,(DE)               ; Get the first byte                ;
3577: F37E 77                     LD     (HL),A               ; Move it                           ;
3578: F37F 13                     INC    DE                   ;
3579: F380 23                     INC    HL                   ; Increment both pointers           ;
3580: F381 1A                     LD     A,(DE)               ; Get the second byte               ;
3581: F382 77                     LD     (HL),A               ; Move it                           ;
3582: F383 1B                     DEC    DE                   ;
3583: F384 2B                     DEC    HL                   ; Restore HL & DE to start          ;
3584: F385 C9                     RET                         ;
3585: F386         ;----------------------------- Merge ---------------------------------------;
3586: F386         ;------------------------- Set Exit Parameter To 1 -------------------------;
3587: F386             SetExitParamTo1:                      ;
3588: F386 3E 01                  LD     A,1                  ;
3589: F388 32 C5 EA               LD     (exitParameterByte),A ; Put a 1 in the exit parameter     ;
3590: F38B C9                     RET                         ;
3591: F38C         ;------------------------- Set Exit Parameter To 1 -------------------------;
3592: F38C
3593: F38C         ; GU
3594: F38C
3595: F38C         ;=========================== General   Utilities ===========================;
3596: F38C
3597: F38C         ;--------------------------- Read Directory Record -------------------------;
3598: F38C         ; read a directory entry into the directory buffer                          ;
3599: F38C             ReadDirRecord:                      ;
3600: F38C CD 11 F0               CALL   SetDirDMA            ; System Assigned Buffer            ;
3601: F38F CD 1A F0               CALL   ReadBuffer           ; Go to BIOS for the read           ;
3602: F392 C3 0C F0               JP     SetDataDMA           ; Restore DMA                       ;
3603: F395         ;--------------------------- Read Directory Record -------------------------;
3604: F395
3605: F395         ;--------------------------- Read Directory --------------------------------;
3606: F395         ; Read next directory entry                                                 ;
3607: F395         ; Enter :                                                                   ;
3608: F395         ;		C =  TRUE initializing and setting CheckSum                         ;
3609: F395         ;		  <> TRUE Checking existing CheckSum                                ;
3610: F395             ReadDirectory:                      ;
3611: F395 ED 5B 3A F5               LD     DE,(dpbDRM)          ; Number of Dir Entries-1           ;
3612: F399 2A 57 F5               LD     HL,(dirEntryIndex)   ; Prior Directory Index             ;
3613: F39C 23                     INC    HL                   ; Increment the Index               ;
3614: F39D 22 57 F5               LD     (dirEntryIndex),HL   ; Save current directory index      ;
3615: F3A0 AF                     XOR    A                    ; Clear the CY flag                 ;
3616: F3A1 ED 52                  SBC    HL,DE                ; Are we at end Of the directory    ;
3617: F3A3 20 04                  JR     NZ,ReadDirectory0    ;  No the process                   ;
3618: F3A5 CD 97 F1               CALL   SetEndDirectory      ;  else we are done                 ;
3619: F3A8 C9                     RET                         ;
3620: F3A9         ;
3621: F3A9         ; Calculate the entry index Position in Buffer                              ;
3622: F3A9             ReadDirectory0:                      ;
3623: F3A9 3A 57 F5               LD     A,(dirEntryIndex)    ; Get the index                     ;
3624: F3AC E6 03                  AND    dirEntryMask         ; Determine Entry number            ;
3625: F3AE 06 05                  LD     B,fcbShift           ; Shift value for Record Size       ;
3626: F3B0             ReadDirectory1:                      ;
3627: F3B0 87                     ADD    A,A                  ;
3628: F3B1 10 FD                  DJNZ   ReadDirectory1       ;
3629: F3B3 32 56 F5               LD     (dirBlockIndex),A    ; Now save the Index into to buffer ;
3630: F3B6 B7                     OR     A                    ; Is this the 1st entry?            ;
3631: F3B7 C0                     RET    NZ                   ;  return if not.                   ;
3632: F3B8         ;
3633: F3B8 C5                     PUSH   BC                   ; Save init Flag (CheckSum)         ;
3634: F3B9 CD C3 F3               CALL   SeekDir              ; Set up for Directory Read         ;
3635: F3BC CD 8C F3               CALL   ReadDirRecord        ; Read the directory record         ;
3636: F3BF C1                     POP    BC                   ; Recall initialization flag        ;
3637: F3C0 C3 0E F4               JP     CheckSumUtility      ; Checksum the directory            ;
3638: F3C3         ;--------------------------- Read Directory --------------------------------;
3639: F3C3         ;--------------------------- Seek Directory --------------------------------;
3640: F3C3         ;seek the record containing the current directory entry					;
3641: F3C3             SeekDir:                        ;
3642: F3C3 2A 57 F5               LD     HL,(dirEntryIndex)   ; Directory Entry Index             ;
3643: F3C6 06 02                  LD     B,dirEntryShift      ; 4 entries per record              ;
3644: F3C8 CD 66 F3               CALL   ShiftRightHLbyB      ;
3645: F3CB 22 54 F5               LD     (absoluteCPMRecord),HL ;
3646: F3CE 22 59 F5               LD     (dirRecord),HL       ; Save                              ;
3647: F3D1 C3 D4 F3               JP     Seek                 ;
3648: F3D4         ;--------------------------- Seek Directory --------------------------------;
3649: F3D4         ;--------------------------- Seek ------------------------------------------;
3650: F3D4             Seek:                           ;
3651: F3D4 01 FF FF               LD     BC,0FFFFH            ; Initialize the track counter      ;
3652: F3D7 2A 54 F5               LD     HL,(absoluteCPMRecord) ; Get the record in question        ;
3653: F3DA ED 5B 33 F5               LD     DE,(dpbSPT)          ; Get Sectors Per track             ;
3654: F3DE         ;
3655: F3DE             Seek0:                          ;
3656: F3DE 03                     INC    BC                   ; Divide the record                 ;
3657: F3DF AF                     XOR    A                    ;  by the sectors per track         ;
3658: F3E0 ED 52                  SBC    HL,DE                ;
3659: F3E2 30 FA                  JR     NC,Seek0             ;  to get the gross track number    ;
3660: F3E4         ;
3661: F3E4         ;
3662: F3E4 19                     ADD    HL,DE                ; Gets the sector in the track      ;
3663: F3E5 E5                     PUSH   HL                   ; Save Index Sector                 ;
3664: F3E6         ;
3665: F3E6 DD 2A 27 F5               LD     IX,(caTrack)         ;
3666: F3EA DD 71 00               LD     (IX+0),C             ;
3667: F3ED DD 70 01               LD     (IX+1),B             ; Save the Gross Track              ;
3668: F3F0         ;
3669: F3F0 EB                     EX     DE,HL                ; Take the index from the record    ;
3670: F3F1 2A 54 F5               LD     HL,(absoluteCPMRecord) ;
3671: F3F4 AF                     XOR    A                    ;
3672: F3F5 ED 52                  SBC    HL,DE                ;  and you get the Block start      ;
3673: F3F7         ;
3674: F3F7 DD 2A 29 F5               LD     IX,(caSector)        ;
3675: F3FB DD 75 00               LD     (IX+0),L             ;
3676: F3FE DD 74 01               LD     (IX+1),H             ; Save the Block Start              ;
3677: F401         ;
3678: F401 2A 40 F5               LD     HL,(dpbOFF)          ; Get directory Offset (tracks)		;
3679: F404 09                     ADD    HL,BC                ;  to add to the gross Track        ;
3680: F405 E5                     PUSH   HL                   ;  which yields the net or          ;
3681: F406 C1                     POP    BC                   ;  actual track for the record      ;
3682: F407 CD 1E F6               CALL   bcSettrk             ; Set the net (actual) track        ;
3683: F40A         ;
3684: F40A C1                     POP    BC                   ; Get the sector within the track   ;
3685: F40B C3 21 F6               JP     bcSetsec             ;  and set it for the seek          ;
3686: F40E         ;
3687: F40E         ;--------------------------- Seek ------------------------------------------;
3688: F40E         ;--------------------------- Check Sum Utility -----------------------------;
3689: F40E         ; At entry                                                                  ;
3690: F40E         ;			C  = TRUE	-  Set the Checksum values in Vector                ;
3691: F40E         ;			C <> TRUE	-  Validate Checksum value in Vector                ;
3692: F40E         ;
3693: F40E             CheckSumUtility:                      ;
3694: F40E 2A 3E F5               LD     HL,(dpbCKS)          ;
3695: F411 ED 5B 59 F5               LD     DE,(dirRecord)       ;
3696: F415 AF                     XOR    A                    ;
3697: F416 ED 52                  SBC    HL,DE                ; Skip if past the Directory    ;
3698: F418 D8                     RET    C                    ;  Entries                      ;
3699: F419         ;
3700: F419 C5                     PUSH   BC                   ; Save New/Validate Flag        ;
3701: F41A         ;
3702: F41A         ; CheckSum = MOD( SUM(all bytes in The Record), 0FFH)                       ;
3703: F41A             ComputeCheckSum:                      ;
3704: F41A 06 80                  LD     B,cpmRecordSize      ;
3705: F41C 2A 2B F5               LD     HL,(caDirectoryDMA)  ;
3706: F41F EE 00                  XOR                         ;
3707: F421             ComputeCheckSum1:                      ;
3708: F421 86                     ADD    A,(HL)               ;
3709: F422 23                     INC    HL                   ;
3710: F423 10 FC                  DJNZ   ComputeCheckSum1     ;
3711: F425         ; Checksum is in ACC	                                                    ;
3712: F425         ;
3713: F425 2A 2F F5               LD     HL,(caCheckSum)      ; Address of check sum vector       ;
3714: F428 ED 5B 59 F5               LD     DE,(dirRecord)       ; Index to this record              ;
3715: F42C 19                     ADD    HL,DE                ; Address of this record in vector  ;
3716: F42D C1                     POP    BC                   ; Retrieve New/Validate Flag        ;
3717: F42E 0C                     INC    C                    ;
3718: F42F CA 3C F4               JP     Z,SetNewCheckSum     ; Set the Value if Flag was TRUE    ;
3719: F432         ;
3720: F432 BE                     CP     M                    ; Else we are checking the value    ;
3721: F433 C8                     RET    Z                    ; Exit if OK                        ;
3722: F434         ; possible checksum error, are we beyond the end of the disk?               ;
3723: F434 CD BE F1               CALL   StillInDirectory     ;
3724: F437 D0                     RET    NC                   ; OK, if not in the directory       ;
3725: F438 CD 22 F0               CALL   SetDiskReadOnly      ;  else the checksums don't match   ;
3726: F43B C9                     RET                         ;  Set disk RO before returning     ;
3727: F43C         ;
3728: F43C         ;initializing the checksum                                                 ;
3729: F43C             SetNewCheckSum:                      ;
3730: F43C 77                     LD     (HL),A               ;
3731: F43D C9                     RET                         ;
3732: F43E         ;--------------------------- Check Sum Utility -----------------------------;
3733: F43E         ;*****************************************************************
3734: F43E
3735: F43E         ;*****************************************************************
3736: F43E         ;********************** File  Routines ***************************
3737: F43E         ;-----------------------------------------------------------------
3738: F43E         ;-----------------------------------------------------------------
3739: F43E         ;-----------------------------------------------------------------
3740: F43E         ;-----------------------------------------------------------------
3741: F43E         ;-----------------------------------------------------------------
3742: F43E         ;*****************************************************************
3743: F43E
3744: F43E         ;-----------------------------------------------------------------
3745: F43E         ;-----------------------------------------------------------------
3746: F43E
3747: F43E         ;-----------------------------------------------------------------
3748: F43E         ;-----------------------------------------------------------------
3749: F43E
3750: F43E
3751: F43E
3752: F43E
3753: F43E         ;---------------------------------- Is Bit Set -----------------------------;
3754: F43E
3755: F43E
3756: F43E
3757: F43E         ;---------------------
3758: F43E         ;set exitParameterByte to 1
3759: F43E
3760: F43E         ;---------------------
3761: F43E         ;---------------------
3762: F43E         ;*****************************************************************
3763: F43E         ;************************ Utilities ******************************
3764: F43E         ;*****************************************************************
3765: F43E             AddAtoHL:
3766: F43E 85                     ADD    A,L
3767: F43F 6F                     LD     L,A
3768: F440 D0                     RET    NC
3769: F441 24                     INC    H
3770: F442 C9                     RET
3771: F443         ;----------
3772: F443             DEminusHL2HL:
3773: F443 7B                     LD     A,E
3774: F444 95                     SUB    L
3775: F445 6F                     LD     L,A
3776: F446 7A                     LD     A,D
3777: F447 9C                     SBC    A,H
3778: F448 67                     LD     H,A
3779: F449 C9                     RET
3780: F44A         ;-------------
3781: F44A             ShiftRightHLbyC:
3782: F44A 0C                     INC    C
3783: F44B             ShiftRightHLbyC0:
3784: F44B 0D                     DEC    C
3785: F44C C8                     RET    Z
3786: F44D 7C                     LD     A,H
3787: F44E B7                     OR     A
3788: F44F 1F                     RRA
3789: F450 67                     LD     H,A
3790: F451 7D                     LD     A,L
3791: F452 1F                     RRA
3792: F453 6F                     LD     L,A
3793: F454 C3 4B F4               JP     ShiftRightHLbyC0
3794: F457         ;-------
3795: F457             ShiftLeftHLbyC:
3796: F457 0C                     INC    C
3797: F458             ShiftLeftHLbyC0:
3798: F458 0D                     DEC    C
3799: F459 C8                     RET    Z                    ; exit when done
3800: F45A 29                     ADD    HL,HL
3801: F45B C3 58 F4               JP     ShiftLeftHLbyC0
3802: F45E         ;*****************************************************************
3803: F45E         ;? ;move data length of length C from source DE to HL
3804: F45E         ;? MoveX:
3805: F45E         ;?	INC		C
3806: F45E         ;? MoveX0:
3807: F45E         ;?	DEC		C
3808: F45E         ;?	RET	Z
3809: F45E         ;?	LD	A,(DE)
3810: F45E         ;?	LD		(HL),A
3811: F45E         ;?	INC		DE
3812: F45E         ;?	INC		HL
3813: F45E         ;?	JP		MoveX0
3814: F45E         ;?
3815: F45E         ;********** Console OUT Routines*******************??????
3816: F45E
3817: F45E         ;---------------------------------- Is Bit Set ------------------------------;
3818: F45E         ; Enter HL  contains the bit map                                             ;
3819: F45E         ;       B   Has the bit number (0...F)                                       ;
3820: F45E         ; Return ZFlag = 1 if bit is reset (0)                                       ;
3821: F45E         ;              = 0 if bit is set (1)                                         ;
3822: F45E             IsBitSet:                       ;
3823: F45E 04                     INC    B                    ;
3824: F45F             IsBitSetLoop:                      ;
3825: F45F 37                     SCF                         ; Set carry flag, expect LSBit = 1   ;
3826: F460 CB 45                  BIT    0,L                  ; is LSB set?                        ;
3827: F462 20 01                  JR     NZ,IsBitSet1         ; Skip if LSB set                ;
3828: F464 3F                     CCF                         ; else Clear Carry flag              ;
3829: F465             IsBitSet1:                      ;
3830: F465 CB 1C                  RR     H                    ; Shift thru CY                      ;
3831: F467 CB 1D                  RR     L                    ; ditto                              ;
3832: F469 10 F4                  DJNZ   IsBitSetLoop         ;
3833: F46B CB 7C                  BIT    7,H                  ; Bit moved from L LSBit to H MSBit	 ;
3834: F46D C9                     RET                         ;
3835: F46E         ;---------------------------------- Is Bit Set ------------------------------;
3836: F46E
3837: F46E         ;============================ Set/Reset Vector Bit ==========================;
3838: F46E         ;---------------------------------- Set Vector Bit -------------------------;;
3839: F46E         ; Enter  HL  contains the bit map vector                                    ;;
3840: F46E         ;        B   Has the bit number (0...F)                                     ;;
3841: F46E         ; Return HL  Contains the modified bit map vector                           ;;
3842: F46E             SetVectorBit:                      ;;
3843: F46E C5                     PUSH   BC                   ; Save the Bit Number               ;;
3844: F46F CD 5E F4               CALL   IsBitSet             ; Put the bit in the LSBit          ;;
3845: F472         ;;
3846: F472 C1                     POP    BC                   ; Get the bit position              ;;
3847: F473 CB FC                  SET    7,H                  ;;
3848: F475 18 07                  JR     ReAlignVector        ;                                    ;
3849: F477         ;---------------------------------- Set Vector Bit -------------------------;;
3850: F477         ;---------------------------------- Reset Vector Bit -----------------------;;
3851: F477         ; Enter  HL  contains the bit map vector                                    ;;
3852: F477         ;        B   Has the bit number (0...F)                                     ;;
3853: F477         ; Return HL  Contains the modified bit map vector                           ;;
3854: F477             ResetVectorBit:                      ;;
3855: F477 C5                     PUSH   BC                   ; Save the Bit Number               ;;
3856: F478 CD 5E F4               CALL   IsBitSet             ; Put the bit in the LSBit          ;;
3857: F47B         ;;
3858: F47B C1                     POP    BC                   ; Get the bit position              ;;
3859: F47C CB BC                  RES    7,H                  ;;
3860: F47E         ; Fall thru to ReAlignVector                                                 ;
3861: F47E         ;---------------------------------- Reset Vector Bit -----------------------;;
3862: F47E         ;---------------------------------- Set VectorBit --------------------------;;
3863: F47E         ; Adjusts the HL register to its Original Alignment after IsBitSet           ;
3864: F47E         ;
3865: F47E             ReAlignVector:                      ;
3866: F47E 04                     INC    B                    ;
3867: F47F             ReAlignMapLoop:                      ;
3868: F47F 37                     SCF                         ; Set carry flag, expect LSBit = 1   ;
3869: F480 CB 7C                  BIT    7,H                  ; is LSB set?                        ;
3870: F482 20 01                  JR     NZ,ReAlignMap1       ; Skip if LSB set                ;
3871: F484 3F                     CCF                         ; else Clear Carry flag              ;
3872: F485             ReAlignMap1:                      ;
3873: F485 CB 15                  RL     L                    ; Shift thru CY                      ;
3874: F487 CB 14                  RL     H                    ; ditto                              ;
3875: F489 10 F4                  DJNZ   ReAlignMapLoop       ;
3876: F48B C9                     RET                         ;
3877: F48C         ;============================ Set/Reset Vector Bit ==========================;
3878: F48C         ;************Error message World*************************
3879: F48C             errSelect:
3880: F48C 21 AB F4               LD     HL,evSelection
3881: F48F C3 A4 F4               JP     GoToError
3882: F492             errReadOnlyDisk:
3883: F492 21 AD F4               LD     HL,evReadOnlyDisk
3884: F495 C3 A4 F4               JP     GoToError
3885: F498             errReadOnlyFile:
3886: F498 21 AF F4               LD     HL,evReadOnlyFile
3887: F49B C3 A4 F4               JP     GoToError
3888: F49E             errPermanent:
3889: F49E 21 A9 F4               LD     HL,evPermanent
3890: F4A1 C3 A4 F4               JP     GoToError
3891: F4A4         ;************Error message handler **********************
3892: F4A4             GoToError:
3893: F4A4         ;HL = .errorhandler, call subroutine
3894: F4A4 5E                     LD     E,(HL)
3895: F4A5 23                     INC    HL
3896: F4A6 56                     LD     D,(HL)               ; address of routine in DE
3897: F4A7 EB                     EX     DE,HL
3898: F4A8 E9                     JP     (HL)                 ; vector to subroutine
3899: F4A9         ;************ Error Vectors *****************************
3900: F4A9 B7 F4       evPermanent: DW     erPermanent          ; pererr permanent error subroutine
3901: F4AB C3 F4       evSelection: DW     erSelection          ; selerr select error subroutine
3902: F4AD C9 F4       evReadOnlyDisk: DW     erReadOnlyDisk       ; roderr ro disk error subroutine
3903: F4AF CF F4       evReadOnlyFile: DW     erReadOnlyFile       ; roferr ro file error subroutine
3904: F4B1         ;************Error Routines ******************************
3905: F4B1             erPermanentNoWait:
3906: F4B1 21 01 F5               LD     HL,emPermanent
3907: F4B4 C3 A4 F4               JP     GoToError
3908: F4B7             erPermanent:
3909: F4B7 21 01 F5               LD     HL,emPermanent
3910: F4BA CD D8 F4               CALL   displayAndWait       ; to report the error
3911: F4BD FE 03                  CP     CTRL_C
3912: F4BF CA 00 00               JP     Z,WarmBoot           ; reboot if response is CTRL_C
3913: F4C2 C9                     RET                         ; and ignore the error
3914: F4C3         ;
3915: F4C3             erSelection:
3916: F4C3 21 0C F5               LD     HL,emSelection
3917: F4C6 C3 D2 F4               JP     waitB4boot           ; wait console before boot
3918: F4C9         ;
3919: F4C9             erReadOnlyDisk:
3920: F4C9 21 18 F5               LD     HL,emReadOnlyDisk
3921: F4CC C3 D2 F4               JP     waitB4boot           ; wait console before boot
3922: F4CF         ;
3923: F4CF             erReadOnlyFile:
3924: F4CF 21 13 F5               LD     HL,emReadOnlyFile    ; drop through to wait for console
3925: F4D2         ;
3926: F4D2         ; wait for response before boot
3927: F4D2             waitB4boot:
3928: F4D2 CD D8 F4               CALL   displayAndWait
3929: F4D5 C3 00 00               JP     WarmBoot
3930: F4D8
3931: F4D8         ;report error to console, message address in HL
3932: F4D8             displayAndWait:
3933: F4D8 E5                     PUSH   HL                   ; save message pointer
3934: F4D9 CD D6 E9               CALL   showCRLF             ; stack mssg address, new line
3935: F4DC 3A 1D F5               LD     A,(currentDisk)
3936: F4DF C6 41                  ADD    A,ASCII_A
3937: F4E1 32 FD F4               LD     (emDisk),A           ; Problem disk name
3938: F4E4 01 F1 F4               LD     BC,emDisk0
3939: F4E7 CD 3B E9               CALL   Print                ; the error message
3940: F4EA C1                     POP    BC
3941: F4EB CD 3B E9               CALL   Print                ; error mssage tail
3942: F4EE C3 21 E9               JP     ConIn                ; to get the input character
3943: F4F1         ;ret
3944: F4F1         ;**************Error Messages*******************************
3945: F4F1 42 64 6F 73 20 45 72 72 20 4F 6E 20     emDisk0:   DB     'Bdos Err On '
3946: F4FD 20 3A 20 24     emDisk:    DB     ' : $'
3947: F501 42 61 64 20 53 65 63 74 6F 72 24     emPermanent: DB     'Bad Sector$'
3948: F50C 53 65 6C 65 63 74 24     emSelection: DB     'Select$'
3949: F513 46 69 6C 65 20     emReadOnlyFile: DB     'File '
3950: F518 52 2F 4F 24     emReadOnlyDisk: DB     'R/O$'
3951: F51C         ;*****************************************************************
3952: F51C
3953: F51C         ;********* file control block (fcb) constants ********************
3954: F51C             fcbLength  EQU    20H                  ;32				; fcblen file control block size
3955: F51C             fcbROfileIndex EQU    09H                  ; high order of first type char
3956: F51C             fcbHiddenfileIndex EQU    0AH                  ;10				; invisible file in dir command
3957: F51C             fcbExtIndex EQU    0CH                  ;12				; extent number field index
3958: F51C             fcbS1Index EQU    0DH                  ;13				; S1 index
3959: F51C             fcbS2Index EQU    0EH                  ;14				; S2 data module number index
3960: F51C             fcbRCIndex EQU    0FH                  ;15				; record count field index
3961: F51C             fcbDiskMapIndex EQU    10H                  ;16				; dskmap disk map field
3962: F51C
3963: F51C             fcbCurrentRecord EQU    21H                  ;33
3964: F51C
3965: F51C             highestRecordNumber EQU    RecordsPerExtent - 1 ; last record# in extent
3966: F51C
3967: F51C             dirEntriesPerRecord EQU    cpmRecordSize/fcbLength ; directory elts / record
3968: F51C             dirEntryShift EQU    2                    ; log2(dirEntriesPerRecord)
3969: F51C             dirEntryMask EQU    dirEntriesPerRecord-1
3970: F51C             fcbShift   EQU    5                    ; log2(fcbLength)
3971: F51C         ;
3972: F51C
3973: F51C
3974: F51C
3975: F51C             maxExtValue EQU    31                   ; largest extent number
3976: F51C             moduleMask EQU    15                   ; limits module number value
3977: F51C             writeFlagMask EQU    80h                  ; file write flag is high order fcbS2Index
3978: F51C             nameLength EQU    15                   ;  name length
3979: F51C
3980: F51C             emptyDir   EQU    0E5H                 ; empty empty directory entry
3981: F51C             recordSeq  EQU    fcbLength            ; nxtrec
3982: F51C             recordRandom EQU    recordSeq + 1        ;ranrec random record field (2 bytes)
3983: F51C         ;
3984: F51C         ;	reserved file indicators
3985: F51C         ;	equ	11				; reserved
3986: F51C         ;*****************************************************************
3987: F51C         ;*****************************************************************
3988: F51C
3989: F51C         ;***common values shared between bdosi and bdos******************
3990: F51C 00          currentUserNumber: DB     0                    ; usrcode current user number
3991: F51D         ; paramDE:			DS	2					; ParamsDE information address
3992: F51D         ; exitParameterByte:
3993: F51D         ; exitParameterWord:	DS	2					; address value to return
3994: F51D FF          currentDisk: DB     -1                   ; curdsk current disk number
3995: F51E         ; exitParameterByte		EQU	exitParameterWord	; lret low(exitParameterWord)
3996: F51E
3997: F51E         ;********************* Local Variables ***************************
3998: F51E         ;     ************************
3999: F51E         ;     *** Initialized Data ***
4000: F51E
4001: F51E E5          emptyFCB:  DB     emptyDir             ; efcb 0E5 = available dir entry
4002: F51F 00 00       readOnlyVector: DW     0                    ; rodsk read only disk vector
4003: F521 00 00       loggedDisks: DW     0                    ; dlog	 logged-in disks
4004: F523 80 00       initDAMAddress: DW     DMABuffer            ; dmaad tbuff initial dma address
4005: F525
4006: F525         ;     *** Current Disk attributes ****
4007: F525         ; These are set upon disk select
4008: F525         ; data must be adjacent, do not insert variables
4009: F525         ; address of translate vector, not used
4010: F525         ; ca - currentAddress
4011: F525
4012: F525 00 00       caDirMaxValue: DW     0000H                ; cdrmaxa pointer to cur dir max value
4013: F527 00 00       caTrack:   DW     0000H                ; curtrka current track address
4014: F529 00 00       caSector:  DW     0000H                ; current Sector
4015: F52B             caListSizeStart:
4016: F52B 00 00       caDirectoryDMA: DW     0000H                ; buffa pointer to directory dma address
4017: F52D 00 00       caDiskParamBlock: DW     0000H                ; dpbaddr current disk parameter block address
4018: F52F 00 00       caCheckSum: DW     0000H                ; checka current checksum vector address
4019: F531 00 00       caAllocVector: DW     0000H                ; alloca current allocation vector address
4020: F533             caListSizeEnd:
4021: F533             caListSize EQU    caListSizeEnd - caListSizeStart
4022: F533
4023: F533         ;     ***** Disk Parameter Block *******
4024: F533         ; data must be adjacent, do not insert variables
4025: F533         ; dpb - Disk Parameter Block
4026: F533             dpbStart:
4027: F533 00 00       dpbSPT:    DW     0000H                ; sectpt sectors per track
4028: F535 00          dpbBSH:    DB     0000H                ; blkshf block shift factor
4029: F536 00          dpbBLM:    DB     00H                  ; blkmsk block mask
4030: F537 00          dpbEXM:    DB     00H                  ; extmsk extent mask
4031: F538 00 00       dpbDSM:    DW     0000H                ; Maximum allocation number
4032: F53A 00 00       dpbDRM:    DW     0000H                ; dirmax largest directory number
4033: F53C 00 00       dpbDABM:   DW     0000H                ; dirblk reserved allocation bits for directory
4034: F53E 00 00       dpbCKS:    DW     0000H                ; chksiz size of checksum vector
4035: F540 00 00       dpbOFF:    DW     0000H                ; offset offset tracks at beginning
4036: F542             dpbEnd:
4037: F542             dpbSize    EQU    dpbEnd - dpbStart
4038: F542         ;
4039: F542
4040: F542         ;     ************************
4041: F542             SEQ_ACCESS EQU    01H                  ; Indicates sequential access to file
4042: F542             RANDOM_ACCESS EQU    00H                  ; Indicates random access to file
4043: F542 00          diskAccessType: DB     00H                  ; Set to 1 if sequential disk operation
4044: F543
4045: F543 00 00       caSkewTable: DW     0000H                ; tranv address of translate vector
4046: F545 00          fcbCopiedFlag: DB     00H                  ; fcb$copied set true if CopyFCB called
4047: F546 00          readModeFlag: DB     00H                  ; rmf read mode flag for Open NextExt
4048: F547 00          directoryIndex: DB     00H                  ; dirloc directory flag in rename, etc.
4049: F548 00          diskMapIndex: DB     00H                  ; dminx  local for Disk_Write
4050: F549 00          searchLength: DB     00H                  ; searchl search length
4051: F54A 00 00       searchAddress: DW     0000H                ; searcha search address
4052: F54C         ;tinfo:	ds	word							; temp for info in "make"
4053: F54C 00          byteAllocationFlag: DB     00H                  ; set true if single byte allocation map
4054: F54D 00          fResel:    DB     00H                  ; resel reselection flag
4055: F54E 00          entryDisk: DB     00H                  ; olddsk disk on entry to bdos
4056: F54F 00          fcbDisk:   DB     00H                  ; fcbdsk disk named in fcb
4057: F550 00          fcbRecordCount: DB     00H                  ; record count from current FCB
4058: F551 00          extentValue: DB     00H                  ; extent number and dpbEXM from current fcb
4059: F552 00 00       currentFileRecord: DW     0000H                ; Current File Record - fcbCurrentRecord
4060: F554 00 00       absoluteCPMRecord: DW     0000H                ; Raw record ( 4 records / Sector)( 4 Sectors per block)
4061: F556         ;
4062: F556         ;	local variables for directory access
4063: F556 00          dirBlockIndex: DB     00H                  ; directory block Index 0,1,2,3
4064: F557 00 00       dirEntryIndex: DW     00H                  ; directory entry Index  0,1,...,dpbDRM
4065: F559 00 00       dirRecord: DW     00H                  ; drec:	ds	word	;directory record 0,1,...,dpbDRM/4
4066: F55B
4067: F55B         ;********************** data areas ******************************
4068: F55B
4069: F55B
4070: F55B         ;---------------------------------- Stack Area--------------------------------;
4071: F55B             stackBottom: DS     STACK_SIZE * 2       ; stack size                      ;
4072: F59B             bdosStack:
4073: F59B         ;
4074: F59B         ;---------------------------------- Stack Area--------------------------------;
4075: F59B         ;	end of Basic I/O System
4076: F59B         ;-----------------------------------------------------------------;
4077: F59B
4078: F59B
4079: F59B         ;
4080: F59B             Z_HighestLocation:
4081: F59B             Z_MemoryLeft EQU    (BIOSStart-1) - Z_HighestLocation
4082: F59B
4083: F59B
           ************************   Xref   ************************
0000: $               F59B   0418 0448
4060: absoluteCPMRecord F554   1612 3383 3424 3436 3451 3645 3652 3670
3765: AddAtoHL        F43E
1630: Allocate16Bit   EBEF   1625
1045: AreWeAtEndOfBuffer EA3A   1041
0086: ASCII_A         0041   3936
0087: ASCII_C         0043
0088: ASCII_K         004B
0095: ASCII_LO_A      0061
0096: ASCII_LO_K      006B
0097: ASCII_LO_P      0070
0038: ASCII_MASK      007F   0988
0089: ASCII_N         004E
0090: ASCII_Q         0051
0091: ASCII_R         0052
0092: ASCII_W         0057
0093: ASCII_Y         0059
0073: ASCII_ZERO      0030
0067: ASTERISK        002A
3115: AtEndOfDirectory F19E   1433 1759 1948 2022 2482 2513 2571 2663 2991 3463 3493 3501
1137: BackUp          EA9F   1065 1133
1142: BackUp1         EAA7   1138
0295: bcBoot          F600
0298: bcConin         F609   0618 0803 0914 0932
0299: bcConout        F60C   0610 0876 1140 1144 1150 1152
0297: bcConst         F606   0615 0910
0303: bcHome          F618   2728
0300: bcList          F60F   0583 0882
0310: bcListst        F62D
0301: bcPunch         F612   0568
0308: bcRead          F627   2770
0302: bcReader        F615   0549
0311: bcSectran       F630
0304: bcSeldsk        F61B   2385
0307: bcSetdma        F624   2765
0306: bcSetsec        F621   3685
0305: bcSettrk        F61E   2734 3682
0296: bcWboot         F603   0469
0309: bcWrite         F62A   3079
0153: BDOSBase        E800   0154 0156 0327
0122: BDOSE           0005   0123
0154: BDOSEntry       E800
0143: BDOSLength      0E00   0146 0156 0157
4072: bdosStack       F59B   0343
0333: BdosStart       E800
0056: BELL            0007
0156: BIOSBase        F600
0144: BIOSLength      0A00   0146
0116: BIOSPAGE        0002
0157: BIOSStart       F600   0295 0296 0297 0298 0299 0300 0301 0302 0303 0304 0305 0306 0307 0308 0309 0310 0311 4081
0253: BlockSize       0800   0275
1060: BSspaceBS       EA48   0999
0034: BYTE            0001   1173
4053: byteAllocationFlag F54C   1623 2418 2584 3191 3406
4019: caAllocVector   F531   1852 2438 2440 2465 2889 3244 3311
4018: caCheckSum      F52F   3713
4016: caDirectoryDMA  F52B   2405 2757 3130 3321 3705
4012: caDirMaxValue   F525   2396 2472 2787 3164
4017: caDiskParamBlock F52D   1969 2410
4021: caListSize      0008   2406
4020: caListSizeEnd   F533   4021
4015: caListSizeStart F52B   4021
0094: CARET           005E   0842
0836: CaretOut        E948   1034 1115
4014: caSector        F529   2402 2742 3674
4045: caSkewTable     F543   2394
4013: caTrack         F527   2399 2738 3665
0151: CCPEntry        E000   0153 0157
0142: CCPLength       0800   0146 0153 0157
0928: CheckCTL_S      E9AC   0917
3029: CheckExtents    F146   3023
3340: CheckRODirectory F288   1437 1762
3343: CheckROFile     F28B   1574
3693: CheckSumUtility F40E   3063 3637
3334: CheckWrite      F281   1428 1572 1747 2656
2558: CloseDirEntry   EF1E   1287 2242 3462
2640: CloseDirEntryEnd EF8D   2630
2648: CloseDirEntryError EF99   2600 2610 2615
0074: COLON           003A
1171: columnPosition  EAC1   0861 0886 0951 0971 1129
0069: COMMA           002C
2954: CompareExtents  F0DF   3030
3703: ComputeCheckSum F41A
3707: ComputeCheckSum1 F421   3710
0128: ComTail         0080   0129
0130: ComTailChars    0082
0129: ComTailCount    0081   0130
0905: ConBreak        E98C   0729 0872
0938: ConBreak0       E9BA   0930
0940: ConBreak1       E9BD   0908
0796: ConIn           E921   0501 0987 3942
0869: ConsoleOut      E96B   0843 0855 0860 0948 0956 0963 0965 1057
3362: CopyDir         F299   1765 1953
3320: CopyDirEntryToUserDMA F26D   1340 1405
2516: CopyDirRecordToFCB EEE4   3506
3356: CopyFCB         F295   2682
0230: cpmRecordSize   0080   0232 0235 0237 3323 3704 3967
0059: CR              000D   0809 0962 0992 1056
0042: CTRL_C          0003   0933 1039 3911
0043: CTRL_E          0005   1004
0044: CTRL_H          0008   0815 0998 1143
0045: CTRL_K          000B
0046: CTRL_L          000C
0047: CTRL_P          0010   0916 1007
0048: CTRL_R          0012   1016
0049: CTRL_S          0013   0929
0050: CTRL_U          0015   1013
0051: CTRL_X          0018   1010
0052: CTRL_Z          001A
3994: currentDisk     F51D   1208 1812 2353 2364 2370 2383 2694 2780 2798 2817 3935
4059: currentFileRecord F552   1496 1506 1576 1654 1687 2843 3090 3391 3447
3990: currentUserNumber F51C   0780 0786 2490 2826
0070: DASH            002D
0264: DataBlocks      02C7   0274
0263: DataSectors     0B1C   0264
1432: DeleteFileLoop  EB25   1444
1124: DeleteTheLine   EA8E   1011
1127: DeleteTheLine1  EA8F   1134
3772: DEminusHL2HL    F443
4063: dirBlockIndex   F556   3131 3629
0235: DirBuffSize     0080
0250: DirectoryBlockCount 0002   0275
0237: DirectoryEntryPerRecord 0004   0278
4048: directoryIndex  F547   2980 3044 3329
3967: dirEntriesPerRecord 0004   3969
4064: dirEntryIndex   F557   3040 3106 3116 3162 3612 3614 3623 3642
3969: dirEntryMask    0003   3041 3624
3968: dirEntryShift   0002   3643
0234: DirEntrySize    0020   0237 0275
3328: DirLocationToReturnLoc F27A   1434 1760 1949
4065: dirRecord       F559   3646 3695 3714
4043: diskAccessType  F542   1489 1566 1676 2187 3088
0222: DiskCommandBlock 0046
0221: DiskControlByte 0045
0224: DiskControlTable 0040
0418: diskf           000B
4049: diskMapIndex    F548   1590 1619
1491: DiskRead        EB49   2171
0226: DiskReadCode    0001
0231: diskSectorSize  0200   0232 0253 0261
0220: DiskStatusLocation 0043
1568: DiskWrite       EB8F   2178
1661: DiskWrite1      EC1A   1657
1670: DiskWrite2      EC26   1665
1691: DiskWriteCleanup EC46   1674 1678
1689: DiskWriteCleanup0 EC44   1685
0227: DiskWriteCode   0002
1564: DiskWriteSeq    EB8A
3932: displayAndWait  F4D8   3910 3928
3541: DivideHLby8     F364   2433 3230 3233
0133: DMABuffer       0080   1210 4004
0063: DOLLAR          0024   0824 2496
0276: dpb3hdAL0       00C0
0277: dpb3hdAL1       0000
0272: dpb3hdBLM       000F
0271: dpb3hdBSH       0004
0278: dpb3hdCKS       0020
0275: dpb3hdDRM       007F   0278
0274: dpb3hdDSM       02C6
0273: dpb3hdEXM       0000
0280: dpb3hdNOH       0002
0279: dpb3hdOFF       0001
0270: dpb3hdSPT       0090
4029: dpbBLM          F536   3445
4028: dpbBSH          F535   3389 3434
4034: dpbCKS          F53E   3694
4033: dpbDABM         F53C   2463
4032: dpbDRM          F53A   2785 3611
4031: dpbDSM          F538   2416 2432 2448 3229
4036: dpbEnd          F542   4037
4030: dpbEXM          F537   2848 2957 3474
4035: dpbOFF          F540   2730 3678
4037: dpbSize         000F   2412
4027: dpbSPT          F533   3653
4026: dpbStart        F533   2411 4037
0450: DUMMY           E8A9   0445 0446
3946: emDisk          F4FD   3937
3945: emDisk0         F4F1   3938
3947: emPermanent     F501   3906 3909
3980: emptyDir        00E5   1439 2486 2997 4001
4001: emptyFCB        F51E   2659
3950: emReadOnlyDisk  F518   3920
3949: emReadOnlyFile  F513   3924
3948: emSelection     F50C   3916
0137: END_OF_FILE     001A
0040: EndOfMessage    0000
1050: EndRead         EA3E   0993 0996
4055: entryDisk       F54E   0391 2818
0292: EOD             FFFF   3105
0078: EQUAL_SIGN      003D
3908: erPermanent     F4B7   3900
3905: erPermanentNoWait F4B1   2772 3081
3919: erReadOnlyDisk  F4C9   3902
3923: erReadOnlyFile  F4CF   3903
3888: errPermanent    F49E
3882: errReadOnlyDisk F492   3337
3885: errReadOnlyFile F498   3349
3879: errSelect       F48C   2363
3915: erSelection     F4C3   3901
3900: evPermanent     F4A9   3889
3902: evReadOnlyDisk  F4AD   3883
3903: evReadOnlyFile  F4AF   3886
3901: evSelection     F4AB   3880
0061: EXCLAIM_POINT   0021
1175: exitParameterByte EAC5   0510 0619 0730 0756 0781 1507 1608 1642 1682 1813 2246 2256 2267 2274 2287 2500 2560 2649 3042 3056 3330 3510 3589
1176: exitParameterWord EAC5   0347 0398 0550 0639 1789 1853 1899 1970
4058: extentValue     F551   2850
0029: FALSE           0000   0923 1095 1440 1569 2176 2422 2989
0125: FCB1            005C   0126
0126: FCB2            006C
4046: fcbCopiedFlag   F545   2642 3461 3477
3963: fcbCurrentRecord 0021
4056: fcbDisk         F54F   0349 0386 2820
3961: fcbDiskMapIndex 0010   1615 1754 1763 2576 2581 3181 3183 3403
3957: fcbExtIndex     000C   1429 1748 1764 1944 1952 2008 2225 2249 2305 2531 2624 2633 2869 3021 3483
0015: fcbExtIndexLSB  000C
0016: fcbExtIndexMSB  000E
3956: fcbHiddenfileIndex 000A
3954: fcbLength       0020   2525 2581 2624 2674 3183 3358 3967 3981
3960: fcbRCIndex      000F   2026 2534 2552 2633 2858 2861
4057: fcbRecordCount  F550   1497 1655 2846 3094
3955: fcbROfileIndex  0009   3344
3958: fcbS1Index      000D   2678 3018
3959: fcbS2Index      000E   2231 2252 2322 2923 3483
3970: fcbShift        0005   3625
0170: fCloseFile      0010
0161: fConsoleIn      0001
0162: fConsoleOut     0002
0173: fDeleteFile     0013
0165: fGetConsoleStatus 000B
0179: fGetCurrentDisk 0019
0178: fGetLoginVector 0018
0181: fGetSetUserNumber 0020
0166: fGetVersion     000C
1601: FindAvailableBlock EBC6   1593
0176: fMakeFile       0016
0169: fOpenFile       000F
1611: FoundAvailableBlock EBD3   1605
3290: FoundFreeOctet  F248   3260 3265 3274 3282
3296: FoundFreeOctet1 F24E   3292
3298: FoundFreeOctet2 F24F   3294
3300: FoundFreeOctet3 F252   3303
3306: FoundFreeOctet4 F25A   3308
0163: fPrintString    0009
0174: fReadSeq        0014
0164: fReadString     000A
0177: fRenameFile     0017
4054: fResel          F54D   0350 0380 2808
0167: fResetSystem    000D
0171: fSearchFirst    0011
0172: fSearchNext     0012
0168: fSelectDisk     000E
0180: fSetDMA         001A
0448: functionCount   0028   0359
0405: functionTable   E857   0364 0418 0448
0175: fWriteSeq       0015
3378: GetBlockNumber  F2B0   1512 1580
3226: GetClosestBlock F1F7   1602
3128: GetCurrentDirectoryRecord F1A7   1438 2025 2485 2521 2575 3007 3180 3341 3369
3413: GetDiskMap16Bit F2DC   3408
3388: GetDiskMapIndex F2BD   1589 3379
3392: GetDiskMapIndexLoop F2C4   3394
3401: GetDiskMapValue F2CA   1597 3382
2867: GetExtentAddress F096   2517 2847 3466
2921: GetExtentNumberMSB F0CA   2281 2912
2856: GetFcbRecordDetails F089   2840 3087
2021: GetFileSize1    ECDB   2049
2047: GetFileSize2    ECFD   2040
2050: GetFileSizeExit ED03   2023
2988: GetNextDirectoryRecord F105   1404 1443 1767 1954 2048 3026 3031
3006: GetNextDirectoryRecord1 F122   2998
2298: GetRandomRecordPosition EDCB   2027 2083
2920: GetWriteFileFlagValue F0CA   1637 1667 2564 2932 2943
3892: GoToError       F4A4   3881 3884 3887 3890 3907
0079: GREATER_THAN    003E
0062: HASH_TAG        0023   0947
1641: HaveWriteBlock  EBFA   1583
3965: highestRecordNumber 007F   1577 1673
2727: Home            EFF2   2471 2986
1147: IgnoreTheLine   EAAC   1014
4004: initDAMAddress  F523   1211 1835 2751 3322
2431: InitDisk        EE6B   2376
2478: InitDisk1       EEB0   2488 2506
2501: InitDisk2       EED1   2492 2497
2911: InitializeExtentNumberMSB F0C4   1254 1334 1715
0117: IOBYTE          0003   0638 0658
3822: IsBitSet        F45E   2367 2800 3844 3856
3829: IsBitSet1       F465   3827
3824: IsBitSetLoop    F45F   3832
2796: IsDiskWriteProtected F03A   2561 3335
1012: IsItDeleteTheLineU EA19
1009: IsItDeleteTheLineX EA14
1006: IsItPrintToggle EA0F
1096: IsItPrintToggle1 EA70   1094
1000: IsItRubout      EA05
1003: IsPhysicalEOL   EA0A
0808: IsPrintableASCII E92C   0502 0838
1081: ItIsPhysicalEOL EA5D   1005
1088: ItIsPrintToggle EA65   1008
1069: ItIsRubout      EA52   1002
1165: keyboardByte    EABE   0797 0906 0939
0065: L_PAREN         0028
2896: Left            F0B5   2898
0082: LEFT_ARROW      005F
0098: LEFT_CURLY      007B
0146: LengthInBytes   2000   0147 0151 0261
0147: LengthInK       0009
0077: LESS_THAN       003C
0058: LF              000A   0811 0892 0964 0994
1110: LL1             EA7E   1118
0032: LO_NIBBLE_MASK  000F   0785 2318
4003: loggedDisks     F521   1206 1788 2366 2372 2374
3258: LookRight       F21C   3268
2655: MakeNewFile     EF9E   1717 2265 3500
2461: Mark4Directory  EE98   2453
1635: MarkNewBlock    EBF3   1628
3975: maxExtValue     001F   2966 3469
0149: MemorySize      0040   0151
3569: Merge           F378   2604 2606
2583: MergeAllocationMaps EF43   2621
2598: MergeDirEntryNot0 EF57   2595
2593: MergeFCBisNot0  EF51   2591
2617: MergeMapLoop    EF73   2601
2603: MergeWordMaps   EF5E   2586
3976: moduleMask      000F   3487
3553: MultiplyHLby8   F36E   2447 3314
0262: myOffset        0001   0263 0279
3978: nameLength      000F   1336 2511 2569 2668 2674 3491
3053: NoDirRecordsMatch F164   2992 3004
3286: NoFreeBlocks    F244   3275 3283
3270: NoMoreLeft      F22E   3266
3272: NoMoreLeftLoop  F22F   3276
3278: NoMoreRight     F239   3261
3280: NoMoreRightLoop F23A   3284
2825: NoSelect        F069   2815
1522: NothingRead     EB84   1502 1509 1514
0935: NothingWaiting  E9B8   0926
0054: NULL            0000
0246: NumberOfHeads   0002   0257 0259 0270 0280
0243: NumberOfLogicalDisks 0004
0031: OFF             0000
0030: ON              FFFF
2510: OpenFile        EEDB   1256 2255
3459: OpenNextExt     F300   1504 1681
3490: OpenNextExt1    F32C   3479
3507: OpenNextExt3    F349   3503
3513: OpenNextExtError F351   3488 3498 3502
3482: OpenNextModule  F322   3471
2550: OpenSetRecordCount EF15   2546 2548
1174: paramDE         EAC3   0338 0384 0681 0973 1052 1107 1328 1402 1573 1614 1752 1834 2011 2081 2189 2524 2551 2579 2657 2660 2665 2677 2809 2827 2857 2868 2922 2983 3366 3402
1173: paramE          EAC2   0340 0392 0777 2352 2813
0064: PERCENT         0025
0071: PERIOD          002E
0120: Pg0CurentDisk   0004
0119: Pg0CurentUser   0004   0120
0068: PLUS_SIGN       002B
0822: Print           E93B   0684 0831 3939 3941
1167: printEchoFlag   EABF   0880 0919 1091
0080: QMARK           003F   1330 3014
1338: QMarkFind       EB05   1331
0066: R_PAREN         0029
0113: RAM             0000   0115 0116 0117 0119 0122 0125 0128 0133 0135
4042: RANDOM_ACCESS   0000
2168: RandomDiskRead  ED28   2135
2175: RandomDiskWrite ED31   2147
2185: RandomSeek      ED3A   2170 2177
2239: RandomSeekClose ED7E   2229
2284: RandomSeekError EDC3   2218
2277: RandomSeekErrorBadSeek EDBC   2248 2264 2269
2271: RandomSeekExit  EDB6   2238 2258
2769: ReadBuffer      F01A   1518 3601
3610: ReadDirectory   F395   2481 2990
3622: ReadDirectory0  F3A9   3617
3626: ReadDirectory1  F3B0   3628
3599: ReadDirRecord   F38C   3635
1030: ReadEchoRubOut  EA26   1078
4047: readModeFlag    F546   1493 1570 3496
0983: ReadNext        E9ED   1047 1073 1099 1121
0986: ReadNext0       E9EF   1066 1085
4002: readOnlyVector  F51F   1205 1898 2778 2783 2797
0970: ReadString      E9E0   0714 1131 1153
3872: ReAlignMap1     F485   3870
3867: ReAlignMapLoop  F47F   3875
3865: ReAlignVector   F47E   3848
1511: RecordOK        EB6E   1499
3982: recordRandom    0021   2012 2084 2191
3981: recordSeq       0020   2082 2220 2861 3982
0255: RecordsPerBlock 0010
0239: RecordsPerExtent 0080   1501 2549 3965
0232: recordsPerSector 0004   0255 0270
1758: RenameLoop      EC66   1768
1102: RepeatLine      EA75   1017
2806: ReselectDisk    F045   1255 1286 1335 1403 1427 1486 1559 1716 1746 1943 2003 2134 2146
2942: ResetFileWriteFlag F0D9
3854: ResetVectorBit  F477
0379: ReturnToCaller  E832   0353
0395: ReturnToCaller1 E84D   0382 0388 0617
2904: Right           F0BF   2902 2906
2713: RotateAndReplace EFEB   2716
3527: RotateRightHLbyB F357   3535
3532: RotateRightHLbyB1 F35D   3530
0083: RUBOUT          007F   1001
3178: ScanDiskMap     F1CB   1441 2504
3185: ScanDiskMap0    F1D5   3217
3210: ScanDiskMap2    F1EC   3199
3201: ScanDiskMapWord F1E6   3193
4051: searchAddress   F54A   1401 2984 2994
2978: SearchForDirectoryRecord F0F0   1339 1430 1749 1945 2009 2512 2570 2662 3492
4050: searchLength    F549   2981 3008
0284: SectorMask      0003
0249: SectorsPerBlock 0004   0253 0255 0258 0264 0284
0259: SectorsPerCylinder 0024   0262 0263
0248: SectorsPerTrack 0012   0257 0259 0270
3650: Seek            F3D4   1517 1648 3647
3655: Seek0           F3DE   3659
3641: SeekDir         F3C3   2644 3373 3634
2361: Select          EE04   1213 2357
2351: SelectCurrent   EDF8   0393 1237 2823
2382: SelectDisk      EE25   2362
2425: SelectDisk1     EE67   2421
0076: SEMICOLON       003B
4041: SEQ_ACCESS      0001   1488 1565
3433: SetActualRecordAdd F2E8   1516 1647
3438: SetActualRecordAddLoop F2EF   3440
1947: SetAttributesLoop ECAC   1955
2456: SetBitLoop      EE93   2459
2692: SetCurrentDiskBit EFD8
2750: SetDataDMA      F00C   1212 1836 3068 3602
2756: SetDirDMA       F011   3065 3600
3142: SetDirectoryEntry F1B5   2505 2681
2777: SetDiskReadOnly F022   1880 3725
2761: SetDMA          F014   2752
3104: SetEndDirectory F197   2476 2985 3054 3618
3587: SetExitParamTo1 F386   1523 1578 3514
2931: SetFileWriteFlag F0D3   2289 2529 2684 3515
3729: SetNewCheckSum  F43C   3718
3033: SetNextPosition F14C   3015 3019 3027
2839: SetRecordVars   F072   1495 1575 3508
2878: SetResetMapBit  F09E   3213
0784: SetUserNumber   E91B   0779
3842: SetVectorBit    F46E   2373 2782
3556: ShiftLeftHLbyB  F370   3560
3795: ShiftLeftHLbyC  F457   2697
3797: ShiftLeftHLbyC0 F458   3801
3544: ShiftRightHLbyB F366   2888 3548 3644
3781: ShiftRightHLbyC F44A
3783: ShiftRightHLbyC0 F44B   3793
0961: showCRLF        E9D6   0949 1084 3934
0946: showHashCRLF    E9C0   1105 1148
0950: showHashCRLF1   E9C8   0957
0072: SLASH           002F
0055: SOH             0001
0060: SPACE           0020   0817 0859 0889 0955 1139 1149 1151
0291: STACK_SIZE      0020   4071
4071: stackBottom     F55B
1170: startingColumn  EAC0   0952 0972 1128
3161: StillInDirectory F1BE   3002 3143 3723
0261: SystemSectors   0011   0262
0057: TAB             0009   0813 0854
0852: TabOut          E958   0507 0529 0829 0839
0858: TabOut0         E95E   0863
3012: TestNextPosition F12B   3038
0924: ToggleFlag1     E9A9   0922
0123: TopRAM          0007
0258: TotalNumberOfBlocks 02D0
0257: TotalNumberOfSectors 0B40   0258 0263
0135: TPA             0100
0247: TracksPerHead   0050   0257
0028: TRUE            FFFF   0920 0941 1092 1492 2169 2419 2426 2480 2503 2641 2807 3062
0081: UNDER_SCORE     005F
3505: UpdateFCB       F346   3480 3494
3086: UpdateRecordVariables F185   1519 1680 1692
1163: usersStack      EABC   0342 0396
1285: vCloseFile      EAEC   0423
2002: vComputeFileSize ECC6   0442
0500: vConsoleIn      E8AD   0407
0528: vConsoleOut     E8BE   0408
1426: vDeleteFile     EB1A   0426
0605: vDirectConIO    E8D1   0412
0614: vDirectConIO1   E8D9   0608
0290: VERSION         0020   0755
1326: vFindFirst      EAF2   0424
1400: vFindNext       EB0B   0425
1851: vGetAllocAddr   EC93   0434
0728: vGetConsoleStatus E900   0417
1811: vGetCurrentDisk EC83   0432
1968: vGetDiskParamBlock ECBF   0438
0637: vGetIOBYTE      E8E7   0413
1787: vGetLoginVector EC7C   0431
1897: vGetReadOnlyMap EC9D   0436
0776: vGetSetUserNumber E90D   0439
0754: vGetVersion     E907   0419
0582: vListOut        E8CD   0411
1714: vMakeFile       EC49   0429
1253: vOpenFile       EAE3   0422
0680: vPrintString    E8F3   0415
0567: vPunchOut       E8C9   0410
0548: vReaderIn       E8C2   0409
2133: vReadRandom     ED1B   0440
1485: vReadSeq        EB41   0427
0713: vReadString     E8FC   0416
1745: vRenameFile     EC52   0430
2116: vResetDrive     ED18   0444
1203: vResetSystem    EAC7   0420
1236: vSelectDisk     EAE0   0421
1833: vSetDMA         EC8A   0433
1942: vSetFileAttributes ECA4   0437
0657: vSetIOBYTE      E8EE   0414
2078: vSetRandomRecord ED05   0443
0468: vSystemReset    E8AA   0406
1879: vWriteProtectDisk EC9A   0435
2145: vWriteRandom    ED21   0441
2161: vWriteRandom0Fill ED27   0447
1558: vWriteSeq       EB87   0428
3927: waitB4boot      F4D2   3917 3921
0115: WarmBoot        0000   0934 1043 3912 3929
3423: WasBlockAllocated F2E2   1513 1581
0035: WORD            0002   1174 1176
0195: WriteAllocated  0000   1582
3078: WriteBuffer     F17D   1651 3067
0197: WriteCleanBuffer 0002   1639 1660
3060: WriteDir        F16D   1442 2645 3374
0196: WriteDirectory  0001   3066
3977: writeFlagMask   0080
4080: Z_HighestLocation F59B   4081
4081: Z_MemoryLeft    0064
0039: ZERO            0000
