0001: E800         ;		File created by MakeZ80Source on Tue Sep 18 12:41:03 EDT 2018 from:
0002: E800         ;		C:\Users\admin\Dropbox\Resources\CPM\CurrentOS\8080\BDOSX.asm
0003: E800         ; BDOS.Z80
0004: E800         ; 2019-03-02 Refactored constants and removed header files
0005: E800         ; 2019-02-29 Version 1.0
0006: E800         ; 2019-02-04 Fixed bdosStack problem
0007: E800         ; 2019-01-10	Last rev before remaking Find nearest Block
0008: E800         ; 2019-01-11 - BDOS 0.B	- Function 0-A Refactored to Z80 idiom
0009: E800         ; 2018-12-28 Started to refactor to Z80 idiom
0010: E800         ; 2018-03-31 added vector for BDOS Call 5 -ListOut
0011: E800         ; 2018-03-02 Refactored the CP/M Suite
0012: E800         ; 2018-02-12 fixed allocate 16 bit problem
0013: E800         ; 2014-01-16 extended from part of newOS (newBDOS)
0014: E800         ; 2014-03-14	:	Frank Martyn
0015: E800                        Include ./stdHeader.Z80
0016: E800         ;<<<<<<<<<<<<<<<<<<<<<<< Include >>>>>>>>>>>>>>>>
0017: E800         ;     File created by MakeZ80Source on Mon Sep 17 16:25:01 EDT 2018 from:
0018: E800         ;     C:\Users\admin\Dropbox\Resources\CPM\CurrentOS\8080\stdHeader.asm
0019: E800         ; stdHeader.Z80
0020: E800         ; standard equates for use by CP/M
0021: E800
0022: E800         ; 2019-03-02 Removed any unused constants
0023: E800         ; 2017-03-02 Refactored the CP/M Suite
0024: E800
0025: E800
0026: E800             TRUE       EQU    -1                   ; Not false
0027: E800             FALSE      EQU    0000H
0028: E800             LO_NIBBLE_MASK EQU    0FH                  ; Mask used to obtain the bytes low four bits
0029: E800
0030: E800             BYTE       EQU    1                    ; Number of bytes for "byte" type
0031: E800             WORD       EQU    2                    ; Number of bytes for "word" type
0032: E800
0033: E800
0034: E800             ASCII_MASK EQU    7FH                  ; ASCII mask 7 bits
0035: E800             EndOfMessage EQU    00H
0036: E800
0037: E800             CTRL_C     EQU    03H                  ; ETX
0038: E800             CTRL_E     EQU    05H                  ; Physical EOL
0039: E800             CTRL_H     EQU    08H                  ; Backspace
0040: E800             CTRL_L     EQU    0CH                  ; FF - Form feed
0041: E800             CTRL_P     EQU    10H                  ; Print toggle
0042: E800             CTRL_R     EQU    12H                  ; Repeat line
0043: E800             CTRL_S     EQU    13H                  ; X-OFF stop/start screen
0044: E800             CTRL_U     EQU    15H                  ; Line delete
0045: E800             CTRL_X     EQU    18H                  ; Logical line delete
0046: E800             CTRL_Z     EQU    1AH                  ; End of file
0047: E800
0048: E800             TAB        EQU    09H                  ; Tab
0049: E800             LF         EQU    0AH                  ; Line Feed
0050: E800             CR         EQU    0DH                  ; Carriage Return
0051: E800             SPACE      EQU    20H                  ; Space
0052: E800             HASH_TAG   EQU    23H                  ; Sharp sign #
0053: E800             DOLLAR     EQU    24H                  ; Dollar Sign
0054: E800             PERCENT    EQU    25H                  ; Percent Sign
0055: E800             ASTERISK   EQU    2AH                  ; Asterisk *
0056: E800             PERIOD     EQU    2EH                  ; Period
0057: E800             ASCII_ZERO EQU    30H                  ; zero
0058: E800             COLON      EQU    3AH                  ; Colon
0059: E800
0060: E800             SEMICOLON  EQU    3BH                  ; Semi Colon
0061: E800             LESS_THAN  EQU    3CH                  ; Less Than <
0062: E800             EQUAL_SIGN EQU    3DH                  ; Equal Sign
0063: E800             GREATER_THAN EQU    3EH                  ; Greater Than >
0064: E800             QMARK      EQU    3FH                  ; Question Mark
0065: E800             UNDER_SCORE EQU    5FH                  ; under score _
0066: E800             LEFT_ARROW EQU    5FH                  ; Left Arrow ?
0067: E800             RUBOUT     EQU    7FH                  ; Delete Key
0068: E800
0069: E800
0070: E800             ASCII_A    EQU    'A'
0071: E800             ASCII_C    EQU    'C'
0072: E800             ASCII_M    EQU    'M'
0073: E800             ASCII_O    EQU    'O'
0074: E800             ASCII_Y    EQU    'Y'
0075: E800             CARET      EQU    '^'
0076: E800
0077: E800         ;<<<<<<<<<<<<<<<<<<<<<<< Include >>>>>>>>>>>>>>>>
0078: E800                        Include ./osHeader.Z80
0079: E800         ;<<<<<<<<<<<<<<<<<<<<<<< Include >>>>>>>>>>>>>>>>
0080: E800         ;     File created by MakeZ80Source on Mon Sep 17 16:25:47 EDT 2018 from:
0081: E800         ;     C:\Users\admin\Dropbox\Resources\CPM\CurrentOS\8080\osHeader.asm
0082: E800         ; osHeader.Z80
0083: E800
0084: E800         ; 2018-12-28 Changed BDOSEntry to remove dead space in BDOS
0085: E800         ; 2017-03-02 Refactored the CP/M Suite
0086: E800
0087: E800         ; Contains the Equates used by the CP/M system
0088: E800
0089: E800         ;------------------------Page Zero Constants ---------------------------------
0090: E800             RAM        EQU    0                    ; Start of RAM ( and the Base page)
0091: E800
0092: E800             WarmBoot   EQU    RAM + 0              ; Contains a JMP instruction to warm boot in BIOS
0093: E800             BIOSPAGE   EQU    RAM + 2              ; BIOS Jump Vector Page
0094: E800             IOBYTE     EQU    RAM + 3              ; Input/Output redirection byte
0095: E800
0096: E800             Pg0CurentUser EQU    RAM + 4              ; Current user ( bits 7-4)
0097: E800             Pg0CurentDisk EQU    Pg0CurentUser        ; Default logical disk (bits 0-3)
0098: E800
0099: E800             BDOSE      EQU    RAM + 5              ; Contains a JMP to BDOS entry
0100: E800             TopRAM     EQU    BDOSE+2              ; Top page of usable RAM
0101: E800
0102: E800             FCB1       EQU    RAM + 05CH           ; File Control Block #1
0103: E800             FCB2       EQU    FCB1 + 16            ; File Control Block #2
0104: E800
0105: E800             ComTail    EQU    RAM + 080H           ; Complete command tail
0106: E800             ComTailCount EQU    ComTail              ; Count of the number of char in tail
0107: E800             ComTailChars EQU    ComTailCount + 1     ; Complete Command tail up-cased, w/o trailing CR
0108: E800         ;-----------------------------------------------------------------------
0109: E800
0110: E800             DMABuffer  EQU    RAM + 080H           ; Default "DMA" address used as buffer
0111: E800         ;-----------------------------------------------------------------------
0112: E800             TPA        EQU    RAM + 0100H          ; Start of Transient program Area
0113: E800         ;-----------------------------------------------------------------------
0114: E800             END_OF_FILE EQU    1AH                  ; end of file
0115: E800         ;-----------------------------------------------------------------------
0116: E800
0117: E800         ;--------------- CP/M Constants -----------------------------------------
0118: E800
0119: E800             CCPLength  EQU    0800H                ; Constant
0120: E800             BDOSLength EQU    0E00H                ; Constant 0E00H
0121: E800             BIOSLength EQU    0A00H                ; Constant 0900H
0122: E800
0123: E800             LengthInBytes EQU    CCPLength + BDOSLength + BIOSLength
0124: E800             LengthInK  EQU    (LengthInBytes/1024) + 1
0125: E800
0126: E800             MemorySize EQU    64
0127: E800
0128: E800             CCPEntry   EQU    (MemorySize * 1024) - LengthInBytes
0129: E800
0130: E800             BDOSBase   EQU    CCPEntry + CCPLength
0131: E800             BDOSEntry  EQU    BDOSBase
0132: E800
0133: E800             BIOSBase   EQU    BDOSBase + BDOSLength
0134: E800             BIOSStart  EQU    CCPEntry + CCPLength + BDOSLength
0135: E800         ;-----------------------------------------------------------------------
0136: E800
0137: E800         ;? ;------------------- BDOS System Call Equates --------------------------
0138: E800         ;? fConsoleIn			EQU		01H			; rcharf - Console Input
0139: E800         ;? fConsoleOut			EQU		02H			; pcharf - Console Output
0140: E800         ;? fPrintString		EQU		09H			; pbuff	- Print String
0141: E800         ;? fReadString			EQU		0AH			; rbuff	- Read Console String
0142: E800         ;? fGetConsoleStatus	EQU		0BH			; breakf - Get Console Status
0143: E800         ;? fGetVersion			EQU		0CH			; liftf	- Return Version Number
0144: E800         ;? fResetSystem		EQU		0DH			; initf	- Reset Disk System
0145: E800         ;? fSelectDisk			EQU		0EH			; self	- Select Disk
0146: E800         ;? fOpenFile			EQU		0FH			; openf	- Open File
0147: E800         ;? fCloseFile			EQU		10H			; closef - Close File
0148: E800         ;? fSearchFirst		EQU		11H			; searf	- Search For First
0149: E800         ;? fSearchNext			EQU		12H			; searnf - Search for Next
0150: E800         ;? fDeleteFile			EQU		13H			; delf - Delete File
0151: E800         ;? fReadSeq			EQU		14H			; dreadf - Read Sequential
0152: E800         ;? fWriteSeq			EQU		15H			; dwritf - Write Sequential
0153: E800         ;? fMakeFile			EQU		16H			; makef	- Make File
0154: E800         ;? fRenameFile			EQU		17H			; renf	- Rename File
0155: E800         ;? fGetLoginVector		EQU		18H			; logf	- Return Login Vector
0156: E800         ;? fGetCurrentDisk		EQU		19H			; cself	- Return Current Disk
0157: E800         ;? fSetDMA				EQU		1AH			; dmaf	- Set DMA address
0158: E800         ;? fGetSetUserNumber	EQU		20H			; userf	- Set/Get User Code
0159: E800         ;? ;-----------------------------------------------------------------------
0160: E800         ;?
0161: E800         ;?
0162: E800         ;?
0163: E800         ;?
0164: E800         ;?
0165: E800         ;? ;*******************************************************************************
0166: E800         ;? ; These are the values handed over by the BDOS when it calls the Writer operation
0167: E800         ;? ; The allocated.unallocated indicates whether the BDOS is set to write to an
0168: E800         ;? ; unallocated allocation block (it only indicates this for the first 128 byte
0169: E800         ;? ; sector write) or to an allocation block that has already been allocated to a
0170: E800         ;? ; file. The BDOS also indicates if it is set to write to the file directory
0171: E800         ;? ;*******************************************************************************
0172: E800         ;? WriteAllocated		EQU	00H
0173: E800         ;? WriteDirectory		EQU	01H
0174: E800         ;? WriteCleanBuffer	EQU	02H
0175: E800
0176: E800
0177: E800         ;<<<<<<<<<<<<<<<<<<<<<<< Include >>>>>>>>>>>>>>>>
0178: E800                        Include ./diskHeader.Z80
0179: E800         ;<<<<<<<<<<<<<<<<<<<<<<< Include >>>>>>>>>>>>>>>>
0180: E800         ;     File created by MakeZ80Source on Mon Sep 17 16:26:22 EDT 2018 from:
0181: E800         ;     C:\Users\admin\Dropbox\Resources\CPM\CurrentOS\8080\diskHeader.asm
0182: E800         ; diskHeader.asm
0183: E800
0184: E800         ; 2017-03-02 Refactored the CP/M Suite
0185: E800
0186: E800         ; needs osHeader.asm declared before this is used !!!!!!!
0187: E800
0188: E800         ; Contains the Equates used by the CP/M system to handle disks
0189: E800
0190: E800
0191: E800         ;*******************************************************************************
0192: E800         ;
0193: E800         ;     Disk related values
0194: E800         ;
0195: E800         ;
0196: E800         ;*******************************************************************************
0197: E800             DiskStatusLocation EQU    043H                 ; status after disk I/O placed here
0198: E800             DiskControlByte EQU    045H                 ; control byte for disk I/O
0199: E800             DiskCommandBlock EQU    046H                 ; Control Table Pointer
0200: E800         ; for boot
0201: E800             DiskControlTable EQU    0040H
0202: E800
0203: E800             DiskReadCode EQU    01H                  ; Code for Read
0204: E800             DiskWriteCode EQU    02H                  ; Code for Write
0205: E800
0206: E800
0207: E800             cpmRecordSize EQU    080H                 ; (128) record size that CP/M uses
0208: E800             diskSectorSize EQU    200H                 ; (512) size of physical disk I/O
0209: E800             recordsPerSector EQU    diskSectorSize/cpmRecordSize
0210: E800
0211: E800             DirEntrySize EQU    20H                  ; (32)
0212: E800             DirBuffSize EQU    cpmRecordSize
0213: E800
0214: E800             DirectoryEntryPerRecord EQU    cpmRecordSize / DirEntrySize
0215: E800
0216: E800             RecordsPerExtent EQU    080H                 ; extent Record capacity
0217: E800
0218: E800
0219: E800         ;-------------------------------------------------------------------------------------
0220: E800             NumberOfLogicalDisks EQU    4                    ; max number of disk in this system
0221: E800
0222: E800         ;----------------------3.5 Double Density Disk Geometry----------------------------------------
0223: E800             NumberOfHeads EQU    02H                  ; number of heads
0224: E800             TracksPerHead EQU    50H                  ; 80
0225: E800             SectorsPerTrack EQU    12H                  ; 18 -  1 head only
0226: E800             SectorsPerBlock EQU    04H                  ; 2048 bytes
0227: E800             DirectoryBlockCount EQU    02H                  ;
0228: E800         ;-----------------------------------------------------------------------
0229: E800
0230: E800             BlockSize  EQU    SectorsPerBlock * 	diskSectorSize ; Size in Bytes
0231: E800
0232: E800             RecordsPerBlock EQU    recordsPerSector * SectorsPerBlock
0233: E800
0234: E800             TotalNumberOfSectors EQU    SectorsPerTrack * TracksPerHead * NumberOfHeads
0235: E800             TotalNumberOfBlocks EQU    TotalNumberOfSectors / SectorsPerBlock
0236: E800             SectorsPerCylinder EQU    SectorsPerTrack * NumberOfHeads
0237: E800
0238: E800             SystemSectors EQU    LengthInBytes / diskSectorSize + 1 ; need to account for boot sector
0239: E800             myOffset   EQU    (SystemSectors / SectorsPerCylinder) + 1 ;
0240: E800             DataSectors EQU    TotalNumberOfSectors - (SectorsPerCylinder * myOffset)
0241: E800             DataBlocks EQU    DataSectors / 	SectorsPerBlock
0242: E800
0243: E800         ;-----------------------------------------------------------------------
0244: E800         ;; Disk block parameters for F3HD - 3.5 HD   1.44 MB Diskette
0245: E800         ;-----------------------------------------------------------------------
0246: E800         ;dpb3hdSPT				EQU		0090H			; cpmRecords per track- (144)
0247: E800             dpb3hdSPT  EQU    recordsPerSector * SectorsPerTrack * NumberOfHeads ; SPT - records per Clynder
0248: E800             dpb3hdBSH  EQU    04H                  ; Block Shift Factor - BlockSize = 128 * (2**BSH)											; BSH = Log2(BlockSize/cpmRecordSize)
0249: E800             dpb3hdBLM  EQU    0FH                  ; BlockMask = (2**BSH) -1
0250: E800             dpb3hdEXM  EQU    00H                  ; Extent mask = (PhysicalExtents/LogicalExtents) - 1
0251: E800             dpb3hdDSM  EQU    DataBlocks -1        ; Maximum allocation block number (710)
0252: E800             dpb3hdDRM  EQU    ((BlockSize *  DirectoryBlockCount)	/	DirEntrySize) -1 ; DRM Number of directory entries - 1 (127)
0253: E800             dpb3hdAL0  EQU    0C0H                 ; Bit map for reserving 1 alloc. block
0254: E800             dpb3hdAL1  EQU    00H                  ;  for each file directory
0255: E800             dpb3hdCKS  EQU    (dpb3hdDRM +1)/ DirectoryEntryPerRecord ; Disk change work area size (32)
0256: E800             dpb3hdOFF  EQU    myOffset             ; Number of tracks before directory
0257: E800             dpb3hdNOH  EQU    NumberOfHeads
0258: E800
0259: E800         ;*******************************************************************************
0260: E800
0261: E800             SectorMask EQU    SectorsPerBlock - 1
0262: E800
0263: E800         ;***************************************************************************
0264: E800
0265: E800         ;<<<<<<<<<<<<<<<<<<<<<<< Include >>>>>>>>>>>>>>>>
0266: E800             VERSION    EQU    20H                  ; Version 2.0
0267: E800             STACK_SIZE EQU    20H                  ; Make stack big enough
0268: E800             EOD        EQU    -1                   ; End of Directory
0269: E800         ;*******************************************************************************
0270: E800         ; These are the values handed over by the BDOS when it calls the Writer operation
0271: E800         ; The allocated.unallocated indicates whether the BDOS is set to write to an
0272: E800         ; unallocated allocation block (it only indicates this for the first 128 byte
0273: E800         ; sector write) or to an allocation block that has already been allocated to a
0274: E800         ; file. The BDOS also indicates if it is set to write to the file directory
0275: E800         ;*******************************************************************************
0276: E800             WriteAllocated EQU    00H
0277: E800             WriteDirectory EQU    01H
0278: E800             WriteCleanBuffer EQU    02H
0279: E800         ;************************ BIOS Function Constants **************************;
0280: E800             bcBoot     EQU    BIOSStart+3*0        ; Cold Boot function				;
0281: E800             bcWboot    EQU    BIOSStart+3*1        ; Warm Boot function				;
0282: E800             bcConst    EQU    BIOSStart+3*2        ; Console Status function			;
0283: E800             bcConin    EQU    BIOSStart+3*3        ; Console Input function			;
0284: E800             bcConout   EQU    BIOSStart+3*4        ; Console Output function			;
0285: E800             bcList     EQU    BIOSStart+3*5        ; List Output function				;
0286: E800             bcPunch    EQU    BIOSStart+3*6        ; Punch Output function				;
0287: E800             bcReader   EQU    BIOSStart+3*7        ; Reader Input function				;
0288: E800             bcHome     EQU    BIOSStart+3*8        ; Disk Home function				;
0289: E800             bcSeldsk   EQU    BIOSStart+3*9        ; Select Disk function				;
0290: E800             bcSettrk   EQU    BIOSStart+3*10       ; Set Track function				;
0291: E800             bcSetsec   EQU    BIOSStart+3*11       ; Set Sector function				;
0292: E800             bcSetdma   EQU    BIOSStart+3*12       ; Set DMA function					;
0293: E800             bcRead     EQU    BIOSStart+3*13       ; Read Disk function				;
0294: E800             bcWrite    EQU    BIOSStart+3*14       ; Write Disk function				;
0295: E800             bcListst   EQU    BIOSStart+3*15       ; List Status function				;
0296: E800             bcSectran  EQU    BIOSStart+3*16       ; Sector Translate					;
0297: E800         ;************************ BIOS Function Constants **************************;
0298: E800         ;===========================================================================;
0299: E800         ;	BDOS																	;
0300: E800         ; Calling into	:															;
0301: E800         ;					Register	C - Contains BDOS Function Code				;
0302: E800         ;					Register	A - Holds the Byte argument if any			;
0303: E800         ;					Register DE - Holds the Word argument if any			;
0304: E800         ; Returning from :															;
0305: E800         ;					Register	A - The Byte return value if any			;
0306: E800         ;					Register HL - The Word return value if any				;
0307: E800         ;					( Register A=L and B=H)									;
0308: E800         ;===========================================================================;
0309: E800                        ORG    BDOSBase
0310: E800         ;===========================BDOS Entry======================================;
0311: E800         ;BDOSEntry:																	;
0312: E800         ;
0313: E800         ;
0314: E800             BdosStart:                      ;
0315: E800         ;	LD		A,C																;
0316: E800         ; 	LD		(FunctionValue),A			; Save the function number			;
0317: E800         ;
0318: E800         ; Save Calling Arguments													;
0319: E800 ED 53 B4 EA               LD     (paramDE),DE         ; Save the Word Argument			;
0320: E804 7B                     LD     A,E                  ;
0321: E805 32 B3 EA               LD     (paramE),A           ; Save the Byte argument			;
0322: E808         ; Save users Stack pointer													;
0323: E808 ED 73 AD EA               LD     (usersStack),SP      ; Save the User's stack					;
0324: E80C 31 07 F5               LD     SP,bdosStack         ; We will use our own stack			;
0325: E80F         ;
0326: E80F         ; initialize variables														;
0327: E80F 21 00 00               LD     HL,0000H             ;
0328: E812 22 B6 EA               LD     (exitParameterWord),HL ; Assume all is well for return		;
0329: E815 AF                     XOR    A                    ;
0330: E816 32 BB F4               LD     (fcbDisk),A          ; Initialize to 00					;
0331: E819 32 B9 F4               LD     (fResel),A           ; Clear re selection flag			;
0332: E81C         ;
0333: E81C         ; Set up for return to caller when Function Completes						;
0334: E81C 21 32 E8               LD     HL,ReturnToCaller    ;
0335: E81F E5                     PUSH   HL                   ;Set up to ReturnToCaller			;
0336: E820         ;
0337: E820         ; is it a valid function number ?											;
0338: E820         ;	LD		A,(FunctionValue)			; Get the Function Number			;
0339: E820 79                     LD     A,C                  ;
0340: E821 FE 28                  CP     functionCount        ; make sure its a good number		;
0341: E823 D0                     RET    NC                   ; exit if not a valid function		;
0342: E824         ;
0343: E824         ; Calculate the index and get vector to go to								;
0344: E824 4B                     LD     C,E                  ; Assume byte argument				;
0345: E825 21 57 E8               LD     HL,functionTable     ; Get table base					;
0346: E828 5F                     LD     E,A                  ; Function number in E				;
0347: E829 16 00                  LD     D,0                  ;
0348: E82B 19                     ADD    HL,DE                ; Have byte location				;
0349: E82C 19                     ADD    HL,DE                ;	but we want a Word offset		;
0350: E82D 5E                     LD     E,(HL)               ; Get LSB of vector					;
0351: E82E 23                     INC    HL                   ;
0352: E82F 56                     LD     D,(HL)               ; Get MSB of vector					;
0353: E830 EB                     EX     DE,HL                ; Vector now in HL					;
0354: E831         ;
0355: E831         ; Vector to Function is in HL												;
0356: E831 E9                     JP     (HL)                 ; Put it into the Program Counter	;
0357: E832         ;===========================BDOS Entry======================================;
0358: E832         ;===========================BDOS Exit ======================================;
0359: E832         ;arrive here at end of processing to return to user							;
0360: E832             ReturnToCaller:                      ;
0361: E832 3A B9 F4               LD     A,(fResel)           ; get re-selection flag				;
0362: E835 B7                     OR     A                    ; is it set?						;
0363: E836 28 15                  JR     Z,ReturnToCaller1    ;
0364: E838         ;re-selection	may have taken place										;
0365: E838 2A B4 EA               LD     HL,(paramDE)         ;
0366: E83B 36 00                  LD     (HL),0               ;
0367: E83D 3A BB F4               LD     A,(fcbDisk)          ;
0368: E840 B7                     OR     A                    ; Disk = 0?							;
0369: E841 28 0A                  JR     Z,ReturnToCaller1    ; exit if yes						;
0370: E843         ;
0371: E843 77                     LD     (HL),A               ;
0372: E844 3A BA F4               LD     A,(entryDisk)        ; get back original Disk			;
0373: E847 32 B3 EA               LD     (paramE),A           ; and select it						;
0374: E84A CD 12 ED               CALL   SelectCurrent        ;
0375: E84D         ;
0376: E84D             ReturnToCaller1:                      ;
0377: E84D 2A AD EA               LD     HL,(usersStack)      ;
0378: E850 F9                     LD     SP,HL                ; restore callers stack				;
0379: E851 2A B6 EA               LD     HL,(exitParameterWord) ;
0380: E854 7D                     LD     A,L                  ;
0381: E855 44                     LD     B,H                  ; BA = exitParameterWord			;
0382: E856 C9                     RET                         ;
0383: E857         ;===========================BDOS Exit ======================================;
0384: E857         ;++++++++++++++++++++++++++++ Function Vector Table ++++++++++++++++++++++++;
0385: E857             functionTable:                      ;
0386: E857 AA E8                  DW     vSystemReset         ;	0 - System Reset				;
0387: E859 AD E8                  DW     vConsoleIn           ;	1 - Console Input				;
0388: E85B BE E8                  DW     vConsoleOut          ;	2 - Console Output				;
0389: E85D C2 E8                  DW     vReaderIn            ;	3 - Reader Input				;
0390: E85F C9 E8                  DW     vPunchOut            ;	4 - Punch Output				;
0391: E861 CD E8                  DW     vListOut             ;	5 - List Output					;
0392: E863 D1 E8                  DW     vDirectConIO         ;	6 - Direct Console I/O			;
0393: E865 E7 E8                  DW     vGetIOBYTE           ;	7 - Get I/O Byte				;
0394: E867 EE E8                  DW     vSetIOBYTE           ;	8 - Set I/O Byte				;
0395: E869 F3 E8                  DW     vPrintString         ;	9 - Print String				;
0396: E86B FC E8                  DW     vReadString          ;	A - Read Console String			;
0397: E86D 00 E9                  DW     vGetConsoleStatus    ;	B - Get Console Status			;
0398: E86F             diskf      EQU    ($-functionTable)/2  ; disk functions					;
0399: E86F 07 E9                  DW     vGetVersion          ;	C - Return Version Number		;
0400: E871 B8 EA                  DW     vResetSystem         ;	D - Reset Disk System			;
0401: E873 D1 EA                  DW     vSelectDisk          ;	E - Select Disk					;
0402: E875 D4 EA                  DW     vOpenFile            ;	F - Open File					;
0403: E877 DD EA                  DW     vCloseFile           ;	10 - Close File					;
0404: E879 E3 EA                  DW     vFindFirst           ;	11 - Search For First			;
0405: E87B FB EA                  DW     vFindNext            ;	12 - Search for Next			;
0406: E87D 0A EB                  DW     vDeleteFile          ;	13 - Delete File				;
0407: E87F 31 EB                  DW     vReadSeq             ;	14 - Read Sequential			;
0408: E881 74 EB                  DW     vWriteSeq            ;	15 - Write Sequential			;
0409: E883 2C EC                  DW     vMakeFile            ;	16 - Make File					;
0410: E885 35 EC                  DW     vRenameFile          ;	17 - Rename File				;
0411: E887 5E EC                  DW     vGetLoginVector      ;	18 - Return Login Vector		;
0412: E889 65 EC                  DW     vGetCurrentDisk      ;	19 - Return Current Disk		;
0413: E88B 6C EC                  DW     vSetDMA              ;	1A - Set DMA address			;
0414: E88D 75 EC                  DW     vGetAllocAddr        ;	1B - Get ADDR (ALLOC)			;
0415: E88F 7C EC                  DW     vWriteProtectDisk    ;	1C - Write Protect Disk			;
0416: E891 7F EC                  DW     vGetReadOnlyMap      ;	1D - Get Read/Only MAP			;
0417: E893 86 EC                  DW     vSetFileAttributes   ;	1E - Set File Attributes ??		;
0418: E895 A0 EC                  DW     vGetDiskParamBlock   ;	1F - Get ADDR (Disk Parameters)	;
0419: E897 0D E9                  DW     vGetSetUserNumber    ;	20 - Set/Get User Code			;
0420: E899 A7 EC                  DW     vReadRandom          ;	21 - Read Random				;
0421: E89B B3 EC                  DW     vWriteRandom         ;	22 - Write Random				;
0422: E89D BF EC                  DW     vComputeFileSize     ;	23 - Compute File Size			;
0423: E89F FB EC                  DW     vSetRandomRecord     ;	24 - Set Random Record			;
0424: E8A1 0E ED                  DW     vResetDrive          ;	25 - Reset Drive				;
0425: E8A3 A9 E8                  DW     DUMMY                ;	26 - Access Drive (not supported);
0426: E8A5 A9 E8                  DW     DUMMY                ;	27 - Free Drive (not supported)	;
0427: E8A7 11 ED                  DW     vWriteRandom0Fill    ;	28 - Write random w/Fill		;
0428: E8A9             functionCount EQU    ($-functionTable)/2  ; Number of	functions				;
0429: E8A9         ;
0430: E8A9             DUMMY:                          ;
0431: E8A9 76                     HALT                        ;
0432: E8AA         ;++++++++++++++++++++++++++++ Function Vector Table ++++++++++++++++++++++++;
0433: E8AA         ;-------------------------- System Reset - 0 (0) ---------------------------;
0434: E8AA         ;	The system reset function makes CP/M do a complete reset, exactly the	;
0435: E8AA         ; same as the warm boot function invoked when you transfer control to the	;
0436: E8AA         ; WARMBOOT point. In addition to resetting the BDOS, this function reloads	;
0437: E8AA         ; the CCP, rebuilds the allocation vectors for the currently logged disks,	;
0438: E8AA         ; sets the DMA address (used byCP/M to address the disk read/write buffer)	;
0439: E8AA         ; to 80H, marks all disks as being Read/Write status, and transfers control	;
0440: E8AA         ; to the	CCP. The CCP then outputs its prompt to the console.			;
0441: E8AA         ;																			;
0442: E8AA         ;			Function Code	:	C = 00H										;
0443: E8AA         ;			Entry Parameters:	None										;
0444: E8AA         ;			Exit Parameters :	Does Not Return								;
0445: E8AA         ;																			;
0446: E8AA         ;-------------------------- System Reset - 0 (0) ---------------------------;
0447: E8AA             vSystemReset:
0448: E8AA C3 03 F6               JP     bcWboot              ; do a Warm Boot
0449: E8AD         ;***************************************************************************;
0450: E8AD         ;								IOByte device I/O							;
0451: E8AD         ;***************************************************************************;
0452: E8AD         ;-------------------------- Read Console Byte - 1 (1) ----------------------;
0453: E8AD         ;	This function reads the next byte of data from the console keyboard and	;
0454: E8AD         ; puts it into register A. If the character input is a graphic character, it;
0455: E8AD         ; will be echoed back to the console. The only control characters that are	;
0456: E8AD         ; echoed are	CARRIAGE RETURN, LINE FEED, BACKSPACE, and TAB. In the case	;
0457: E8AD         ; of a TAB character, the BDOS outputs as many spaces as are required to	;
0458: E8AD         ; move the cursor to the next multiple of eight columns. All of the other	;
0459: E8AD         ; control characters, including CONTROL-C, are input but are not echoed.	;
0460: E8AD         ;	This function also checks for CONTROL-S (XOFF) to see if console output	;
0461: E8AD         ; should be suspended, and for CONTROL-P (printer echo toggle) to see if	;
0462: E8AD         ; console output should also be sent to the list device. If CONTROL-S is	;
0463: E8AD         ; found, further output will be suspended until you type another character. ;
0464: E8AD         ; CONTROL-P will enable the echoing of console output the first time it is	;
0465: E8AD         ; pressed and disable it the second time. If there is no incoming data		;
0466: E8AD         ; character, this function will wait until there is one.					;
0467: E8AD         ;																			;
0468: E8AD         ; This is a blocking function												;
0469: E8AD         ;																			;
0470: E8AD         ;																			;
0471: E8AD         ;			Function Code	:	C = 01H										;
0472: E8AD         ;			Entry Parameters:	None										;
0473: E8AD         ;			Exit Parameters :	A = Data byte from console					;
0474: E8AD         ;																			;
0475: E8AD         ;-------------------------- Read Console Byte - 1 (1) ----------------------;
0476: E8AD             vConsoleIn:
0477: E8AD CD 21 E9               CALL   ConIn                ; Don't come back without input
0478: E8B0 CD 2C E9               CALL   IsPrintableASCII     ; CR,LF,TAB,BACK_SPACE or GE SPACE
0479: E8B3 D8                     RET    C                    ; return nothing to echo
0480: E8B4 F5                     PUSH   AF                   ; Save printable character
0481: E8B5 4F                     LD     C,A
0482: E8B6 CD 58 E9               CALL   TabOut               ; Send to console. if TAB expand
0483: E8B9 F1                     POP    AF                   ; retrieve exit value
0484: E8BA 32 B6 EA               LD     (exitParameterByte),A
0485: E8BD C9                     RET
0486: E8BE         ;------------------------- Write Console Byte - 2 (2) ----------------------;
0487: E8BE         ;	This function outputs the data byte in register E to the console. As	;
0488: E8BE         ; with function 1, if the data byte is a TAB character, it will be expanded	;
0489: E8BE         ; by the BDOS to the next column that is a multiple of eight. The BDOS also	;
0490: E8BE         ; checks to see if there is an incoming character, and if there is,			;
0491: E8BE         ; checks to see if it is a CONTROL-S ,in which case console output is		;
0492: E8BE         ; suspended or CONTROL-P, in which case echoing of console output to the	;
0493: E8BE         ; printer is	toggled on or off											;
0494: E8BE         ;																			;
0495: E8BE         ;			Function Code	:	C = 02H										;
0496: E8BE         ;			Entry Parameters:	E = Data byte to be output					;
0497: E8BE         ;			Exit Parameters :	None										;
0498: E8BE         ;																			;
0499: E8BE         ;------------------------- Write Console Byte - 2 (2) ----------------------;
0500: E8BE         ;BDOS put parameter in C before entering this routine
0501: E8BE             vConsoleOut:
0502: E8BE CD 58 E9               CALL   TabOut
0503: E8C1 C9                     RET
0504: E8C2         ;--------------------------- Read Reader Byte - 3 (3) ----------------------;
0505: E8C2         ;	function reads the next character from the logical "reader" device into ;
0506: E8C2         ; register A. In practice, the physical device that is accessed depends		;
0507: E8C2         ; entirely on how your BIOS is configured. In some systems, there is no		;
0508: E8C2         ; reader at all; this function will return some arbitrary value such as lAH ;
0509: E8C2         ; (the ASCII CONTROL-Z character, used by CP/M to denote "End of File').	;
0510: E8C2         ; Control is not returned to the calling program until a character has been ;
0511: E8C2         ; read.																		;
0512: E8C2         ;																			;
0513: E8C2         ; This is a blocking function												;
0514: E8C2         ;																			;
0515: E8C2         ;			Function Code	:	C = 03H										;
0516: E8C2         ;			Entry Parameters:	None										;
0517: E8C2         ;			Exit Parameters :	A = Character Input							;
0518: E8C2         ;																			;
0519: E8C2         ;--------------------------- Read Reader Byte - 3 (3) ----------------------;
0520: E8C2             vReaderIn:
0521: E8C2 CD 15 F6               CALL   bcReader
0522: E8C5 32 B6 EA               LD     (exitParameterWord),A
0523: E8C8 C9                     RET
0524: E8C9         ;--------------------------- Write Punch Byte - 4 (4) ----------------------;
0525: E8C9         ;	This function is a counterpart to the Read "Reader" Byte It outputs the	;
0526: E8C9         ; specified character from register E to the logical punch device. Again,	;
0527: E8C9         ; the actual physical device used, if any, is determined by the BIOS.		;
0528: E8C9         ; There is no set standard for this device; in some systems the punch		;
0529: E8C9         ; device is a "bit bucket," so called because it absorbs all data that you	;
0530: E8C9         ; output to it.																;
0531: E8C9         ;																			;
0532: E8C9         ;			Function Code	:	C = 04H										;
0533: E8C9         ;			Entry Parameters:	E = Data byte to be output					;
0534: E8C9         ;			Exit Parameters :	None										;
0535: E8C9         ;																			;
0536: E8C9         ;--------------------------- Write Punch Byte - 4 (4) ----------------------;
0537: E8C9         ;BDOS put parameter in C before entering this routine
0538: E8C9             vPunchOut:
0539: E8C9 CD 12 F6               CALL   bcPunch
0540: E8CC C9                     RET
0541: E8CD         ;---------------------------- Write List Byte - 5 (5) ----------------------;
0542: E8CD         ;	This function outputs the specified byte in register E to the logical	;
0543: E8CD         ; list device. As with the reader and the punch, the physical device used	;
0544: E8CD         ; depends entirely on the BIOS.												;
0545: E8CD         ;																			;
0546: E8CD         ;			Function Code	:	C = 05H										;
0547: E8CD         ;			Entry Parameters:	E = Data byte to be output					;
0548: E8CD         ;			Exit Parameters :	None										;
0549: E8CD         ;																			;
0550: E8CD         ;---------------------------- Write List Byte - 5 (5) ----------------------;
0551: E8CD         ;BDOS put parameter in C before entering this routine
0552: E8CD             vListOut:                       ; func5 (05 - 05) List Output
0553: E8CD CD 0F F6               CALL   bcList               ; direct call to BIOS
0554: E8D0 C9                     RET
0555: E8D1         ;--------------------------- Direct Console I/O - 6 (6) --------------------;
0556: E8D1         ;	This function serves double duty: it both inputs and outputs characters	;
0557: E8D1         ; from the console. However, it bypasses the normal control characters and	;
0558: E8D1         ; line editing features (such as CONTROL-P and CONTROL-S) normally			;
0559: E8D1         ; associated with console I( O. Hence the name "direct" (or "unadorned" as	;
0560: E8D1         ; Digital Research describes it). If the value in register E is not OFFH,	;
0561: E8D1         ; then E contains a valid ASCII character that is output to the console.	;
0562: E8D1         ;	This function works well provided you never have to send a value ofOFFH	;
0563: E8D1         ; or expect to receive a value ofOOH. If you do need to send or receive		;
0564: E8D1         ;	pure binary data, you cannot use this function, since these values are	;
0565: E8D1         ;	likely to be part of the data stream.									;
0566: E8D1         ;																			;
0567: E8D1         ;			Function Code	:	C = 06H										;
0568: E8D1         ;			Entry Parameters:	E = 0FFH for Input							;
0569: E8D1         ;								E = Other than 0FFH for Output				;
0570: E8D1         ;			Exit Parameters :	A = Input byte or status					;
0571: E8D1         ;																			;
0572: E8D1         ;--------------------------- Direct Console I/O - 6 (6) --------------------;
0573: E8D1         ;BDOS put parameter in C before entering this routine
0574: E8D1             vDirectConIO:
0575: E8D1 79                     LD     A,C
0576: E8D2 3C                     INC    A
0577: E8D3 28 04                  JR     Z,vDirectConIO1      ; 0ffh => 00h, means input mode
0578: E8D5         ; send byte to console
0579: E8D5 CD 0C F6               CALL   bcConout             ; Send the byte to the console
0580: E8D8 C9                     RET
0581: E8D9         ;read byte/status from console
0582: E8D9             vDirectConIO1:
0583: E8D9 CD 06 F6               CALL   bcConst              ; Check Status
0584: E8DC B7                     OR     A                    ; 00 means not data ready
0585: E8DD CA 4D E8               JP     Z,ReturnToCaller1    ; If no data return	00 to caller
0586: E8E0 CD 09 F6               CALL   bcConin              ; Data is available, get it to A
0587: E8E3 32 B6 EA               LD     (exitParameterByte),A ; Save it
0588: E8E6 C9                     RET
0589: E8E7         ;--------------------------- Get IOBYTE Setting - 7 (7) --------------------;
0590: E8E7         ; This function places the current value of the IOBYTE in register A.		;
0591: E8E7         ;																			;
0592: E8E7         ; The IOBYTE structure:														;
0593: E8E7         ;								+-------+-------+-------+-------+			;
0594: E8E7         ;						Bit No. | 7 : 6 | 5 : 4 | 3 : 2 | 1 : 0 |			;
0595: E8E7         ;								+-------+-------+-------+-------+			;
0596: E8E7         ;				Logical Device	List | Punch | Reader|Console				;
0597: E8E7         ;																			;
0598: E8E7         ;																			;
0599: E8E7         ;			Function Code	:	C = 07H										;
0600: E8E7         ;			Entry Parameters:	None										;
0601: E8E7         ;			Exit Parameters :	A = Current IOBYTE value					;
0602: E8E7         ;																			;
0603: E8E7         ;--------------------------- Get IOBYTE Setting - 7 (7) --------------------;
0604: E8E7             vGetIOBYTE:
0605: E8E7 3A 03 00               LD     A,(IOBYTE)           ; Get the IOBYTE
0606: E8EA 32 B6 EA               LD     (exitParameterWord),A ; Return it to caller
0607: E8ED C9                     RET
0608: E8EE         ;--------------------------- Set IOBYTE Setting - 8 (8) --------------------;
0609: E8EE         ; This function sets the IOBYTE												;
0610: E8EE         ;																			;
0611: E8EE         ; The IOBYTE structure:														;
0612: E8EE         ;								+-------+-------+-------+-------+			;
0613: E8EE         ;						Bit No. | 7 : 6 | 5 : 4 | 3 : 2 | 1 : 0 |			;
0614: E8EE         ;								+-------+-------+-------+-------+			;
0615: E8EE         ;				Logical Device	List | Punch | Reader|Console				;
0616: E8EE         ;																			;
0617: E8EE         ;																			;
0618: E8EE         ;			Function Code	:	C = 08H										;
0619: E8EE         ;			Entry Parameters:	E = New IOBYTE value						;
0620: E8EE         ;			Exit Parameters :	None										;
0621: E8EE         ;																			;
0622: E8EE         ;--------------------------- Get IOBYTE Setting - 8 (8) --------------------;
0623: E8EE         ;BDOS put parameter in C before entering this routine
0624: E8EE             vSetIOBYTE:
0625: E8EE 21 03 00               LD     HL,IOBYTE            ; point at The IOBYTE
0626: E8F1 71                     LD     (HL),C               ; Place new vale in it
0627: E8F2 C9                     RET
0628: E8F3         ;---------------------- Display $ terminated String - 9 (9) ----------------;
0629: E8F3         ;	This function outputs a string of characters to the console device. The	;
0630: E8F3         ; address of this string is in registers DE. You must make sure that the	;
0631: E8F3         ; last character of the string is "$"; the BDOS uses this character as a	;
0632: E8F3         ; marker for the end of the string. The "$" itself does not get output to	;
0633: E8F3         ; the console.																;
0634: E8F3         ;																			;
0635: E8F3         ; While the BDOS is outputting the string, it expands tabs as previously	;
0636: E8F3         ; described, checks to see if there is an incoming character, and checks	;
0637: E8F3         ; for	CONTROL-S (XOFF, which stops the output until another character is	;
0638: E8F3         ; entered) or CONTROL-P (which turns on or off echoing of console characters;
0639: E8F3         ; to	the printer).														;
0640: E8F3         ;																			;
0641: E8F3         ;			Function Code	:	C = 09H										;
0642: E8F3         ;			Entry Parameters:	DE = Address of the first byte of the string;
0643: E8F3         ;			Exit Parameters :	None										;
0644: E8F3         ;																			;
0645: E8F3         ;---------------------- Display $ terminated String - 9 (9) ----------------;
0646: E8F3             vPrintString:
0647: E8F3 2A B4 EA               LD     HL,(paramDE)         ; Get address of the string
0648: E8F6 4D                     LD     C,L
0649: E8F7 44                     LD     B,H                  ; Put it into BC for call
0650: E8F8 CD 3B E9               CALL   Print                ; out to console
0651: E8FB C9                     RET
0652: E8FC         ;-------------------------- Read Console String - A (10) -------------------;
0653: E8FC         ;	This function reads a string of characters from the console device		;
0654: E8FC         ; and stores them in a buffer (address in DE) that you define. Full line	;
0655: E8FC         ; editing is possible: the operator can backspace, cancel the line and		;
0656: E8FC         ; start over, and use all the normal control functions. What you will		;
0657: E8FC         ; ultimately see in the buffer is the final version of the character string ;
0658: E8FC         ; entered, without any of the errors or control characters used to do the	;
0659: E8FC         ; line editing;																;
0660: E8FC         ;																			;
0661: E8FC         ;	The buffer that you define has a special format. The first byte in the	;
0662: E8FC         ; buffer tells the BDOS the maximum number of characters to be accepted.	;
0663: E8FC         ; The second byte is reserved for the BDOS to tell you how many characters	;
0664: E8FC         ; were actually placed in the buffer. The following bytes contain			;
0665: E8FC         ; the characters of the string. Character input will cease either when a	;
0666: E8FC         ; CARRIAGE RETURN is entered or when the maximum number of characters,		;
0667: E8FC         ; as specified in the buffer, has been received. The CARRIAGE RETURN is not ;
0668: E8FC         ; stored in the buffer as a character-it just serves as a terminator. If	;
0669: E8FC         ; the first character entered is a CARRIAGE RETURN, then the BDOS sets		;
0670: E8FC         ; the "characters input" byte to O. If you attempt to input more than the	;
0671: E8FC         ; maximum number of characters, the "characters input" count will be the	;
0672: E8FC         ; same as the maximum value allowed.										;
0673: E8FC         ;																			;
0674: E8FC         ;			Function Code	:	C = 0AH										;
0675: E8FC         ;			Entry Parameters:	DE = Address string buffer					;
0676: E8FC         ;			Exit Parameters :	String Buffer with console bytes in it		;
0677: E8FC         ;																			;
0678: E8FC         ;-------------------------- Read Console String - A (10) -------------------;
0679: E8FC             vReadString:
0680: E8FC CD E0 E9               CALL   ReadString
0681: E8FF C9                     RET
0682: E900         ;------------------------- Read Console Status - B (11) --------------------;
0683: E900         ; This function tells you whether a console input character is waiting to	;
0684: E900         ; be processed. Unlike the Console Input functions, which will wait until	;
0685: E900         ; there is input,this function simply checks and returns immediately.		;
0686: E900         ;																			;
0687: E900         ;			Function Code	:	C = 0BH										;
0688: E900         ;			Entry Parameters:	None										;
0689: E900         ;			Exit Parameters :	A = 00H if no incoming Data					;
0690: E900         ;								A = FFH	if incoming Data					;
0691: E900         ;																			;
0692: E900         ;------------------------- Read Console Status - B (11) --------------------;
0693: E900             vGetConsoleStatus:
0694: E900 CD 8C E9               CALL   ConBreak
0695: E903 32 B6 EA               LD     (exitParameterByte),A
0696: E906 C9                     RET
0697: E907         ;--------------------------- Get CP/M Version - C (12) ---------------------;
0698: E907         ;	This function tells you which version of CP/M you are currently running.;
0699: E907         ; A two-byte value is returned:												;
0700: E907         ;	H = OOH for CP/M, H = OlH for MP/M										;
0701: E907         ;	L = OOH for all releases before CP/M 2.0								;
0702: E907         ;	L = 20H for CP/M 2.0,21 H for 2.1, 22H for 2.2,							;
0703: E907         ;		and so on for any subsequent releases.								;
0704: E907         ;																			;
0705: E907         ; This information is of interest only if your program has some version		;
0706: E907         ; specific logic built into it. For example, CP/M version 1.4 does not		;
0707: E907         ; support the same Random File Input/ Output operations that CP/M 2.2 does.	;
0708: E907         ; Therefore, if your program uses Random I/O, put this check at the			;
0709: E907         ; beginning to ensure that it is indeed running under the appropriate		;
0710: E907         ; version of CP/M.															;
0711: E907         ;																			;
0712: E907         ;			Function Code	:	C = 0CH										;
0713: E907         ;			Entry Parameters:	None										;
0714: E907         ;			Exit Parameters :	HL =Version Number Code						;
0715: E907         ;								A = FFH	if incoming Data					;
0716: E907         ;																			;
0717: E907         ;--------------------------- Get CP/M Version - C (12) ---------------------;
0718: E907             vGetVersion:                      ; func12 (12 - 0C)	Get Version
0719: E907 3E 20                  LD     A,VERSION
0720: E909 32 B6 EA               LD     (exitParameterByte),A ;exitParameterByte = VERSION
0721: E90C C9                     RET
0722: E90D         ;--------------------------- Get/Set User Number - 20 (32) -----------------;
0723: E90D         ;	This subroutine either sets or gets the current user number. The current;
0724: E90D         ; user number determines which file directory entries are matched during all;
0725: E90D         ; disk file operations. When you call this function, the contents of the	;
0726: E90D         ; E register specify what action is to be taken. IfE=OFFH, then the function;
0727: E90D         ; will return the current user number in the A register. If you set E to a	;
0728: E90D         ; number in the range 0 to 15 (that is, a valid user number), the function	;
0729: E90D         ; will set the current user number to this value.							;
0730: E90D         ;																			;
0731: E90D         ;			Function Code	:	C = 0CH										;
0732: E90D         ;			Entry Parameters:	E = 0FFH to get User Number					;
0733: E90D         ;									= 0 to 15 to set User Number			;
0734: E90D         ;			Exit Parameters :	A = Current user Number if E was set to 0FFH;
0735: E90D         ;								A = FFH	if incoming Data					;
0736: E90D         ;																			;
0737: E90D         ;																			;
0738: E90D         ;--------------------------- Get/Set User Number - 20 (32) -----------------;
0739: E90D             vGetSetUserNumber:
0740: E90D 3A B3 EA               LD     A,(paramE)
0741: E910 FE FF                  CP     0FFH
0742: E912 20 07                  JR     NZ,SetUserNumber     ; interrogate user code instead
0743: E914 3A 88 F4               LD     A,(currentUserNumber)
0744: E917 32 B6 EA               LD     (exitParameterByte),A ; exitParameterByte=currentUserNumber
0745: E91A C9                     RET
0746: E91B             SetUserNumber:
0747: E91B E6 0F                  AND    LO_NIBBLE_MASK
0748: E91D 32 88 F4               LD     (currentUserNumber),A
0749: E920 C9                     RET
0750: E921         ;***************************************************************************;
0751: E921         ;								Character Support Routines					;
0752: E921         ;***************************************************************************;
0753: E921         ;-------------------- Return a Character from the console ------------------;
0754: E921         ;return byte from buffer or read from the console							;
0755: E921             ConIn:                          ;
0756: E921 21 AF EA               LD     HL,keyboardByte      ; is there a Byte waiting?			;
0757: E924 7E                     LD     A,(HL)               ;
0758: E925 36 00                  LD     (HL),0               ;
0759: E927 B7                     OR     A                    ;
0760: E928 C0                     RET    NZ                   ;
0761: E929         ;
0762: E929 C3 09 F6               JP     bcConin              ; Go get byte from Console			;
0763: E92C         ;-------------------- Return a Character from the console ------------------;
0764: E92C         ;----------- Is the Character ASCII printable, CR,LF,TAB,BACKSPACE ---------;
0765: E92C         ; Resets Carry Flag if ASCII Printable, CR,LF,TAB,BackSpace or GE SPACE	;
0766: E92C             IsPrintableASCII:                      ;
0767: E92C FE 0D                  CP     CR                   ;
0768: E92E C8                     RET    Z                    ; carriage return?													;
0769: E92F FE 0A                  CP     LF                   ;
0770: E931 C8                     RET    Z                    ; line feed?														;
0771: E932 FE 09                  CP     TAB                  ;
0772: E934 C8                     RET    Z                    ; TAB?																;
0773: E935 FE 08                  CP     CTRL_H               ;
0774: E937 C8                     RET    Z                    ; backspace?														;
0775: E938 FE 20                  CP     SPACE                ; Reset Carry if ASCII printable		;
0776: E93A C9                     RET                         ;
0777: E93B         ;----------- Is the Character ASCII printable, CR,LF,TAB,BACKSPACE ---------;
0778: E93B         ;------------------ Print character from (BC) until	$ found ----------------;
0779: E93B             Print:                          ;
0780: E93B 0A                     LD     A,(BC)               ; Get the next character			;
0781: E93C FE 24                  CP     DOLLAR               ; Is it the end ?					;
0782: E93E C8                     RET    Z                    ;	exit if yes						;
0783: E93F 03                     INC    BC                   ; Update the pointer				;
0784: E940 C5                     PUSH   BC                   ; Save it							;
0785: E941 4F                     LD     C,A                  ; Does Byte require					;
0786: E942 CD 58 E9               CALL   TabOut               ;	special attention - check		;
0787: E945 C1                     POP    BC                   ; Retrieve the pointer				;
0788: E946 18 F3                  JR     Print                ; Loop back							;
0789: E948         ;------------------ Print character from (BC) until	$ found ----------------;
0790: E948         ;-- Send printable character to console. Precede with Caret if needed ------;
0791: E948         ; character is in Reg C														;
0792: E948             CaretOut:                       ;
0793: E948 79                     LD     A,C                  ;
0794: E949 CD 2C E9               CALL   IsPrintableASCII     ;
0795: E94C 30 0A                  JR     NC,TabOut            ; Skip if Caret not needed			;
0796: E94E         ; send preceding up arrow													;
0797: E94E F5                     PUSH   AF                   ; Save the character				;
0798: E94F 0E 5E                  LD     C,CARET              ;
0799: E951 CD 6B E9               CALL   ConsoleOut           ; Send Caret to Console				;
0800: E954 F1                     POP    AF                   ; Get the character					;
0801: E955 F6 40                  OR     40H                  ; Make the graphic a letter			;
0802: E957 4F                     LD     C,A                  ; Set up to print					;
0803: E958         ; fall thru to TabbOut														;
0804: E958         ;-- Send printable character to console. Precede with Caret if needed ------;
0805: E958         ;------------- Send printable character to console. Expand if TAB ----------;
0806: E958         ; character is in Reg C														;
0807: E958             TabOut:                         ;
0808: E958 79                     LD     A,C                  ;
0809: E959 FE 09                  CP     TAB                  ; Is it a TAB						;
0810: E95B C2 6B E9               JP     NZ,ConsoleOut        ; Go directly to ConsoleOut if not	;
0811: E95E         ;
0812: E95E         ; TAB encountered															;
0813: E95E             TabOut0:                        ;
0814: E95E 0E 20                  LD     C,SPACE              ; Expand TABs with SPACEs			;
0815: E960 CD 6B E9               CALL   ConsoleOut           ; Send to Console					;
0816: E963 3A B2 EA               LD     A,(columnPosition)   ; Get Column position				;
0817: E966 E6 07                  AND    111b                 ; (ColumnPosition mod 8) = 0 ?		;
0818: E968 20 F4                  JR     NZ,TabOut0           ; Do again if not					;
0819: E96A C9                     RET                         ;
0820: E96B         ;------------- Send printable character to console. Expand if TAB ----------;
0821: E96B         ;-------------------------- Send character to console ----------------------;
0822: E96B         ; C	= Character to be output												;
0823: E96B             ConsoleOut:                      ;
0824: E96B         ; Look for CNTL_S from keyboard and save it in keyboardByte					;
0825: E96B C5                     PUSH   BC                   ; Save character and Count			;
0826: E96C CD 8C E9               CALL   ConBreak             ; Check for screen stop key stroke	;
0827: E96F C1                     POP    BC                   ;
0828: E970 C5                     PUSH   BC                   ; Get/save character				;
0829: E971         ; Send character to Console													;
0830: E971 CD 0C F6               CALL   bcConout             ; Send character to the console		;
0831: E974 C1                     POP    BC                   ;
0832: E975 C5                     PUSH   BC                   ; Get/save character				;
0833: E976         ; is the data to be output to print device?									;
0834: E976 3A B0 EA               LD     A,(printEchoFlag)    ;
0835: E979 B7                     OR     A                    ;
0836: E97A C4 0F F6               CALL   NZ,bcList            ; Send it to printer, if so			;
0837: E97D C1                     POP    BC                   ; Get the character					;
0838: E97E         ;
0839: E97E 79                     LD     A,C                  ; Put character to ACC				;
0840: E97F 21 B2 EA               LD     HL,columnPosition    ; A = char, HL = .columnPosition	;
0841: E982 34                     INC    M                    ; increment the ColumnPosition		;
0842: E983         ;
0843: E983 FE 20                  CP     SPACE                ;
0844: E985 D0                     RET    NC                   ; Exit if ASCII printable			;
0845: E986         ;
0846: E986 FE 0A                  CP     LF                   ;
0847: E988 C0                     RET    NZ                   ; Exit if not a Line Feed			;
0848: E989         ;
0849: E989 36 00                  LD     (HL),0               ;	else force columnPosition = 0	;
0850: E98B C9                     RET                         ;
0851: E98C         ;-------------------------- Send character to console ----------------------;
0852: E98C         ;--------------------	Check for Status and Control S or C ----------------;
0853: E98C         ;	Returns:																;
0854: E98C         ;			ACC = 0FFH if Saved keyboard byte or CNTL_S entered from console;
0855: E98C         ;			ACC = 00	No data Pending										;
0856: E98C         ;			DOES NOT RETURN if CTRL_C is entered from the keyboard			;
0857: E98C         ;																			;
0858: E98C             ConBreak:                       ;
0859: E98C 3A AF EA               LD     A,(keyboardByte)     ;
0860: E98F B7                     OR     A                    ; If there is a char waiting		;
0861: E990 20 2B                  JR     NZ,ConBreak1         ;	return with FF in ACC			;
0862: E992         ;
0863: E992 CD 06 F6               CALL   bcConst              ; Get status						;
0864: E995 FE 00                  CP     00H                  ; If 00 => No data pending			;
0865: E997 C8                     RET    Z                    ; Return 00 No data pending			;
0866: E998         ;
0867: E998 CD 09 F6               CALL   bcConin              ; Read the byte						;
0868: E99B         ;
0869: E99B FE 10                  CP     CTRL_P               ;
0870: E99D 20 0D                  JR     NZ,CheckCTL_S        ;
0871: E99F         ;<><><><><><><><><><><><><> Toggle Print Echo Flag<><><><><><><>			;
0872: E99F 21 B0 EA               LD     HL,printEchoFlag     ;
0873: E9A2 3E FF                  LD     A,TRUE               ;
0874: E9A4 BE                     CP     (HL)                 ;
0875: E9A5 20 02                  JR     NZ,ToggleFlag1       ;
0876: E9A7 3E 00                  LD     A,FALSE              ;
0877: E9A9             ToggleFlag1:                      ;
0878: E9A9 77                     LD     (HL),A               ;
0879: E9AA 18 0C                  JR     NothingWaiting       ;
0880: E9AC         ;<><><><><><><><><><><><><> Toggle Print Echo Flag<><><><><><><>			;
0881: E9AC             CheckCTL_S:                      ;
0882: E9AC FE 13                  CP     CTRL_S               ; If it is not Stop Screen, save	;
0883: E9AE 20 0A                  JR     NZ,ConBreak0         ;	and and return 0FFH				;
0884: E9B0         ;
0885: E9B0 CD 09 F6               CALL   bcConin              ; Else Read next byte				;
0886: E9B3 FE 03                  CP     CTRL_C               ;
0887: E9B5 CA 00 00               JP     Z,WarmBoot           ; do WarmBoot if	CTRL_C			;
0888: E9B8             NothingWaiting:                      ;
0889: E9B8 AF                     XOR    A                    ;
0890: E9B9 C9                     RET                         ; Set ACC = 0 and return			;
0891: E9BA             ConBreak0:                      ;
0892: E9BA 32 AF EA               LD     (keyboardByte),A     ; save the byte						;
0893: E9BD             ConBreak1:                      ;
0894: E9BD 3E FF                  LD     A,TRUE               ; return with true set in ACC		;
0895: E9BF C9                     RET                         ;
0896: E9C0         ;--------------------	Check for Status and Control S or C ----------------;
0897: E9C0         ;------------------------	Console Output Utilities -----------------------;
0898: E9C0             showHashCRLF:                      ;
0899: E9C0 0E 23                  LD     C,HASH_TAG           ;
0900: E9C2 CD 6B E9               CALL   ConsoleOut           ; Send # to console					;
0901: E9C5 CD D6 E9               CALL   showCRLF             ;
0902: E9C8             showHashCRLF1:                      ;
0903: E9C8 3E B2                  LD     A,columnPosition     ;
0904: E9CA 21 B1 EA               LD     HL,startingColumn    ;
0905: E9CD BF                     CP     A,M                  ;
0906: E9CE D0                     RET    NC                   ;
0907: E9CF 0E 20                  LD     C,SPACE              ;
0908: E9D1 CD 6B E9               CALL   ConsoleOut           ;
0909: E9D4 18 F2                  JR     showHashCRLF1        ;
0910: E9D6         ;------------------------	Console Output Utilities -----------------------;
0911: E9D6         ;------------------------	Send Carriage Return and Line Feed -------------;
0912: E9D6             showCRLF:                       ;
0913: E9D6 0E 0D                  LD     C,CR                 ;
0914: E9D8 CD 6B E9               CALL   ConsoleOut           ;
0915: E9DB 0E 0A                  LD     C,LF                 ;
0916: E9DD C3 6B E9               JP     ConsoleOut           ; exit via ConsoleOuts RET		;
0917: E9E0         ;------------------------	Send Carriage Return and Line Feed -------------;
0918: E9E0         ;------------------------- Read a $ terminated String ----------------------;
0919: E9E0         ;read to paramDE address (max length, current length, buffer)			;
0920: E9E0             ReadString:                      ;
0921: E9E0 3A B2 EA               LD     A,(columnPosition)   ;
0922: E9E3 32 B1 EA               LD     (startingColumn),A   ; Save start for CTRL_X and CTRL_R	;
0923: E9E6 2A B4 EA               LD     HL,(paramDE)         ; Get the start of the String		;
0924: E9E9 4E                     LD     C,(HL)               ; Get Max Count						;
0925: E9EA 23                     INC    HL                   ; Point at actual bytes read		;
0926: E9EB 06 00                  LD     B,0                  ; Initialize Current Count			;
0927: E9ED         ;
0928: E9ED         ; B = Current Count														;
0929: E9ED         ; C = Maximum characters												;
0930: E9ED         ; HL= Insertion Pointer													;
0931: E9ED         ;
0932: E9ED         ; read next character, BC, HL active										;
0933: E9ED             ReadNext:                       ;
0934: E9ED C5                     PUSH   BC                   ; Save Current Index and Max Count	;
0935: E9EE E5                     PUSH   HL                   ; Save pointer						;
0936: E9EF             ReadNext0:                      ;
0937: E9EF CD 21 E9               CALL   ConIn                ; Get the next Character			;
0938: E9F2 E6 7F                  AND    ASCII_MASK           ; Mask parity bit					;
0939: E9F4 E1                     POP    HL                   ; Restore Pointer					;
0940: E9F5 C1                     POP    BC                   ; Current Index and Max Count		;
0941: E9F6         ;Is It Carriage Return														;
0942: E9F6 FE 0D                  CP     CR                   ;
0943: E9F8 28 3A                  JR     Z,EndRead            ; End the read if yes				;
0944: E9FA FE 0A                  CP     LF                   ;
0945: E9FC         ;Is It Linefeed																;
0946: E9FC 28 36                  JR     Z,EndRead            ; End the read if yes				;
0947: E9FE         ;Is It BackSpace															;
0948: E9FE FE 08                  CP     CTRL_H               ;
0949: EA00 28 3C                  JR     Z,BSspaceBS          ;
0950: EA02             IsItRubout:                      ;
0951: EA02 FE 7F                  CP     RUBOUT               ; Non destructive delete			;
0952: EA04 28 41                  JR     Z,ItIsRubout         ;
0953: EA06             IsPhysicalEOL:                      ;
0954: EA06 FE 05                  CP     CTRL_E               ;
0955: EA08 28 46                  JR     Z,ItIsPhysicalEOL    ;
0956: EA0A             IsItPrintToggle:                      ;
0957: EA0A FE 10                  CP     CTRL_P               ;
0958: EA0C 28 49                  JR     Z,ItIsPrintToggle    ;
0959: EA0E             IsItDeleteTheLineX:                      ;
0960: EA0E FE 18                  CP     CTRL_X               ;
0961: EA10 28 6D                  JR     Z,DeleteTheLine      ; If CTRL_X go delete the line		;
0962: EA12             IsItDeleteTheLineU:                      ;
0963: EA12 FE 15                  CP     CTRL_U               ;
0964: EA14 CA 9D EA               JP     Z,IgnoreTheLine      ; If CTRL_U ignore the line			;
0965: EA17         ;Retype the line															;
0966: EA17 FE 12                  CP     CTRL_R               ;
0967: EA19 28 4B                  JR     Z,RepeatLine         ;
0968: EA1B         ;
0969: EA1B         ;....................... Echo input back to the Console	....................;
0970: EA1B         ; Full Duplex																;
0971: EA1B         ; A = Character to display													;
0972: EA1B         ; B = current char count													;
0973: EA1B         ; C = maximum buffer length													;
0974: EA1B         ; HL= buffer pointer														;
0975: EA1B         ;ReadEcho																	;
0976: EA1B 04                     INC    B                    ; Increment byte count				;
0977: EA1C 23                     INC    HL                   ; Advance the Pointer				;
0978: EA1D 77                     LD     (HL),A               ; Put char in buffer				;
0979: EA1E         ;
0980: EA1E             ReadEchoRubOut:                      ;
0981: EA1E C5                     PUSH   BC                   ; Save index and length			;
0982: EA1F E5                     PUSH   HL                   ; Save the Pointer					;
0983: EA20 4F                     LD     C,A                  ; Get char							;
0984: EA21 CD 48 E9               CALL   CaretOut             ; Output to Console (^ if needed)	;
0985: EA24 E1                     POP    HL                   ; Restore the Pointer				;
0986: EA25 C1                     POP    BC                   ; Restore index and length			;
0987: EA26 7E                     LD     A,(HL)               ; Recall char						;
0988: EA27         ; check for Warm Boot														;
0989: EA27 FE 03                  CP     CTRL_C               ;
0990: EA29 78                     LD     A,B                  ; Get Line position					;
0991: EA2A 20 05                  JR     NZ,AreWeAtEndOfBuffer ; Skip if not CTRL_C				;
0992: EA2C FE 01                  CP     1                    ; Beginning of the Line?			;
0993: EA2E CA 00 00               JP     Z,WarmBoot           ;	if yes do the Boot				;
0994: EA31         ; Check to see if we are at the end of the buffer							;
0995: EA31             AreWeAtEndOfBuffer:                      ;
0996: EA31 B9                     CP     C                    ; Over Max ?						;
0997: EA32 38 B9                  JR     C,ReadNext           ;	no, Go for more					;
0998: EA34         ;
0999: EA34         ; At the end of read														;
1000: EA34             EndRead:                        ;
1001: EA34         ; 	POP		HL																;
1002: EA34 2A B4 EA               LD     HL,(paramDE)         ;
1003: EA37 23                     INC    HL                   ;
1004: EA38         ;
1005: EA38 70                     LD     (HL),B               ; Actual length at Pos 0 of Buffer	;
1006: EA39 0E 0D                  LD     C,CR                 ;
1007: EA3B C3 6B E9               JP     ConsoleOut           ; Send CR to the Console			;
1008: EA3E         ;....................... Echo input back to the Console	....................;
1009: EA3E         ;.......................... Backspace SPACE BackSpace ......................;
1010: EA3E             BSspaceBS:                      ;
1011: EA3E 05                     DEC    B                    ;
1012: EA3F 2B                     DEC    HL                   ;
1013: EA40 C5                     PUSH   BC                   ;
1014: EA41 E5                     PUSH   HL                   ;
1015: EA42 CD 90 EA               CALL   BackUp               ;
1016: EA45 18 A8                  JR     ReadNext0            ;
1017: EA47         ;.......................... Backspace SPACE BackSpace ......................;
1018: EA47         ;.......................... It is RubOut ...................................;
1019: EA47             ItIsRubout:                      ;
1020: EA47         ; RUBOUT if possible														;
1021: EA47 78                     LD     A,B                  ; Are we at the start of the line	;
1022: EA48 B7                     OR     A                    ;
1023: EA49 28 A2                  JR     Z,ReadNext           ; then ignore and go for next char	;
1024: EA4B         ;adjust pointers back one													;
1025: EA4B 7E                     LD     A,(HL)               ; ACC = current character			;
1026: EA4C 05                     DEC    B                    ; Adjust the index					;
1027: EA4D 2B                     DEC    HL                   ; Adjust the pointer				;
1028: EA4E 18 CE                  JR     ReadEchoRubOut       ; Echo back - Full Duplex			;
1029: EA50         ;.......................... It is RubOut ...................................;
1030: EA50         ;.......................... It is PhysicalEOL ..............................;
1031: EA50             ItIsPhysicalEOL:                      ;
1032: EA50 C5                     PUSH   BC                   ; Save Current Index and Max Count	;
1033: EA51 E5                     PUSH   HL                   ; Save pointer						;
1034: EA52 CD D6 E9               CALL   showCRLF             ; Make new line						;
1035: EA55 18 98                  JR     ReadNext0            ;	and go for next char			;
1036: EA57         ;.......................... It is PhysicalEOL ..............................;
1037: EA57         ;.......................... It is PrintToggle ..............................;
1038: EA57             ItIsPrintToggle:                      ;
1039: EA57 E5                     PUSH   HL                   ; Save pointer						;
1040: EA58         ; Toggle the printEcho Flag													;
1041: EA58 21 B0 EA               LD     HL,printEchoFlag     ; Point at the flag					;
1042: EA5B 3E FF                  LD     A,TRUE               ; Load ACC with TRUE				;
1043: EA5D BE                     CP     (HL)                 ; Is the flag true?					;
1044: EA5E 20 02                  JR     NZ,IsItPrintToggle1  ; Skip if not						;
1045: EA60 3E 00                  LD     A,FALSE              ;	else. load ACC with FALSE		;
1046: EA62             IsItPrintToggle1:                      ;
1047: EA62 77                     LD     (HL),A               ; Set the Flags new Value			;
1048: EA63 E1                     POP    HL                   ; Restore pointer					;
1049: EA64 18 87                  JR     ReadNext             ;	and for another char			;
1050: EA66         ;.......................... It is PrintToggle ..............................;
1051: EA66         ;.......................... RepeatLine .....................................;
1052: EA66             RepeatLine:                      ;
1053: EA66 C5                     PUSH   BC                   ; Save Current Index and Max Count	;
1054: EA67 E5                     PUSH   HL                   ;	for exit						;
1055: EA68 CD C0 E9               CALL   showHashCRLF         ; Display Hash, new Line			;
1056: EA6B         ;
1057: EA6B 2A B4 EA               LD     HL,(paramDE)         ; Get start of Buffer				;
1058: EA6E 23                     INC    HL                   ; Skip past character count			;
1059: EA6F         ;
1060: EA6F             LL1:                            ;
1061: EA6F 23                     INC    HL                   ; Point at next char to display		;
1062: EA70 C5                     PUSH   BC                   ; Save counter, in B				;
1063: EA71 E5                     PUSH   HL                   ; Save buffer pointer				;
1064: EA72 4E                     LD     C,M                  ; Get the next character			;
1065: EA73 CD 48 E9               CALL   CaretOut             ; Display it						;
1066: EA76 E1                     POP    HL                   ; Restore							;
1067: EA77 C1                     POP    BC                   ;	the counter and pointer			;
1068: EA78 10 F5                  DJNZ   LL1                  ; loop if still more to show		;
1069: EA7A E1                     POP    HL                   ; Restore values					;
1070: EA7B C1                     POP    BC                   ;	from routine entry				;
1071: EA7C C3 ED E9               JP     ReadNext             ; Done here !						;
1072: EA7F         ;.......................... RepeatLine .....................................;
1073: EA7F         ;.......................... Delete The Line ................................;
1074: EA7F             DeleteTheLine:                      ;
1075: EA7F E1                     POP    HL                   ; Adjust Stack						;
1076: EA80         ;											;
1077: EA80             DeleteTheLine1:                      ;
1078: EA80 3A B1 EA               LD     A,(startingColumn)   ;
1079: EA83 21 B2 EA               LD     HL,columnPosition    ;
1080: EA86 BE                     CP     M                    ; Start of line ?					;
1081: EA87 D2 E0 E9               JP     NC,ReadString        ;	If yes get out and go for more	;
1082: EA8A 35                     DEC    M                    ; Adjust the ColumnPosition			;
1083: EA8B CD 90 EA               CALL   BackUp               ; Clear 1 column					;
1084: EA8E 18 F0                  JR     DeleteTheLine1       ; Loop for more						;
1085: EA90         ;.......................... Delete The Line ................................;
1086: EA90         ;------------------------ Back-up one screen position ----------------------;
1087: EA90             BackUp:                         ;
1088: EA90 CD 98 EA               CALL   BackUp1              ; Send Backspace				;
1089: EA93 0E 20                  LD     C,SPACE              ; Overwrite with SPACE				;
1090: EA95 CD 0C F6               CALL   bcConout             ; Overwrite with SPACE				;
1091: EA98         ;does not affect column count												;
1092: EA98             BackUp1:                        ;
1093: EA98 0E 08                  LD     C,CTRL_H             ;
1094: EA9A C3 0C F6               JP     bcConout             ; Send Backspace					;
1095: EA9D         ;------------------------ Back-up one screen position ----------------------;
1096: EA9D         ;.......................... Ignore The Line ................................;
1097: EA9D             IgnoreTheLine:                      ;
1098: EA9D CD C0 E9               CALL   showHashCRLF         ; Display Hash, new Line			;
1099: EAA0 0E 20                  LD     C,SPACE              ; We want to add a few spaces		;
1100: EAA2 CD 0C F6               CALL   bcConout             ;	to the console					;
1101: EAA5 0E 20                  LD     C,SPACE              ;
1102: EAA7 CD 0C F6               CALL   bcConout             ;
1103: EAAA C3 E0 E9               JP     ReadString           ; Start all over					;
1104: EAAD         ;.......................... Ignore The Line ................................;
1105: EAAD         ;------------------------- Read a $ terminated String ----------------------;
1106: EAAD         ;****************************************************************************
1107: EAAD         ;							DATA AREA										*
1108: EAAD         ;****************************************************************************
1109: EAAD         ;------------------------------Non Disk Data Area --------------------------;
1110: EAAD             usersStack: DS     2                    ; entry stack pointer				;
1111: EAAF         ;
1112: EAAF 00          keyboardByte: DB     00                   ; Saved keyboard character			;
1113: EAB0         ;
1114: EAB0 00          printEchoFlag: DB     00                   ; Controlled by ^P					;
1115: EAB1         ;
1116: EAB1         ; FunctionValue:DB	00H					; Reg C on BDOS Entry				;
1117: EAB1 00          startingColumn: DB     0                    ; Starting col pos after read		;
1118: EAB2 00          columnPosition: DB     0                    ; Current Column position			;
1119: EAB3         ;
1120: EAB3             paramE:    DS     BYTE                 ; Byte Argument for BDOS Call		;
1121: EAB4             paramDE:   DS     WORD                 ; Word Argument for BDOS Call		;
1122: EAB6             exitParameterByte:                      ; Byte returned Value				;
1123: EAB6             exitParameterWord: DS     WORD                 ; Word							;
1124: EAB8         ;
1125: EAB8         ;
1126: EAB8         ;------------------------------------ Data Area ----------------------------;
1127: EAB8         ;***************************************************************************;
1128: EAB8         ;								Disk I/O									;
1129: EAB8         ;***************************************************************************;
1130: EAB8         ;---------------------------- Reset Disk System - D (13) -------------------;
1131: EAB8         ;	This function requests CP/M to completely reset the disk file system.	;
1132: EAB8         ; CP/M then resets its internal tables, selects logical disk A as the		;
1133: EAB8         ; default disk, resets the DMAaddress back to 0080H (the address of the		;
1134: EAB8         ; buffer used by the BDOS to read and write to the disk), and marks all		;
1135: EAB8         ; logical disks as having Read/Write status. The BDOS will then have to log	;
1136: EAB8         ; in each logical disk as each disk is accessed. This involves reading the	;
1137: EAB8         ; entire file directory for the disk and rebuilding the allocation vectors	;
1138: EAB8         ; which keep track of which allocation blocks are free and which			;
1139: EAB8         ; are used for file storage.												;
1140: EAB8         ;	Submit file is created by external command Submit. The file is			;
1141: EAB8         ; identified as $$$.SUB														;
1142: EAB8         ;																			;
1143: EAB8         ;			Function Code	:	C = 0DH										;
1144: EAB8         ;			Entry Parameters:	None										;
1145: EAB8         ;			Exit Parameters :	A = 00H if no Submit File found				;
1146: EAB8         ;									= 0FFH if Submit file found				;
1147: EAB8         ;																			;
1148: EAB8         ;---------------------------- Reset Disk System - D (13) -------------------;
1149: EAB8             vResetSystem:
1150: EAB8 21 00 00               LD     HL,0
1151: EABB 22 8B F4               LD     (readOnlyVector),HL  ; Clear the vectors for
1152: EABE 22 8D F4               LD     (loggedDisks),HL     ;	R/O and Logged Disks
1153: EAC1 AF                     XOR    A                    ; Clear the current disk
1154: EAC2 32 89 F4               LD     (currentDisk),A
1155: EAC5         ; note that currentUserNumber remains unchanged
1156: EAC5 21 80 00               LD     HL,DMABuffer
1157: EAC8 22 8F F4               LD     (initDAMAddress),HL  ; initDAMAddress = DMABuffer
1158: EACB CD 07 EF               CALL   SetDataDMA           ; to data DMA address
1159: EACE C3 1D ED               JP     Select
1160: EAD1         ;---------------------------- Select Disk - E (14) -------------------------;
1161: EAD1         ;	This function makes the logical disk named in register E the default	;
1162: EAD1         ; disk All subsequent references to disk files that do not specify the disk	;
1163: EAD1         ; will use this default. When you reference a disk file that does have an	;
1164: EAD1         ; explicit logical disk in its name you do not have to issue another		;
1165: EAD1         ; Select Disk function; the BDOS will take care of that for you.			;
1166: EAD1         ;																			;
1167: EAD1         ;	Notice the way in which the logical disk is specified in register E.	;
1168: EAD1         ; It is not the same as the disk drive specification in the first byte of	;
1169: EAD1         ; the file control block. In the FeB, a value ofOOH is used to mean			;
1170: EAD1         ; "use the current default disk" (as specified in the last Select Disk		;
1171: EAD1         ; call or by the operator on the console). With this function, a value		;
1172: EAD1         ; of OOH in register A means that A is the selected drive, a value of		;
1173: EAD1         ; 01H means drive B, and so on to OFR for drive P, allowing					;
1174: EAD1         ; 16 drives in the system.													;
1175: EAD1         ;																			;
1176: EAD1         ;			Function Code	:	C = 0EH									;
1177: EAD1         ;			Entry Parameters:	E = Logical Disk Code (00H = A,01H = B ..)	;
1178: EAD1         ;			Exit Parameters :	None										;
1179: EAD1         ;																			;
1180: EAD1         ;---------------------------- Select Disk - E (14) -------------------------;
1181: EAD1             vSelectDisk:
1182: EAD1 C3 12 ED               JP     SelectCurrent
1183: EAD4         ;---------------------------- Open File - F (15) ---------------------------;
1184: EAD4         ;	This function opens a specified file for reading or writing. The FCB,	;
1185: EAD4         ; whose address must be in register DE, tells CP/M the user number,			;
1186: EAD4         ; the logical disk, the file name, and the file type. All other bytes of	;
1187: EAD4         ; the FCB will normally be set to O.										;
1188: EAD4         ;	The code returned by the BDOS in register A indicates whether the file	;
1189: EAD4         ; has been opened successfully. If A contains OFFH, then the BOOS was		;
1190: EAD4         ; unable to find the correct entry in the directory. If A= 0,1,2, or 3,		;
1191: EAD4         ; then the file has been opened.											;
1192: EAD4         ;			Function Code	:	C	= 0FH									;
1193: EAD4         ;			Entry Parameters:	DE = Address of File Control Block			;
1194: EAD4         ;			Exit Parameters :	A	= Directory Code						;
1195: EAD4         ;																			;
1196: EAD4         ;---------------------------- Open File - F (15) ---------------------------;
1197: EAD4             vOpenFile:
1198: EAD4 CD BE EF               CALL   InitializeExtentNumberMSB ; Clear the Extent number
1199: EAD7 CD 40 EF               CALL   ReselectDisk         ; do we need to reselect disk?
1200: EADA C3 F4 ED               JP     OpenFile
1201: EADD         ;---------------------------- Close File - 10 (16) -------------------------;
1202: EADD         ;	This function terminates the processing of a file to which you have		;
1203: EADD         ; written information. Under CP/M you do not need to close a file that you	;
1204: EADD         ; have been reading. However, if you ever intend for your program to		;
1205: EADD         ; function correctly under MP/M (the multi-user version of CP/M) you		;
1206: EADD         ; should close all files regardless of their use.							;
1207: EADD         ;	The Close File function, like Open File, returns a directory code in	;
1208: EADD         ; the A register. Register A will contain OFFH if the BOOS could not		;
1209: EADD         ; close the file successfully. If A is 0, 1, 2, or 3, then the file has	;
1210: EADD         ; been closed.																;
1211: EADD         ;																			;
1212: EADD         ;	When the BDOS closes a file to which data has been written, it writes	;
1213: EADD         ; the current contents of the FCB out to the disk directory, updating		;
1214: EADD         ; an existing directory entry by matching the disk, name, type, and		;
1215: EADD         ; extent number in the same manner that the Open File function does.		;
1216: EADD         ; Note that the BDOS does not transfer the last record of the file to the	;
1217: EADD         ; disk during the close operation. It merely updates the file directory.	;
1218: EADD         ; You must arrange to flush any partly filled record to the disk. If the	;
1219: EADD         ; file that you have created is a standard CP/M ASCII text file, you must	;
1220: EADD         ; arrange to fill the unused portion of the record with the standard lAH	;
1221: EADD         ; end-of-file characters as CP/M expects.									;
1222: EADD         ;																			;
1223: EADD         ;			Function Code	:	C	= 10H									;
1224: EADD         ;			Entry Parameters:	DE = Address of File Control Block			;
1225: EADD         ;			Exit Parameters :	A	= Directory Code						;
1226: EADD         ;																			;
1227: EADD         ;---------------------------- Close File - 10 (16) -------------------------;
1228: EADD             vCloseFile:
1229: EADD CD 40 EF               CALL   ReselectDisk
1230: EAE0 C3 35 EE               JP     CloseDirEntry
1231: EAE3         ;---------------------Search for First Name Match - 11 (17) ----------------;
1232: EAE3         ;	This function scans down the file directory for the first entry that	;
1233: EAE3         ; matches the file name, type, and extent in the FCB addressed by DE.		;
1234: EAE3         ; The file name, type, and extent may contain a "?" (ASCII 3FH) in one or	;
1235: EAE3         ; more character positions. Where a "?" occurs, the BDOS will match any		;
1236: EAE3         ; character in the corresponding position in the file directory. This is	;
1237: EAE3         ; known as ambiguous file name matching.									;
1238: EAE3         ;	The first byte of an FCB normally contains the logical disk number code.;
1239: EAE3         ; A value of 0 indicates the default disk, while 1 means disk A, 2 is B,	;
1240: EAE3         ; and so on up to a possible maximum of 16 for disk P. However, if this		;
1241: EAE3         ; byte contains a "?", the BDOS will search the default logical disk and	;
1242: EAE3         ; will match the file name and type regardless of the user number. This		;
1243: EAE3         ; function is normally used in conjunction with the Search Next function.	;
1244: EAE3         ; Search First, in the process of matching a file, leaves certain			;
1245: EAE3         ; variables in the BDOS set, ready for a subsequent Search Next.			;
1246: EAE3         ;	Both Search First and Search Next return a directory code in the		;
1247: EAE3         ; A register. With Search First, A = OFFH when no files match the FCB,		;
1248: EAE3         ; if a file match is found, A will have a value of 0, I, 2, or 3.			;
1249: EAE3         ;																			;
1250: EAE3         ;	To locate the particular directory entry that either the Search First	;
1251: EAE3         ; or Search Next function matched, multiply the directory code returned		;
1252: EAE3         ; in A by the length of a directory entry (32 bytes). This is easily done	;
1253: EAE3         ; by adding the A register to itself five times. Then add the DMA address	;
1254: EAE3         ; to get the actual address where the matched directory entry is stored.	;
1255: EAE3         ;	There are many occasions when you may need to write a program that will	;
1256: EAE3         ; accept an ambiguous file name and operate on all of the file names that	;
1257: EAE3         ; match it. (The DIR and ERA commands built into the CCP are examples that	;
1258: EAE3         ; use ambiguous file names.) To do this, you must use several BDOS			;
1259: EAE3         ; functions: the Set DMA Address function (code 26), this function			;
1260: EAE3         ; (Search First), and Search Next (code 18). All of this is shown in the	;
1261: EAE3         ; subroutine given in Figure 5-17.											;
1262: EAE3         ;																			;
1263: EAE3         ;																			;
1264: EAE3         ;			Function Code	:	C	= 11H									;
1265: EAE3         ;			Entry Parameters:	DE = Address of File Control Block			;
1266: EAE3         ;			Exit Parameters :	A	= Directory Code						;
1267: EAE3         ;																			;
1268: EAE3         ;---------------------Search for First Name Match - 11 (17) ----------------;
1269: EAE3             vFindFirst:
1270: EAE3 0E 00                  LD     C,0                  ; Length assuming '?' true
1271: EAE5 2A B4 EA               LD     HL,(paramDE)         ; Get the FCB
1272: EAE8 7E                     LD     A,(HL)               ; DIsk/User No
1273: EAE9 FE 3F                  CP     QMARK                ; Does it contain '?' ?
1274: EAEB 28 08                  JR     Z,QMarkFind          ;	if Yes, skip disk reselect
1275: EAED         ;	and reset of EXT
1276: EAED
1277: EAED CD BE EF               CALL   InitializeExtentNumberMSB ; Set Ext to 0
1278: EAF0 CD 40 EF               CALL   ReselectDisk         ; Use FCB to set currentDisk
1279: EAF3 0E 0F                  LD     C,nameLength         ; Match name,type and extent
1280: EAF5             QMarkFind:
1281: EAF5 CD F6 EF               CALL   SearchForDirectoryRecord ; Find the directory record
1282: EAF8 C3 15 F2               JP     CopyDirEntryToUserDMA ; Move it to the User's buffer
1283: EAFB         ;---------------------Search for Next Name Match - 12 (18) -----------------;
1284: EAFB         ;	This function searches down the file directory for the next file name,	;
1285: EAFB         ; type, and extent that match the FCB specified in a previous Search First	;
1286: EAFB         ; function call. Search First and Search Next are the only BDOS functions	;
1287: EAFB         ; that must be used together. As you can see, the Search Next function		;
1288: EAFB         ; does not require an FCB address as an input parameter-all the necessary	;
1289: EAFB         ; information will have been left in the BDOS on the Search First call.		;
1290: EAFB         ; Like Search First, Search Next returns a directory code in the A register,;
1291: EAFB         ; in this case, if A = OFFH, it means that there are no more files that		;
1292: EAFB         ; match the file control block. If A is not OFFH, it will be a value of		;
1293: EAFB         ; 0, 1, 2, or 3, indicating the relative directory entry number.			;
1294: EAFB         ;																			;
1295: EAFB         ;	There are two ways of using the Search First/ Next calls. Consider a	;
1296: EAFB         ; simple file copying program that takes as input an ambiguous file name.	;
1297: EAFB         ; You could scan the file directory, matching all of the possible file		;
1298: EAFB         ; names, possibly displaying them on the console, and storing the names of	;
1299: EAFB         ; the files to be copied in a table inside your program. This would have	;
1300: EAFB         ; the advantage of enabling you to present the file names to the operator	;
1301: EAFB         ; before any copying occurred. You could even arrange for the operator to	;
1302: EAFB         ; select which files to copy on a file-by-file basis. One disadvantage		;
1303: EAFB         ; would be that you could not accurately predict how many files might be	;
1304: EAFB         ; selected. On some hard disk systems you might have to accommodate several ;
1305: EAFB         ; thousand file names.														;
1306: EAFB         ;	The alternative way of handling the problem would be to match one file	;
1307: EAFB         ; name, copy it, then match the next file name, copy it, and so on. If you	;
1308: EAFB         ; gave the operator the choice of selecting which files to copy, this person;
1309: EAFB         ; would have to wait at the terminal as each file was being copied, but the ;
1310: EAFB         ; program would not need to have large table areas set aside to hold file	;
1311: EAFB         ; names. This solution to the problem is slightly more complicated, as you	;
1312: EAFB         ; can see from the logic in Figure 5-17.									;
1313: EAFB         ;	The subroutine in Figure 5-17, Get Next File (GNF), contains all of the	;
1314: EAFB         ; necessary logic to search down a directory for both alternatives described;
1315: EAFB         ; It does require that you indicate on entry whether it should search for	;
1316: EAFB         ; the first or next file match, by setting A to zero or some nonzero value	;
1317: EAFB         ; respectively.															;
1318: EAFB         ;	You can see from Figure 5-17 that whenever the subroutine is called to	;
1319: EAFB         ; get the next file, you must execute a Search First function to re-find	;
1320: EAFB         ; the	previous file. Only then can a Search Next be issued. As with all	;
1321: EAFB         ; functions that return a directory code in A, if this value is not OFFH, it;
1322: EAFB         ; will be the relative directory entry number in the directory record		;
1323: EAFB         ; currently in memory. This directory record will have been read into memory;
1324: EAFB         ; at whatever address was specified at the last Set DMA Address function	;
1325: EAFB         ; call. Notwithstanding its odd name, the DMA Address is simply the address ;
1326: EAFB         ; into which any record input from disk will be placed. If the Set DMA		;
1327: EAFB         ; Address function has not been used to change the value, then the CP/M	;
1328: EAFB         ; default DMA address, location 0080H, will be used to hold the directory	;
1329: EAFB         ; record.																	;
1330: EAFB         ;	The actual code for locating the address of the particular directory	;
1331: EAFB         ;	entry matched by the Search First/ Next functions is shown in Figure 5-17;
1332: EAFB         ;	near the label GNFC. The method involves multiplying the directory code	;
1333: EAFB         ;	by 32 and then adding this product to the current DMA address.			;
1334: EAFB         ;																			;
1335: EAFB         ;																			;
1336: EAFB         ;			Function Code	:	C	= 12H									;
1337: EAFB         ;			Entry Parameters:	None , Assume previous Search First Call	;
1338: EAFB         ;			Exit Parameters :	A	= Directory Code						;
1339: EAFB         ;																			;
1340: EAFB         ;---------------------Search for Next Name Match - 12 (18) -----------------;
1341: EAFB             vFindNext:
1342: EAFB 2A B6 F4               LD     HL,(searchAddress)   ; Get Current Dir Entry
1343: EAFE 22 B4 EA               LD     (paramDE),HL         ; Get the user's FCB
1344: EB01 CD 40 EF               CALL   ReselectDisk         ; Reselect if needed
1345: EB04 CD 0B F0               CALL   GetNextDirectoryRecord ; Go find the next directory record
1346: EB07 C3 15 F2               JP     CopyDirEntryToUserDMA ; Copy directory entry to user
1347: EB0A         ;--------------------------------Delete File - 13 (19) ---------------------;
1348: EB0A         ; This function logically deletes from the file directory files that match	;
1349: EB0A         ; the FCB addressed by DE. It does so by replacing the first byte of each	;
1350: EB0A         ; relevant directory entry (remember, a single file can have several		;
1351: EB0A         ; entries, one for each extent) by the value OE5H. This flags the directory ;
1352: EB0A         ; entry as being available for use.											;
1353: EB0A         ;																			;
1354: EB0A         ;	Like the previous two functions, Search First and Search Next, this		;
1355: EB0A         ; function can take an ambiguous file name and type as part of the			;
1356: EB0A         ; File Control Block, but unlike those functions, the logical disk select	;
1357: EB0A         ; code cannot be a"?". This function returns a directory code in A in the	;
1358: EB0A         ; same way as the previous file operations.									;
1359: EB0A         ;																			;
1360: EB0A         ;																			;
1361: EB0A         ;			Function Code	:	C	= 13H									;
1362: EB0A         ;			Entry Parameters:	DE = Address of File Control Block			;
1363: EB0A         ;			Exit Parameters :	A	= Directory Code						;
1364: EB0A         ;																			;
1365: EB0A         ;--------------------------------Delete File - 13 (19) ---------------------;
1366: EB0A             vDeleteFile:
1367: EB0A CD 40 EF               CALL   ReselectDisk         ; Reselect if needed
1368: EB0D CD 29 F2               CALL   CheckWrite           ; Terminate with error if Disk R/O
1369: EB10 0E 0C                  LD     C,fcbExtIndex        ; Load the extent number field
1370: EB12 CD F6 EF               CALL   SearchForDirectoryRecord ; Look for directory entry
1371: EB15             DeleteFileLoop:
1372: EB15 CD 47 F1               CALL   AtEndOfDirectory     ; Have we worked thru all entries
1373: EB18 CA 22 F2               JP     Z,DirLocationToReturnLoc ; Return directory Index to caller
1374: EB1B         ; set each non zero disk map entry to 0 in the allocation vector
1375: EB1B CD 30 F2               CALL   CheckRODirectory     ; Terminate with error if File R/O
1376: EB1E CD 50 F1               CALL   GetCurrentDirectoryRecord ; Point to Directory Entry
1377: EB21 36 E5                  LD     (HL),emptyDir        ; Mark as Empty
1378: EB23 0E 00                  LD     C,FALSE              ; Set flag for remove
1379: EB25 CD 74 F1               CALL   ScanDiskMap          ; Reclaim Bisk Blocks, set to 0
1380: EB28 CD 69 F0               CALL   WriteDir             ; Update the directory
1381: EB2B CD 0B F0               CALL   GetNextDirectoryRecord ; Look for more
1382: EB2E C3 15 EB               JP     DeleteFileLoop       ; Loop
1383: EB31         ;----------------------------Read Sequential - 14 (20) ---------------------;
1384: EB31         ;	This function reads the next record (l28-byte sector) from the 			;
1385: EB31         ; designated file into memory at the address set by the last Set DMA		;
1386: EB31         ; function call(code 26, lAH). The record read is specified by the FCB's	;
1387: EB31         ; sequential record field. This field is incremented by 1 so that a			;
1388: EB31         ; subsequent call to Read Sequential will get the next record from the		;
1389: EB31         ; file. If the end of the current extent is reached, then the BDOS will		;
1390: EB31         ; automatically open the next extent and reset the sequential record field	;
1391: EB31         ; to 0, ready for the next Read function call.								;
1392: EB31         ;	The file specified in the FCB must have been readied for input by		;
1393: EB31         ; issuing an Open File (code 15, OFH) or a Create File (code 22, 16H)		;
1394: EB31         ; BDOS call. The value OOH is returned in A to indicate a successful Read	;
1395: EB31         ; Sequential operation, while a nonzero value shows that the Read could	;
1396: EB31         ; not be completed because there was no data in the next record, as at the	;
1397: EB31         ; end of file.																;
1398: EB31         ;																			;
1399: EB31         ;	Although it is not immediately obvious, you can change the sequential	;
1400: EB31         ; record number, FCB$SEQREC, and within a given extent, read a record at	;
1401: EB31         ; random. If you want to access any given record within a file, you must	;
1402: EB31         ; compute which extent that record would be in and set the extent field in	;
1403: EB31         ; the file control block (FCB$EXTENT) before you open the file. Thus,		;
1404: EB31         ; although the function name implies sequential access, in practice you can ;
1405: EB31         ; use it to perform a simple type of random access. If you need to do true	;
1406: EB31         ; random access, look ahead to the Random Read function (code 33), which	;
1407: EB31         ; takes care of opening the correct extent automatically.					;
1408: EB31         ;	When you read data from a CP/M text file, the normal convention is to	;
1409: EB31         ; fill the last record of the file with lAH characters (CONTROL-Z).			;
1410: EB31         ; Therefore, two possible conditions can indicate end-of-file: either		;
1411: EB31         ; encountering a IAH, or receiving a return code from the BDOS function		;
1412: EB31         ; (in the A register) of OFFH. However, if the file that you are reading	;
1413: EB31         ; is not an ASCII text file, then a IAH character has no special meaning,	;
1414: EB31         ; it is just a normal data byte in the body of the file.					;
1415: EB31         ;																			;
1416: EB31         ;			Function Code	:	C	= 14H									;
1417: EB31         ;			Entry Parameters:	DE = Address of File Control Block			;
1418: EB31         ;			Exit Parameters :	A	= 0	=> Success							;
1419: EB31         ;									<> 0	=> No data read, Probably EOF	;
1420: EB31         ;																			;
1421: EB31         ;----------------------------Read Sequential - 14 (20) ---------------------;
1422: EB31             vReadSeq:
1423: EB31 CD 40 EF               CALL   ReselectDisk         ; Reselect if needed
1424: EB34         ;ReadSeq:
1425: EB34 3E 01                  LD     A,SEQ_ACCESS
1426: EB36 32 AE F4               LD     (diskAccessType),A   ; Set flag as sequential Disk I/O
1427: EB39             DiskRead:
1428: EB39 3E FF                  LD     A,TRUE
1429: EB3B 32 B2 F4               LD     (readModeFlag),A     ; Set Flag for read
1430: EB3E CD 6C EF               CALL   SetRecordVars        ; Set variables for current FCB
1431: EB41 3A BE F4               LD     A,(currentFileRecord)
1432: EB44 21 BC F4               LD     HL,fcbRecordCount
1433: EB47 BE                     CP     M                    ; is File Record < fcbRecordCount
1434: EB48 DA 5C EB               JP     C,RecordOK           ; skip if	yes
1435: EB4B         ; not enough records in the extent
1436: EB4B FE 80                  CP     RecordsPerExtent     ; Is record count the Max ?
1437: EB4D 20 22                  JR     NZ,NothingRead       ;	No, Exit with EOF
1438: EB4F CD A8 F2               CALL   OpenNextExt          ; Need to open the next extent
1439: EB52 AF                     XOR    A
1440: EB53 32 BE F4               LD     (currentFileRecord),A ; Reset the record count
1441: EB56 3A B6 EA               LD     A,(exitParameterByte) ; Was it a good Open
1442: EB59 B7                     OR     A
1443: EB5A 20 15                  JR     NZ,NothingRead       ;	exit if No
1444: EB5C             RecordOK:
1445: EB5C CD 58 F2               CALL   GetBlockNumber       ; Put it in absoluteCPMRecord
1446: EB5F CD 8A F2               CALL   WasBlockAllocated    ; Was it a good Allocation ?
1447: EB62 28 0D                  JR     Z,NothingRead        ; get out if not allocated
1448: EB64 CD 90 F2               CALL   SetActualRecordAdd   ; Absolute CPM Record
1449: EB67 CD 7C F3               CALL   Seek                 ; Go to proper track,sector
1450: EB6A CD 15 EF               CALL   ReadBuffer           ; Read into DMA address
1451: EB6D CD 81 F0               CALL   UpdateRecordVariables ; update Record info
1452: EB70 C9                     RET
1453: EB71             NothingRead:
1454: EB71 C3 2E F3               JP     SetExitParamTo1      ; No Data read
1455: EB74         ;----------------------------Write Sequential - 15 (21) --------------------;
1456: EB74         ;	This function writes a record from the address specified in the last Set;
1457: EB74         ; DMA (code 26, lAH) function call to the file defined in the FCB. The		;
1458: EB74         ; sequential record number in the FCB (RC) is updated by 1 so that			;
1459: EB74         ; the next call to Write Sequential will write to the next record position	;
1460: EB74         ; in the file. If necessary, a new extent will be opened to receive the new ;
1461: EB74         ; record.																	;
1462: EB74         ;	This function is directly analogous to the Read Sequential function,	;
1463: EB74         ; writing instead of reading. The file specified in the FCB must first be	;
1464: EB74         ; activated by an Open File (code 15,OFH) or create File call (code 22,16H).;
1465: EB74         ;	A directory code of OOH is returned in A to indicate that the Write was	;
1466: EB74         ; successful, a nonzero value is returned if the Write could not be			;
1467: EB74         ; completed because the disk was full.										;
1468: EB74         ;																			;
1469: EB74         ;	As with the Read Sequential function (code 20, 14H), you can achieve	;
1470: EB74         ; a simple form of random writing to the file by manipulating the			;
1471: EB74         ; sequential record number (RC). However, you can only overwrite existing	;
1472: EB74         ; records in the file, and if you want to move to another extent, you		;
1473: EB74         ; must close the file and reopen it with the FCB$EXTENT field set to the	;
1474: EB74         ; correct value.															;
1475: EB74         ;	The only logical error condition that can occur when writing to a file	;
1476: EB74         ; is insufficient room on the disk to accommodate the next extent of the	;
1477: EB74         ; file. Any hardware errors detected will be handled by the disk driver		;
1478: EB74         ; built into the BIOS or BDOS.												;
1479: EB74         ;																			;
1480: EB74         ;																			;
1481: EB74         ;			Function Code	:	C	= 15H									;
1482: EB74         ;			Entry Parameters:	DE = Address of File Control Block			;
1483: EB74         ;			Exit Parameters :	A	= 0	=> Success							;
1484: EB74         ;									<> 0	=> No data read, Probably EOF	;
1485: EB74         ;																			;
1486: EB74         ;----------------------------Write Sequential - 15 (21) --------------------;
1487: EB74             vWriteSeq:
1488: EB74 CD 40 EF               CALL   ReselectDisk         ; Reselect if needed
1489: EB77             DiskWriteSeq:
1490: EB77 3E 01                  LD     A,SEQ_ACCESS
1491: EB79 32 AE F4               LD     (diskAccessType),A   ; Set flag as sequential Disk I/O
1492: EB7C             DiskWrite:
1493: EB7C 3E 00                  LD     A,FALSE
1494: EB7E 32 B2 F4               LD     (readModeFlag),A     ; Set Flag for Write
1495: EB81 CD 29 F2               CALL   CheckWrite           ; Terminate with error if Disk R/O
1496: EB84 2A B4 EA               LD     HL,(paramDE)         ; Put FCB in HL
1497: EB87 CD 33 F2               CALL   CheckROFile          ; Terminate with error if File R/O
1498: EB8A CD 6C EF               CALL   SetRecordVars        ; Set variables for current FCB
1499: EB8D 3A BE F4               LD     A,(currentFileRecord) ; Get current record number
1500: EB90 FE 80                  CP     highestRecordNumber+1 ; Is it still in the same extent?
1501: EB92 D2 2E F3               JP     NC,SetExitParamTo1   ; Exit with NO WRITE set
1502: EB95 CD 58 F2               CALL   GetBlockNumber       ; Compute disk block number
1503: EB98 CD 8A F2               CALL   WasBlockAllocated    ; Is it really allocated ?
1504: EB9B 0E 00                  LD     C,WriteAllocated     ; Assume a normal write operation
1505: EB9D C2 E4 EB               JP     NZ,HaveWriteBlock    ;	Skip if block already allocated
1506: EBA0 CD 65 F2               CALL   GetDiskMapIndex      ; Disk Map Index in ACC
1507: EBA3 32 B4 F4               LD     (diskMapIndex),A     ; Save it
1508: EBA6 01 00 00               LD     BC,0000h             ; Anticipate using 0000
1509: EBA9 B7                     OR     A                    ; Is it block 0?
1510: EBAA 28 07                  JR     Z,FindAvailableBlock ;	skip if yes
1511: EBAC 4F                     LD     C,A                  ;	else a previous block exists
1512: EBAD 0B                     DEC    BC                   ; Adjust the index
1513: EBAE CD 72 F2               CALL   GetDiskMapValue      ; Put previous block # into HL
1514: EBB1 44                     LD     B,H                  ; Move previous block
1515: EBB2 4D                     LD     C,L                  ;	number into BC
1516: EBB3             FindAvailableBlock:
1517: EBB3 CD 9F F1               CALL   GetClosestBlock      ; Block number in HL
1518: EBB6 7D                     LD     A,L                  ; If no available blocks HL
1519: EBB7 B4                     OR     H                    ;	HL set to 0000H
1520: EBB8 20 06                  JR     NZ,FoundAvailableBlock ; Skip if found
1521: EBBA 3E 02                  LD     A,2                  ; Load return value
1522: EBBC 32 B6 EA               LD     (exitParameterByte),A ; Save for caller
1523: EBBF C9                     RET                         ; Exit with exitParameterByte=2
1524: EBC0             FoundAvailableBlock:
1525: EBC0 22 C0 F4               LD     (absoluteCPMRecord),HL ; Save the block number
1526: EBC3 EB                     EX     DE,HL                ; block number to DE (E)
1527: EBC4 2A B4 EA               LD     HL,(paramDE)         ; HL at FCB
1528: EBC7 01 10 00               LD     BC,fcbDiskMapIndex   ; Index to start of FCB Map
1529: EBCA 09                     ADD    HL,BC                ; HL=.start of FCB Map
1530: EBCB 3A B4 F4               LD     A,(diskMapIndex)     ; Get target block index
1531: EBCE 4F                     LD     C,A                  ; Map index to C
1532: EBCF 06 00                  LD     B,0                  ; Set MSB to 00
1533: EBD1 09                     ADD    HL,BC                ; Calculate 8 bit block's location
1534: EBD2 3A B8 F4               LD     A,(byteAllocationFlag) ; Get allocation size flag
1535: EBD5 B7                     OR     A                    ; Test it
1536: EBD6 28 03                  JR     Z,Allocate16Bit      ; Skip if allocating word
1537: EBD8 73                     LD     (HL),E               ; Update the Map
1538: EBD9 18 04                  JR     MarkNewBlock         ; Skip 16 bit calculations
1539: EBDB             Allocate16Bit:
1540: EBDB 09                     ADD    HL,BC                ; Adjust for 16 bit value
1541: EBDC 72                     LD     (HL),D               ; Save MSB
1542: EBDD 23                     INC    HL
1543: EBDE 73                     LD     (HL),E               ; SAVE LSB
1544: EBDF             MarkNewBlock:
1545: EBDF CD D8 EF               CALL   ResetFileWriteFlag
1546: EBE2 0E 02                  LD     C,WriteCleanBuffer   ; Marked as unallocated write
1547: EBE4             HaveWriteBlock:
1548: EBE4 3A B6 EA               LD     A,(exitParameterByte)
1549: EBE7 B7                     OR     A
1550: EBE8 C0                     RET    NZ                   ; Exit if non zero returned value ??
1551: EBE9 C5                     PUSH   BC                   ; Write flag (in C)
1552: EBEA CD 90 F2               CALL   SetActualRecordAdd   ; Set absoluteCPMRecord
1553: EBED CD 7C F3               CALL   Seek                 ; Seek to o proper file position
1554: EBF0 C1                     POP    BC                   ; Write flag (in C)
1555: EBF1 C5                     PUSH   BC                   ; Write flag (in C)
1556: EBF2 CD 79 F0               CALL   WriteBuffer          ; Write buffer and check result
1557: EBF5 C1                     POP    BC                   ; Write flag (in C)
1558: EBF6 3A BE F4               LD     A,(currentFileRecord) ; Get the current record
1559: EBF9 21 BC F4               LD     HL,fcbRecordCount    ; Get the starting FCB record count
1560: EBFC BE                     CP     M                    ; Current File Record > fcbRecordCount
1561: EBFD 38 04                  JR     C,DiskWrite1         ;	skip if yes
1562: EBFF 77                     LD     (HL),A               ; update the FCB RC
1563: EC00 34                     INC    M                    ; fcbRecordCount = current File Record+1
1564: EC01 0E 02                  LD     C,WriteCleanBuffer   ; Marked as unallocated write
1565: EC03             DiskWrite1:
1566: EC03         ; A has current File Record, C=2 if new block or new record#
1567: EC03 0D                     DEC    C
1568: EC04 0D                     DEC    C                    ; Check if C = unallocated write
1569: EC05 20 05                  JR     NZ,DiskWrite2        ; Skip if C not unallocated write
1570: EC07 F5                     PUSH   AF                   ; currentFileRecord
1571: EC08 CD D8 EF               CALL   ResetFileWriteFlag
1572: EC0B         ;	CALL	GetWriteFileFlagValue		; HL points to FCB s2
1573: EC0B         ;	RES		7,(HL)						; Reset WriteFileFlag
1574: EC0B F1                     POP    AF                   ; currentFileRecord
1575: EC0C             DiskWrite2:
1576: EC0C         ; check for end of extent, if found attempt
1577: EC0C         ; to open next extent in preparation for next write
1578: EC0C FE 7F                  CP     highestRecordNumber  ; Space for more records ?
1579: EC0E 20 19                  JR     NZ,DiskWriteCleanup  ;	finish up if Yes
1580: EC10 3A AE F4               LD     A,(diskAccessType)   ; Is this using Random Access
1581: EC13 B7                     OR     A
1582: EC14 28 13                  JR     Z,DiskWriteCleanup   ;	finish up if Yes
1583: EC16 CD 81 F0               CALL   UpdateRecordVariables ; Update variables from I/O in	FCB
1584: EC19 CD A8 F2               CALL   OpenNextExt          ; Acc = 0 OK, Acc = 1 Failed
1585: EC1C 21 B6 EA               LD     HL,exitParameterByte
1586: EC1F 7E                     LD     A,(HL)               ; Put Open	result in parameter
1587: EC20 B7                     OR     A                    ; Is it 00
1588: EC21 20 04                  JR     NZ,DiskWriteCleanup0 ;	no, skip currentRecord update
1589: EC23 3D                     DEC    A                    ; A gets FF
1590: EC24 32 BE F4               LD     (currentFileRecord),A ; Update currentFileRecord
1591: EC27             DiskWriteCleanup0:
1592: EC27 36 00                  LD     (HL),0               ; Set exitParameterByte
1593: EC29             DiskWriteCleanup:
1594: EC29 C3 81 F0               JP     UpdateRecordVariables ; update variables from I/O in	FCB
1595: EC2C         ;--------------------------------- Make File - 16 (22) ---------------------;
1596: EC2C         ;	This function creates a new file of the specified name and type. You	;
1597: EC2C         ; must first ensure that no file of the same name and type already exists	;
1598: EC2C         ; on the same logical disk, either by trying to open the file (if this		;
1599: EC2C         ; succeeds, the file already exists) or by unconditionally erasing the file.;
1600: EC2C         ;	In addition to creating the file and its associated file directory entry;
1601: EC2C         ; this function also effectively opens the file so that it is ready for	;	;
1602: EC2C         ; records to be written to it.												;
1603: EC2C         ;	This function returns a normal directory code if the file creation has	;
1604: EC2C         ; completed successfully or a value of OFFH if there is insufficient		;
1605: EC2C         ; disk or directory space.													;
1606: EC2C         ;	Note that this function cannot accept an ambiguous file name in the FCB. ;
1607: EC2C         ;																			;
1608: EC2C         ;																			;
1609: EC2C         ;			Function Code	:	C	= 16H									;
1610: EC2C         ;			Entry Parameters:	DE = Address of File Control Block			;
1611: EC2C         ;			Exit Parameters :	A	= Directory Code						;
1612: EC2C         ;---------------------------- Make File - 16 (22) --------------------------;
1613: EC2C             vMakeFile:
1614: EC2C CD BE EF               CALL   InitializeExtentNumberMSB ; Clear the Extent number
1615: EC2F CD 40 EF               CALL   ReselectDisk         ; Reselect if needed
1616: EC32 C3 B3 EE               JP     MakeNewFile          ; Go Make it
1617: EC35         ;-------------------------- Rename File - 17 (23) --------------------------;
1618: EC35         ;	This function renames an existing file name and type to a new name and	;
1619: EC35         ; type. It is unusual in that it uses a single FCB to store both the old	;
1620: EC35         ; file name and type (in the first 16 bytes) and the new file name and type ;
1621: EC35         ; (in the second 16 bytes).													;
1622: EC35         ;	This function returns a normal directory code if the file rename was	;
1623: EC35         ; completed successfully or a value of OFFH if the old file name could not	;
1624: EC35         ; be found.																	;
1625: EC35         ;																			;
1626: EC35         ;	The Rename File function only checks that the old file name and type	;
1627: EC35         ; exist; it makes no check to ensure that the new name and type combination ;
1628: EC35         ; does not already exist. Therefore, you should try to open the new file	;
1629: EC35         ; name and type. If you succeed, do not attempt the rename operation.		;
1630: EC35         ; CP/M will create more than one file of the same name and type, and you	;
1631: EC35         ; stand to lose the information in both files as you attempt to sort out	;
1632: EC35         ; the problem.																;
1633: EC35         ;	Never use ambiguous file names in a rename operation; it produces strange;
1634: EC35         ; effects and may result in files being irreparably damaged. This function	;
1635: EC35         ; will change all occurrences of the old file name to the new name.			;
1636: EC35         ;																			;
1637: EC35         ;																			;
1638: EC35         ;			Function Code	:	C	= 17H									;
1639: EC35         ;			Entry Parameters:	DE = Address of File Control Block			;
1640: EC35         ;			Exit Parameters :	A	= Directory Code						;
1641: EC35         ;																			;
1642: EC35         ;-------------------------- Rename File - 17 (23) --------------------------;
1643: EC35             vRenameFile:
1644: EC35 CD 40 EF               CALL   ReselectDisk         ; Reselect if needed
1645: EC38 CD 29 F2               CALL   CheckWrite           ; Terminate with error if Disk R/O
1646: EC3B 0E 0C                  LD     C,fcbExtIndex        ; Match user#, Name & Type only
1647: EC3D CD F6 EF               CALL   SearchForDirectoryRecord
1648: EC40         ; Move the old use number to the new entry (2nd half of FCB)
1649: EC40 2A B4 EA               LD     HL,(paramDE)         ; FCB pointer
1650: EC43 7E                     LD     A,(HL)               ; First byte of Dir entry
1651: EC44 11 10 00               LD     DE,fcbDiskMapIndex   ; Use second half of FCB
1652: EC47 19                     ADD    HL,DE                ; Point at the second half of FCB
1653: EC48 77                     LD     (HL),A               ; Put into new name user position
1654: EC49             RenameLoop:
1655: EC49 CD 47 F1               CALL   AtEndOfDirectory     ; If have we checked the whole dir
1656: EC4C CA 22 F2               JP     Z,DirLocationToReturnLoc ;	return directory Index to caller
1657: EC4F         ; process this match
1658: EC4F CD 30 F2               CALL   CheckRODirectory     ; Terminate with error if File R/O
1659: EC52 0E 10                  LD     C,fcbDiskMapIndex    ; Set starting position
1660: EC54 1E 0C                  LD     E,fcbExtIndex        ; Set Length
1661: EC56 CD 41 F2               CALL   CopyDir              ; copy from FCB to dir entry
1662: EC59         ; element renamed, look for more
1663: EC59 CD 0B F0               CALL   GetNextDirectoryRecord ; Look for more dir entries
1664: EC5C 18 EB                  JR     RenameLoop           ; Loop
1665: EC5E         ;---------------------------- Get Active Disks - 18 (24) -------------------;
1666: EC5E         ; This function returns a bit map, called the login vector, in register		;
1667: EC5E         ; pair	HL, indicating which logical disk drives have been selected since	;
1668: EC5E         ; the last	warm boot or Reset Disk function (code 13, ODH). The least		;
1669: EC5E         ; significant bit of L corresponds to disk A, while the highest order bit	;
1670: EC5E         ; in H maps disk P. The bit corresponding to the specific logical disk is	;
1671: EC5E         ; set to 1 if the disk has been selected or to 0 if the disk is not			;
1672: EC5E         ; currently on-line.														;
1673: EC5E         ;	Logical disks can be selected programmatically through any file			;
1674: EC5E         ; operation	that sets the drive field to a nonzero value, through the		;
1675: EC5E         ; Select Disk function (code 14, OEH), or by the operator entering an		;
1676: EC5E         ; "X:" command where "X" is equal to A, B, ... , P.							;
1677: EC5E         ;																			;
1678: EC5E         ;			Function Code	:	C = 018H									;
1679: EC5E         ;			Entry Parameters:	None										;
1680: EC5E         ;			Exit Parameters :	HL = Active disk map (login vector)			;
1681: EC5E         ;																			;
1682: EC5E         ;---------------------------- Get Active Disks - 18 (24) -------------------;
1683: EC5E             vGetLoginVector:
1684: EC5E 2A 8D F4               LD     HL,(loggedDisks)
1685: EC61 22 B6 EA               LD     (exitParameterWord),HL
1686: EC64 C9                     RET
1687: EC65         ;---------------------------- Get Current Disk- 19 (25) --------------------;
1688: EC65         ;	This function returns the current default disk set by the last Select	;
1689: EC65         ; Disk function call (code 14, OEH) or by the operator entering the			;
1690: EC65         ; "X:"command (where "X" is A, B, ..., P) to the CCP.						;
1691: EC65         ;																			;
1692: EC65         ;	This function returns the current default disk in coded form.			;
1693: EC65         ; Register A= 0 if drive A is the current drive, I if drive B, and so on.	;
1694: EC65         ; If you need to convert this to the corresponding ASCII character, simply	;
1695: EC65         ; add 41H to register A. Use this function when you convert a file name and ;
1696: EC65         ; type in an FCB to an ASCII string in order to display it. If the first	;
1697: EC65         ; byte of the FCB is OOH, the current default drive is to be used.			;
1698: EC65         ; You must therefore use this function to determine the logical disk letter ;
1699: EC65         ; for the default drive.													;
1700: EC65         ;																			;
1701: EC65         ;			Function Code	:	C = 019H									;
1702: EC65         ;			Entry Parameters:	None										;
1703: EC65         ;			Exit Parameters :	A = Current Disk (0=A,1=B...,F=P)			;
1704: EC65         ;																			;
1705: EC65         ;---------------------------- Get Current Disk- 19 (25) --------------------;
1706: EC65             vGetCurrentDisk:
1707: EC65 3A 89 F4               LD     A,(currentDisk)
1708: EC68 32 B6 EA               LD     (exitParameterByte),A
1709: EC6B C9                     RET
1710: EC6C         ;---------------------------- Set DMA Address - 1A (26) --------------------;
1711: EC6C         ;	This function sets the BDOS's direct memory access (DMA) address to a new;
1712: EC6C         ; value. The name is an historic relic dating back to the Intel Development ;
1713: EC6C         ; System on which CP/M was originally developed. This machine, by virtue of ;
1714: EC6C         ; its hardware, could read data from a diskette directly into memory or		;
1715: EC6C         ; write data to a diskette directly from memory. The name DMA address now	;
1716: EC6C         ; applies to the address of the buffer to and from which data is			;
1717: EC6C         ; transferred whenever a diskette Read, Write, or directory operation is	;
1718: EC6C         ; performed. Whenever CP/M first starts up (cold boot) m a warm boot or		;
1719: EC6C         ; Reset Disk operation occurs, the DMA address is reset to its default		;
1720: EC6C         ; value of 0080H.															;
1721: EC6C         ;																			;
1722: EC6C         ;			Function Code	:	C = 0A9H									;
1723: EC6C         ;			Entry Parameters:	DE = DMA Address							;
1724: EC6C         ;			Exit Parameters :	None										;
1725: EC6C         ;																			;
1726: EC6C         ;---------------------------- Set DMA Address - 1A (26) --------------------;
1727: EC6C             vSetDMA:
1728: EC6C 2A B4 EA               LD     HL,(paramDE)
1729: EC6F 22 8F F4               LD     (initDAMAddress),HL
1730: EC72 C3 07 EF               JP     SetDataDMA
1731: EC75         ;---------------------------- Get Allocation Vector - 1B (27) --------------;
1732: EC75         ;	This function returns the base, or starting, address of the allocation	;
1733: EC75         ; vector for the currently selected logical disk. This information,			;
1734: EC75         ; indicating which parts of the disk are assigned, is used by utility		;
1735: EC75         ; programs and the BDOS itself to determine how much unused space is on the ;
1736: EC75         ; logical disk, to locate an unused allocation block in order to extend		;
1737: EC75         ; a file, or to relinquish an allocation block when a file is deleted.		;
1738: EC75         ;																			;
1739: EC75         ;			Function Code	:	C = 01BH									;
1740: EC75         ;			Entry Parameters:	None										;
1741: EC75         ;			Exit Parameters :	HL = Address of allocation vector			;
1742: EC75         ;																			;
1743: EC75         ;---------------------------- Get Allocation Vector - 1B (27) --------------;
1744: EC75             vGetAllocAddr:
1745: EC75 2A 9D F4               LD     HL,(caAllocVector)
1746: EC78 22 B6 EA               LD     (exitParameterWord),HL
1747: EC7B C9                     RET
1748: EC7C         ;---------------------------- Write Protect Disk - 1C (28) -----------------;
1749: EC7C         ;	This function logically sets the currently selected disk to a Read-Only	;
1750: EC7C         ; state. Any attempts to execute a Write Sequential or Write Random function;
1751: EC7C         ; to the selected disk will be intercepted by the BDOS, and the following	;
1752: EC7C         ; message will appear on the console:										;
1753: EC7C         ;	BDOS Err on X: R/O														;
1754: EC7C         ;	where X: is the selected disk.											;
1755: EC7C         ;																			;
1756: EC7C         ;	Once you have requested Read-Only status for the currently selected		;
1757: EC7C         ; logical disk, this status will persist even if you proceed to select		;
1758: EC7C         ; other logical disks. In fact, it will remain in force until the next warm ;
1759: EC7C         ; boot or Reset Disk System function call.									;
1760: EC7C         ;	Digital Research documentation refers to this function code as Disk Write;
1761: EC7C         ; Protect. The Read-Only description is used here because it corresponds	;
1762: EC7C         ; to the error message produced if your program attempts to write on		;
1763: EC7C         ; the disk.																	;
1764: EC7C         ;																			;
1765: EC7C         ;			Function Code	:	C = 01CH									;
1766: EC7C         ;			Entry Parameters:	None										;
1767: EC7C         ;			Exit Parameters :	None										;
1768: EC7C         ;																			;
1769: EC7C         ;---------------------------- Write Protect Disk - 1C (28) -----------------;
1770: EC7C         ;;write protect current disk
1771: EC7C             vWriteProtectDisk:
1772: EC7C C3 1D EF               JP     SetDiskReadOnly
1773: EC7F         ;---------------------------- Get Read-Only Map - 1D (29) ------------------;
1774: EC7F         ;	This function returns a bit map in registers H and L showing which		;
1775: EC7F         ; logical disks in the system have been set to Read-Only status, either by	;
1776: EC7F         ; the Set Logical Disk to Read-Only function call (code 28, ICH), or by		;
1777: EC7F         ; the BDOS itself, because it detected that a diskette had been changed.	;
1778: EC7F         ;	The least significant bit of L corresponds to logical disk A, while the	;
1779: EC7F         ; most significant bit of H corresponds to disk P. The bit corresponding to ;
1780: EC7F         ; the specific logical disk is set to I if the disk has been set to			;
1781: EC7F         ; Read-Only status.															;
1782: EC7F         ;																			;
1783: EC7F         ;			Function Code	:	C = 01DH									;
1784: EC7F         ;			Entry Parameters:	None										;
1785: EC7F         ;			Exit Parameters :	HL = Read-Only Vector						;
1786: EC7F         ;																			;
1787: EC7F         ;---------------------------- Get Read-Only Map - 1D (29) ------------------;
1788: EC7F             vGetReadOnlyMap:
1789: EC7F 2A 8B F4               LD     HL,(readOnlyVector)
1790: EC82 22 B6 EA               LD     (exitParameterWord),HL
1791: EC85 C9                     RET
1792: EC86         ;---------------------- Set File Attributes - 1E (30) ----------------------;
1793: EC86         ;	This function sets the bits that describe attributes of a file in the	;
1794: EC86         ; relevant directory entries for the specified file. Each file can be		;
1795: EC86         ; assigned up to 11 file attributes. Of these 11, two have predefined		;
1796: EC86         ; meanings, four others are available for you to use, and the remaining		;
1797: EC86         ; five are reserved for future use by CP/M.									;
1798: EC86         ;	Each attribute consists of a single bit. The most significant bit of	;
1799: EC86         ; each byte of the file name and type is used to store the attributes.		;
1800: EC86         ; The file attributes are known by a code consisting of the letter "f"		;
1801: EC86         ; (for file name) or "t" (for file type), followed by the number of the		;
1802: EC86         ; character position and a single quotation mark. For example, the Read-Only;
1803: EC86         ; attribute is tl'.															;
1804: EC86         ;	The significance of the attributes is as follows:						;
1805: EC86         ;			fl' to f4' Available for you to use								;
1806: EC86         ;			f5' to fS' Reserved for future CP/M use							;
1807: EC86         ;			tl' Read-Only File attribute									;
1808: EC86         ;			t2' System File attribute										;
1809: EC86         ;			t3' Reserved for future CP/M use								;
1810: EC86         ;																			;
1811: EC86         ;	Attributes are set by presenting this function with an FCB in which the	;
1812: EC86         ; unambiguous file name has been preset with the most significant bits		;
1813: EC86         ; set appropriately. This function then searches the directory for a match	;
1814: EC86         ; and changes the matched entries to contain the attributes which have been ;
1815: EC86         ; set in the FCB.															;
1816: EC86         ;	The BDOS will intercept any attempt to write on a file that has the		;
1817: EC86         ; Read-Only attribute set. The DIR command in the CCP does not display any	;
1818: EC86         ; file with System status.													;
1819: EC86         ;																			;
1820: EC86         ;	You can use the four attributes available to you to set up a file		;
1821: EC86         ; security system, or perhaps to flag certain files that must be backed up	;
1822: EC86         ; to other disks. The Search First and Search Next functions allow you to	;
1823: EC86         ; view the complete file directory entry, so your programs can test the		;
1824: EC86         ; attributes easily.														;
1825: EC86         ;																			;
1826: EC86         ;																			;
1827: EC86         ;			Function Code	:	C	= 1EH									;
1828: EC86         ;			Entry Parameters:	DE = Address of File Control Block			;
1829: EC86         ;			Exit Parameters :	A	= Directory Code						;
1830: EC86         ;																			;
1831: EC86         ;---------------------- Set File Attributes - 1E (30) ----------------------;
1832: EC86             vSetFileAttributes:
1833: EC86 CD 40 EF               CALL   ReselectDisk         ; Reselect if needed
1834: EC89 0E 0C                  LD     C,fcbExtIndex        ; Size of search/match
1835: EC8B CD F6 EF               CALL   SearchForDirectoryRecord ; Find a match
1836: EC8E             SetAttributesLoop:
1837: EC8E CD 47 F1               CALL   AtEndOfDirectory     ; Any more dir entries ?
1838: EC91 CA 22 F2               JP     Z,DirLocationToReturnLoc ; Return directory Index to caller
1839: EC94         ; Directory entry found
1840: EC94 0E 00                  LD     C,0                  ; Set starting position
1841: EC96 1E 0C                  LD     E,fcbExtIndex        ; Set Length
1842: EC98 CD 41 F2               CALL   CopyDir              ; copy from FCB to dir entry
1843: EC9B CD 0B F0               CALL   GetNextDirectoryRecord ; Go find the next directory record
1844: EC9E 18 EE                  JR     SetAttributesLoop    ; Loop
1845: ECA0         ;------------------ Get Disk Parameter Block Address - 1F (31) -------------;
1846: ECA0         ;	This function returns the address of the disk parameter block (DPB) for	;
1847: ECA0         ; the last selected logical disk. The DPB describes the physical			;
1848: ECA0         ; characteristics of a specific logical disk-information mainly of interest ;
1849: ECA0         ; for system utility programs.												;
1850: ECA0         ;																			;
1851: ECA0         ;			Function Code	:	C = 1FH										;
1852: ECA0         ;			Entry Parameters:	None										;
1853: ECA0         ;			Exit Parameters :	HL = Address of Disk Parameter Block		;
1854: ECA0         ;																			;
1855: ECA0         ;------------------ Get Disk Parameter Block Address - 1F (31) -------------;
1856: ECA0             vGetDiskParamBlock:                      ; func31 (31 - 1F)
1857: ECA0 2A 99 F4               LD     HL,(caDiskParamBlock)
1858: ECA3 22 B6 EA               LD     (exitParameterWord),HL
1859: ECA6 C9                     RET
1860: ECA7         ;------------------------- Read Random - 21 (33) ---------------------------;
1861: ECA7         ; This function reads a specific CP/M record (128 bytes) from a random file ;
1862: ECA7         ; that is, a file in which records can be accessed directly. It assumes that;
1863: ECA7         ; you have already opened the file, set the DMA address using the BDOS		;
1864: ECA7         ; Set DMA function, and set the specific record to be read into the random	;
1865: ECA7         ; record number in the FCB. This function computes the extent of the		;
1866: ECA7         ; specified record number and attempts to open it and read the correct CP/M ;
1867: ECA7         ; record into the DMA address.												;
1868: ECA7         ;	The random record number in the FCB is three bytes long (at relative	;
1869: ECA7         ; bytes 33, 34, and 35). Byte 33 is the least significant byte, 34 is the	;
1870: ECA7         ; middle byte, and 35 the most significant. CP/M uses only the most			;
1871: ECA7         ; significant byte (35) for computing the overall file size (function 35).	;
1872: ECA7         ; You must set this byte to 0 when setting up the FCB. Bytes 33 and 34		;
1873: ECA7         ; are used together for the Read Random, so you can access from record		;
1874: ECA7         ; 0 to 65535 (a maximum file size of 8,388,480 bytes).						;
1875: ECA7         ;	This function returns with A set to 0 to indicate that the operation has;
1876: ECA7         ; been completed successfully, or A set to a nonzero value if an error has	;
1877: ECA7         ; occurred. The error codes are as follows:									;
1878: ECA7         ;		A = 01 (attempt to read unwritten record)							;
1879: ECA7         ;		A = 03 (CP/M could not close current extent)						;
1880: ECA7         ;		A = 04 (attempt to read unwritten extent)							;
1881: ECA7         ;		A = 06 (attempt to read beyond end of disk)							;
1882: ECA7         ;																			;
1883: ECA7         ;	Unlike the Read Sequential BOOS function (code 20, l4H), which updates	;
1884: ECA7         ; the current (sequential) record number in the FCB, the Read Random		;
1885: ECA7         ; function leaves the record number unchanged, so that a subsequent Write	;
1886: ECA7         ; Random will replace the record just read.									;
1887: ECA7         ;	You can follow a Read Random with a Write Sequential (code 21, l5H).	;
1888: ECA7         ; This will rewrite the record just read, but will then update the			;
1889: ECA7         ; sequential record number. Or you may choose to use a Read Sequential after;
1890: ECA7         ; the Read Random. In this case, the same record will be reread and the		;
1891: ECA7         ; sequential record number will be incremented. In short, the file can be	;
1892: ECA7         ; sequentially read or written once the Read Random has been used to		;
1893: ECA7         ; position to the required place in the file.								;
1894: ECA7         ;																			;
1895: ECA7         ; To use the Read Random function, you must first open the base extent of	;
1896: ECA7         ; the file, that is, extent O. Even though there may be no actual data		;
1897: ECA7         ; records in this extent, opening permits the file to be processed			;
1898: ECA7         ; correctly.																;
1899: ECA7         ;	One problem that is not immediately obvious with random files is that	;
1900: ECA7         ; they can easily be created with gaps in the file. If you were to create	;
1901: ECA7         ; the file with record number 0 and record number 5000, there would be no	;
1902: ECA7         ; intervening file extents. Should you attempt to read or copy the file		;
1903: ECA7         ; sequentially, even using CP/M's file copy utility, only the first extent	;
1904: ECA7         ; (and in this case, record 0) would get copied. A Read Sequential function ;
1905: ECA7         ; would return an "end of file" error after reading record O. You must		;
1906: ECA7         ; therefore be conscious of the type of the file that you try and read	.	;
1907: ECA7         ;																			;
1908: ECA7         ;																			;
1909: ECA7         ;																			;
1910: ECA7         ;			Function Code	:	C	= 21H									;
1911: ECA7         ;			Entry Parameters:	DE = Address of File Control Block			;
1912: ECA7         ;			Exit Parameters :	A = 01 (attempt to read unwritten record)	;
1913: ECA7         ;								A = 03 (CP/M could not close current extent);
1914: ECA7         ;								A = 04 (attempt to read unwritten extent)	;
1915: ECA7         ;								A = 06 (attempt to read beyond end of disk) ;
1916: ECA7         ;																			;
1917: ECA7         ;------------------------- Read Random - 21 (33) ---------------------------;
1918: ECA7             vReadRandom:
1919: ECA7 CD 40 EF               CALL   ReselectDisk         ; Reselect if needed
1920: ECAA 0E FF                  LD     C,TRUE               ; Identify as a Read
1921: ECAC CD 93 F0               CALL   RandomSeek           ; Set up correct Dir entry etc.
1922: ECAF CC 39 EB               CALL   Z,DiskRead           ; Go Read
1923: ECB2 C9                     RET
1924: ECB3         ;------------------------- Write Random - 22 (34) --------------------------;
1925: ECB3         ; This function writes a specific CP/M record (128 bytes) into a random		;
1926: ECB3         ; file. It is initiated in much the same way as the companion function,		;
1927: ECB3         ; Read Random (code 33,21H). It assumes that you have already opened the	;
1928: ECB3         ; file, set the DMAaddress to the address in memory containing the record to;
1929: ECB3         ; be written to disk, and set the random record number in the FCB to the	;
1930: ECB3         ; specified record being written. This function also computes the extent in ;
1931: ECB3         ; which the specified record number lies and opens the extent (creating it	;
1932: ECB3         ; if it does not already exist). The error codes returned in A by this call ;
1933: ECB3         ; are the same as those for Read Random, with the addition of error			;
1934: ECB3         ; code 05, which indicates a full directory.								;
1935: ECB3         ;	Like the Read Random (but unlike the Write Sequential), this function	;
1936: ECB3         ; does not update the logical extent and sequential (current) record number ;
1937: ECB3         ; in the FCB. Therefore, any subsequent sequential operation will access	;
1938: ECB3         ; the record just written by the Read Random call, but these functions will ;
1939: ECB3         ; update the sequential record number. The Write Random can therefore be	;
1940: ECB3         ; used to position to the required place in the file, which can then be		;
1941: ECB3         ; accessed sequentially.													;
1942: ECB3         ;																			;
1943: ECB3         ;	In order to use the Write Random, you must first open the base extent	;
1944: ECB3         ; (extent 0) of the file. Even though there may be no data records in this	;
1945: ECB3         ; extent, opening permits the file to be processed correctly.				;
1946: ECB3         ;	As explained in the notes for the Read Random function, you can easily	;
1947: ECB3         ; create a random file with gaps in it. If you were to create a file with	;
1948: ECB3         ; record number 0 and record number 5000, there would be no intervening		;
1949: ECB3         ; file extents.																;
1950: ECB3         ;																			;
1951: ECB3         ;			Function Code	:	C	= 24H									;
1952: ECB3         ;			Entry Parameters:	DE = Address of File Control Block			;
1953: ECB3         ;			Exit Parameters :	A = 01 (attempt to read unwritten record)	;
1954: ECB3         ;								A = 03 (CP/M could not close current extent);
1955: ECB3         ;								A = 04 (attempt to read unwritten extent)	;
1956: ECB3         ;								A = 05 (CP/M cannot create new extent)		;
1957: ECB3         ;								A = 06 (attempt to read beyond end of disk) ;
1958: ECB3         ;																			;
1959: ECB3         ;------------------------- Write Random - 22 (34) --------------------------;
1960: ECB3             vWriteRandom:
1961: ECB3 CD 40 EF               CALL   ReselectDisk         ; Reselect if needed
1962: ECB6 0E 00                  LD     C,FALSE              ; Identify as a Write
1963: ECB8 CD 93 F0               CALL   RandomSeek
1964: ECBB CC 7C EB               CALL   Z,DiskWrite          ; Go Write
1965: ECBE C9                     RET
1966: ECBF         ;------------------------- Get File Size - 23 (35) -------------------------;
1967: ECBF         ;	This function returns the virtual size of the specified file. It does so;
1968: ECBF         ; by setting the random record number (bytes 33-35) in the specified FCB to ;
1969: ECBF         ; the maximum 128-byte record number in the file. The virtual file size is	;
1970: ECBF         ; calculated from the record address of the record following the end of the ;
1971: ECBF         ; file. Bytes 33 and 34 form a 16-bit value that contains the record number,;
1972: ECBF         ; with overflow indicated in byte 35. If byte 35 is 01, this means that the ;
1973: ECBF         ; file has the maximum record count of 65,536.								;
1974: ECBF         ;	If the function cannot find the file specified by the FCB, it returns	;
1975: ECBF         ; with the random record field set to O.									;
1976: ECBF         ;	You can use this function when you want to add data to the end of an	;
1977: ECBF         ; existing file. By calling this function first, the random record bytes	;
1978: ECBF         ; will be set to the end of file. Subsequent Write Random calls will write	;
1979: ECBF         ; out records to this preset address.										;
1980: ECBF         ;																			;
1981: ECBF         ;	Do not confuse the virtual file size with the actual file size. In a	;
1982: ECBF         ; random file, if you write just a single CP/M record to record number		;
1983: ECBF         ; 1000 and then call this function, it will return with the random record	;
1984: ECBF         ; number field set in the FCB to 1000, even though only a single record		;
1985: ECBF         ; exists in the file. For sequential files, this function returns the		;
1986: ECBF         ; number of records in the file. In this case, the virtual and actual file	;
1987: ECBF         ; sizes coincide.															;
1988: ECBF         ;																			;
1989: ECBF         ;																			;
1990: ECBF         ;			Function Code	:	C	= 23H									;
1991: ECBF         ;			Entry Parameters:	DE = Address of File Control Block			;
1992: ECBF         ;			Exit Parameters :	Random record field set in FCB				;
1993: ECBF         ;																			;
1994: ECBF         ;------------------------- Get File Size - 23 (35) -------------------------;
1995: ECBF             vComputeFileSize:
1996: ECBF CD 40 EF               CALL   ReselectDisk         ; Reselect if needed
1997: ECC2 0E 0C                  LD     C,fcbExtIndex        ; Set search/match length
1998: ECC4 CD F6 EF               CALL   SearchForDirectoryRecord ; Set directoryIndex
1999: ECC7         ; zero the receiving FCB Random Record field
2000: ECC7 2A B4 EA               LD     HL,(paramDE)         ; Point at FCB
2001: ECCA 11 21 00               LD     DE,recordRandom      ; Random Record index
2002: ECCD 19                     ADD    HL,DE                ; Point at Random Record
2003: ECCE E5                     PUSH   HL                   ; Random Record LSB pointer
2004: ECCF 72                     LD     (HL),D               ; Set Random Record LSB = 0
2005: ECD0 23                     INC    HL                   ; Random Record MSB pointer
2006: ECD1 72                     LD     (HL),D               ; Set Random Record MSB = 0
2007: ECD2 23                     INC    HL                   ; Random Record overflow pointer
2008: ECD3 72                     LD     (HL),D               ; Set Random Record overflow = 0
2009: ECD4             GetFileSize1:
2010: ECD4 CD 47 F1               CALL   AtEndOfDirectory     ; Any more dir entries ?
2011: ECD7 28 20                  JR     Z,GetFileSizeExit    ;	exit if no
2012: ECD9 CD 50 F1               CALL   GetCurrentDirectoryRecord ; HL points at Directory entry
2013: ECDC 11 0F 00               LD     DE,fcbRCIndex        ; FCB Record Count index
2014: ECDF CD 13 F1               CALL   GetRandomRecordPosition
2015: ECE2         ; ???????
2016: ECE2 E1                     POP    HL
2017: ECE3 E5                     PUSH   HL                   ; recall, replace .fcb(Random record Field)
2018: ECE4 5F                     LD     E,A                  ; save cy
2019: ECE5 79                     LD     A,C
2020: ECE6 96                     SUB    M
2021: ECE7 23                     INC    HL                   ; ls byte
2022: ECE8 78                     LD     A,B
2023: ECE9 9E                     SBC    A,(HL)
2024: ECEA 23                     INC    HL                   ; middle byte
2025: ECEB 7B                     LD     A,E
2026: ECEC 9E                     SBC    A,(HL)               ; carry if .fcb(random record field) > directory
2027: ECED 38 05                  JR     C,GetFileSize2       ; for another try
2028: ECEF         ; fcb is less or equal, fill from directory
2029: ECEF 73                     LD     (HL),E
2030: ECF0 2B                     DEC    HL
2031: ECF1 70                     LD     (HL),B
2032: ECF2 2B                     DEC    HL
2033: ECF3 71                     LD     (HL),C
2034: ECF4             GetFileSize2:                      ; getnextsize:
2035: ECF4 CD 0B F0               CALL   GetNextDirectoryRecord
2036: ECF7 18 DB                  JR     GetFileSize1
2037: ECF9             GetFileSizeExit:                      ; setsize:
2038: ECF9 E1                     POP    HL                   ; discard .fcb(random record field)
2039: ECFA C9                     RET
2040: ECFB         ;------------------ Set Random Record Number - 24 (36) ---------------------;
2041: ECFB         ;	This function sets the random record number in the FCB to the correct	;
2042: ECFB         ; value for the last record read or written sequentially to the file.		;
2043: ECFB         ;																			;
2044: ECFB         ;	This function provides you with a convenient way to build an index file	;
2045: ECFB         ; so that you can randomly access a sequential file. Open the sequential	;
2046: ECFB         ; file, and as you read each record, extract the appropriate key field from ;
2047: ECFB         ; the data record. Make the BDOS Set Random Record request and create a new ;
2048: ECFB         ; data record with just the key field and the random record number. Write	;
2049: ECFB         ; the new data record out to the index file.								;
2050: ECFB         ;	Once you have done this for each record in the file, your index file	;
2051: ECFB         ; provides a convenient method, given a search key value, of finding the	;
2052: ECFB         ; appropriate CP/M record in which the data lies.							;
2053: ECFB         ;	You can also use this function as a means of finding out where you are	;
2054: ECFB         ; currently positioned in a sequential file-either to relate a CP/M record	;
2055: ECFB         ; number to the position, or simply as a place-marker to allow a			;
2056: ECFB         ; repositioning to the same place later.									;
2057: ECFB         ;																			;
2058: ECFB         ;																			;
2059: ECFB         ;			Function Code	:	C	= 24H									;
2060: ECFB         ;			Entry Parameters:	DE = Address of File Control Block			;
2061: ECFB         ;			Exit Parameters :	Random record field set in FCB				;
2062: ECFB         ;																			;
2063: ECFB         ;------------------ Set Random Record Number - 24 (36) ---------------------;
2064: ECFB             vSetRandomRecord:
2065: ECFB 2A B4 EA               LD     HL,(paramDE)         ; FCB
2066: ECFE 11 20 00               LD     DE,recordSeq         ; Sequential record index
2067: ED01 CD 13 F1               CALL   GetRandomRecordPosition
2068: ED04         ; A = Overflow, B = randomRecord MSB, C = randomRecord LSB
2069: ED04 21 21 00               LD     HL,recordRandom
2070: ED07 19                     ADD    HL,DE                ; HL = .FCB(RANDOM_REC_FIELD)
2071: ED08 71                     LD     (HL),C
2072: ED09 23                     INC    HL
2073: ED0A 70                     LD     (HL),B
2074: ED0B 23                     INC    HL
2075: ED0C 77                     LD     (HL),A               ; to RANDOM_REC_FIELD
2076: ED0D C9                     RET
2077: ED0E         ;------------------------ Reset Logical Disk Drive - 25 (37) ---------------;
2078: ED0E         ;	This function resets individual disk drives. It is a more precise		;
2079: ED0E         ; version of the Reset Disk System function (code 13,ODH), in that you		;
2080: ED0E         ; can set specific logical; disks rather than all of them.					;
2081: ED0E         ;	The bit map in DE shows which disks are to be reset. The least			;
2082: ED0E         ; significant bit of E represents disk A, and the most significant bit of	;
2083: ED0E         ; D, disk P. The bits set to 1 indicate the disks to be reset.				;
2084: ED0E         ;	Note that this function returns a zero value in A in order to maintain	;
2085: ED0E         ; compatibility with MP/ M.													;
2086: ED0E         ;													;						;
2087: ED0E         ;	Use this function when only specific diskettes need to be changed.		;
2088: ED0E         ; Changing a diskette without requesting CP/M to log it in will cause the	;
2089: ED0E         ; BDOS to assume that an error has occurred and to set the new diskette to	;
2090: ED0E         ; Read-Only status as a protective measure									;
2091: ED0E         ;																			;
2092: ED0E         ;			Function Code	:	C = 25H										;
2093: ED0E         ;			Entry Parameters:	DE = Logical Drive Bit Vector				;
2094: ED0E         ;			Exit Parameters :	A = 00H										;
2095: ED0E         ;																			;
2096: ED0E         ;------------------------ Reset Logical Disk Drive - 25 (37) ---------------;
2097: ED0E         ;	**************	Not Yet Implemented	**************
2098: ED0E             vResetDrive:
2099: ED0E 3E FF                  LD     A,-1                 ; Error return
2100: ED10 C9                     RET
2101: ED11         ;------------------------------ Access Drive - 26 (38) ---------------------;
2102: ED11         ;								NOT SUPPORTED								;
2103: ED11         ;------------------------------ Access Drive - 26 (38) ---------------------;
2104: ED11         ;------------------------------ Free	Drive - 27 (39) --------------------;
2105: ED11         ;								NOT SUPPORTED								;
2106: ED11         ;------------------------------ Free	Drive - 27 (39) --------------------;
2107: ED11         ;---------------- Write Random with Zero Fill - 28 (40) --------------------;
2108: ED11         ;	This function is an extension to the Write Random function described	;
2109: ED11         ; previously. In addition to performing the Write Random, it will also fill ;
2110: ED11         ; each new allocation block with OOH's. Digital Research added this function;
2111: ED11         ; to assist Microsoft with the production of its COBOL compiler-it makes the;
2112: ED11         ; logic of the file handling code easier. It also is an economical way to	;
2113: ED11         ; completely fill a random file with OOH's. You need only write one record	;
2114: ED11         ; per allocation block, the BDOS will clear the rest of the block for you.	;
2115: ED11         ;																			;
2116: ED11         ;																			;
2117: ED11         ;			Function Code	:	C	= 24H									;
2118: ED11         ;			Entry Parameters:	DE = Address of File Control Block			;
2119: ED11         ;			Exit Parameters :	A = Return Code								;
2120: ED11         ;																			;
2121: ED11         ;---------------- Write Random with Zero Fill - 28 (40) --------------------;
2122: ED11             vWriteRandom0Fill:
2123: ED11         ; Not Yet Implemented	**************
2124: ED11 C9                     RET
2125: ED12         ;--------------------------- Select	Drive ----------------------------------;
2126: ED12         ; Establish the disk found in (paramE) as the current disk drive			;
2127: ED12             SelectCurrent:                      ;
2128: ED12 3A B3 EA               LD     A,(paramE)           ; Get Disk (00H = A,01H = B ..)		;
2129: ED15 21 89 F4               LD     HL,currentDisk       ; Get the current disk				;
2130: ED18 BE                     CP     M                    ; Are the the same ?				;
2131: ED19 C8                     RET    Z                    ; Exit if yes, nothing to do		;
2132: ED1A 77                     LD     (HL),A               ;	else update curretDisk and		;
2133: ED1B 18 00                  JR     Select               ;	select it						;
2134: ED1D         ;--------------------------- Select	Drive ----------------------------------;
2135: ED1D         ;--------------------------- Select Login Drive ----------------------------;
2136: ED1D         ; select Login Drive														;
2137: ED1D             Select:                         ;
2138: ED1D CD 3E ED               CALL   SelectDisk           ; Select the Disk					;
2139: ED20 CC 17 F4               CALL   Z,Error_Select       ;
2140: ED23 21 89 F4               LD     HL,currentDisk       ;
2141: ED26 46                     LD     B,(HL)               ; Get Current Disk					;
2142: ED27 2A 8D F4               LD     HL,(loggedDisks)     ; Load Logged Disk MAP				;
2143: ED2A CD E9 F3               CALL   IsBitSet             ;
2144: ED2D C0                     RET    NZ                   ; Exit if already logged in			;
2145: ED2E         ;																			;
2146: ED2E 21 89 F4               LD     HL,currentDisk       ;
2147: ED31 46                     LD     B,(HL)               ; Get Current Disk					;
2148: ED32 2A 8D F4               LD     HL,(loggedDisks)     ; else log in a different disk		;
2149: ED35 CD F9 F3               CALL   SetVectorBit         ;
2150: ED38 22 8D F4               LD     (loggedDisks),HL     ; Update the Vector					;
2151: ED3B         ;
2152: ED3B C3 84 ED               JP     InitDisk             ;
2153: ED3E         ;--------------------------- Select Login Drive ----------------------------;
2154: ED3E         ;--------------------------- Select Disk -----------------------------------;
2155: ED3E         ; select the disk drive given by currentDisk, and fill the base addresses	;
2156: ED3E         ; caTrack - caAllocVector, then fill the values of the disk parameter block ;
2157: ED3E             SelectDisk:                      ;
2158: ED3E 3A 89 F4               LD     A,(currentDisk)      ; Get current disk (0=A,1=B...)		;
2159: ED41 4F                     LD     C,A                  ; Prepare for BIOS Call				;
2160: ED42 CD 1B F6               CALL   bcSeldsk             ; Select the disk					;
2161: ED45 7C                     LD     A,H                  ; Return Pointer to					;
2162: ED46 B5                     OR     L                    ;	Disk Parameter Header			;
2163: ED47 C8                     RET    Z                    ; exit if error, with HL = 0000		;
2164: ED48         ;
2165: ED48 5E                     LD     E,(HL)               ;
2166: ED49 23                     INC    HL                   ;
2167: ED4A 56                     LD     D,(HL)               ; Skew Table in DE					;
2168: ED4B 23                     INC    HL                   ; HL = DPH + 2, Rel Pos for File	;
2169: ED4C ED 53 AF F4               LD     (caSkewTable),DE     ; Move to Current Skew Table		;
2170: ED50         ;
2171: ED50 22 91 F4               LD     (caDirMaxValue),HL   ; Move to Current Dir max			;
2172: ED53 23                     INC    HL                   ;
2173: ED54 23                     INC    HL                   ; HL = Last Track #					;
2174: ED55 22 93 F4               LD     (caTrack),HL         ; Move to Current Track #			;
2175: ED58 23                     INC    HL                   ;
2176: ED59 23                     INC    HL                   ; HL = Last Sector #				;
2177: ED5A 22 95 F4               LD     (caSector),HL        ; Move to Current Sector #			;
2178: ED5D 23                     INC    HL                   ;
2179: ED5E 23                     INC    HL                   ;
2180: ED5F 11 97 F4               LD     DE,caDirectoryDMA    ;
2181: ED62 01 08 00               LD     BC,caListSize        ;
2182: ED65 ED B0                  LDIR                        ;
2183: ED67         ;
2184: ED67         ; finish filling in address list											;
2185: ED67 2A 99 F4               LD     HL,(caDiskParamBlock) ; Point Disk Parameter Block		;
2186: ED6A 11 9F F4               LD     DE,dpbStart          ; Point at BIOS DPB					;
2187: ED6D 01 0F 00               LD     BC,dpbSize           ;
2188: ED70 ED B0                  LDIR                        ; Move DPB to current				;
2189: ED72         ;
2190: ED72         ; Determine if Byte or Word Allocation Table								;
2191: ED72 2A A4 F4               LD     HL,(dpbDSM)          ; Get max entry number				;
2192: ED75 7C                     LD     A,H                  ; If	its 00 then < 255			;
2193: ED76 21 B8 F4               LD     HL,byteAllocationFlag ; Point at the	flag				;
2194: ED79 36 FF                  LD     (HL),TRUE            ; Assume its less than 255			;
2195: ED7B B7                     OR     A                    ;	is the assumption confirmed ?	;
2196: ED7C 28 02                  JR     Z,SelectDisk1        ;	skip if yes						;
2197: ED7E 36 00                  LD     (HL),FALSE           ; Fix assumption,set flag to false	;
2198: ED80         ;
2199: ED80         ; Set Sign, reset Carry and Zero to indicate success						;
2200: ED80             SelectDisk1:                      ;
2201: ED80 3E FF                  LD     A,TRUE               ;
2202: ED82 B7                     OR     A                    ;
2203: ED83 C9                     RET                         ;
2204: ED84         ;--------------------------- Select Disk -----------------------------------;
2205: ED84         ;--------------------------- Initialize Disk -------------------------------;
2206: ED84             InitDisk:                       ;
2207: ED84 2A A4 F4               LD     HL,(dpbDSM)          ; Maximum allocation value			;
2208: ED87 CD 0C F3               CALL   DivideHLby8          ; Length of Map						;
2209: ED8A E5                     PUSH   HL                   ; Save Length						;
2210: ED8B E5                     PUSH   HL                   ; Save for end of MAP				;
2211: ED8C C1                     POP    BC                   ; BC = dpbDSM/8						;
2212: ED8D         ; Clear the Allocation Vector												;
2213: ED8D 2A 9D F4               LD     HL,(caAllocVector)   ; Allocation vector Start			;
2214: ED90 36 00                  LD     (HL),0               ; Clear location					;
2215: ED92 ED 5B 9D F4               LD     DE,(caAllocVector)   ;
2216: ED96 13                     INC    DE                   ; Allocation vector Start + 1		;
2217: ED97 ED B0                  LDIR                        ; Cascade 00 thru Map				;
2218: ED99         ; Force bits at End of Map													;
2219: ED99 EB                     EX     DE,HL                ; Put last Map byte into DE			;
2220: ED9A E1                     POP    HL                   ;
2221: ED9B 23                     INC    HL                   ;
2222: ED9C CD 16 F3               CALL   MultiplyHLby8        ; Blocks if all bits used			;
2223: ED9F ED 4B A4 F4               LD     BC,(dpbDSM)          ; Actual block max					;
2224: EDA3 03                     INC    BC                   ; Now has size of the Map			;
2225: EDA4 AF                     XOR    A                    ; Clear CY							;
2226: EDA5 ED 42                  SBC    HL,BC                ; Extra unused bits					;
2227: EDA7 BD                     CP     L                    ;	are there any					;
2228: EDA8 28 07                  JR     Z,Mark4Directory     ;
2229: EDAA 45                     LD     B,L                  ; Number of bits to set				;
2230: EDAB EB                     EX     DE,HL                ; Put last Map byte into HL			;
2231: EDAC             SetBitLoop:                      ;
2232: EDAC 37                     SCF                         ;
2233: EDAD CB 16                  RL     (HL)                 ; Set LSB							;
2234: EDAF 10 FB                  DJNZ   SetBitLoop           ; Loop thru the bits				;
2235: EDB1         ;
2236: EDB1             Mark4Directory:                      ;
2237: EDB1         ; Mark the reserved space for the directory									;
2238: EDB1 2A A8 F4               LD     HL,(dpbDABM)         ; Directory block reserved bits		;
2239: EDB4 EB                     EX     DE,HL                ;
2240: EDB5 2A 9D F4               LD     HL,(caAllocVector)   ; HL Start of Allocation Vector		;
2241: EDB8 73                     LD     (HL),E               ;
2242: EDB9 23                     INC    HL                   ;
2243: EDBA 72                     LD     (HL),D               ; Put reserved blocks in Vector		;
2244: EDBB         ; end of Map																;
2245: EDBB         ; Home disk, and set current track and sector to 00							;
2246: EDBB CD ED EE               CALL   Home                 ;
2247: EDBE 2A 91 F4               LD     HL,(caDirMaxValue)   ;
2248: EDC1 36 03                  LD     (HL),3               ;
2249: EDC3 23                     INC    HL                   ;
2250: EDC4 36 00                  LD     (HL),0               ; Current Max Dir Value = 0003		;
2251: EDC6 CD 40 F1               CALL   SetEndDirectory      ; dirEntryIndex = EOD (-1)			;
2252: EDC9         ;
2253: EDC9             InitDisk1:                      ;
2254: EDC9         ; Process the directory														;
2255: EDC9 0E FF                  LD     C,TRUE               ; Set flag for setting CheckSum		;
2256: EDCB CD 3D F3               CALL   ReadDirectory        ; Get the directory Record			;
2257: EDCE CD 47 F1               CALL   AtEndOfDirectory     ; Are we Done ?						;
2258: EDD1 C8                     RET    Z                    ;	Exit if Yes						;
2259: EDD2         ; Not end of directory, valid entry?										;
2260: EDD2 CD 50 F1               CALL   GetCurrentDirectoryRecord ; Calculate location of the element ;
2261: EDD5 3E E5                  LD     A,emptyDir           ;
2262: EDD7 BE                     CP     M                    ; Is it an Empty Dir Entry			;
2263: EDD8 28 EF                  JR     Z,InitDisk1          ;	Loop back if yes				;
2264: EDDA         ; Not emptyDir, user code the same?											;
2265: EDDA 3A 88 F4               LD     A,(currentUserNumber) ;
2266: EDDD BE                     CP     M                    ;
2267: EDDE 20 0A                  JR     NZ,InitDisk2         ; Skip if this entry not the users	;
2268: EDE0         ; Same user, check for '$' submit											;
2269: EDE0 23                     INC    HL                   ;
2270: EDE1 7E                     LD     A,(HL)               ;
2271: EDE2 D6 24                  SUB    DOLLAR               ; Is first Char a $					;
2272: EDE4 20 04                  JR     NZ,InitDisk2         ;
2273: EDE6         ; dollar file found, mark in exitParameterByte								;
2274: EDE6 3D                     DEC    A                    ; Set A to FFH						;
2275: EDE7 32 B6 EA               LD     (exitParameterByte),A ; Return it the exit parameter		;
2276: EDEA             InitDisk2:                      ;
2277: EDEA         ; now scan the disk map for allocated blocks								;
2278: EDEA 0E FF                  LD     C,TRUE               ; set to allocated					;
2279: EDEC CD 74 F1               CALL   ScanDiskMap          ;
2280: EDEF CD 5E F1               CALL   SetDirectoryEntry    ; Mark directory entry				;
2281: EDF2 18 D5                  JR     InitDisk1            ; Loop for another entry			;
2282: EDF4         ;--------------------------- Initialize Disk -------------------------------;
2283: EDF4         ;----------------------------- Open File -----------------------------------;
2284: EDF4         ;search for the directory entry matching FCB at paramDE						;
2285: EDF4             OpenFile:                       ;
2286: EDF4 0E 0F                  LD     C,nameLength         ;
2287: EDF6 CD F6 EF               CALL   SearchForDirectoryRecord ;
2288: EDF9 CD 47 F1               CALL   AtEndOfDirectory     ; Have we gone thru all the dir		;
2289: EDFC C8                     RET    Z                    ; Exit exitParameterByte=255 if yes	;
2290: EDFD         ;
2291: EDFD             CopyDirRecordToFCB:                      ;
2292: EDFD CD 90 EF               CALL   GetExtentAddress     ; HL points to FCB's EXT			;
2293: EE00 7E                     LD     A,(HL)               ; Get the EXT						;
2294: EE01 F5                     PUSH   AF                   ; Save the FCB's EXT value			;
2295: EE02 E5                     PUSH   HL                   ;	also save FCB's pointer			;
2296: EE03 CD 50 F1               CALL   GetCurrentDirectoryRecord ; Get pointer to Dir record in HL	;
2297: EE06 E5                     PUSH   HL                   ; Save Directory Record address		;
2298: EE07         ;
2299: EE07 ED 5B B4 EA               LD     DE,(paramDE)         ;
2300: EE0B 01 20 00               LD     BC,fcbLength         ;
2301: EE0E ED B0                  LDIR                        ; Move dir record to FCB			;
2302: EE10         ;
2303: EE10         ; note that entire fcb is copied, including indicators						;
2304: EE10 CD CB EF               CALL   SetFileWriteFlag     ; Set clean file flag				;
2305: EE13 D1                     POP    DE                   ; Get Directory Record address		;
2306: EE14 21 0C 00               LD     HL,fcbExtIndex       ; Extent Index						;
2307: EE17 19                     ADD    HL,DE                ; Directory's EXT address			;
2308: EE18 4E                     LD     C,(HL)               ; Dir's EXT is in B					;
2309: EE19 21 0F 00               LD     HL,fcbRCIndex        ; Get Record Count Index			;
2310: EE1C 19                     ADD    HL,DE                ; Directory's RC address			;
2311: EE1D 46                     LD     B,(HL)               ; B holds Dir's	record count		;
2312: EE1E E1                     POP    HL                   ; Get FCB's Extent Address			;
2313: EE1F F1                     POP    AF                   ; Get FCB's Extent Value			;
2314: EE20 77                     LD     (HL),A               ; Restore Extent Value				;
2315: EE21         ; if user ext < dir ext then user := 128 records							;
2316: EE21         ; if user ext = dir ext then user := dir records							;
2317: EE21         ; if user ext > dir ext then user := 0 records								;
2318: EE21 79                     LD     A,C                  ; Get the Dir's EXT					;
2319: EE22 BE                     CP     M                    ; Does it match the FCB'd			;
2320: EE23 78                     LD     A,B                  ; Get the Dir's	record count		;
2321: EE24 28 06                  JR     Z,OpenSetRecordCount ; If same EXT value, use it.		;
2322: EE26 3E 00                  LD     A,0                  ;	else prepare for RC = 0			;
2323: EE28 38 02                  JR     C,OpenSetRecordCount ; If FCB EXT > Dir EXTr				;
2324: EE2A 3E 80                  LD     A,RecordsPerExtent   ;	else max record count out		;
2325: EE2C             OpenSetRecordCount:                      ;
2326: EE2C 2A B4 EA               LD     HL,(paramDE)         ; Get FCB's address					;
2327: EE2F 11 0F 00               LD     DE,fcbRCIndex        ; Get record count index			;
2328: EE32 19                     ADD    HL,DE                ; FCB's record count				;
2329: EE33 77                     LD     (HL),A               ; Set the value						;
2330: EE34 C9                     RET                         ;
2331: EE35         ;----------------------------- Open File -----------------------------------;
2332: EE35         ;---------------------------- Close Directory Entry ------------------------;
2333: EE35             CloseDirEntry:                      ;
2334: EE35 AF                     XOR    A                    ;
2335: EE36 32 B6 EA               LD     (exitParameterByte),A ; Clear exit parameter				;
2336: EE39 CD 35 EF               CALL   IsDiskWriteProtected ; Return Z set if writable			;
2337: EE3C C0                     RET    NZ                   ; Skip close if r/o disk			;
2338: EE3D         ; check file write flag - 0 indicates written								;
2339: EE3D         ;
2340: EE3D DD E5                  PUSH   IX                   ;
2341: EE3F DD 2A B4 EA               LD     IX,(paramDE)         ; FCB address						;
2342: EE43 DD CB 0E 7E               BIT    7,(IX+fcbS2Index)    ; Has WFF changed ?					;
2343: EE47 DD E1                  POP    IX                   ;
2344: EE49 C0                     RET    NZ                   ; Skip close if clean file			;
2345: EE4A         ;
2346: EE4A         ;	CALL	GetWriteFileFlagValue		; Get file's WriteFileFlag			;
2347: EE4A         ;	BIT		7,A							;	Has it changed ?				;
2348: EE4A         ;	RET		NZ							; Skip close if clean file			;
2349: EE4A         ;
2350: EE4A 0E 0F                  LD     C,nameLength         ;
2351: EE4C CD F6 EF               CALL   SearchForDirectoryRecord ; Find the file's directory record	;
2352: EE4F CD 47 F1               CALL   AtEndOfDirectory     ; If EOD then there is no more		;
2353: EE52 C8                     RET    Z                    ;	exit if at EOD					;
2354: EE53         ;
2355: EE53         ; merge the FCB's Disk Map with the Directory record Disk Map				;
2356: EE53 CD 50 F1               CALL   GetCurrentDirectoryRecord ; HL points to directory record		;
2357: EE56 01 10 00               LD     BC,fcbDiskMapIndex   ; Disk Alloc block map index		;
2358: EE59 09                     ADD    HL,BC                ;
2359: EE5A EB                     EX     DE,HL                ; DE = Directory Entry Map pointer	;
2360: EE5B 2A B4 EA               LD     HL,(paramDE)         ;
2361: EE5E 09                     ADD    HL,BC                ; HL = FCB Map Pointer				;
2362: EE5F 0E 10                  LD     C,(fcbLength-fcbDiskMapIndex) ; Size Allocation Map				;
2363: EE61         ;
2364: EE61             MergeAllocationMaps:                      ;
2365: EE61 3A B8 F4               LD     A,(byteAllocationFlag) ;
2366: EE64 B7                     OR     A                    ;
2367: EE65 28 10                  JR     Z,MergeWordMaps      ; Process Word size Block Numbers	;
2368: EE67         ; process byte size Map														;
2369: EE67 7E                     LD     A,(HL)               ; FCB Block number					;
2370: EE68 B7                     OR     A                    ; Is it 0 ?							;
2371: EE69 1A                     LD     A,(DE)               ;	anticipate yes					;
2372: EE6A 20 01                  JR     NZ,MergeFCBisNot0    ;	Skip if no						;
2373: EE6C 77                     LD     (HL),A               ; Move Dir Entry Value to FCB		;
2374: EE6D             MergeFCBisNot0:                      ;
2375: EE6D B7                     OR     A                    ; Is Dir Entry Value = 0 ?			;
2376: EE6E 20 02                  JR     NZ,MergeDirEntryNot0 ; Skip if no						;
2377: EE70 7E                     LD     A,(HL)               ;	else move FCB map value			;
2378: EE71 12                     LD     (DE),A               ;	to Dir Entry Value 				;
2379: EE72             MergeDirEntryNot0:                      ;
2380: EE72 BE                     CP     M                    ; Do FCB and Dir match values		;
2381: EE73 20 39                  JR     NZ,CloseDirEntryError ;	If not then report error		;
2382: EE75 18 13                  JR     MergeMapLoop         ; Go see if there is more			;
2383: EE77         ;
2384: EE77             MergeWordMaps:                      ;
2385: EE77 CD 20 F3               CALL   Merge                ; If FCB map value = 0 move Dir's	;
2386: EE7A EB                     EX     DE,HL                ;
2387: EE7B CD 20 F3               CALL   Merge                ; IF Dir Map value = 0 move FCB's	;
2388: EE7E EB                     EX     DE,HL                ; HL = FCB Map pointer, DE = Dir's	;
2389: EE7F 1A                     LD     A,(DE)               ; Does the FCB Map value			;
2390: EE80 BE                     CP     M                    ;	= Dir record Map pointer ?		;
2391: EE81 20 2B                  JR     NZ,CloseDirEntryError ;	If not then report error		;
2392: EE83 13                     INC    DE                   ;
2393: EE84 23                     INC    HL                   ; move on to the MSB				;
2394: EE85 1A                     LD     A,(DE)               ;
2395: EE86 BE                     CP     M                    ; do the check for equality			;
2396: EE87 20 25                  JR     NZ,CloseDirEntryError ;	If not then report error		;
2397: EE89 0D                     DEC    C                    ; Extra count for 2 bytes			;
2398: EE8A             MergeMapLoop:                      ;
2399: EE8A 13                     INC    DE                   ; Advance to the next positions		;
2400: EE8B 23                     INC    HL                   ; in The Maps						;
2401: EE8C 0D                     DEC    C                    ; Are we done ?						;
2402: EE8D 20 D2                  JR     NZ,MergeAllocationMaps ;	No, do it again					;
2403: EE8F         ;
2404: EE8F         ; Check the EXT																	;
2405: EE8F 01 EC FF               LD     BC,-(fcbLength-fcbExtIndex) ;Adjust to get Ext pointer			;
2406: EE92 09                     ADD    HL,BC                ;
2407: EE93 EB                     EX     DE,HL                ; HL = Directory Entry EXT pointer	;
2408: EE94 09                     ADD    HL,BC                ; DE = FCB EXT Pointer				;
2409: EE95 1A                     LD     A,(DE)               ; FCB's extent number				;
2410: EE96 BE                     CP     M                    ; Is it < Dir Record EXT ?			;
2411: EE97 38 09                  JR     C,CloseDirEntryEnd   ;	we are done if yes				;
2412: EE99 77                     LD     (HL),A               ; Else replace the Dir Record EXT	;
2413: EE9A         ; Update directory record count field										;
2414: EE9A 01 03 00               LD     BC,fcbRCIndex-fcbExtIndex ; Need to adjust to the record Count;
2415: EE9D 09                     ADD    HL,BC                ;
2416: EE9E EB                     EX     DE,HL                ; DE = = Directory Entry EXT pointer;
2417: EE9F 09                     ADD    HL,BC                ; HL = FCB EXT Pointer				;
2418: EEA0 7E                     LD     A,(HL)               ; Copy the FCB RC to				;
2419: EEA1 12                     LD     (DE),A               ;	the Directory Record RC			;
2420: EEA2         ;
2421: EEA2             CloseDirEntryEnd:                      ;
2422: EEA2 3E FF                  LD     A,TRUE               ;
2423: EEA4 32 B1 F4               LD     (fcbCopiedFlag),A    ; Set copied flag as true			;
2424: EEA7         ;/	CALL	SeekCopy					; ok to "Write Dir" here			;
2425: EEA7 CD 6B F3               CALL   SeekDir              ; Set up parameters for a Disk I/O	;
2426: EEAA C3 69 F0               JP     WriteDir             ; Write the directory element		;
2427: EEAD C9                     RET                         ;
2428: EEAE         ;
2429: EEAE             CloseDirEntryError:                      ;
2430: EEAE 21 B6 EA               LD     HL,exitParameterByte ;
2431: EEB1 35                     DEC    M                    ; Set Exit value to 0FFH			;
2432: EEB2 C9                     RET                         ;
2433: EEB3         ;---------------------------- Close Directory Entry ------------------------;
2434: EEB3         ;----------------------------------- Make new File -------------------------;
2435: EEB3         ;create a new file by creating a directory entry then opening the file		;
2436: EEB3             MakeNewFile:                      ;
2437: EEB3 CD 29 F2               CALL   CheckWrite           ; Terminate with error if Disk R/O	;
2438: EEB6 2A B4 EA               LD     HL,(paramDE)         ; Get the FCB						;
2439: EEB9 E5                     PUSH   HL                   ; FCB								;
2440: EEBA 21 8A F4               LD     HL,emptyFCB          ;
2441: EEBD 22 B4 EA               LD     (paramDE),HL         ; Find the first empty dir record	;
2442: EEC0 0E 01                  LD     C,1                  ;
2443: EEC2 CD F6 EF               CALL   SearchForDirectoryRecord ; 0F5H in first position			;
2444: EEC5 CD 47 F1               CALL   AtEndOfDirectory     ; Check if at end of directory		;
2445: EEC8 E1                     POP    HL                   ; Recall the FCB pointer			;
2446: EEC9 22 B4 EA               LD     (paramDE),HL         ;	in case we return here			;
2447: EECC C8                     RET    Z                    ; Exit with No Dir space error		;
2448: EECD         ; fill Allocation Map with Zeros											;
2449: EECD 11 0F 00               LD     DE,nameLength        ;
2450: EED0 19                     ADD    HL,DE                ; Start of fill						;
2451: EED1 36 00                  LD     (HL),00              ; Prime the values					;
2452: EED3 E5                     PUSH   HL                   ;
2453: EED4 D1                     POP    DE                   ; Copy to DE						;
2454: EED5 13                     INC    DE                   ; adjust the to pointer				;
2455: EED6 01 10 00               LD     BC,fcbLength-nameLength-1 ; number of bytes to fill			;
2456: EED9 ED B0                  LDIR                        ;
2457: EEDB         ;
2458: EEDB 2A B4 EA               LD     HL,(paramDE)         ; get FCB							;
2459: EEDE 11 0D 00               LD     DE,fcbS1Index        ; Get the S1 index					;
2460: EEE1 19                     ADD    HL,DE                ; Point to S1						;
2461: EEE2 36 00                  LD     (HL),0               ; Set to 0							;
2462: EEE4 CD 5E F1               CALL   SetDirectoryEntry    ; Update directory entry			;
2463: EEE7 CD 3D F2               CALL   CopyFCB              ; Update dir entry to Disk			;
2464: EEEA         ; and set the file write flag to "1"										;
2465: EEEA C3 CB EF               JP     SetFileWriteFlag     ; Set the clean entry flag			;
2466: EEED         ;----------------------------------- Make new File -------------------------;
2467: EEED         ;=========================== Disk Utilities ================================;
2468: EEED         ;--------------------------- Home The Current Disk -------------------------;
2469: EEED         ;move to home position, then offset to start of dir							;
2470: EEED             Home:                           ;
2471: EEED CD 18 F6               CALL   bcHome               ; Sets Track to 0, and checks		;
2472: EEF0         ; if Buffer needs to be written		;
2473: EEF0 21 AC F4               LD     HL,dpbOFF            ; Number of tracks before directory ;
2474: EEF3 4E                     LD     C,(HL)               ;
2475: EEF4 23                     INC    HL                   ;
2476: EEF5 46                     LD     B,(HL)               ;
2477: EEF6 CD 1E F6               CALL   bcSettrk             ; Point at 1st directory position	;
2478: EEF9         ;
2479: EEF9         ; Set Current Track and Sector to 00										;
2480: EEF9 AF                     XOR    A                    ; set ACC to 00						;
2481: EEFA 2A 93 F4               LD     HL,(caTrack)         ;
2482: EEFD 77                     LD     (HL),A               ;
2483: EEFE 23                     INC    HL                   ;
2484: EEFF 77                     LD     (HL),A               ;
2485: EF00 2A 95 F4               LD     HL,(caSector)        ;
2486: EF03 77                     LD     (HL),A               ;
2487: EF04 23                     INC    HL                   ;
2488: EF05 77                     LD     (HL),A               ;
2489: EF06 C9                     RET                         ;
2490: EF07         ;
2491: EF07         ;--------------------------- Home The Current Disk -------------------------;
2492: EF07         ;--------------------------- Set DMAs --------------------------------------;
2493: EF07             SetDataDMA:                      ;
2494: EF07 21 8F F4               LD     HL,initDAMAddress    ;
2495: EF0A 18 03                  JR     SetDMA               ; Skip to complete the call			;
2496: EF0C         ;
2497: EF0C             SetDirDMA:                      ;
2498: EF0C 21 97 F4               LD     HL,caDirectoryDMA    ; Load current directory Buffer		;
2499: EF0F         ;
2500: EF0F             SetDMA:                         ;
2501: EF0F 4E                     LD     C,(HL)               ;
2502: EF10 23                     INC    HL                   ;
2503: EF11 46                     LD     B,(HL)               ; parameter ready				;
2504: EF12 C3 24 F6               JP     bcSetdma             ; call bios to set				;
2505: EF15         ;--------------------------- Set DMAs --------------------------------------;
2506: EF15         ;--------------------------- Read Buffer -----------------------------------;
2507: EF15         ;reads into current DMA, using current Disk,Track and Sector				;
2508: EF15             ReadBuffer:                      ;
2509: EF15 CD 27 F6               CALL   bcRead               ; Do the read at the BIOS level		;
2510: EF18 B7                     OR     A                    ; Check status						;
2511: EF19 C2 29 F4               JP     NZ,Error_BadSector   ; Report if Status not OK		;
2512: EF1C C9                     RET                         ;
2513: EF1D         ;--------------------------- Read Buffer -----------------------------------;
2514: EF1D         ;--------------------------- Set Current Disk Read Only --------------------;
2515: EF1D         ;set current disk to read only												;
2516: EF1D             SetDiskReadOnly:                      ;
2517: EF1D 2A 8B F4               LD     HL,(readOnlyVector)  ; Get the Vector					;
2518: EF20         ;
2519: EF20 3A 89 F4               LD     A,(currentDisk)      ; Get the current disk				;
2520: EF23 47                     LD     B,A                  ; Move into B						;
2521: EF24 CD F9 F3               CALL   SetVectorBit         ; Set the bit						;
2522: EF27 22 8B F4               LD     (readOnlyVector),HL  ; Update the Vector					;
2523: EF2A         ;
2524: EF2A 2A A6 F4               LD     HL,(dpbDRM)          ; Directory Max Value				;
2525: EF2D EB                     EX     DE,HL                ;
2526: EF2E 2A 91 F4               LD     HL,(caDirMaxValue)   ; HL = .Directory max value			;
2527: EF31 73                     LD     (HL),E               ;
2528: EF32 23                     INC    HL                   ;
2529: EF33 72                     LD     (HL),D               ;
2530: EF34 C9                     RET                         ;
2531: EF35         ;--------------------------- Set disk Read Only ----------------------------;
2532: EF35         ;--------------------------- Is Disk Write Protected -----------------------;
2533: EF35         ;Returns:	Z flag	= Set if not Write Protected	(Z)						;
2534: EF35         ;					= reset if Write Protected		(NZ)					;
2535: EF35             IsDiskWriteProtected:                      ;
2536: EF35 2A 8B F4               LD     HL,(readOnlyVector)  ; Get Read Only Vector				;
2537: EF38 3A 89 F4               LD     A,(currentDisk)      ; Get current disk					;
2538: EF3B 47                     LD     B,A                  ;
2539: EF3C CD E9 F3               CALL   IsBitSet             ; Check the bit						;
2540: EF3F C9                     RET                         ; NZ if Disk is RO					;
2541: EF40         ;--------------------------- Is Disk Write Protected -----------------------;
2542: EF40         ;------------------------- Reselect Disk if Necessary ----------------------;
2543: EF40         ;check current fcb to see if reselection necessary							;
2544: EF40             ReselectDisk:                      ;
2545: EF40 3E FF                  LD     A,TRUE               ;
2546: EF42 32 B9 F4               LD     (fResel),A           ; Mark as possible reselect			;
2547: EF45 2A B4 EA               LD     HL,(paramDE)         ; Point at current FCB				;
2548: EF48 7E                     LD     A,(HL)               ; Load disk drive (0 = current)		;
2549: EF49 E6 1F                  AND    01FH                 ; Mask out user Number ??			;
2550: EF4B 3D                     DEC    A                    ; Normalized to 0..29, or 255		;
2551: EF4C 32 B3 EA               LD     (paramE),A           ; Save drive code					;
2552: EF4F FE 1E                  CP     30                   ;
2553: EF51 30 10                  JR     NC,NoSelect          ; Skip drive >= 30					;
2554: EF53         ;
2555: EF53 3A 89 F4               LD     A,(currentDisk)      ; Determine the current drive		;
2556: EF56 32 BA F4               LD     (entryDisk),A        ; Save it							;
2557: EF59 7E                     LD     A,(HL)               ;
2558: EF5A 32 BB F4               LD     (fcbDisk),A          ; Get calling disk					;
2559: EF5D E6 E0                  AND    11100000B            ;
2560: EF5F 77                     LD     (HL),A               ; Preserve User Number				;
2561: EF60 CD 12 ED               CALL   SelectCurrent        ; Select the new disk				;
2562: EF63         ;
2563: EF63             NoSelect:                       ;
2564: EF63 3A 88 F4               LD     A,(currentUserNumber) ; Get user code 0...31				;
2565: EF66 2A B4 EA               LD     HL,(paramDE)         ; Point at disk number				;
2566: EF69 B6                     OR     M                    ; Combine							;
2567: EF6A 77                     LD     (HL),A               ; FCB[0] = user number & disk		;
2568: EF6B C9                     RET                         ;
2569: EF6C         ;------------------------- Reselect Disk if Necessary ----------------------;
2570: EF6C         ;=========================== Disk Utilities ================================;
2571: EF6C         ;=========================== File Utilities ================================;
2572: EF6C         ;--------------------------- Set Record Variables --------------------------;
2573: EF6C         ;set variables from currently FCB - Current Record, RC, EXM					;
2574: EF6C             SetRecordVars:                      ;
2575: EF6C CD 83 EF               CALL   GetFcbRecordDetails  ; DE = .RecordCount					;
2576: EF6F         ;	and HL => .CurrentRecord		;
2577: EF6F 7E                     LD     A,(HL)               ;
2578: EF70 32 BE F4               LD     (currentFileRecord),A ; Save current record				;
2579: EF73 EB                     EX     DE,HL                ;
2580: EF74 7E                     LD     A,(HL)               ;
2581: EF75 32 BC F4               LD     (fcbRecordCount),A   ; Save the FCBs RC					;
2582: EF78 CD 90 EF               CALL   GetExtentAddress     ; HL=.FCB(fcbExtIndex)				;
2583: EF7B 3A A3 F4               LD     A,(dpbEXM)           ; Extent mask						;
2584: EF7E A6                     AND    M                    ; Remove unwanted bits				;
2585: EF7F 32 BD F4               LD     (extentValue),A      ; Store the value					;
2586: EF82 C9                     RET                         ;
2587: EF83         ;--------------------------- Set Record Variables --------------------------;
2588: EF83         ;----------------------Get File Record Count and Current Record-------------;
2589: EF83         ; returns with DE pointing at RC from FCB									;
2590: EF83         ;		with HL pointing at Current Record									;
2591: EF83             GetFcbRecordDetails:                      ;
2592: EF83 2A B4 EA               LD     HL,(paramDE)         ; Get FCB start						;
2593: EF86 11 0F 00               LD     DE,fcbRCIndex        ; Offset to Record Count			;
2594: EF89 19                     ADD    HL,DE                ;
2595: EF8A EB                     EX     DE,HL                ; DE Points to Record Count			;
2596: EF8B 21 11 00               LD     HL,recordSeq-fcbRCIndex ;
2597: EF8E 19                     ADD    HL,DE                ; HL Points to Current Record		;
2598: EF8F C9                     RET                         ;
2599: EF90         ;----------------------Get File Record Count and Current Record-------------;
2600: EF90         ;----------------------Get FileExtent---------------------------------------;
2601: EF90         ;get current extent field address to (HL)									;
2602: EF90             GetExtentAddress:                      ;
2603: EF90 2A B4 EA               LD     HL,(paramDE)         ; Get FCB							;
2604: EF93 11 0C 00               LD     DE,fcbExtIndex       ; Get EXT offset					;
2605: EF96 19                     ADD    HL,DE                ; HL=.fcb(fcbExtIndex)				;
2606: EF97 C9                     RET                         ;
2607: EF98         ;----------------------Get FileExtent---------------------------------------;
2608: EF98         ;--------------------- Set/Reset Disk Map Allocation Bit -------------------;
2609: EF98         ; At Entry:	BC Contains to the Block to be modified							;
2610: EF98         ;			E	= TRUE if bit is to be set									;
2611: EF98         ;			E	<> TRUE if bit is to be reset								;
2612: EF98         ; At Exit:	The target bit in the target Octet will be set/reset			;
2613: EF98             SetResetMapBit:                      ;
2614: EF98         ;
2615: EF98 21 00 00               LD     HL,0000H             ; Move the block number from BC		;
2616: EF9B 09                     ADD    HL,BC                ;	to HL							;
2617: EF9C 4B                     LD     C,E                  ; Move the flag to E				;
2618: EF9D         ;
2619: EF9D 7D                     LD     A,L                  ; LSB of the Block Number			;
2620: EF9E E6 07                  AND    07H                  ; Calculate Mod(Block,8)			;
2621: EFA0 F5                     PUSH   AF                   ; Save the OctetBit					;
2622: EFA1 06 03                  LD     B,3                  ;
2623: EFA3 CD 0E F3               CALL   ShiftRightHLbyB      ; Calculate Block / 8				;
2624: EFA6 ED 5B 9D F4               LD     DE,(caAllocVector)   ; Start Of Map						;
2625: EFAA 19                     ADD    HL,DE                ; Address of targeted Octet			;
2626: EFAB F1                     POP    AF                   ;
2627: EFAC 47                     LD     B,A                  ; Get the bit						;
2628: EFAD         ;
2629: EFAD 04                     INC    B                    ; Adjust for looping				;
2630: EFAE C5                     PUSH   BC                   ; Will need this later				;
2631: EFAF             Left:                           ;
2632: EFAF CB 16                  RL     (HL)                 ; Rotate the Octet					;
2633: EFB1 10 FC                  DJNZ   Left                 ;	to move target bit to bit 0		;
2634: EFB3 C1                     POP    BC                   ; Restore loop limit and			;
2635: EFB4 37                     SCF                         ;	set/reset flag					;
2636: EFB5 0C                     INC    C                    ; was C = TRUE						;
2637: EFB6 28 01                  JR     Z,Right              ; Skip if Set						;
2638: EFB8 3F                     CCF                         ; Set for Reset						;
2639: EFB9             Right:                          ;
2640: EFB9 CB 1E                  RR     (HL)                 ; Move the Octet back				;
2641: EFBB 10 FC                  DJNZ   Right                ;	to its original alignment		;
2642: EFBD C9                     RET                         ;
2643: EFBE         ;--------------------- Set/Reset Disk Map Allocation Bit -------------------;
2644: EFBE         ;--------------------- Initialize Extent Number MSB ------------------------;
2645: EFBE         ;clear the Extent number field for user open/make (S2)						;
2646: EFBE             InitializeExtentNumberMSB:                      ;
2647: EFBE DD E5                  PUSH   IX                   ;
2648: EFC0 DD 2A B4 EA               LD     IX,(paramDE)         ; FCB address						;
2649: EFC4 DD 36 0E 00               LD     (IX+fcbS2Index),0    ; Clear value						;
2650: EFC8 DD E1                  POP    IX                   ;
2651: EFCA C9                     RET                         ;
2652: EFCB         ;
2653: EFCB         ;--------------------- Initialize Extent Number MSB ------------------------;
2654: EFCB         ;--------------------------- Set File Write Flag----------------------------;
2655: EFCB         ;Set file write flag in FCB in (paramDE)									;
2656: EFCB         ; Used to indicate the FCB is clean. No need to write on close				;
2657: EFCB             SetFileWriteFlag:                      ;
2658: EFCB DD E5                  PUSH   IX                   ;
2659: EFCD DD 2A B4 EA               LD     IX,(paramDE)         ; FCB address						;
2660: EFD1 DD CB 0E FE               SET    7,(IX+fcbS2Index)    ; Set Flag							;
2661: EFD5 DD E1                  POP    IX                   ;
2662: EFD7 C9                     RET                         ;
2663: EFD8         ;
2664: EFD8         ;--------------------------- Set File Write Flag----------------------------;
2665: EFD8         ;--------------------------- Reset File Write Flag--------------------------;
2666: EFD8         ;Reset file write flag in FCB in (paramDE)									;
2667: EFD8         ; Used to indicate the FCB is dirty. Need to write on close					;
2668: EFD8             ResetFileWriteFlag:                      ;
2669: EFD8 DD E5                  PUSH   IX                   ;
2670: EFDA DD 2A B4 EA               LD     IX,(paramDE)         ; FCB address						;
2671: EFDE DD CB 0E BE               RES    7,(IX+fcbS2Index)    ; Reset Flag						;
2672: EFE2 DD E1                  POP    IX                   ;
2673: EFE4 C9                     RET                         ;
2674: EFE5         ;--------------------------- Reset File Write Flag--------------------------;
2675: EFE5         ;-------------------------- Compare FCB Extents ----------------------------;
2676: EFE5         ; Enters:	A containing Target FCB EXT value								;
2677: EFE5         ;			HL Points at Possible FCB EXT value								;
2678: EFE5         ;compare extent# in A with that in C, return nonzero if they do not match	;
2679: EFE5             CompareExtents:                      ;
2680: EFE5 C5                     PUSH   BC                   ; Save Callers Registers			;
2681: EFE6 F5                     PUSH   AF                   ; Save Target FCB EXT value			;
2682: EFE7 3A A3 F4               LD     A,(dpbEXM)           ; Load the Extent Mask				;
2683: EFEA 2F                     CPL                         ; Complement for And				;
2684: EFEB 47                     LD     B,A                  ; Put negated Mask into B			;
2685: EFEC 7E                     LD     A,(HL)               ; Get Possible FCBs EXT				;
2686: EFED A0                     AND    B                    ; Apply the Mask					;
2687: EFEE 4F                     LD     C,A                  ; Low bits removed from C			;
2688: EFEF F1                     POP    AF                   ; Restore Target FCB EXT value 		;
2689: EFF0 A0                     AND    B                    ; Apply the Mask					;
2690: EFF1 91                     SUB    C                    ; Test if Equal ( Z Flag)			;
2691: EFF2 E6 1F                  AND    maxExtValue          ; Limit Size ?						;
2692: EFF4 C1                     POP    BC                   ; Restore Callers Registers			;
2693: EFF5 C9                     RET                         ;
2694: EFF6         ;-------------------------- Compare FCB Extents ----------------------------;
2695: EFF6         ;---------------------Search for Directory Record --------------------------;
2696: EFF6         ;	Search for directory record of length C.								;
2697: EFF6         ; Target is pointed to by paramDE. The whole directory is searched.			;
2698: EFF6         ; If not found then dirEntryIndex is set to -1, else it points to the		;
2699: EFF6         ; matched directory record													;
2700: EFF6         ; Entry:	C = Search Length												;
2701: EFF6         ; Exit		dirEntryIndex	=	Matched directory index, if found			;
2702: EFF6         ;								-1 (EOD) if there is no match				;
2703: EFF6             SearchForDirectoryRecord:                      ;
2704: EFF6 3E FF                  LD     A,0FFH               ;
2705: EFF8 32 B3 F4               LD     (directoryIndex),A   ; Initialize directory Index		;
2706: EFFB 21 B5 F4               LD     HL,searchLength      ;
2707: EFFE 71                     LD     (HL),C               ; Save Search Length				;
2708: EFFF 2A B4 EA               LD     HL,(paramDE)         ; Active FCB						;
2709: F002 22 B6 F4               LD     (searchAddress),HL   ; Start of search					;
2710: F005 CD 40 F1               CALL   SetEndDirectory      ; DirEntryIndex = -1				;
2711: F008 CD ED EE               CALL   Home                 ; Reset Disk,Track, & Sector		;
2712: F00B         ;
2713: F00B             GetNextDirectoryRecord:                      ;
2714: F00B 0E 00                  LD     C,FALSE              ;
2715: F00D CD 3D F3               CALL   ReadDirectory        ; Read next Dir Record				;
2716: F010 CD 47 F1               CALL   AtEndOfDirectory     ;
2717: F013 28 4B                  JR     Z,NoDirRecordsMatch  ; Done if at EOD				;
2718: F015         ;
2719: F015 2A B6 F4               LD     HL,(searchAddress)   ; Get Current Dir Entry				;
2720: F018 EB                     EX     DE,HL                ; DE=beginning of Directory Entry	;
2721: F019 1A                     LD     A,(DE)               ; User Number						;
2722: F01A FE E5                  CP     emptyDir             ; Is Dir entry is empty				;
2723: F01C 28 07                  JR     Z,GetNextDirectoryRecord1 ; Skip if empty						;
2724: F01E         ;
2725: F01E         ; Check to be sure we are sill in the Directory								;
2726: F01E D5                     PUSH   DE                   ; Save search address				;
2727: F01F CD 67 F1               CALL   StillInDirectory     ; Still in the directorY			;
2728: F022 D1                     POP    DE                   ; Recall address					;
2729: F023 30 3B                  JR     NC,NoDirRecordsMatch ; Get out if past directory			;
2730: F025         ;
2731: F025             GetNextDirectoryRecord1:                      ;
2732: F025 CD 50 F1               CALL   GetCurrentDirectoryRecord ; Point at next directory record	;
2733: F028 3A B5 F4               LD     A,(searchLength)     ;
2734: F02B 4F                     LD     C,A                  ; SearchLength to c (down)			;
2735: F02C 06 00                  LD     B,0                  ; Character Index (up)				;
2736: F02E         ;
2737: F02E             TestNextPosition:                      ;
2738: F02E 1A                     LD     A,(DE)               ;
2739: F02F FE 3F                  CP     QMARK                ; ? is always a char match			;
2740: F031 28 16                  JR     Z,SetNextPosition    ; Done with this if it is ?		;
2741: F033         ;
2742: F033 78                     LD     A,B                  ;
2743: F034 FE 0D                  CP     fcbS1Index           ; At File S1 position ?				;
2744: F036 28 11                  JR     Z,SetNextPosition    ; Done with this if it is ?		;
2745: F038         ; not the fcbS1Index field, extent field?									;
2746: F038 FE 0C                  CP     fcbExtIndex          ; Past File Type position ?			;
2747: F03A 1A                     LD     A,(DE)               ; Get next character				;
2748: F03B 28 07                  JR     Z,CheckExtents       ; Skip to search extent				;
2749: F03D 96                     SUB    M                    ; Do they match ?					;
2750: F03E E6 7F                  AND    07FH                 ; Strip MSBit						;
2751: F040 20 C9                  JR     NZ,GetNextDirectoryRecord ; Skip if not matched				;
2752: F042 18 05                  JR     SetNextPosition      ; Matched the character				;
2753: F044         ;																			;
2754: F044             CheckExtents:                      ;
2755: F044 CD E5 EF               CALL   CompareExtents       ; Matching EXTs is work				;
2756: F047 20 C2                  JR     NZ,GetNextDirectoryRecord ; Get out if not matched			;
2757: F049         ;
2758: F049             SetNextPosition:                      ;
2759: F049 13                     INC    DE                   ; Pointer to Looking FOR			;
2760: F04A 23                     INC    HL                   ; Pointer to Looking IN				;
2761: F04B 04                     INC    B                    ; Character Index in FCB			;
2762: F04C 0D                     DEC    C                    ; Length of search					;
2763: F04D 20 DF                  JR     NZ,TestNextPosition  ;
2764: F04F         ; Match Found, entire name matches											;
2765: F04F 3A C3 F4               LD     A,(dirEntryIndex)    ; Get current Directory Index		;
2766: F052 E6 03                  AND    dirEntryMask         ; Apply the mask					;
2767: F054 32 B6 EA               LD     (exitParameterByte),A ; Put 0...3. Match FOund			;
2768: F057         ;
2769: F057 21 B3 F4               LD     HL,directoryIndex    ; Point at Directory Flag			;
2770: F05A 7E                     LD     A,(HL)               ; Get value							;
2771: F05B 17                     RLA                         ; Set Carry if Flag = -1			;
2772: F05C D0                     RET    NC                   ; Return with flag still -1			;
2773: F05D         ;
2774: F05D AF                     XOR    A                    ; Else Clear the flag				;
2775: F05E 77                     LD     (HL),A               ;
2776: F05F C9                     RET                         ;	and exit						;
2777: F060         ;------																		;
2778: F060             NoDirRecordsMatch:                      ;
2779: F060 CD 40 F1               CALL   SetEndDirectory      ; Set End of Directory -1			;
2780: F063 3E FF                  LD     A,-1                 ; Put Failure Code					;
2781: F065 32 B6 EA               LD     (exitParameterByte),A ;	into return parameter			;
2782: F068 C9                     RET                         ;
2783: F069         ;---------------------Search for Directory Record --------------------------;
2784: F069         ;---------------------------- Write Current Directory Entry ----------------;
2785: F069             WriteDir:                       ;
2786: F069         ;	CALL	NewCheckSum						; initialize entry				;
2787: F069 0E FF                  LD     C,TRUE               ;
2788: F06B CD BA F3               CALL   CheckSumUtility      ; Set New CheckSum				;
2789: F06E         ;
2790: F06E CD 0C EF               CALL   SetDirDMA            ; Directory DMA					;
2791: F071 0E 01                  LD     C,WriteDirectory     ; Write type					;
2792: F073 CD 79 F0               CALL   WriteBuffer          ; Write the buffer				;
2793: F076 C3 07 EF               JP     SetDataDMA           ; Reset DMA to default			;
2794: F079         ;
2795: F079         ;---------------------------- Write Current Directory Entry ----------------;
2796: F079         ;----------------------------------- Write Buffer --------------------------;
2797: F079         ; Write buffer and check result. Current drive,Track, Sector and DMA		;
2798: F079         ; Are set up prior to calling this routine									;
2799: F079         ;																			;
2800: F079         ; On Entry: C = 0 => normal write operation		WriteAllocated				;
2801: F079         ;				1 => directory write operation	WriteDirectory				;
2802: F079         ;				2 => start of new block			WriteCleanBuffer			;
2803: F079             WriteBuffer:                      ;
2804: F079 CD 2A F6               CALL   bcWrite              ; Call into BIOS					;
2805: F07C B7                     OR     A                    ; Get return code					;
2806: F07D C2 29 F4               JP     NZ,Error_BadSector   ; Error if not 00						;
2807: F080 C9                     RET                         ;
2808: F081         ;----------------------------------- Write Buffer --------------------------;
2809: F081         ;---------------------------- Update Record Vars ---------------------------;
2810: F081         ;update variables from I/O in	FCB											;
2811: F081             UpdateRecordVariables:                      ;
2812: F081 CD 83 EF               CALL   GetFcbRecordDetails  ; DE => FCB RC, HL => CurrentRecord ;
2813: F084 3A AE F4               LD     A,(diskAccessType)   ; If Seq IO it is set to 1			;
2814: F087 4F                     LD     C,A                  ;	and move it to C				;
2815: F088 3A BE F4               LD     A,(currentFileRecord) ; Get NEXT_RECORD					;
2816: F08B 81                     ADD    A,C                  ; Update record count				;
2817: F08C 77                     LD     (HL),A               ;	for CurrentRecord				;
2818: F08D EB                     EX     DE,HL                ;
2819: F08E 3A BC F4               LD     A,(fcbRecordCount)   ;
2820: F091 77                     LD     (HL),A               ;	and FCB RC						;
2821: F092 C9                     RET                         ;
2822: F093         ;---------------------------- Update Record Vars ---------------------------;
2823: F093         ;-------------------------------- Random Seek ------------------------------;
2824: F093         ;	Record # = |000M EEEE| |ERRR RRRR|										;
2825: F093         ;		M => Module															;
2826: F093         ;		E => Extent															;
2827: F093         ;		R => Record in Extent												;
2828: F093             RandomSeek:                      ;
2829: F093 AF                     XOR    A                    ;
2830: F094 32 AE F4               LD     (diskAccessType),A   ; Set random access					;
2831: F097 C5                     PUSH   BC                   ; Save Read(TRUE) / Write (FALSE)	;
2832: F098 DD 2A B4 EA               LD     IX,(paramDE)         ; Get the FCB						;
2833: F09C DD 7E 21               LD     A,(IX+recordRandomLSB) ; Get LSB from Random Record		;
2834: F09F E6 7F                  AND    7FH                  ; Strip E , left with |0RRR RRRR|	;
2835: F0A1 F5                     PUSH   AF                   ; recordSEQ							;
2836: F0A2 DD 7E 21               LD     A,(IX+recordRandomLSB) ; Get LSB from Random Record		;
2837: F0A5 17                     RLA                         ; CY = bit 7 from LSB (M's LSBit)	;
2838: F0A6 DD 7E 22               LD     A,(IX+recordRandomMSB) ; Get MSB from Random Record		;
2839: F0A9 F5                     PUSH   AF                   ; Random record's MSB				;
2840: F0AA 17                     RLA                         ; Shift LSBit into E |00ME EEEE|	;
2841: F0AB E6 1F                  AND    01FH                 ; Extent mask						;
2842: F0AD 4F                     LD     C,A                  ; Extent is in C					;
2843: F0AE F1                     POP    AF                   ; Random record's MSB				;
2844: F0AF 1F                     RRA                         ;
2845: F0B0 1F                     RRA                         ;
2846: F0B1 1F                     RRA                         ;
2847: F0B2 1F                     RRA                         ; MSB's Hi Nibble					;
2848: F0B3 E6 0F                  AND    00FH                 ;	moved to Lo Nibble				;
2849: F0B5 47                     LD     B,A                  ; S2' value in B					;
2850: F0B6 F1                     POP    AF                   ; recordSEQ							;
2851: F0B7         ;
2852: F0B7 DD 6E 23               LD     L,(IX+recordRandomOVF) ;
2853: F0BA 2C                     INC    L                    ; Insure that high byte				;
2854: F0BB 2D                     DEC    L                    ;	of ran rec = 00					;
2855: F0BC 2E 06                  LD     L,06                 ; "attempt to read beyond end of disk"	;
2856: F0BE 20 4B                  JR     NZ,RandomSeekError   ;
2857: F0C0         ;
2858: F0C0 DD 77 20               LD     (IX+recordSeq),A     ; Put target record # in FCB		;
2859: F0C3 DD 7E 0C               LD     A,(IX+fcbExtIndex)   ; Target EXT in A, FCB EXT in C		;
2860: F0C6 B9                     CP     C                    ; Are we in the right directory ?	;
2861: F0C7 20 08                  JR     NZ,RandomSeekClose   ;	Skip if not						;
2862: F0C9         ;
2863: F0C9 DD 7E 0E               LD     A,(IX+fcbS2Index)    ; Target S2 in A, FCB S2 in C		;
2864: F0CC B8                     CP     B                    ; Still in the right directory ?	;
2865: F0CD E6 7F                  AND    7FH                  ; Mask out MSBit					;
2866: F0CF 28 30                  JR     Z,RandomSeekExit     ;	Exit if yes						;
2867: F0D1         ;
2868: F0D1             RandomSeekClose:                      ;
2869: F0D1 C5                     PUSH   BC                   ; Save EXT							;
2870: F0D2 D5                     PUSH   DE                   ; Save FCB							;
2871: F0D3 CD 35 EE               CALL   CloseDirEntry        ; Close this directory entry		;
2872: F0D6 D1                     POP    DE                   ; FCB								;
2873: F0D7 C1                     POP    BC                   ; EXT								;
2874: F0D8 2E 03                  LD     L,03                 ; "CP/M could not close current extent" ;
2875: F0DA 3A B6 EA               LD     A,(exitParameterByte) ; Get result from Close				;
2876: F0DD 3C                     INC    A                    ;
2877: F0DE 28 27                  JR     Z,RandomSeekErrorBadSeek ; Error exit if 0FFH				;
2878: F0E0         ;
2879: F0E0 DD 71 0C               LD     (IX+fcbExtIndex),C   ; Update FCB Ext value				;
2880: F0E3 DD 70 0E               LD     (IX+fcbS2Index),B    ; Update FCB S2 value				;
2881: F0E6 CD F4 ED               CALL   OpenFile             ; Open the targeted Dir entry		;
2882: F0E9 3A B6 EA               LD     A,(exitParameterByte) ; is the file present?				;
2883: F0EC 3C                     INC    A                    ;
2884: F0ED 20 12                  JR     NZ,RandomSeekExit    ; Exit if open successful			;
2885: F0EF         ; cannot open the file, read mode?											;
2886: F0EF C1                     POP    BC                   ; Get Read/Write flag				;
2887: F0F0 C5                     PUSH   BC                   ; Read/Write flag					;
2888: F0F1 2E 04                  LD     L,04                 ; "attempt to read unwritten extent"	;
2889: F0F3 0C                     INC    C                    ; Becomes 00 if read operation		;
2890: F0F4 28 11                  JR     Z,RandomSeekErrorBadSeek ; Error exit if read operation		;
2891: F0F6         ;
2892: F0F6 CD B3 EE               CALL   MakeNewFile          ; Make Directory Entry				;
2893: F0F9 2E 05                  LD     L,05                 ; "cannot create new extent"		;
2894: F0FB 3A B6 EA               LD     A,(exitParameterByte) ; Get result from Make				;
2895: F0FE 3C                     INC    A                    ;
2896: F0FF 28 06                  JR     Z,RandomSeekErrorBadSeek ;	Exit if failed on Make			;
2897: F101         ;
2898: F101             RandomSeekExit:                      ;
2899: F101 C1                     POP    BC                   ; Balance Stack						;
2900: F102 AF                     XOR    A                    ; Success							;
2901: F103 32 B6 EA               LD     (exitParameterByte),A ;
2902: F106 C9                     RET                         ;
2903: F107         ;
2904: F107             RandomSeekErrorBadSeek:                      ;
2905: F107 DD 36 0E C0               LD     (IX+fcbS2Index),0C0H ; Set Write protect & overflow		;
2906: F10B             RandomSeekError:                      ;
2907: F10B C1                     POP    BC                   ; Balance Stack						;
2908: F10C 7D                     LD     A,L                  ; Get error code					;
2909: F10D 32 B6 EA               LD     (exitParameterByte),A ;	and return it to caller			;
2910: F110 C3 CB EF               JP     SetFileWriteFlag     ; Set flag for following close		;
2911: F113         ;-------------------------------- Random Seek ------------------------------;
2912: F113         ;--------------------------- Get Random Record Position -------------------;?
2913: F113         ; on Entry :																;?
2914: F113         ;			HL = pointer to directory entry									;?
2915: F113         ;			DE = fcbRCIndex/seqRecord index									;?
2916: F113             GetRandomRecordPosition:                      ;?
2917: F113 EB                     EX     DE,HL                ; DE = pointer to directory entry	;?
2918: F114 19                     ADD    HL,DE                ;?
2919: F115         ; DE=.buf(dptr) or .fcb(0), HL = .f(NEXT_RECORD/fcbRCIndex)				;?
2920: F115 4E                     LD     C,(HL)               ; C = record count					;?
2921: F116 06 00                  LD     B,0                  ; Make count a word value			;?
2922: F118         ;?
2923: F118 21 0C 00               LD     HL,fcbExtIndex       ; FCB Extent index					;?
2924: F11B 19                     ADD    HL,DE                ;?
2925: F11C 7E                     LD     A,(HL)               ; ACC has Extent value				;?
2926: F11D 0F                     RRCA                        ;?
2927: F11E E6 80                  AND    80H                  ; A=e000 0000						;?
2928: F120 81                     ADD    A,C                  ;?
2929: F121 4F                     LD     C,A                  ;?
2930: F122 3E 00                  LD     A,0                  ;?
2931: F124 88                     ADC    A,B                  ;?
2932: F125 47                     LD     B,A                  ;?
2933: F126         ; BC = 0000 000? errrr rrrr												;?
2934: F126 7E                     LD     A,(HL)               ;?
2935: F127 0F                     RRCA                        ;?
2936: F128 E6 0F                  AND    LO_NIBBLE_MASK       ;?
2937: F12A 80                     ADD    A,B                  ;?
2938: F12B 47                     LD     B,A                  ;?
2939: F12C         ; BC = 000? eeee errrr rrrr			;?
2940: F12C 21 0E 00               LD     HL,fcbS2Index        ;?
2941: F12F 19                     ADD    HL,DE                ;?
2942: F130 7E                     LD     A,(HL)               ; A=XXX? mmmm						;?
2943: F131 87                     ADD    A,A                  ;?
2944: F132 87                     ADD    A,A                  ;?
2945: F133 87                     ADD    A,A                  ;?
2946: F134 87                     ADD    A,A                  ; cy=? A=mmmm 0000					;?
2947: F135 F5                     PUSH   AF                   ;?
2948: F136 80                     ADD    A,B                  ;?
2949: F137 47                     LD     B,A                  ;?
2950: F138         ; cy=?, BC = mmmm eeee errr rrrr											;?
2951: F138 F5                     PUSH   AF                   ; possible second carry				;?
2952: F139 E1                     POP    HL                   ; cy = lsb of L						;?
2953: F13A 7D                     LD     A,L                  ; cy = lsb of A						;?
2954: F13B E1                     POP    HL                   ; cy = lsb of L						;?
2955: F13C B5                     OR     L                    ; cy/cy = lsb of A					;?
2956: F13D E6 01                  AND    1                    ; A = 0000 000? possible carry-out	;?
2957: F13F C9                     RET                         ;?
2958: F140         ;--------------------------- Get Random Record Position -------------------;?
2959: F140         ;=========================== File Utilities ================================;
2960: F140         ;=========================== Directory Utilities ===========================;
2961: F140         ;--------------------------- Set End of Directory indicator ----------------;
2962: F140             SetEndDirectory:                      ;
2963: F140 21 FF FF               LD     HL,EOD               ; Put -1 (0FFFFH) in index			;
2964: F143 22 C3 F4               LD     (dirEntryIndex),HL   ;
2965: F146 C9                     RET                         ;
2966: F147         ;--------------------------- Set End of Directory indicator ----------------;
2967: F147         ;--------------------------- Are we at End Of Directory --------------------;
2968: F147         ; Tests to see if we are at the End Of the Directory						;
2969: F147         ;																			;
2970: F147         ; exits With Z Flag Set if at EOD (dirEntryIndex = -1)						;
2971: F147         ;			Z Flag reset if still in directory								;
2972: F147         ;
2973: F147             AtEndOfDirectory:                      ;
2974: F147 21 C3 F4               LD     HL,dirEntryIndex     ; Point at LSB of Dir index			;
2975: F14A 7E                     LD     A,(HL)               ; Get it							;
2976: F14B 23                     INC    HL                   ; Point at MSB	of Dir Index		;
2977: F14C BE                     CP     M                    ; LSB = MSB ?						;
2978: F14D C0                     RET    NZ                   ;	exit if not if different		;
2979: F14E         ; Same.	are they = 0ffh?			;
2980: F14E 3C                     INC    A                    ;	if yes, A= 0, set Z flag		;
2981: F14F C9                     RET                         ;
2982: F150         ;--------------------------- Are we at End Of Directory --------------------;
2983: F150         ;--------------------------- Get Directory Element -------------------------;
2984: F150         ; compute the address of a directory element in Directory Buffer			;
2985: F150         ; Returns:	HL = Address of the specific directory Entry					;
2986: F150             GetCurrentDirectoryRecord:                      ;
2987: F150 C5                     PUSH   BC                   ; Save BC							;
2988: F151 2A 97 F4               LD     HL,(caDirectoryDMA)  ; Get the Directory Buffer base		;
2989: F154 3A C2 F4               LD     A,(dirBlockIndex)    ; Get the index value				;
2990: F157 4F                     LD     C,A                  ;
2991: F158 AF                     XOR    A                    ; Set to Zero and reset CY			;
2992: F159 47                     LD     B,A                  ;
2993: F15A ED 4A                  ADC    HL,BC                ; Compute the Entry Location		;
2994: F15C C1                     POP    BC                   ; Restore							;
2995: F15D C9                     RET                         ;
2996: F15E         ;--------------------------- Get Directory Element -------------------------;
2997: F15E         ;--------------------------- Set Directory Entry ---------------------------;
2998: F15E         ; Will update directory if not in the directory								;
2999: F15E         ;
3000: F15E             SetDirectoryEntry:                      ;
3001: F15E CD 67 F1               CALL   StillInDirectory     ;
3002: F161 D8                     RET    C                    ; Exit if still in the Directory	;
3003: F162         ;
3004: F162         ; StillInDirectory will return with:										;
3005: F162         ;									DE = Directory entry number				;
3006: F162         ;									HL = Address of entry number + 1		;
3007: F162 13                     INC    DE                   ;
3008: F163 72                     LD     (HL),D               ;
3009: F164 2B                     DEC    HL                   ;
3010: F165 73                     LD     (HL),E               ;
3011: F166 C9                     RET                         ;
3012: F167         ;--------------------------- Set Directory Entry ---------------------------;
3013: F167         ;--------------------------- Are we sill in the Directory ------------------;
3014: F167         ;Returns	:																;
3015: F167         ;			CY Set	if dirEntryIndex <= Directory Max Value					;
3016: F167         ;			CY Reset if dirEntryIndex	> Directory Max Value				;
3017: F167         ;			HL = (address of Index Value) + 1								;
3018: F167         ;			DE = Directory Index Value										;
3019: F167             StillInDirectory:                      ;
3020: F167 2A C3 F4               LD     HL,(dirEntryIndex)   ;
3021: F16A EB                     EX     DE,HL                ; DE = directory counter			;
3022: F16B 2A 91 F4               LD     HL,(caDirMaxValue)   ; HL = caDirMaxValue				;
3023: F16E 7B                     LD     A,E                  ;
3024: F16F 96                     SUB    M                    ;
3025: F170 23                     INC    HL                   ;
3026: F171 7A                     LD     A,D                  ;
3027: F172 9E                     SBC    A,(HL)               ; Set CY if dirEntryIndex			;
3028: F173 C9                     RET                         ;	<= Directory Max Value		;
3029: F174         ;--------------------------- Are we sill in the Directory ------------------;
3030: F174         ;--------------------------- Scan Disk Map ---------------------------------;
3031: F174         ; Will Set/Reset the Allocation Map bit(s) for the current directory entry. ;
3032: F174         ;																			;
3033: F174         ; On Entry	C = TRUE	Set the Map bits for each block found in FCB		;
3034: F174         ;			C = FALSE	reset the Map bits for each block found in FCB		;
3035: F174         ;
3036: F174             ScanDiskMap:                      ;
3037: F174 C5                     PUSH   BC                   ; Save the Set/Reset Info			;
3038: F175 CD 50 F1               CALL   GetCurrentDirectoryRecord ; HL points at the directory record ;
3039: F178 11 10 00               LD     DE,fcbDiskMapIndex   ; DE is the index to the FCBs Map	;
3040: F17B 19                     ADD    HL,DE                ; HL is now at start of the MAP		;
3041: F17C 0E 11                  LD     C,fcbLength-fcbDiskMapIndex+1 ; Size of Disk Allocation Map + 1	;
3042: F17E         ;
3043: F17E             ScanDiskMap0:                      ;
3044: F17E D1                     POP    DE                   ; Recall the set/reset Info			;
3045: F17F 0D                     DEC    C                    ;
3046: F180 C8                     RET    Z                    ; Loop once for each disk map entry ;
3047: F181         ;
3048: F181 D5                     PUSH   DE                   ; Save the Set/Reset Info			;
3049: F182 3A B8 F4               LD     A,(byteAllocationFlag) ; Is Map Byte or Word sized			;
3050: F185 B7                     OR     A                    ;
3051: F186 28 07                  JR     Z,ScanDiskMapWord    ; Skip if Word Sized				;
3052: F188         ;	Byte Allocation scan operation											;
3053: F188 C5                     PUSH   BC                   ; Save counter						;
3054: F189 E5                     PUSH   HL                   ; Save map address					;
3055: F18A 4E                     LD     C,(HL)               ;
3056: F18B 06 00                  LD     B,0                  ; BC=block# for Byte				;
3057: F18D 18 06                  JR     ScanDiskMap2         ;
3058: F18F         ; Word scan operation														;
3059: F18F             ScanDiskMapWord:                      ;
3060: F18F 0D                     DEC    C                    ; Adjust counter for 2 bytes		;
3061: F190 C5                     PUSH   BC                   ; Save counter						;
3062: F191 46                     LD     B,(HL)               ;
3063: F192 23                     INC    HL                   ;
3064: F193 4E                     LD     C,(HL)               ; BC=block# for Word				;
3065: F194 E5                     PUSH   HL                   ; Save map address					;
3066: F195         ;
3067: F195         ; Arrive here with BC=block#, E=0/1											;
3068: F195             ScanDiskMap2:                      ;
3069: F195 79                     LD     A,C                  ;
3070: F196 B0                     OR     B                    ; Skip if = 0000 (No Block)			;
3071: F197 C4 98 EF               CALL   NZ,SetResetMapBit    ; bit set to 0/1 its in C			;
3072: F19A E1                     POP    HL                   ;
3073: F19B 23                     INC    HL                   ; to next bit position				;
3074: F19C C1                     POP    BC                   ; recall counter					;
3075: F19D 18 DF                  JR     ScanDiskMap0         ; for another item					;
3076: F19F         ;
3077: F19F         ;--------------------------- Scan Disk Map ---------------------------------;
3078: F19F         ;--------------------------- Get Closest Disk Block ------------------------;
3079: F19F         ; Find the closest available disk block, and mark in Map as allocated		;
3080: F19F         ; Enter	BC	= Block number to base the search on							;
3081: F19F         ; Exit	HL	= 0000 if There are no available open blocks					;
3082: F19F         ;			= block number of available and marked block					;
3083: F19F         ;
3084: F19F             GetClosestBlock:                      ;
3085: F19F C5                     PUSH   BC                   ; save the starting Block #			;
3086: F1A0         ;
3087: F1A0 2A A4 F4               LD     HL,(dpbDSM)          ; Maximum allocation value			;
3088: F1A3 CD 0C F3               CALL   DivideHLby8          ; Length of Map						;
3089: F1A6 EB                     EX     DE,HL                ; put size into DE					;
3090: F1A7 E1                     POP    HL                   ; Block number into HL				;
3091: F1A8 CD 0C F3               CALL   DivideHLby8          ; Length of Map						;
3092: F1AB EB                     EX     DE,HL                ; Size in HL, Start in DE			;
3093: F1AC AF                     XOR    A                    ; Reset CY							;
3094: F1AD ED 52                  SBC    HL,DE                ; Size for right					;
3095: F1AF         ; DE = Start Index															;
3096: F1AF         ; DE = Left Size															;
3097: F1AF         ; HL	= Right Size														;
3098: F1AF E5                     PUSH   HL                   ; Save right size					;
3099: F1B0 D5                     PUSH   DE                   ; Save left size & Start Index		;
3100: F1B1 3E FF                  LD     A,0FFH               ; Full Octet						;
3101: F1B3         ;
3102: F1B3 2A 9D F4               LD     HL,(caAllocVector)   ; Start of Map						;
3103: F1B6 19                     ADD    HL,DE                ; Determine initial Octet			;
3104: F1B7         ; Set up Left side															;
3105: F1B7 C1                     POP    BC                   ; Left size							;
3106: F1B8 03                     INC    BC                   ; adjust							;
3107: F1B9 E5                     PUSH   HL                   ; Save initial Octet				;
3108: F1BA 11 FF FF               LD     DE,-1                ; Flag as Left register set			;
3109: F1BD         ; HL = Initial Octet														;
3110: F1BD         ; BC = Left Size															;
3111: F1BD D9                     EXX                         ; Use alternate registers			;
3112: F1BE 11 00 00               LD     DE,0000H             ; Flag as Right register set		;
3113: F1C1 E1                     POP    HL                   ; Get Initial Octet					;
3114: F1C2 C1                     POP    BC                   ; Get Right Size					;
3115: F1C3 03                     INC    BC                   ; adjust							;
3116: F1C4             LookRight:                      ;
3117: F1C4 ED A1                  CPI                         ; UnSet Bit?						;
3118: F1C6 20 28                  JR     NZ,FoundFreeOctet    ;	Then get out of search			;
3119: F1C8 E2 E1 F1               JP     PO,NoMoreRight       ; Exhausted Map to the right		;
3120: F1CB         ;
3121: F1CB D9                     EXX                         ; Switch to the Left				;
3122: F1CC ED A9                  CPD                         ; UnSet Bit?						;
3123: F1CE 20 20                  JR     NZ,FoundFreeOctet    ;	Then get out of search			;
3124: F1D0 E2 D6 F1               JP     PO,NoMoreLeft        ; Exhausted Map to the right		;
3125: F1D3 D9                     EXX                         ; switch to right					;
3126: F1D4 18 EE                  JR     LookRight            ; Keep on looking					;
3127: F1D6         ;			----------------												;
3128: F1D6             NoMoreLeft:                      ;
3129: F1D6 D9                     EXX                         ; Switch to Right					;
3130: F1D7             NoMoreLeftLoop:                      ;
3131: F1D7 ED A1                  CPI                         ;
3132: F1D9 20 15                  JR     NZ,FoundFreeOctet    ;	Then get out of search			;
3133: F1DB E2 EC F1               JP     PO,NoFreeBlocks      ; Exhausted Map to the right		;
3134: F1DE 18 F7                  JR     NoMoreLeftLoop       ; Keep looking						;
3135: F1E0 76                     HALT                        ;
3136: F1E1             NoMoreRight:                      ;
3137: F1E1 D9                     EXX                         ; Switch to Left					;
3138: F1E2             NoMoreRightLoop:                      ;
3139: F1E2 ED A9                  CPD                         ;
3140: F1E4 20 0A                  JR     NZ,FoundFreeOctet    ;	Then get out of search			;
3141: F1E6 E2 EC F1               JP     PO,NoFreeBlocks      ; Exhausted Map to the right		;
3142: F1E9 18 F7                  JR     NoMoreRightLoop      ; Keep looking						;
3143: F1EB 76                     HALT                        ;
3144: F1EC             NoFreeBlocks:                      ;
3145: F1EC 21 00 00               LD     HL,0000H             ; Return 0000 in HL					;
3146: F1EF C9                     RET                         ;
3147: F1F0         ;			----------------												;
3148: F1F0             FoundFreeOctet:                      ;
3149: F1F0 BB                     CP     E                    ; Left or Right						;
3150: F1F1 28 03                  JR     Z,FoundFreeOctet1    ;	it was left						;
3151: F1F3 2B                     DEC    HL                   ; Adjust for direction				;
3152: F1F4 18 01                  JR     FoundFreeOctet2      ;
3153: F1F6         ;
3154: F1F6             FoundFreeOctet1:                      ;
3155: F1F6 23                     INC    HL                   ; Adjust for direction				;
3156: F1F7             FoundFreeOctet2:                      ;
3157: F1F7 01 00 00               LD     BC,00                ; need to keep track of bit			;
3158: F1FA             FoundFreeOctet3:                      ;
3159: F1FA CB 06                  RLC    (HL)                 ;
3160: F1FC 03                     INC    BC                   ;
3161: F1FD 38 FB                  JR     C,FoundFreeOctet3    ; Loop if Bit 7 set					;
3162: F1FF CB C6                  SET    0,(HL)               ; Make map bit set					;
3163: F201 41                     LD     B,C                  ; Put count in B					;
3164: F202             FoundFreeOctet4:                      ;
3165: F202 CB 0E                  RRC    (HL)                 ;
3166: F204 10 FC                  DJNZ   FoundFreeOctet4      ; Restore the Octet					;
3167: F206 0B                     DEC    BC                   ; adjust for Zero based value		;
3168: F207 C5                     PUSH   BC                   ; Save the bit index				;
3169: F208 ED 4B 9D F4               LD     BC,(caAllocVector)   ; Get Map start						;
3170: F20C AF                     XOR    A                    ; Clear CY							;
3171: F20D ED 42                  SBC    HL,BC                ; Get how far in the map			;
3172: F20F CD 16 F3               CALL   MultiplyHLby8        ; Calculate the Octet			;
3173: F212 C1                     POP    BC                   ; Restore index into Octet			;
3174: F213 09                     ADD    HL,BC                ; This is the Block Number			;
3175: F214 C9                     RET                         ;
3176: F215         ;--------------------------- Get Closest Disk Block ------------------------;
3177: F215         ;---------------------------- Copy Dir Entry To User's Buffer --------------;
3178: F215             CopyDirEntryToUserDMA:                      ;
3179: F215 2A 97 F4               LD     HL,(caDirectoryDMA)  ; Point at Directory buffer			;
3180: F218 ED 5B 8F F4               LD     DE,(initDAMAddress)  ; Point at User's Buffer			;
3181: F21C 01 80 00               LD     BC,cpmRecordSize     ; The entire record					;
3182: F21F ED B0                  LDIR                        ; Move it							;
3183: F221 C9                     RET                         ;
3184: F222         ;---------------------------- Copy Dir Entry To User's Buffer --------------;
3185: F222         ;--------------------- Return last Directory Index to Caller ---------------;
3186: F222             DirLocationToReturnLoc:                      ;
3187: F222 3A B3 F4               LD     A,(directoryIndex)   ; Get last directory Index			;
3188: F225 32 B6 EA               LD     (exitParameterByte),A ; Save for return to Caller			;
3189: F228 C9                     RET                         ;
3190: F229         ;--------------------- Return last Directory Index to Caller ---------------;
3191: F229         ;--------------------------- Check OK to Write to Disk ---------------------;
3192: F229             CheckWrite:                      ;
3193: F229 CD 35 EF               CALL   IsDiskWriteProtected ; Is this disk Write Protected?		;
3194: F22C C8                     RET    Z                    ; OK to write						;
3195: F22D C3 1D F4               JP     Error_DiskReadOnly   ; Report read only disk error		;
3196: F230         ;--------------------------- Check OK to Write to Disk ---------------------;
3197: F230         ;--------------------------- Check File Write Protect Status ---------------;
3198: F230             CheckRODirectory:                      ;
3199: F230 CD 50 F1               CALL   GetCurrentDirectoryRecord ; Use Entry in Directory Buffer		;
3200: F233         ; Use HL as the directory entry in Question									;
3201: F233             CheckROFile:                      ;
3202: F233 11 09 00               LD     DE,fcbROfileIndex    ; Index into FC for RO				;
3203: F236 19                     ADD    HL,DE                ; point at the byte					;
3204: F237 7E                     LD     A,(HL)               ;
3205: F238 17                     RLA                         ; Set CY if RO bit set				;
3206: F239 D0                     RET    NC                   ; Return OK							;
3207: F23A C3 23 F4               JP     Error_FileReadOnly   ; Report to read only File			;
3208: F23D         ;--------------------------- Check File Write Protect Status ---------------;
3209: F23D         ;------------------------- Copy FCB To Directory record --------------------;
3210: F23D         ; On Entry:																	;
3211: F23D         ;			C = Starting position											;
3212: F23D         ;			E = length of copy												;
3213: F23D         ;copy the whole file control block											;
3214: F23D             CopyFCB:                        ;
3215: F23D 0E 00                  LD     C,0                  ;
3216: F23F 1E 20                  LD     E,fcbLength          ; Copy all of the FCB			;
3217: F241         ; On Entry:																	;
3218: F241         ;			C = Starting position											;
3219: F241         ;			E = length of copy												;
3220: F241             CopyDir:                        ;
3221: F241 16 00                  LD     D,0                  ; Make length a word value		;
3222: F243 D5                     PUSH   DE                   ; Length						;
3223: F244 06 00                  LD     B,0                  ; Make index a word				;
3224: F246 2A B4 EA               LD     HL,(paramDE)         ; HL = source for data			;
3225: F249 09                     ADD    HL,BC                ;
3226: F24A EB                     EX     DE,HL                ;
3227: F24B CD 50 F1               CALL   GetCurrentDirectoryRecord ; HL pointer to Dir Record		;
3228: F24E EB                     EX     DE,HL                ;
3229: F24F C1                     POP    BC                   ; Length						;
3230: F250 ED B0                  LDIR                        ;
3231: F252 CD 6B F3               CALL   SeekDir              ; Seek to the dir entry			;
3232: F255 C3 69 F0               JP     WriteDir             ; Write the directory element	;
3233: F258         ;------------------------- Copy FCB from Directory record ------------------;
3234: F258         ;-------------------------------- Get Block Number -------------------------;
3235: F258         ;compute disk block number from current FCB								;
3236: F258             GetBlockNumber:                      ;
3237: F258 CD 65 F2               CALL   GetDiskMapIndex      ;Return Alloc block index			;
3238: F25B 4F                     LD     C,A                  ;
3239: F25C 06 00                  LD     B,0                  ;
3240: F25E CD 72 F2               CALL   GetDiskMapValue      ; Convert to Disk record			;
3241: F261 22 C0 F4               LD     (absoluteCPMRecord),HL ; Save								;
3242: F264 C9                     RET                         ;
3243: F265         ;-------------------------------- Get Block Number -------------------------;
3244: F265         ;-------------------------------- Get Disk Map Index -----------------------;
3245: F265         ;Return the	disk map Index for current File Record in the ACC				;
3246: F265             GetDiskMapIndex:                      ;
3247: F265 21 A1 F4               LD     HL,dpbBSH            ; Block# = Record# / (2***dpbBSH)	;
3248: F268 46                     LD     B,(HL)               ; shift count						;
3249: F269 3A BE F4               LD     A,(currentFileRecord) ;
3250: F26C             GetDiskMapIndexLoop:                      ;
3251: F26C CB 3F                  SRL    A                    ;
3252: F26E 10 FC                  DJNZ   GetDiskMapIndexLoop  ; Loop till done					;
3253: F270 00                     NOP                         ;
3254: F271 C9                     RET                         ;
3255: F272         ;-------------------------------- Get Disk Map Index -----------------------;
3256: F272         ;-------------------------------- Get Disk Map Value -----------------------;
3257: F272         ; Enter with Disk Map Index in BC											;
3258: F272         ; Return disk map value	in HL												;
3259: F272             GetDiskMapValue:                      ;
3260: F272 2A B4 EA               LD     HL,(paramDE)         ; FCB								;
3261: F275 11 10 00               LD     DE,fcbDiskMapIndex   ; Index to Allocation Map			;
3262: F278 19                     ADD    HL,DE                ; Address of Allocation Map Start	;
3263: F279 09                     ADD    HL,BC                ; Point at the targeted map entry	;
3264: F27A 3A B8 F4               LD     A,(byteAllocationFlag) ; Is this a byte or word			;
3265: F27D B7                     OR     A                    ;
3266: F27E 28 04                  JR     Z,GetDiskMap16Bit    ; Skip if word value				;
3267: F280 6E                     LD     L,(HL)               ;	else its a byte value			;
3268: F281 26 00                  LD     H,0                  ;load the byte into HL				;
3269: F283 C9                     RET                         ;
3270: F284         ;
3271: F284             GetDiskMap16Bit:                      ;
3272: F284 09                     ADD    HL,BC                ; make it double width				;
3273: F285 56                     LD     D,(HL)               ;
3274: F286 23                     INC    HL                   ;
3275: F287 5E                     LD     E,(HL)               ; Load word value into DE			;
3276: F288 EB                     EX     DE,HL                ; return value in HL				;
3277: F289 C9                     RET                         ;
3278: F28A         ;-------------------------------- Get Disk Map Value -----------------------;
3279: F28A         ;-------------------------------- Allocate The Block -----------------------;
3280: F28A         ;is	block allocated															;
3281: F28A             WasBlockAllocated:                      ;
3282: F28A 2A C0 F4               LD     HL,(absoluteCPMRecord) ; Get the Block Number				;
3283: F28D 7D                     LD     A,L                  ; ZFlag set if						;
3284: F28E B4                     OR     H                    ;	absoluteCPMRecord = 0			;
3285: F28F C9                     RET                         ;
3286: F290         ;-------------------------------- Allocate The Block -----------------------;
3287: F290         ;----------------------------- Set Actual Record Add -----------------------;
3288: F290         ;
3289: F290         ;compute actual record address												;
3290: F290         ; result = absolute CPMRecord * ( 2**BSH)									;
3291: F290             SetActualRecordAdd:                      ;
3292: F290 3A A1 F4               LD     A,(dpbBSH)           ; Block Shift to loop control		;
3293: F293 47                     LD     B,A                  ;
3294: F294 2A C0 F4               LD     HL,(absoluteCPMRecord) ;
3295: F297         ;
3296: F297             SetActualRecordAddLoop:                      ;
3297: F297 29                     ADD    HL,HL                ;
3298: F298 10 FD                  DJNZ   SetActualRecordAddLoop ;
3299: F29A         ; HL has Record number for start of the block;								;
3300: F29A 3A A2 F4               LD     A,(dpbBLM)           ; Get block mask to get current		;
3301: F29D 4F                     LD     C,A                  ;	File Record mod Block			;
3302: F29E 3A BE F4               LD     A,(currentFileRecord) ; Get index into block				;
3303: F2A1 A1                     AND    C                    ; Record index in Block				;
3304: F2A2 B5                     OR     L                    ;
3305: F2A3 6F                     LD     L,A                  ; to HL								;
3306: F2A4 22 C0 F4               LD     (absoluteCPMRecord),HL ; Absolute CPM Record=HL			;
3307: F2A7         ; *** Absolute CPM Record now has current record number						;
3308: F2A7         ; - Starting record number + index into block								;
3309: F2A7 C9                     RET                         ;
3310: F2A8         ;----------------------------- Set Actual Record Add -----------------------;
3311: F2A8         ;-------------------------------- Open Next Extent -------------------------;
3312: F2A8         ;close the current extent	and open the next one if possible.				;
3313: F2A8         ;readModeFlag is true if in read mode										;
3314: F2A8             OpenNextExt:                      ;
3315: F2A8 AF                     XOR    A                    ; Set to 00							;
3316: F2A9 32 B1 F4               LD     (fcbCopiedFlag),A    ; Clear Flag						;
3317: F2AC CD 35 EE               CALL   CloseDirEntry        ; Close current extent.				;
3318: F2AF CD 47 F1               CALL   AtEndOfDirectory     ; Is the directory full?			;
3319: F2B2 C8                     RET    Z                    ;	exit it yes						;
3320: F2B3         ;
3321: F2B3 CD 90 EF               CALL   GetExtentAddress     ; HL at FCB's EXT					;
3322: F2B6 7E                     LD     A,(HL)               ; Get previous EXT value			;
3323: F2B7 3C                     INC    A                    ; Add one to it						;
3324: F2B8 E6 1F                  AND    maxExtValue          ; Limit to max value				;
3325: F2BA 77                     LD     (HL),A               ; Put it back into the FCB			;
3326: F2BB 28 0D                  JR     Z,OpenNextModule     ;	if = 0, need to open new Module	;
3327: F2BD         ;
3328: F2BD 47                     LD     B,A                  ; put Ext value in B				;
3329: F2BE 3A A3 F4               LD     A,(dpbEXM)           ; Get the Extent Mask				;
3330: F2C1 A0                     AND    B                    ; Mask out unwanted bits			;
3331: F2C2         ; if result is zero, then not in the same group								;
3332: F2C2 21 B1 F4               LD     HL,fcbCopiedFlag     ; Point at Copied Flag				;
3333: F2C5 A6                     AND    M                    ;	00 in Acc if not written		;
3334: F2C6 28 0C                  JR     Z,OpenNextExt1       ;	go to next physical extent if 0	;
3335: F2C8 18 24                  JR     UpdateFCB            ;	else continue					;
3336: F2CA         ;
3337: F2CA             OpenNextModule:                      ;
3338: F2CA 01 02 00               LD     BC,fcbS2Index-fcbExtIndex ; Index difference between EXT & S2 ;
3339: F2CD 09                     ADD    HL,BC                ; Add to HL( at EXT) gives S2		;
3340: F2CE 34                     INC    M                    ; Increment the Module number		;
3341: F2CF 7E                     LD     A,(HL)               ; get the new Module number			;
3342: F2D0 E6 0F                  AND    moduleMask           ; Mask out unwanted bits			;
3343: F2D2 28 25                  JR     Z,OpenNextExtError   ; If overflow to zero, error exit	;
3344: F2D4         ;
3345: F2D4             OpenNextExt1:                      ;
3346: F2D4 0E 0F                  LD     C,nameLength         ; Set search/match size				;
3347: F2D6 CD F6 EF               CALL   SearchForDirectoryRecord ; Find the file's directory record	;
3348: F2D9 CD 47 F1               CALL   AtEndOfDirectory     ; At end of Directory ?				;
3349: F2DC 20 10                  JR     NZ,UpdateFCB         ;	No, then keep going				;
3350: F2DE         ;
3351: F2DE 3A B2 F4               LD     A,(readModeFlag)     ;	else at EOD						;
3352: F2E1 3C                     INC    A                    ; 0ffh becomes 00 if read			;
3353: F2E2 28 15                  JR     Z,OpenNextExtError   ; All done if a read				;
3354: F2E4         ;
3355: F2E4 CD B3 EE               CALL   MakeNewFile          ; With write we can extend file		;
3356: F2E7 CD 47 F1               CALL   AtEndOfDirectory     ; Is there room in the directory ?	;
3357: F2EA 28 0D                  JR     Z,OpenNextExtError   ;	no, exitParameterByte = 1		;
3358: F2EC 18 03                  JR     OpenNextExt3         ;
3359: F2EE         ;
3360: F2EE             UpdateFCB:                      ;
3361: F2EE CD FD ED               CALL   CopyDirRecordToFCB   ; Update FCB						;
3362: F2F1             OpenNextExt3:                      ;
3363: F2F1 CD 6C EF               CALL   SetRecordVars        ; Set variables for current FCB		;
3364: F2F4 AF                     XOR    A                    ;
3365: F2F5 32 B6 EA               LD     (exitParameterByte),A ; Set exitParameterByte = 0			;
3366: F2F8 C9                     RET                         ;
3367: F2F9         ;
3368: F2F9             OpenNextExtError:                      ;
3369: F2F9 CD 2E F3               CALL   SetExitParamTo1      ; ExitParameterByte = 1				;
3370: F2FC C3 CB EF               JP     SetFileWriteFlag     ; Ensure that it will not be closed ;
3371: F2FF         ;-------------------------------- Open Next Extent -------------------------;
3372: F2FF         ;=========================== Directory Utilities ===========================;
3373: F2FF         ;===========================================================================;
3374: F2FF         ;=========================== General	Utilities ===========================;
3375: F2FF         ;--------------------------- Rotate HL right by value in C -----------------;
3376: F2FF         ;
3377: F2FF         ; HL = Value to be rotated Right											;
3378: F2FF         ;	B = Amount to shift														;
3379: F2FF             RotateRightHLbyB:                      ;
3380: F2FF 37                     SCF                         ; Set carry flag, expect LSBit = 1	;
3381: F300 CB 45                  BIT    0,L                  ; is LSB set?						;
3382: F302 20 01                  JR     NZ,RotateRightHLbyB1 ; Skip if LSB set				;
3383: F304 3F                     CCF                         ; else Clear Carry flag				;
3384: F305             RotateRightHLbyB1:                      ;
3385: F305 CB 1C                  RR     H                    ; Shift thru CY						;
3386: F307 CB 1D                  RR     L                    ; ditto								;
3387: F309 10 F4                  DJNZ   RotateRightHLbyB     ;
3388: F30B C9                     RET                         ;
3389: F30C         ;
3390: F30C         ;--------------------------- Rotate HL right by value in C -----------------;
3391: F30C         ;---------Divide HL by 8	&&	Shift HL right by value in C ---------------;
3392: F30C         ; HL = Value to be shifted Right											;
3393: F30C             DivideHLby8:                      ;
3394: F30C 06 03                  LD     B,3                  ; 8 = 2**3							;
3395: F30E         ;	B = Amount to shift														;
3396: F30E             ShiftRightHLbyB:                      ;
3397: F30E AF                     XOR    A                    ; else Clear Carry flag				;
3398: F30F CB 1C                  RR     H                    ; Shift thru CY						;
3399: F311 CB 1D                  RR     L                    ; ditto								;
3400: F313 10 F9                  DJNZ   ShiftRightHLbyB      ;
3401: F315 C9                     RET                         ;
3402: F316         ;---------Divide HL by 8	&&	Shift HL right by value in C ---------------;
3403: F316         ;---------Multiply HL by 8	&&	Shift HL left by value in C ----------------;
3404: F316         ; HL = Value to be shifted Left												;
3405: F316             MultiplyHLby8:                      ;
3406: F316 06 03                  LD     B,3                  ; 8 = 2**3							;
3407: F318         ;	B = Amount to shift														;
3408: F318             ShiftLeftHLbyB:                      ;
3409: F318 AF                     XOR    A                    ; else Clear Carry flag				;
3410: F319 CB 15                  RL     L                    ; Shift thru CY						;
3411: F31B CB 14                  RL     H                    ; ditto								;
3412: F31D 10 F9                  DJNZ   ShiftLeftHLbyB       ;
3413: F31F C9                     RET                         ;
3414: F320         ;---------Multiply HL by 8	&&	Shift HL left by value in C ----------------;
3415: F320         ;----------------------------- Merge ---------------------------------------;
3416: F320         ; Merge Map Block Numbers between FCB and directory record					;
3417: F320         ; HL has pointer to map for either dir record or FCB,						;
3418: F320         ; DE has the other pointer. If HL is pointing to a non empty block, then	;
3419: F320         ; it just returns, Else it copies the block number to where DE is pointing	;
3420: F320         ;
3421: F320             Merge:                          ;
3422: F320 7E                     LD     A,(HL)               ; Get the first byte				;
3423: F321 23                     INC    HL                   ;
3424: F322 B6                     OR     M                    ; OR it with the second byte		;
3425: F323 2B                     DEC    HL                   ; Restore HL to start				;
3426: F324 C0                     RET    NZ                   ; Exit if both are 0s				;
3427: F325         ; HL points to a non Zero value												;
3428: F325 1A                     LD     A,(DE)               ; Get the first byte				;
3429: F326 77                     LD     (HL),A               ; Move it							;
3430: F327 13                     INC    DE                   ;
3431: F328 23                     INC    HL                   ; Increment both pointers			;
3432: F329 1A                     LD     A,(DE)               ; Get the second byte				;
3433: F32A 77                     LD     (HL),A               ; Move it							;
3434: F32B 1B                     DEC    DE                   ;
3435: F32C 2B                     DEC    HL                   ; Restore HL & DE to start			;
3436: F32D C9                     RET                         ;
3437: F32E         ;----------------------------- Merge ---------------------------------------;
3438: F32E         ;------------------------- Set Exit Parameter To 1 -------------------------;
3439: F32E             SetExitParamTo1:                      ;
3440: F32E 3E 01                  LD     A,1                  ;
3441: F330 32 B6 EA               LD     (exitParameterByte),A ; Put a 1 in the exit parameter		;
3442: F333 C9                     RET                         ;
3443: F334         ;------------------------- Set Exit Parameter To 1 -------------------------;
3444: F334         ;=========================== General	Utilities ==========================;
3445: F334         ;--------------------------- Read Directory Record -------------------------;
3446: F334         ; read a directory entry into the directory buffer							;
3447: F334             ReadDirRecord:                      ;
3448: F334 CD 0C EF               CALL   SetDirDMA            ; System Assigned Buffer			;
3449: F337 CD 15 EF               CALL   ReadBuffer           ; Go to BIOS for the read			;
3450: F33A C3 07 EF               JP     SetDataDMA           ; Restore DMA						;
3451: F33D         ;--------------------------- Read Directory Record -------------------------;
3452: F33D         ;--------------------------- Read Directory --------------------------------;
3453: F33D         ; Read next directory entry													;
3454: F33D         ; Enter :																	;
3455: F33D         ;		C =	TRUE initializing and setting CheckSum							;
3456: F33D         ;			<> TRUE Checking existing CheckSum								;
3457: F33D             ReadDirectory:                      ;
3458: F33D ED 5B A6 F4               LD     DE,(dpbDRM)          ; Number of Dir Entries-1			;
3459: F341 2A C3 F4               LD     HL,(dirEntryIndex)   ; Prior Directory Index				;
3460: F344 23                     INC    HL                   ; Increment the Index				;
3461: F345 22 C3 F4               LD     (dirEntryIndex),HL   ; Save current directory index		;
3462: F348 AF                     XOR    A                    ; Clear the CY flag					;
3463: F349 ED 52                  SBC    HL,DE                ; Are we at end Of the directory	;
3464: F34B 20 04                  JR     NZ,ReadDirectory0    ;	No the process					;
3465: F34D CD 40 F1               CALL   SetEndDirectory      ;	else we are done				;
3466: F350 C9                     RET                         ;
3467: F351         ;
3468: F351         ; Calculate the entry index Position in Buffer								;
3469: F351             ReadDirectory0:                      ;
3470: F351 3A C3 F4               LD     A,(dirEntryIndex)    ; Get the index						;
3471: F354 E6 03                  AND    dirEntryMask         ; Determine Entry number			;
3472: F356 06 05                  LD     B,fcbShift           ; Shift value for Record Size		;
3473: F358             ReadDirectory1:                      ;
3474: F358 87                     ADD    A,A                  ;
3475: F359 10 FD                  DJNZ   ReadDirectory1       ;
3476: F35B 32 C2 F4               LD     (dirBlockIndex),A    ; Now save the Index into to buffer ;
3477: F35E B7                     OR     A                    ; Is this the 1st entry?			;
3478: F35F C0                     RET    NZ                   ;	return if not.					;
3479: F360         ;
3480: F360 C5                     PUSH   BC                   ; Save init Flag (CheckSum)			;
3481: F361 CD 6B F3               CALL   SeekDir              ; Set up for Directory Read			;
3482: F364 CD 34 F3               CALL   ReadDirRecord        ; Read the directory record			;
3483: F367 C1                     POP    BC                   ; Recall initialization flag		;
3484: F368 C3 BA F3               JP     CheckSumUtility      ; Checksum the directory			;
3485: F36B         ;--------------------------- Read Directory --------------------------------;
3486: F36B         ;--------------------------- Seek Directory --------------------------------;
3487: F36B         ;seek the record containing the current directory entry					;
3488: F36B             SeekDir:                        ;
3489: F36B 2A C3 F4               LD     HL,(dirEntryIndex)   ; Directory Entry Index				;
3490: F36E 06 02                  LD     B,dirEntryShift      ; 4 entries per record				;
3491: F370 CD 0E F3               CALL   ShiftRightHLbyB      ;
3492: F373 22 C0 F4               LD     (absoluteCPMRecord),HL ;
3493: F376 22 C5 F4               LD     (dirRecord),HL       ; Save								;
3494: F379 C3 7C F3               JP     Seek                 ;
3495: F37C         ;--------------------------- Seek Directory --------------------------------;
3496: F37C         ;--------------------------- Seek ------------------------------------------;
3497: F37C             Seek:                           ;
3498: F37C 01 FF FF               LD     BC,0FFFFH            ; Initialize the track counter		;
3499: F37F 2A C0 F4               LD     HL,(absoluteCPMRecord) ; Get the record in question		;
3500: F382 ED 5B 9F F4               LD     DE,(dpbSPT)          ; Get Sectors Per track				;
3501: F386         ;
3502: F386             Seek0:                          ;
3503: F386 03                     INC    BC                   ; Divide the record					;
3504: F387 AF                     XOR    A                    ;	by the sectors per track		;
3505: F388 ED 52                  SBC    HL,DE                ;
3506: F38A 30 FA                  JR     NC,Seek0             ;	to get the gross track number	;
3507: F38C         ;
3508: F38C         ;
3509: F38C 19                     ADD    HL,DE                ; Gets the sector in the track		;
3510: F38D E5                     PUSH   HL                   ; Save Index Sector					;
3511: F38E         ;
3512: F38E DD E5                  PUSH   IX                   ; Save IX							;
3513: F390 DD 2A 93 F4               LD     IX,(caTrack)         ;
3514: F394 DD 71 00               LD     (IX+0),C             ;
3515: F397 DD 70 01               LD     (IX+1),B             ; Save the Gross Track				;
3516: F39A         ;
3517: F39A EB                     EX     DE,HL                ; Take the index from the record	;
3518: F39B 2A C0 F4               LD     HL,(absoluteCPMRecord) ;
3519: F39E AF                     XOR    A                    ;
3520: F39F ED 52                  SBC    HL,DE                ;	and you get the Block start		;
3521: F3A1         ;
3522: F3A1 DD 2A 95 F4               LD     IX,(caSector)        ;
3523: F3A5 DD 75 00               LD     (IX+0),L             ;
3524: F3A8 DD 74 01               LD     (IX+1),H             ; Save the Block Start				;
3525: F3AB DD E1                  POP    IX                   ; Restore IX						;
3526: F3AD         ;
3527: F3AD 2A AC F4               LD     HL,(dpbOFF)          ; Get directory Offset (tracks)		;
3528: F3B0 09                     ADD    HL,BC                ;	to add to the gross Track		;
3529: F3B1 E5                     PUSH   HL                   ;	which yields the net or			;
3530: F3B2 C1                     POP    BC                   ;	actual track for the record		;
3531: F3B3 CD 1E F6               CALL   bcSettrk             ; Set the net (actual) track		;
3532: F3B6         ;
3533: F3B6 C1                     POP    BC                   ; Get the sector within the track	;
3534: F3B7 C3 21 F6               JP     bcSetsec             ;	and set it for the seek			;
3535: F3BA         ;
3536: F3BA         ;--------------------------- Seek ------------------------------------------;
3537: F3BA         ;--------------------------- Check Sum Utility -----------------------------;
3538: F3BA         ; At entry																	;
3539: F3BA         ;			C	= TRUE	-	Set the Checksum values in Vector				;
3540: F3BA         ;			C <> TRUE	-	Validate Checksum value in Vector				;
3541: F3BA         ;
3542: F3BA             CheckSumUtility:                      ;
3543: F3BA 2A AA F4               LD     HL,(dpbCKS)          ;
3544: F3BD ED 5B C5 F4               LD     DE,(dirRecord)       ;
3545: F3C1 AF                     XOR    A                    ;
3546: F3C2 ED 52                  SBC    HL,DE                ; Skip if past the Directory	;
3547: F3C4 D8                     RET    C                    ;	Entries						;
3548: F3C5         ;
3549: F3C5 C5                     PUSH   BC                   ; Save New/Validate Flag		;
3550: F3C6         ;
3551: F3C6         ; CheckSum = MOD( SUM(all bytes in The Record), 0FFH)						;
3552: F3C6             ComputeCheckSum:                      ;
3553: F3C6 06 80                  LD     B,cpmRecordSize      ;
3554: F3C8 2A 97 F4               LD     HL,(caDirectoryDMA)  ;
3555: F3CB EE 00                  XOR                         ;
3556: F3CD             ComputeCheckSum1:                      ;
3557: F3CD 86                     ADD    A,(HL)               ;
3558: F3CE 23                     INC    HL                   ;
3559: F3CF 10 FC                  DJNZ   ComputeCheckSum1     ;
3560: F3D1         ; Checksum is in ACC														;
3561: F3D1         ;
3562: F3D1 2A 9B F4               LD     HL,(caCheckSum)      ; Address of check sum vector		;
3563: F3D4 ED 5B C5 F4               LD     DE,(dirRecord)       ; Index to this record				;
3564: F3D8 19                     ADD    HL,DE                ; Address of this record in vector	;
3565: F3D9 C1                     POP    BC                   ; Retrieve New/Validate Flag		;
3566: F3DA 0C                     INC    C                    ;
3567: F3DB 28 0A                  JR     Z,SetNewCheckSum     ; Set the Value if Flag was TRUE	;
3568: F3DD         ;
3569: F3DD BE                     CP     M                    ; Else we are checking the value	;
3570: F3DE C8                     RET    Z                    ; Exit if OK						;
3571: F3DF         ; possible checksum error, are we beyond the end of the disk?				;
3572: F3DF CD 67 F1               CALL   StillInDirectory     ;
3573: F3E2 D0                     RET    NC                   ; OK, if not in the directory		;
3574: F3E3 CD 1D EF               CALL   SetDiskReadOnly      ;	else the checksums don't match	;
3575: F3E6 C9                     RET                         ;	Set disk RO before returning	;
3576: F3E7         ;
3577: F3E7         ;initializing the checksum													;
3578: F3E7             SetNewCheckSum:                      ;
3579: F3E7 77                     LD     (HL),A               ;
3580: F3E8 C9                     RET                         ;
3581: F3E9         ;--------------------------- Check Sum Utility -----------------------------;
3582: F3E9         ;---------------------------------- Is Bit Set -----------------------------;
3583: F3E9         ; Enter HL	contains the bit map											;
3584: F3E9         ;		B	Has the bit number (0...F)										;
3585: F3E9         ; Return ZFlag = 1 if bit is reset (0)										;
3586: F3E9         ;				= 0 if bit is set (1)										;
3587: F3E9             IsBitSet:                       ;
3588: F3E9 04                     INC    B                    ;
3589: F3EA             IsBitSetLoop:                      ;
3590: F3EA 37                     SCF                         ; Set carry flag, expect LSBit = 1	;
3591: F3EB CB 45                  BIT    0,L                  ; is LSB set?						;
3592: F3ED 20 01                  JR     NZ,IsBitSet1         ; Skip if LSB set				;
3593: F3EF 3F                     CCF                         ; else Clear Carry flag				;
3594: F3F0             IsBitSet1:                      ;
3595: F3F0 CB 1C                  RR     H                    ; Shift thru CY						;
3596: F3F2 CB 1D                  RR     L                    ; ditto								;
3597: F3F4 10 F4                  DJNZ   IsBitSetLoop         ;
3598: F3F6 CB 7C                  BIT    7,H                  ; Bit moved from L LSBit to H MSBit	;
3599: F3F8 C9                     RET                         ;
3600: F3F9         ;---------------------------------- Is Bit Set -----------------------------;
3601: F3F9         ;============================ Set/Reset Vector Bit =========================;
3602: F3F9         ;---------------------------------- Set Vector Bit -------------------------;
3603: F3F9         ; Enter	HL	contains the bit map vector										;
3604: F3F9         ;		B	Has the bit number (0...F)										;
3605: F3F9         ; Return HL	Contains the modified bit map vector							;
3606: F3F9             SetVectorBit:                      ;
3607: F3F9 C5                     PUSH   BC                   ; Save the Bit Number				;
3608: F3FA CD E9 F3               CALL   IsBitSet             ; Put the bit in the LSBit			;
3609: F3FD         ;
3610: F3FD C1                     POP    BC                   ; Get the bit position				;
3611: F3FE CB FC                  SET    7,H                  ;
3612: F400 18 07                  JR     ReAlignVector        ;
3613: F402         ;---------------------------------- Set Vector Bit -------------------------;
3614: F402         ;---------------------------------- Reset Vector Bit -----------------------;
3615: F402         ; Enter	HL	contains the bit map vector										;
3616: F402         ;		B	Has the bit number (0...F)										;
3617: F402         ; Return HL	Contains the modified bit map vector							;
3618: F402             ResetVectorBit:                      ;
3619: F402 C5                     PUSH   BC                   ; Save the Bit Number				;
3620: F403 CD E9 F3               CALL   IsBitSet             ; Put the bit in the LSBit			;
3621: F406         ;
3622: F406 C1                     POP    BC                   ; Get the bit position				;
3623: F407 CB BC                  RES    7,H                  ;
3624: F409         ; Fall thru to ReAlignVector												;
3625: F409         ;---------------------------------- Reset Vector Bit -----------------------;
3626: F409         ;---------------------------------- Set VectorBit --------------------------;
3627: F409         ; Adjusts the HL register to its Original Alignment after IsBitSet			;
3628: F409         ;
3629: F409             ReAlignVector:                      ;
3630: F409 04                     INC    B                    ;
3631: F40A             ReAlignMapLoop:                      ;
3632: F40A 37                     SCF                         ; Set carry flag, expect LSBit = 1	;
3633: F40B CB 7C                  BIT    7,H                  ; is LSB set?						;
3634: F40D 20 01                  JR     NZ,ReAlignMap1       ; Skip if LSB set				;
3635: F40F 3F                     CCF                         ; else Clear Carry flag				;
3636: F410             ReAlignMap1:                      ;
3637: F410 CB 15                  RL     L                    ; Shift thru CY						;
3638: F412 CB 14                  RL     H                    ; ditto								;
3639: F414 10 F4                  DJNZ   ReAlignMapLoop       ;
3640: F416 C9                     RET                         ;
3641: F417         ;============================ Set/Reset Vector Bit =========================;
3642: F417         ;============================= Error message World =========================;
3643: F417         ;																			;
3644: F417             Error_Select:                      ;
3645: F417 21 6F F4               LD     HL,ErrMsg_Selection  ; Error Message						;
3646: F41A C3 35 F4               JP     WaitBeforeBoot       ; Wait for console input before boot;
3647: F41D         ;
3648: F41D             Error_DiskReadOnly:                      ;
3649: F41D 21 7F F4               LD     HL,ErrMsg_ReadOnlyDisk ; Error Message						;
3650: F420 C3 35 F4               JP     WaitBeforeBoot       ; Wait for console input before boot;
3651: F423         ;
3652: F423             Error_FileReadOnly:                      ;
3653: F423 21 76 F4               LD     HL,ErrMsg_ReadOnlyFile ; Error Message						;
3654: F426 C3 35 F4               JP     WaitBeforeBoot       ; Wait for console input before boot;
3655: F429         ;
3656: F429             Error_BadSector:                      ;
3657: F429 21 64 F4               LD     HL,ErrMsg_BadSector  ; Error Message						;
3658: F42C CD 3B F4               CALL   DisplayErrorAndWait  ; Check input from console			;
3659: F42F FE 03                  CP     CTRL_C               ;
3660: F431 CA 00 00               JP     Z,WarmBoot           ; Reboot if response is CTRL_C		;
3661: F434 C9                     RET                         ;
3662: F435         ;---------------------------------------------------------------------------;
3663: F435             WaitBeforeBoot:                      ;
3664: F435 CD 3B F4               CALL   DisplayErrorAndWait  ;
3665: F438 C3 00 00               JP     WarmBoot             ;
3666: F43B         ;---------------------------------------------------------------------------;
3667: F43B         ;
3668: F43B             DisplayErrorAndWait:                      ;
3669: F43B E5                     PUSH   HL                   ; Save message pointer				;
3670: F43C CD D6 E9               CALL   showCRLF             ; Line Feed and Carriage Return		;
3671: F43F 3A 89 F4               LD     A,(currentDisk)      ; Disk in question					;
3672: F442 C6 41                  ADD    A,ASCII_A            ; Make ASCII out of it				;
3673: F444 32 60 F4               LD     (ErrMsg_BDOS_DISK),A ; Put into the error message		;
3674: F447 01 54 F4               LD     BC,ErrMsg_BDOS       ; Load the start of message			;
3675: F44A CD 3B E9               CALL   Print                ; Display it						;
3676: F44D C1                     POP    BC                   ; Load the rest of message			;
3677: F44E CD 3B E9               CALL   Print                ; Display it						;
3678: F451 C3 21 E9               JP     ConIn                ; Get the input character			;
3679: F454         ;
3680: F454         ;***************************************************************************;
3681: F454         ;
3682: F454 42 44 4F 53 20 45 72 72 20 4F 6E 20     ErrMsg_BDOS: DB     'BDOS Err On '       ;
3683: F460 20 3A 20 24     ErrMsg_BDOS_DISK: DB     ' : $'               ;
3684: F464 42 61 64 20 53 65 63 74 6F 72 24     ErrMsg_BadSector: DB     'Bad Sector$'        ;
3685: F46F 53 65 6C 65 63 74 24     ErrMsg_Selection: DB     'Select$'            ;
3686: F476 52 2F 4F 20 46 69 6C 65 24     ErrMsg_ReadOnlyFile: DB     'R/O File$'          ;
3687: F47F 52 2F 4F 20 44 69 73 6B 24     ErrMsg_ReadOnlyDisk: DB     'R/O Disk$'          ;
3688: F488         ;
3689: F488         ;============================= Error message World =========================;
3690: F488         ;********* file control block (fcb) constants ********************
3691: F488             fcbLength  EQU    20H                  ; File control block size
3692: F488             fcbROfileIndex EQU    09H                  ; High order of first type char
3693: F488             fcbHiddenfileIndex EQU    0AH                  ; Hidden file in dir command
3694: F488             fcbExtIndex EQU    0CH                  ; Extent number field index
3695: F488             fcbS1Index EQU    0DH                  ; S1 index
3696: F488             fcbS2Index EQU    0EH                  ; S2 data module number index
3697: F488             fcbRCIndex EQU    0FH                  ; Record count field index
3698: F488             fcbDiskMapIndex EQU    10H                  ; Disk map start
3699: F488             fcbExtIndexLSB EQU    0CH                  ; LSB of Extent
3700: F488             fcbExtIndexMSB EQU    0EH                  ; Bit 7 = Write protected
3701: F488             fcbCurrentRecord EQU    21H                  ; Next record to read/write
3702: F488             highestRecordNumber EQU    RecordsPerExtent - 1 ; Last record# in extent
3703: F488             dirEntriesPerRecord EQU    cpmRecordSize/fcbLength ; Directory entries / record
3704: F488             dirEntryShift EQU    2                    ; Log2(dirEntriesPerRecord)
3705: F488             dirEntryMask EQU    dirEntriesPerRecord-1
3706: F488             fcbShift   EQU    5                    ; Log2(fcbLength)
3707: F488         ;
3708: F488             maxExtValue EQU    31                   ; Largest extent number
3709: F488             moduleMask EQU    15                   ; Limits module number value
3710: F488             writeFlagMask EQU    80h                  ; File write flag is high order fcbS2Index
3711: F488             nameLength EQU    15                   ; Name length
3712: F488             emptyDir   EQU    0E5H                 ; Empty empty directory entry
3713: F488             recordSeq  EQU    fcbLength            ; Next Sequential Record
3714: F488             recordRandom EQU    recordSeq + 1        ; Random record field (2 bytes)
3715: F488             recordRandomLSB EQU    recordRandom         ; LSB of Random Record
3716: F488             recordRandomMSB EQU    recordRandom + 1     ; MSB of Random Record
3717: F488             recordRandomOVF EQU    recordRandom + 2     ; Random Record Overflow
3718: F488         ;***common values shared between bdosi and bdos******************
3719: F488 00          currentUserNumber: DB     0                    ; usrcode current user number
3720: F489 FF          currentDisk: DB     -1                   ; curdsk current disk number
3721: F48A         ;********************* Local Variables ***************************
3722: F48A         ;	************************
3723: F48A         ;	*** Initialized Data ***
3724: F48A E5          emptyFCB:  DB     emptyDir             ; 0E5 = available dir entry
3725: F48B 00 00       readOnlyVector: DW     0                    ; Read only disk vector
3726: F48D 00 00       loggedDisks: DW     0                    ; Logged-in disks
3727: F48F 80 00       initDAMAddress: DW     DMABuffer            ; Initial DMA address
3728: F491         ;	*** Current Disk attributes ****
3729: F491         ; These are set upon disk select
3730: F491         ; data must be adjacent, do not insert variables
3731: F491         ; address of translate vector, not used
3732: F491         ; ca - currentAddress
3733: F491 00 00       caDirMaxValue: DW     0000H                ; Pointer to cur dir max value
3734: F493 00 00       caTrack:   DW     0000H                ; Current track address
3735: F495 00 00       caSector:  DW     0000H                ; Current Sector
3736: F497             caListSizeStart:
3737: F497 00 00       caDirectoryDMA: DW     0000H                ; Pointer to directory DMA address
3738: F499 00 00       caDiskParamBlock: DW     0000H                ; Current disk parameter block address
3739: F49B 00 00       caCheckSum: DW     0000H                ; Current checksum vector address
3740: F49D 00 00       caAllocVector: DW     0000H                ; Current allocation vector address
3741: F49F             caListSizeEnd:
3742: F49F             caListSize EQU    caListSizeEnd - caListSizeStart
3743: F49F         ;	***** Disk Parameter Block *******
3744: F49F         ; data must be adjacent, do not insert variables
3745: F49F         ; dpb - Disk Parameter Block
3746: F49F             dpbStart:
3747: F49F 00 00       dpbSPT:    DW     0000H                ; Sectors per track
3748: F4A1 00          dpbBSH:    DB     0000H                ; Block shift factor
3749: F4A2 00          dpbBLM:    DB     00H                  ; Block mask
3750: F4A3 00          dpbEXM:    DB     00H                  ; Extent mask
3751: F4A4 00 00       dpbDSM:    DW     0000H                ; Maximum allocation number
3752: F4A6 00 00       dpbDRM:    DW     0000H                ; Largest directory number
3753: F4A8 00 00       dpbDABM:   DW     0000H                ; Reserved allocation bits for directory
3754: F4AA 00 00       dpbCKS:    DW     0000H                ; Size of checksum vector
3755: F4AC 00 00       dpbOFF:    DW     0000H                ; Offset tracks at beginning
3756: F4AE             dpbEnd:
3757: F4AE             dpbSize    EQU    dpbEnd - dpbStart
3758: F4AE         ;
3759: F4AE         ;	************************
3760: F4AE             SEQ_ACCESS EQU    01H                  ; Indicates sequential access to file
3761: F4AE             RANDOM_ACCESS EQU    00H                  ; Indicates random access to file
3762: F4AE 00          diskAccessType: DB     00H                  ; Set to 1 if sequential disk operation
3763: F4AF 00 00       caSkewTable: DW     0000H                ; Address of translate vector
3764: F4B1 00          fcbCopiedFlag: DB     00H                  ; Set true if CopyFCB called
3765: F4B2 00          readModeFlag: DB     00H                  ; Read mode flag for Open NextExt
3766: F4B3 00          directoryIndex: DB     00H                  ; Directory flag in rename, etc.
3767: F4B4 00          diskMapIndex: DB     00H                  ; Local for Disk_Write
3768: F4B5 00          searchLength: DB     00H                  ; Search length
3769: F4B6 00 00       searchAddress: DW     0000H                ; Search address
3770: F4B8 00          byteAllocationFlag: DB     00H                  ; Set true if single byte allocation map
3771: F4B9 00          fResel:    DB     00H                  ; Re selection flag
3772: F4BA 00          entryDisk: DB     00H                  ; Disk on entry to BDOS
3773: F4BB 00          fcbDisk:   DB     00H                  ; Disk named in FCB
3774: F4BC 00          fcbRecordCount: DB     00H                  ; Record count from current FCB
3775: F4BD 00          extentValue: DB     00H                  ; Extent number and dpbEXM from current FCB
3776: F4BE 00 00       currentFileRecord: DW     0000H                ; Current File Record - fcbCurrentRecord
3777: F4C0 00 00       absoluteCPMRecord: DW     0000H                ; Raw record ( 4 records / Sector)( 4 Sectors per block)
3778: F4C2         ;
3779: F4C2         ;	local variables for directory access
3780: F4C2 00          dirBlockIndex: DB     00H                  ; Directory block Index 0,1,2,3
3781: F4C3 00 00       dirEntryIndex: DW     00H                  ; Directory entry Index	0,1,...,dpbDRM
3782: F4C5 00 00       dirRecord: DW     00H                  ; Directory record 0,1,...,dpbDRM/4
3783: F4C7         ;********************** data areas ******************************
3784: F4C7         ;---------------------------------- Stack Area--------------------------------;
3785: F4C7             stackBottom: DS     STACK_SIZE * 2       ; stack size						;
3786: F507             bdosStack:
3787: F507         ;
3788: F507         ;---------------------------------- Stack Area--------------------------------;
3789: F507         ;	end of Basic I/O System
3790: F507         ;-----------------------------------------------------------------;
3791: F507
3792: F507         ;
3793: F507             Z_HighestLocation:
3794: F507             Z_MemoryLeft EQU    (BIOSStart-1) - Z_HighestLocation
           ************************   Xref   ************************
0000: $               F507   0398 0428
3777: absoluteCPMRecord F4C0   1525 3241 3282 3294 3306 3492 3499 3518
1539: Allocate16Bit   EBDB   1536
0995: AreWeAtEndOfBuffer EA31   0991
0070: ASCII_A         0041   3672
0071: ASCII_C         0043
0072: ASCII_M         004D
0034: ASCII_MASK      007F   0938
0073: ASCII_O         004F
0074: ASCII_Y         0059
0057: ASCII_ZERO      0030
0055: ASTERISK        002A
2973: AtEndOfDirectory F147   1372 1655 1837 2010 2257 2288 2352 2444 2716 3318 3348 3356
1087: BackUp          EA90   1015 1083
1092: BackUp1         EA98   1088
0280: bcBoot          F600
0283: bcConin         F609   0586 0762 0867 0885
0284: bcConout        F60C   0579 0830 1090 1094 1100 1102
0282: bcConst         F606   0583 0863
0288: bcHome          F618   2471
0285: bcList          F60F   0553 0836
0295: bcListst        F62D
0286: bcPunch         F612   0539
0293: bcRead          F627   2509
0287: bcReader        F615   0521
0296: bcSectran       F630
0289: bcSeldsk        F61B   2160
0292: bcSetdma        F624   2504
0291: bcSetsec        F621   3534
0290: bcSettrk        F61E   2477 3531
0281: bcWboot         F603   0448
0294: bcWrite         F62A   2804
0130: BDOSBase        E800   0131 0133 0309
0099: BDOSE           0005   0100
0131: BDOSEntry       E800
0120: BDOSLength      0E00   0123 0133 0134
3786: bdosStack       F507   0324
0314: BdosStart       E800
0133: BIOSBase        F600
0121: BIOSLength      0A00   0123
0093: BIOSPAGE        0002
0134: BIOSStart       F600   0280 0281 0282 0283 0284 0285 0286 0287 0288 0289 0290 0291 0292 0293 0294 0295 0296 3794
0230: BlockSize       0800   0252
1010: BSspaceBS       EA3E   0949
0030: BYTE            0001   1120
3770: byteAllocationFlag F4B8   1534 2193 2365 3049 3264
3740: caAllocVector   F49D   1745 2213 2215 2240 2624 3102 3169
3739: caCheckSum      F49B   3562
3737: caDirectoryDMA  F497   2180 2498 2988 3179 3554
3733: caDirMaxValue   F491   2171 2247 2526 3022
3738: caDiskParamBlock F499   1857 2185
3742: caListSize      0008   2181
3741: caListSizeEnd   F49F   3742
3736: caListSizeStart F497   3742
0075: CARET           005E   0798
0792: CaretOut        E948   0984 1065
3735: caSector        F495   2177 2485 3522
3763: caSkewTable     F4AF   2169
3734: caTrack         F493   2174 2481 3513
0128: CCPEntry        E000   0130 0134
0119: CCPLength       0800   0123 0130 0134
0881: CheckCTL_S      E9AC   0870
2754: CheckExtents    F044   2748
3198: CheckRODirectory F230   1375 1658
3201: CheckROFile     F233   1497
3542: CheckSumUtility F3BA   2788 3484
3192: CheckWrite      F229   1368 1495 1645 2437
2333: CloseDirEntry   EE35   1230 2871 3317
2421: CloseDirEntryEnd EEA2   2411
2429: CloseDirEntryError EEAE   2381 2391 2396
0058: COLON           003A
1118: columnPosition  EAB2   0816 0840 0903 0921 1079
2679: CompareExtents  EFE5   2755
3552: ComputeCheckSum F3C6
3556: ComputeCheckSum1 F3CD   3559
0105: ComTail         0080   0106
0107: ComTailChars    0081
0106: ComTailCount    0080   0107
0858: ConBreak        E98C   0694 0826
0891: ConBreak0       E9BA   0883
0893: ConBreak1       E9BD   0861
0755: ConIn           E921   0477 0937 3678
0823: ConsoleOut      E96B   0799 0810 0815 0900 0908 0914 0916 1007
3220: CopyDir         F241   1661 1842
3178: CopyDirEntryToUserDMA F215   1282 1346
2291: CopyDirRecordToFCB EDFD   3361
3214: CopyFCB         F23D   2463
0207: cpmRecordSize   0080   0209 0212 0214 3181 3553 3703
0050: CR              000D   0767 0913 0942 1006
0037: CTRL_C          0003   0886 0989 3659
0038: CTRL_E          0005   0954
0039: CTRL_H          0008   0773 0948 1093
0040: CTRL_L          000C
0041: CTRL_P          0010   0869 0957
0042: CTRL_R          0012   0966
0043: CTRL_S          0013   0882
0044: CTRL_U          0015   0963
0045: CTRL_X          0018   0960
0046: CTRL_Z          001A
3720: currentDisk     F489   1154 1707 2129 2140 2146 2158 2519 2537 2555 3671
3776: currentFileRecord F4BE   1431 1440 1499 1558 1590 2578 2815 3249 3302
3719: currentUserNumber F488   0743 0748 2265 2564
0241: DataBlocks      02C7   0251
0240: DataSectors     0B1C   0241
1371: DeleteFileLoop  EB15   1382
1074: DeleteTheLine   EA7F   0961
1077: DeleteTheLine1  EA80   1084
3780: dirBlockIndex   F4C2   2989 3476
0212: DirBuffSize     0080
0227: DirectoryBlockCount 0002   0252
0214: DirectoryEntryPerRecord 0004   0255
3766: directoryIndex  F4B3   2705 2769 3187
3703: dirEntriesPerRecord 0004   3705
3781: dirEntryIndex   F4C3   2765 2964 2974 3020 3459 3461 3470 3489
3705: dirEntryMask    0003   2766 3471
3704: dirEntryShift   0002   3490
0211: DirEntrySize    0020   0214 0252
3186: DirLocationToReturnLoc F222   1373 1656 1838
3782: dirRecord       F4C5   3493 3544 3563
3762: diskAccessType  F4AE   1426 1491 1580 2813 2830
0199: DiskCommandBlock 0046
0198: DiskControlByte 0045
0201: DiskControlTable 0040
0398: diskf           000B
3767: diskMapIndex    F4B4   1507 1530
1427: DiskRead        EB39   1922
0203: DiskReadCode    0001
0208: diskSectorSize  0200   0209 0230 0238
0197: DiskStatusLocation 0043
1492: DiskWrite       EB7C   1964
1565: DiskWrite1      EC03   1561
1575: DiskWrite2      EC0C   1569
1593: DiskWriteCleanup EC29   1579 1582
1591: DiskWriteCleanup0 EC27   1588
0204: DiskWriteCode   0002
1489: DiskWriteSeq    EB77
3668: DisplayErrorAndWait F43B   3658 3664
3393: DivideHLby8     F30C   2208 3088 3091
0110: DMABuffer       0080   1156 3727
0053: DOLLAR          0024   0781 2271
0253: dpb3hdAL0       00C0
0254: dpb3hdAL1       0000
0249: dpb3hdBLM       000F
0248: dpb3hdBSH       0004
0255: dpb3hdCKS       0020
0252: dpb3hdDRM       007F   0255
0251: dpb3hdDSM       02C6
0250: dpb3hdEXM       0000
0257: dpb3hdNOH       0002
0256: dpb3hdOFF       0001
0247: dpb3hdSPT       0090
3749: dpbBLM          F4A2   3300
3748: dpbBSH          F4A1   3247 3292
3754: dpbCKS          F4AA   3543
3753: dpbDABM         F4A8   2238
3752: dpbDRM          F4A6   2524 3458
3751: dpbDSM          F4A4   2191 2207 2223 3087
3756: dpbEnd          F4AE   3757
3750: dpbEXM          F4A3   2583 2682 3329
3755: dpbOFF          F4AC   2473 3527
3757: dpbSize         000F   2187
3747: dpbSPT          F49F   3500
3746: dpbStart        F49F   2186 3757
0430: DUMMY           E8A9   0425 0426
3712: emptyDir        00E5   1377 2261 2722 3724
3724: emptyFCB        F48A   2440
0114: END_OF_FILE     001A
0035: EndOfMessage    0000
1000: EndRead         EA34   0943 0946
3772: entryDisk       F4BA   0372 2556
0268: EOD             FFFF   2963
0062: EQUAL_SIGN      003D
3684: ErrMsg_BadSector F464   3657
3682: ErrMsg_BDOS     F454   3674
3683: ErrMsg_BDOS_DISK F460   3673
3687: ErrMsg_ReadOnlyDisk F47F   3649
3686: ErrMsg_ReadOnlyFile F476   3653
3685: ErrMsg_Selection F46F   3645
3656: Error_BadSector F429   2511 2806
3648: Error_DiskReadOnly F41D   3195
3652: Error_FileReadOnly F423   3207
3644: Error_Select    F417   2139
1122: exitParameterByte EAB6   0484 0587 0695 0720 0744 1441 1522 1548 1585 1708 2275 2335 2430 2767 2781 2875 2882 2894 2901 2909 3188 3365 3441
1123: exitParameterWord EAB6   0328 0379 0522 0606 1685 1746 1790 1858
3775: extentValue     F4BD   2585
0027: FALSE           0000   0876 1045 1378 1493 1962 2197 2714
0102: FCB1            005C   0103
0103: FCB2            006C
3764: fcbCopiedFlag   F4B1   2423 3316 3332
3701: fcbCurrentRecord 0021
3773: fcbDisk         F4BB   0330 0367 2558
3698: fcbDiskMapIndex 0010   1528 1651 1659 2357 2362 3039 3041 3261
3694: fcbExtIndex     000C   1369 1646 1660 1834 1841 1997 2306 2405 2414 2604 2746 2859 2879 2923 3338
3699: fcbExtIndexLSB  000C
3700: fcbExtIndexMSB  000E
3693: fcbHiddenfileIndex 000A
3691: fcbLength       0020   2300 2362 2405 2455 3041 3216 3703 3713
3697: fcbRCIndex      000F   2013 2309 2327 2414 2593 2596
3774: fcbRecordCount  F4BC   1432 1559 2581 2819
3692: fcbROfileIndex  0009   3202
3695: fcbS1Index      000D   2459 2743
3696: fcbS2Index      000E   2342 2649 2660 2671 2863 2880 2905 2940 3338
3706: fcbShift        0005   3472
1516: FindAvailableBlock EBB3   1510
1524: FoundAvailableBlock EBC0   1520
3148: FoundFreeOctet  F1F0   3118 3123 3132 3140
3154: FoundFreeOctet1 F1F6   3150
3156: FoundFreeOctet2 F1F7   3152
3158: FoundFreeOctet3 F1FA   3161
3164: FoundFreeOctet4 F202   3166
3771: fResel          F4B9   0331 0361 2546
0428: functionCount   0028   0340
0385: functionTable   E857   0345 0398 0428
3236: GetBlockNumber  F258   1445 1502
3084: GetClosestBlock F19F   1517
2986: GetCurrentDirectoryRecord F150   1376 2012 2260 2296 2356 2732 3038 3199 3227
3271: GetDiskMap16Bit F284   3266
3246: GetDiskMapIndex F265   1506 3237
3250: GetDiskMapIndexLoop F26C   3252
3259: GetDiskMapValue F272   1513 3240
2602: GetExtentAddress EF90   2292 2582 3321
2591: GetFcbRecordDetails EF83   2575 2812
2009: GetFileSize1    ECD4   2036
2034: GetFileSize2    ECF4   2027
2037: GetFileSizeExit ECF9   2011
2713: GetNextDirectoryRecord F00B   1345 1381 1663 1843 2035 2751 2756
2731: GetNextDirectoryRecord1 F025   2723
2916: GetRandomRecordPosition F113   2014 2067
0063: GREATER_THAN    003E
0052: HASH_TAG        0023   0899
1547: HaveWriteBlock  EBE4   1505
3702: highestRecordNumber 007F   1500 1578
2470: Home            EEED   2246 2711
1097: IgnoreTheLine   EA9D   0964
3727: initDAMAddress  F48F   1157 1729 2494 3180
2206: InitDisk        ED84   2152
2253: InitDisk1       EDC9   2263 2281
2276: InitDisk2       EDEA   2267 2272
2646: InitializeExtentNumberMSB EFBE   1198 1277 1614
0094: IOBYTE          0003   0605 0625
3587: IsBitSet        F3E9   2143 2539 3608 3620
3594: IsBitSet1       F3F0   3592
3589: IsBitSetLoop    F3EA   3597
2535: IsDiskWriteProtected EF35   2336 3193
0962: IsItDeleteTheLineU EA12
0959: IsItDeleteTheLineX EA0E
0956: IsItPrintToggle EA0A
1046: IsItPrintToggle1 EA62   1044
0950: IsItRubout      EA02
0953: IsPhysicalEOL   EA06
0766: IsPrintableASCII E92C   0478 0794
1031: ItIsPhysicalEOL EA50   0955
1038: ItIsPrintToggle EA57   0958
1019: ItIsRubout      EA47   0952
1112: keyboardByte    EAAF   0756 0859 0892
2631: Left            EFAF   2633
0066: LEFT_ARROW      005F
0123: LengthInBytes   2000   0124 0128 0238
0124: LengthInK       0009
0061: LESS_THAN       003C
0049: LF              000A   0769 0846 0915 0944
1060: LL1             EA6F   1068
0028: LO_NIBBLE_MASK  000F   0747 2936
3726: loggedDisks     F48D   1152 1684 2142 2148 2150
3116: LookRight       F1C4   3126
2436: MakeNewFile     EEB3   1616 2892 3355
2236: Mark4Directory  EDB1   2228
1544: MarkNewBlock    EBDF   1538
3708: maxExtValue     001F   2691 3324
0126: MemorySize      0040   0128
3421: Merge           F320   2385 2387
2364: MergeAllocationMaps EE61   2402
2379: MergeDirEntryNot0 EE72   2376
2374: MergeFCBisNot0  EE6D   2372
2398: MergeMapLoop    EE8A   2382
2384: MergeWordMaps   EE77   2367
3709: moduleMask      000F   3342
3405: MultiplyHLby8   F316   2222 3172
0239: myOffset        0001   0240 0256
3711: nameLength      000F   1279 2286 2350 2449 2455 3346
2778: NoDirRecordsMatch F060   2717 2729
3144: NoFreeBlocks    F1EC   3133 3141
3128: NoMoreLeft      F1D6   3124
3130: NoMoreLeftLoop  F1D7   3134
3136: NoMoreRight     F1E1   3119
3138: NoMoreRightLoop F1E2   3142
2563: NoSelect        EF63   2553
1453: NothingRead     EB71   1437 1443 1447
0888: NothingWaiting  E9B8   0879
0223: NumberOfHeads   0002   0234 0236 0247 0257
0220: NumberOfLogicalDisks 0004
2285: OpenFile        EDF4   1200 2881
3314: OpenNextExt     F2A8   1438 1584
3345: OpenNextExt1    F2D4   3334
3362: OpenNextExt3    F2F1   3358
3368: OpenNextExtError F2F9   3343 3353 3357
3337: OpenNextModule  F2CA   3326
2325: OpenSetRecordCount EE2C   2321 2323
1121: paramDE         EAB4   0319 0365 0647 0923 1002 1057 1271 1343 1496 1527 1649 1728 2000 2065 2299 2326 2341 2360 2438 2441 2446 2458 2547 2565 2592 2603 2648 2659 2670 2708 2832 3224 3260
1120: paramE          EAB3   0321 0373 0740 2128 2551
0054: PERCENT         0025
0056: PERIOD          002E
0097: Pg0CurentDisk   0004
0096: Pg0CurentUser   0004   0097
0779: Print           E93B   0650 0788 3675 3677
1114: printEchoFlag   EAB0   0834 0872 1041
0064: QMARK           003F   1273 2739
1280: QMarkFind       EAF5   1274
0090: RAM             0000   0092 0093 0094 0096 0099 0102 0105 0110 0112
3761: RANDOM_ACCESS   0000
2828: RandomSeek      F093   1921 1963
2868: RandomSeekClose F0D1   2861
2906: RandomSeekError F10B   2856
2904: RandomSeekErrorBadSeek F107   2877 2890 2896
2898: RandomSeekExit  F101   2866 2884
2508: ReadBuffer      EF15   1450 3449
3457: ReadDirectory   F33D   2256 2715
3469: ReadDirectory0  F351   3464
3473: ReadDirectory1  F358   3475
3447: ReadDirRecord   F334   3482
0980: ReadEchoRubOut  EA1E   1028
3765: readModeFlag    F4B2   1429 1494 3351
0933: ReadNext        E9ED   0997 1023 1049 1071
0936: ReadNext0       E9EF   1016 1035
3725: readOnlyVector  F48B   1151 1789 2517 2522 2536
0920: ReadString      E9E0   0680 1081 1103
3636: ReAlignMap1     F410   3634
3631: ReAlignMapLoop  F40A   3639
3629: ReAlignVector   F409   3612
1444: RecordOK        EB5C   1434
3714: recordRandom    0021   2001 2069 3715 3716 3717
3715: recordRandomLSB 0021   2833 2836
3716: recordRandomMSB 0022   2838
3717: recordRandomOVF 0023   2852
3713: recordSeq       0020   2066 2596 2858 3714
0232: RecordsPerBlock 0010
0216: RecordsPerExtent 0080   1436 2324 3702
0209: recordsPerSector 0004   0232 0247
1654: RenameLoop      EC49   1664
1052: RepeatLine      EA66   0967
2544: ReselectDisk    EF40   1199 1229 1278 1344 1367 1423 1488 1615 1644 1833 1919 1961 1996
2668: ResetFileWriteFlag EFD8   1545 1571
3618: ResetVectorBit  F402
0360: ReturnToCaller  E832   0334
0376: ReturnToCaller1 E84D   0363 0369 0585
2639: Right           EFB9   2637 2641
3379: RotateRightHLbyB F2FF   3387
3384: RotateRightHLbyB1 F305   3382
0067: RUBOUT          007F   0951
3036: ScanDiskMap     F174   1379 2279
3043: ScanDiskMap0    F17E   3075
3068: ScanDiskMap2    F195   3057
3059: ScanDiskMapWord F18F   3051
3769: searchAddress   F4B6   1342 2709 2719
2703: SearchForDirectoryRecord EFF6   1281 1370 1647 1835 1998 2287 2351 2443 3347
3768: searchLength    F4B5   2706 2733
0261: SectorMask      0003
0226: SectorsPerBlock 0004   0230 0232 0235 0241 0261
0236: SectorsPerCylinder 0024   0239 0240
0225: SectorsPerTrack 0012   0234 0236 0247
3497: Seek            F37C   1449 1553 3494
3502: Seek0           F386   3506
3488: SeekDir         F36B   2425 3231 3481
2137: Select          ED1D   1159 2133
2127: SelectCurrent   ED12   0374 1182 2561
2157: SelectDisk      ED3E   2138
2200: SelectDisk1     ED80   2196
0060: SEMICOLON       003B
3760: SEQ_ACCESS      0001   1425 1490
3291: SetActualRecordAdd F290   1448 1552
3296: SetActualRecordAddLoop F297   3298
1836: SetAttributesLoop EC8E   1844
2231: SetBitLoop      EDAC   2234
2493: SetDataDMA      EF07   1158 1730 2793 3450
2497: SetDirDMA       EF0C   2790 3448
3000: SetDirectoryEntry F15E   2280 2462
2516: SetDiskReadOnly EF1D   1772 3574
2500: SetDMA          EF0F   2495
2962: SetEndDirectory F140   2251 2710 2779 3465
3439: SetExitParamTo1 F32E   1454 1501 3369
2657: SetFileWriteFlag EFCB   2304 2465 2910 3370
3578: SetNewCheckSum  F3E7   3567
2758: SetNextPosition F049   2740 2744 2752
2574: SetRecordVars   EF6C   1430 1498 3363
2613: SetResetMapBit  EF98   3071
0746: SetUserNumber   E91B   0742
3606: SetVectorBit    F3F9   2149 2521
3408: ShiftLeftHLbyB  F318   3412
3396: ShiftRightHLbyB F30E   2623 3400 3491
0912: showCRLF        E9D6   0901 1034 3670
0898: showHashCRLF    E9C0   1055 1098
0902: showHashCRLF1   E9C8   0909
0051: SPACE           0020   0775 0814 0843 0907 1089 1099 1101
0267: STACK_SIZE      0020   3785
3785: stackBottom     F4C7
1117: startingColumn  EAB1   0904 0922 1078
3019: StillInDirectory F167   2727 3001 3572
0238: SystemSectors   0011   0239
0048: TAB             0009   0771 0809
0807: TabOut          E958   0482 0502 0786 0795
0813: TabOut0         E95E   0818
2737: TestNextPosition F02E   2763
0877: ToggleFlag1     E9A9   0875
0100: TopRAM          0007
0235: TotalNumberOfBlocks 02D0
0234: TotalNumberOfSectors 0B40   0235 0240
0112: TPA             0100
0224: TracksPerHead   0050   0234
0026: TRUE            FFFF   0873 0894 1042 1428 1920 2194 2201 2255 2278 2422 2545 2787
0065: UNDER_SCORE     005F
3360: UpdateFCB       F2EE   3335 3349
2811: UpdateRecordVariables F081   1451 1583 1594
1110: usersStack      EAAD   0323 0377
1228: vCloseFile      EADD   0403
1995: vComputeFileSize ECBF   0422
0476: vConsoleIn      E8AD   0387
0501: vConsoleOut     E8BE   0388
1366: vDeleteFile     EB0A   0406
0574: vDirectConIO    E8D1   0392
0582: vDirectConIO1   E8D9   0577
0266: VERSION         0020   0719
1269: vFindFirst      EAE3   0404
1341: vFindNext       EAFB   0405
1744: vGetAllocAddr   EC75   0414
0693: vGetConsoleStatus E900   0397
1706: vGetCurrentDisk EC65   0412
1856: vGetDiskParamBlock ECA0   0418
0604: vGetIOBYTE      E8E7   0393
1683: vGetLoginVector EC5E   0411
1788: vGetReadOnlyMap EC7F   0416
0739: vGetSetUserNumber E90D   0419
0718: vGetVersion     E907   0399
0552: vListOut        E8CD   0391
1613: vMakeFile       EC2C   0409
1197: vOpenFile       EAD4   0402
0646: vPrintString    E8F3   0395
0538: vPunchOut       E8C9   0390
0520: vReaderIn       E8C2   0389
1918: vReadRandom     ECA7   0420
1422: vReadSeq        EB31   0407
0679: vReadString     E8FC   0396
1643: vRenameFile     EC35   0410
2098: vResetDrive     ED0E   0424
1149: vResetSystem    EAB8   0400
1181: vSelectDisk     EAD1   0401
1727: vSetDMA         EC6C   0413
1832: vSetFileAttributes EC86   0417
0624: vSetIOBYTE      E8EE   0394
2064: vSetRandomRecord ECFB   0423
0447: vSystemReset    E8AA   0386
1771: vWriteProtectDisk EC7C   0415
1960: vWriteRandom    ECB3   0421
2122: vWriteRandom0Fill ED11   0427
1487: vWriteSeq       EB74   0408
3663: WaitBeforeBoot  F435   3646 3650 3654
0092: WarmBoot        0000   0887 0993 3660 3665
3281: WasBlockAllocated F28A   1446 1503
0031: WORD            0002   1121 1123
0276: WriteAllocated  0000   1504
2803: WriteBuffer     F079   1556 2792
0278: WriteCleanBuffer 0002   1546 1564
2785: WriteDir        F069   1380 2426 3232
0277: WriteDirectory  0001   2791
3710: writeFlagMask   0080
3793: Z_HighestLocation F507   3794
3794: Z_MemoryLeft    00F8
