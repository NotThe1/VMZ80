0001: E800         ;     File created by MakeZ80Source on Tue Sep 18 12:41:03 EDT 2018 from:
0002: E800         ;     C:\Users\admin\Dropbox\Resources\CPM\CurrentOS\8080\BDOSX.asm
0003: E800         ; BDOS.Z80
0004: E800         ;  in process Clean up
0005: E800         ; 2019-02-29 Version 1.0
0006: E800         ; 2019-02-04 Fixed bdosStack problem
0007: E800         ; 2019-01-10	Last rev before remaking  FInd nearest Block
0008: E800         ; 2019-01-11 - BDOS 0.B  - Function 0-A Refactored to Z80 idiom
0009: E800         ; 2018-12-28 Started to refactor to Z80 idiom
0010: E800         ; 2018-03-31 added vector for BDOS Call 5 -ListOut
0011: E800         ; 2018-03-02 Refactored the CP/M Suite
0012: E800         ; 2018-02-12 fixed allocate 16 bit problem
0013: E800         ; 2014-01-16 extended from part of newOS (newBDOS)
0014: E800         ; 2014-03-14  :  Frank Martyn
0015: E800             fcbExtIndexLSB EQU    0CH                  ; 12
0016: E800             fcbExtIndexMSB EQU    0EH                  ; 14   Bit 7 = Write protected
0017: E800
0018: E800                        Include ./stdHeader.Z80
0019: E800         ;<<<<<<<<<<<<<<<<<<<<<<< Include >>>>>>>>>>>>>>>>
0020: E800         ;     File created by MakeZ80Source on Mon Sep 17 16:25:01 EDT 2018 from:
0021: E800         ;     C:\Users\admin\Dropbox\Resources\CPM\CurrentOS\8080\stdHeader.asm
0022: E800         ; stdHeader.asm
0023: E800         ; standard equates
0024: E800
0025: E800         ; 2017-03-02 Refactored the CP/M Suite
0026: E800
0027: E800
0028: E800             TRUE       EQU    -1                   ; not false
0029: E800             FALSE      EQU    0000H
0030: E800             ON         EQU    -1
0031: E800             OFF        EQU    0000H
0032: E800             LO_NIBBLE_MASK EQU    0FH                  ; mask used to obtain the bytes low four bits
0033: E800
0034: E800             BYTE       EQU    1                    ; number of bytes for "byte" type
0035: E800             WORD       EQU    2                    ; number of bytes for "word" type
0036: E800
0037: E800
0038: E800             ASCII_MASK EQU    7FH                  ; Ascii mask 7 bits
0039: E800             ZERO       EQU    00H                  ; Zero
0040: E800             EndOfMessage EQU    00H
0041: E800
0042: E800             CTRL_C     EQU    03H                  ; ETX
0043: E800             CTRL_E     EQU    05H                  ; physical eol
0044: E800             CTRL_H     EQU    08H                  ; backspace
0045: E800             CTRL_K     EQU    0BH                  ; VT - Vertical tab
0046: E800             CTRL_L     EQU    0CH                  ; FF - Form feed
0047: E800             CTRL_P     EQU    10H                  ; prnt toggle
0048: E800             CTRL_R     EQU    12H                  ; repeat line
0049: E800             CTRL_S     EQU    13H                  ; X-OFF stop/start screen
0050: E800             CTRL_U     EQU    15H                  ; line delete
0051: E800             CTRL_X     EQU    18H                  ; =ctl-u
0052: E800             CTRL_Z     EQU    1AH                  ; end of file
0053: E800
0054: E800             NULL       EQU    00H                  ; Null
0055: E800             SOH        EQU    01H                  ; Start of Heading
0056: E800             BELL       EQU    07H                  ; Bell
0057: E800             TAB        EQU    09H                  ; Tab
0058: E800             LF         EQU    0AH                  ; Line Feed
0059: E800             CR         EQU    0DH                  ; Carriage Return
0060: E800             SPACE      EQU    20H                  ; Space
0061: E800             EXCLAIM_POINT EQU    21H                  ; Exclamtion Point
0062: E800             HASH_TAG   EQU    23H                  ; Sharp sign #
0063: E800             DOLLAR     EQU    24H                  ; Dollar Sign
0064: E800             PERCENT    EQU    25H                  ; Percent Sign
0065: E800             L_PAREN    EQU    28H                  ; Left Paenthesis (
0066: E800             R_PAREN    EQU    29H                  ; Right Paenthesis )
0067: E800             ASTERISK   EQU    2AH                  ; Asterisk *
0068: E800             PLUS_SIGN  EQU    2BH                  ; Plus sign +
0069: E800             COMMA      EQU    2CH                  ; Comma
0070: E800             DASH       EQU    2DH                  ; Dash Hyphen -
0071: E800             PERIOD     EQU    2EH                  ; Period
0072: E800             SLASH      EQU    2FH                  ; /
0073: E800             ASCII_ZERO EQU    30H                  ; zero
0074: E800             COLON      EQU    3AH                  ; Colon
0075: E800
0076: E800             SEMICOLON  EQU    3BH                  ; Semi Colon
0077: E800             LESS_THAN  EQU    3CH                  ; Less Than <
0078: E800             EQUAL_SIGN EQU    3DH                  ; Equal Sign
0079: E800             GREATER_THAN EQU    3EH                  ; Greater Than >
0080: E800             QMARK      EQU    3FH                  ; Question Mark
0081: E800             UNDER_SCORE EQU    5FH                  ; under score _
0082: E800             LEFT_ARROW EQU    5FH                  ; Left Arrow ?
0083: E800             RUBOUT     EQU    7FH                  ; Delete Key
0084: E800
0085: E800
0086: E800             ASCII_A    EQU    'A'
0087: E800             ASCII_C    EQU    'C'
0088: E800             ASCII_K    EQU    'K'
0089: E800             ASCII_N    EQU    'N'
0090: E800             ASCII_Q    EQU    'Q'
0091: E800             ASCII_R    EQU    'R'
0092: E800             ASCII_W    EQU    'W'
0093: E800             ASCII_Y    EQU    'Y'
0094: E800             CARET      EQU    '^'
0095: E800             ASCII_LO_A EQU    'a'
0096: E800             ASCII_LO_K EQU    'k'
0097: E800             ASCII_LO_P EQU    'p'
0098: E800             LEFT_CURLY EQU    '{'                  ; Left curly Bracket
0099: E800
0100: E800         ;<<<<<<<<<<<<<<<<<<<<<<< Include >>>>>>>>>>>>>>>>
0101: E800                        Include ./osHeader.Z80
0102: E800         ;<<<<<<<<<<<<<<<<<<<<<<< Include >>>>>>>>>>>>>>>>
0103: E800         ;     File created by MakeZ80Source on Mon Sep 17 16:25:47 EDT 2018 from:
0104: E800         ;     C:\Users\admin\Dropbox\Resources\CPM\CurrentOS\8080\osHeader.asm
0105: E800         ; osHeader.Z80
0106: E800
0107: E800         ; 2018-12-28 Changed BDOSEntry to remove dead space in BDOS
0108: E800         ; 2017-03-02 Refactored the CP/M Suite
0109: E800
0110: E800         ; Contains the Equates used by the CP/M system
0111: E800
0112: E800         ;------------------------Page Zero Constants ---------------------------------
0113: E800             RAM        EQU    0                    ; Start of RAM ( and the Base page)
0114: E800
0115: E800             WarmBoot   EQU    RAM + 0              ; Contains a JMP instruction to warm boot in BIOS
0116: E800             BIOSPAGE   EQU    RAM + 2              ; BIOS Jump Vector Page
0117: E800             IOBYTE     EQU    RAM + 3              ; Input/Output redirection byte
0118: E800
0119: E800             Pg0CurentUser EQU    RAM + 4              ; Current user ( bits 7-4)
0120: E800             Pg0CurentDisk EQU    Pg0CurentUser        ; Default logical disk (bits 0-3)
0121: E800
0122: E800             BDOSE      EQU    RAM + 5              ; Contains a JMP to BDOS entry
0123: E800             TopRAM     EQU    BDOSE+2              ; Top page of usable RAM
0124: E800
0125: E800             FCB1       EQU    RAM + 05CH           ; File Control Block #1
0126: E800             FCB2       EQU    FCB1 + 16            ; File Control Block #2
0127: E800
0128: E800             ComTail    EQU    RAM + 080H           ; Complete command tail
0129: E800             ComTailCount EQU    ComTail + 1          ; Count of the number of char in tail
0130: E800             ComTailChars EQU    ComTailCount + 1     ; Complete Command tail up-cased, w/o trailing CR
0131: E800         ;-----------------------------------------------------------------------
0132: E800
0133: E800             DMABuffer  EQU    RAM + 080H           ; Default "DMA" address used as buffer
0134: E800         ;-----------------------------------------------------------------------
0135: E800             TPA        EQU    RAM + 0100H          ; Start of Transient program Area
0136: E800         ;-----------------------------------------------------------------------
0137: E800             END_OF_FILE EQU    1AH                  ; end of file
0138: E800         ;-----------------------------------------------------------------------
0139: E800
0140: E800         ;--------------- CP/M Constants -----------------------------------------
0141: E800
0142: E800             CCPLength  EQU    0800H                ; Constant
0143: E800             BDOSLength EQU    0E00H                ; Constant 0E00H
0144: E800             BIOSLength EQU    0A00H                ; Constant 0900H
0145: E800
0146: E800             LengthInBytes EQU    CCPLength + BDOSLength + BIOSLength
0147: E800             LengthInK  EQU    (LengthInBytes/1024) + 1
0148: E800
0149: E800             MemorySize EQU    64
0150: E800
0151: E800             CCPEntry   EQU    (MemorySize * 1024) - LengthInBytes
0152: E800
0153: E800             BDOSBase   EQU    CCPEntry + CCPLength
0154: E800             BDOSEntry  EQU    BDOSBase
0155: E800
0156: E800             BIOSBase   EQU    BDOSBase + BDOSLength
0157: E800             BIOSStart  EQU    CCPEntry + CCPLength + BDOSLength
0158: E800         ;-----------------------------------------------------------------------
0159: E800
0160: E800         ;------------------- BDOS System Call Equates --------------------------
0161: E800             fConsoleIn EQU    01H                  ; rcharf - Console Input
0162: E800             fConsoleOut EQU    02H                  ; pcharf - Console Output
0163: E800             fPrintString EQU    09H                  ; pbuff	- Print String
0164: E800             fReadString EQU    0AH                  ; rbuff	- Read Console String
0165: E800             fGetConsoleStatus EQU    0BH                  ; breakf - Get Console Status
0166: E800             fGetVersion EQU    0CH                  ; liftf	- Return Version Number
0167: E800             fResetSystem EQU    0DH                  ; initf	- Reset Disk System
0168: E800             fSelectDisk EQU    0EH                  ; self	- Select Disk
0169: E800             fOpenFile  EQU    0FH                  ; openf	- Open File
0170: E800             fCloseFile EQU    10H                  ; closef - Close File
0171: E800             fSearchFirst EQU    11H                  ; searf	- Search For First
0172: E800             fSearchNext EQU    12H                  ; searnf - Search for Next
0173: E800             fDeleteFile EQU    13H                  ; delf - Delete File
0174: E800             fReadSeq   EQU    14H                  ; dreadf - Read Sequential
0175: E800             fWriteSeq  EQU    15H                  ; dwritf - Write Sequential
0176: E800             fMakeFile  EQU    16H                  ; makef	- Make File
0177: E800             fRenameFile EQU    17H                  ; renf	- Rename File
0178: E800             fGetLoginVector EQU    18H                  ; logf	- Return Login Vector
0179: E800             fGetCurrentDisk EQU    19H                  ; cself	- Return Current Disk
0180: E800             fSetDMA    EQU    1AH                  ; dmaf	- Set DMA address
0181: E800             fGetSetUserNumber EQU    20H                  ; userf	- Set/Get User Code
0182: E800         ;-----------------------------------------------------------------------
0183: E800
0184: E800
0185: E800
0186: E800
0187: E800
0188: E800         ;*******************************************************************************
0189: E800         ; These are the values handed over by the BDOS when it calls the Writer operation
0190: E800         ; The allocated.unallocated indicates whether the BDOS is set to write to an
0191: E800         ; unallocated allocation block (it only indicates this for the first 128 byte
0192: E800         ; sector write) or to an allocation block that has already been allocated to a
0193: E800         ; file. The BDOS also indicates if it is set to write to the file directory
0194: E800         ;*******************************************************************************
0195: E800             WriteAllocated EQU    00H
0196: E800             WriteDirectory EQU    01H
0197: E800             WriteCleanBuffer EQU    02H
0198: E800
0199: E800
0200: E800         ;<<<<<<<<<<<<<<<<<<<<<<< Include >>>>>>>>>>>>>>>>
0201: E800                        Include ./diskHeader.Z80
0202: E800         ;<<<<<<<<<<<<<<<<<<<<<<< Include >>>>>>>>>>>>>>>>
0203: E800         ;     File created by MakeZ80Source on Mon Sep 17 16:26:22 EDT 2018 from:
0204: E800         ;     C:\Users\admin\Dropbox\Resources\CPM\CurrentOS\8080\diskHeader.asm
0205: E800         ; diskHeader.asm
0206: E800
0207: E800         ; 2017-03-02 Refactored the CP/M Suite
0208: E800
0209: E800         ; needs osHeader.asm declared before this is used !!!!!!!
0210: E800
0211: E800         ; Contains the Equates used by the CP/M system to handle disks
0212: E800
0213: E800
0214: E800         ;*******************************************************************************
0215: E800         ;
0216: E800         ;     Disk related values
0217: E800         ;
0218: E800         ;
0219: E800         ;*******************************************************************************
0220: E800             DiskStatusLocation EQU    043H                 ; status after disk I/O placed here
0221: E800             DiskControlByte EQU    045H                 ; control byte for disk I/O
0222: E800             DiskCommandBlock EQU    046H                 ; Control Table Pointer
0223: E800         ; for boot
0224: E800             DiskControlTable EQU    0040H
0225: E800
0226: E800             DiskReadCode EQU    01H                  ; Code for Read
0227: E800             DiskWriteCode EQU    02H                  ; Code for Write
0228: E800
0229: E800
0230: E800             cpmRecordSize EQU    080H                 ; (128) record size that CP/M uses
0231: E800             diskSectorSize EQU    200H                 ; (512) size of physical disk I/O
0232: E800             recordsPerSector EQU    diskSectorSize/cpmRecordSize
0233: E800
0234: E800             DirEntrySize EQU    20H                  ; (32)
0235: E800             DirBuffSize EQU    cpmRecordSize
0236: E800
0237: E800             DirectoryEntryPerRecord EQU    cpmRecordSize / DirEntrySize
0238: E800
0239: E800             RecordsPerExtent EQU    080H                 ; extent Record capacity
0240: E800
0241: E800
0242: E800         ;-------------------------------------------------------------------------------------
0243: E800             NumberOfLogicalDisks EQU    4                    ; max number of disk in this system
0244: E800
0245: E800         ;----------------------3.5 Double Density Disk Geometry----------------------------------------
0246: E800             NumberOfHeads EQU    02H                  ; number of heads
0247: E800             TracksPerHead EQU    50H                  ; 80
0248: E800             SectorsPerTrack EQU    12H                  ; 18 -  1 head only
0249: E800             SectorsPerBlock EQU    04H                  ; 2048 bytes
0250: E800             DirectoryBlockCount EQU    02H                  ;
0251: E800         ;-----------------------------------------------------------------------
0252: E800
0253: E800             BlockSize  EQU    SectorsPerBlock * 	diskSectorSize ; Size in Bytes
0254: E800
0255: E800             RecordsPerBlock EQU    recordsPerSector * SectorsPerBlock
0256: E800
0257: E800             TotalNumberOfSectors EQU    SectorsPerTrack * TracksPerHead * NumberOfHeads
0258: E800             TotalNumberOfBlocks EQU    TotalNumberOfSectors / SectorsPerBlock
0259: E800             SectorsPerCylinder EQU    SectorsPerTrack * NumberOfHeads
0260: E800
0261: E800             SystemSectors EQU    LengthInBytes / diskSectorSize + 1 ; need to account for boot sector
0262: E800             myOffset   EQU    (SystemSectors / SectorsPerCylinder) + 1 ;
0263: E800             DataSectors EQU    TotalNumberOfSectors - (SectorsPerCylinder * myOffset)
0264: E800             DataBlocks EQU    DataSectors / 	SectorsPerBlock
0265: E800
0266: E800         ;-----------------------------------------------------------------------
0267: E800         ;; Disk block parameters for F3HD - 3.5 HD   1.44 MB Diskette
0268: E800         ;-----------------------------------------------------------------------
0269: E800         ;dpb3hdSPT				EQU		0090H			; cpmRecords per track- (144)
0270: E800             dpb3hdSPT  EQU    recordsPerSector * SectorsPerTrack * NumberOfHeads ; SPT - records per Clynder
0271: E800             dpb3hdBSH  EQU    04H                  ; Block Shift Factor - BlockSize = 128 * (2**BSH)											; BSH = Log2(BlockSize/cpmRecordSize)
0272: E800             dpb3hdBLM  EQU    0FH                  ; BlockMask = (2**BSH) -1
0273: E800             dpb3hdEXM  EQU    00H                  ; Extent mask = (PhysicalExtents/LogicalExtents) - 1
0274: E800             dpb3hdDSM  EQU    DataBlocks -1        ; Maximum allocation block number (710)
0275: E800             dpb3hdDRM  EQU    ((BlockSize *  DirectoryBlockCount)	/	DirEntrySize) -1 ; DRM Number of directory entries - 1 (127)
0276: E800             dpb3hdAL0  EQU    0C0H                 ; Bit map for reserving 1 alloc. block
0277: E800             dpb3hdAL1  EQU    00H                  ;  for each file directory
0278: E800             dpb3hdCKS  EQU    (dpb3hdDRM +1)/ DirectoryEntryPerRecord ; Disk change work area size (32)
0279: E800             dpb3hdOFF  EQU    myOffset             ; Number of tracks before directory
0280: E800             dpb3hdNOH  EQU    NumberOfHeads
0281: E800
0282: E800         ;*******************************************************************************
0283: E800
0284: E800             SectorMask EQU    SectorsPerBlock - 1
0285: E800
0286: E800         ;***************************************************************************
0287: E800
0288: E800         ;<<<<<<<<<<<<<<<<<<<<<<< Include >>>>>>>>>>>>>>>>
0289: E800
0290: E800             VERSION    EQU    20H                  ; Version 2.0
0291: E800             STACK_SIZE EQU    20H                  ; Make stack big enough
0292: E800             EOD        EQU    -1                   ; End of Directory
0293: E800
0294: E800         ;************************ BIOS Function Constants **************************;
0295: E800             bcBoot     EQU    BIOSStart+3*0        ; Cold Boot function	            ;
0296: E800             bcWboot    EQU    BIOSStart+3*1        ; Warm Boot function                ;
0297: E800             bcConst    EQU    BIOSStart+3*2        ; Console Status function           ;
0298: E800             bcConin    EQU    BIOSStart+3*3        ; Console Input function            ;
0299: E800             bcConout   EQU    BIOSStart+3*4        ; Console Output function           ;
0300: E800             bcList     EQU    BIOSStart+3*5        ; List Output function              ;
0301: E800             bcPunch    EQU    BIOSStart+3*6        ; Punch Output function             ;
0302: E800             bcReader   EQU    BIOSStart+3*7        ; Reader Input function             ;
0303: E800             bcHome     EQU    BIOSStart+3*8        ; Disk Home function                ;
0304: E800             bcSeldsk   EQU    BIOSStart+3*9        ; Select Disk function              ;
0305: E800             bcSettrk   EQU    BIOSStart+3*10       ; Set Track function                ;
0306: E800             bcSetsec   EQU    BIOSStart+3*11       ; Set Sector function               ;
0307: E800             bcSetdma   EQU    BIOSStart+3*12       ; Set DMA function                  ;
0308: E800             bcRead     EQU    BIOSStart+3*13       ; Read Disk function                ;
0309: E800             bcWrite    EQU    BIOSStart+3*14       ; Write Disk function               ;
0310: E800             bcListst   EQU    BIOSStart+3*15       ; List Status function              ;
0311: E800             bcSectran  EQU    BIOSStart+3*16       ; Sector Translate                  ;
0312: E800         ;************************ BIOS Function Constants **************************;
0313: E800         ;===========================================================================;
0314: E800         ;	BDOS                                                                    ;
0315: E800         ; Calling into   :                                                          ;
0316: E800         ;					Register  C - Contains BDOS Function Code               ;
0317: E800         ;					Register  A - Holds the Byte argument if any            ;
0318: E800         ;					Register DE - Holds the Word argument if any            ;
0319: E800         ; Returning from :                                                          ;
0320: E800         ;					Register  A - The Byte return value if any              ;
0321: E800         ;					Register HL - The Word return value if any              ;
0322: E800         ;                   ( Register A=L and B=H)                                 ;
0323: E800         ;===========================================================================;
0324: E800
0325: E800
0326: E800                        ORG    BDOSBase
0327: E800
0328: E800         ;===========================BDOS Entry======================================;
0329: E800         ;BDOSEntry:                                                                 ;
0330: E800         ;
0331: E800         ;
0332: E800             BdosStart:                      ;
0333: E800         ;	LD		A,C                                                             ;
0334: E800         ; 	LD		(FunctionValue),A			; Save the function number          ;
0335: E800         ;
0336: E800         ; Save Calling Arguments                                                    ;
0337: E800 ED 53 B4 EA               LD     (paramDE),DE         ; Save the Word Argument            ;
0338: E804 7B                     LD     A,E                  ;
0339: E805 32 B3 EA               LD     (paramE),A           ; Save the Byte argument            ;
0340: E808         ; Save users Stack pointer                                                  ;
0341: E808 ED 73 AD EA               LD     (usersStack),SP      ; Save the User's stack				;
0342: E80C 31 07 F5               LD     SP,bdosStack         ; We will use our own stack			;
0343: E80F         ;
0344: E80F         ; initialize variables                                                      ;
0345: E80F 21 00 00               LD     HL,0000H             ;
0346: E812 22 B6 EA               LD     (exitParameterWord),HL ; Assume all is well for return     ;
0347: E815 AF                     XOR    A                    ;
0348: E816 32 BB F4               LD     (fcbDisk),A          ; Initialize to 00                  ;
0349: E819 32 B9 F4               LD     (fResel),A           ; Clear re selection flag           ;
0350: E81C         ;
0351: E81C         ; Set up for return to caller when Function Completes                       ;
0352: E81C 21 32 E8               LD     HL,ReturnToCaller    ;
0353: E81F E5                     PUSH   HL                   ;Set up to ReturnToCaller           ;
0354: E820         ;
0355: E820         ; is it a valid function number ?	                                        ;
0356: E820         ;	LD		A,(FunctionValue)			; Get the Function Number           ;
0357: E820 79                     LD     A,C                  ;
0358: E821 FE 28                  CP     functionCount        ; make sure its a good number       ;
0359: E823 D0                     RET    NC                   ; exit if not a valid function      ;
0360: E824         ;
0361: E824         ; Calculate the index and get vector to go to	                            ;
0362: E824 4B                     LD     C,E                  ; Assume byte argument              ;
0363: E825 21 57 E8               LD     HL,functionTable     ; Get table base                    ;
0364: E828 5F                     LD     E,A                  ; Function number in E              ;
0365: E829 16 00                  LD     D,0                  ;
0366: E82B 19                     ADD    HL,DE                ; Have byte location                ;
0367: E82C 19                     ADD    HL,DE                ;  but we want a Word offset        ;
0368: E82D 5E                     LD     E,(HL)               ; Get LSB of vector                 ;
0369: E82E 23                     INC    HL                   ;
0370: E82F 56                     LD     D,(HL)               ; Get MSB of vector                 ;
0371: E830 EB                     EX     DE,HL                ; Vector now in HL                  ;
0372: E831         ;
0373: E831         ; Vector to Function is in HL                                               ;
0374: E831 E9                     JP     (HL)                 ; Put it into the Program Counter   ;
0375: E832         ;===========================BDOS Entry======================================;
0376: E832         ;===========================BDOS Exit ======================================;
0377: E832         ;arrive here at end of processing to return to user                         ;
0378: E832             ReturnToCaller:                      ;
0379: E832 3A B9 F4               LD     A,(fResel)           ; get re-selection flag             ;
0380: E835 B7                     OR     A                    ; is it set?                        ;
0381: E836 28 15                  JR     Z,ReturnToCaller1    ;
0382: E838         ;re-selection  may have taken place                                        ;
0383: E838 2A B4 EA               LD     HL,(paramDE)         ;
0384: E83B 36 00                  LD     (HL),0               ;
0385: E83D 3A BB F4               LD     A,(fcbDisk)          ;
0386: E840 B7                     OR     A                    ; Disk = 0?                         ;
0387: E841 28 0A                  JR     Z,ReturnToCaller1    ; exit if yes                  		;
0388: E843         ;
0389: E843 77                     LD     (HL),A               ;
0390: E844 3A BA F4               LD     A,(entryDisk)        ; get back original Disk            ;
0391: E847 32 B3 EA               LD     (paramE),A           ; and select it                     ;
0392: E84A CD 12 ED               CALL   SelectCurrent        ;
0393: E84D         ;
0394: E84D             ReturnToCaller1:                      ;
0395: E84D 2A AD EA               LD     HL,(usersStack)      ;
0396: E850 F9                     LD     SP,HL                ; restore callers stack             ;
0397: E851 2A B6 EA               LD     HL,(exitParameterWord) ;
0398: E854 7D                     LD     A,L                  ;
0399: E855 44                     LD     B,H                  ; BA = exitParameterWord            ;
0400: E856 C9                     RET                         ;
0401: E857         ;===========================BDOS Exit ======================================;
0402: E857
0403: E857         ;++++++++++++++++++++++++++++ Function Vector Table ++++++++++++++++++++++++;
0404: E857             functionTable:                      ;
0405: E857 AA E8                  DW     vSystemReset         ;   0 - System Reset                ;
0406: E859 AD E8                  DW     vConsoleIn           ;   1 - Console Input               ;
0407: E85B BE E8                  DW     vConsoleOut          ;   2 - Console Output              ;
0408: E85D C2 E8                  DW     vReaderIn            ;   3 - Reader Input                ;
0409: E85F C9 E8                  DW     vPunchOut            ;   4 - Punch Output                ;
0410: E861 CD E8                  DW     vListOut             ;   5 - List Output                 ;
0411: E863 D1 E8                  DW     vDirectConIO         ;   6 - Direct Console I/O          ;
0412: E865 E7 E8                  DW     vGetIOBYTE           ;   7 - Get I/O Byte                ;
0413: E867 EE E8                  DW     vSetIOBYTE           ;   8 - Set I/O Byte                ;
0414: E869 F3 E8                  DW     vPrintString         ;   9 - Print String                ;
0415: E86B FC E8                  DW     vReadString          ;   A - Read Console String         ;
0416: E86D 00 E9                  DW     vGetConsoleStatus    ;   B - Get Console Status          ;
0417: E86F             diskf      EQU    ($-functionTable)/2  ; disk functions                    ;
0418: E86F 07 E9                  DW     vGetVersion          ;   C - Return Version Number       ;
0419: E871 B8 EA                  DW     vResetSystem         ;   D - Reset Disk System           ;
0420: E873 D1 EA                  DW     vSelectDisk          ;   E - Select Disk                 ;
0421: E875 D4 EA                  DW     vOpenFile            ;   F - Open File                   ;
0422: E877 DD EA                  DW     vCloseFile           ;  10 - Close File                  ;
0423: E879 E3 EA                  DW     vFindFirst           ;  11 - Search For First            ;
0424: E87B FB EA                  DW     vFindNext            ;  12 - Search for Next             ;
0425: E87D 0A EB                  DW     vDeleteFile          ;  13 - Delete File                 ;
0426: E87F 31 EB                  DW     vReadSeq             ;  14 - Read Sequential             ;
0427: E881 74 EB                  DW     vWriteSeq            ;  15 - Write Sequential            ;
0428: E883 2C EC                  DW     vMakeFile            ;  16 - Make File                   ;
0429: E885 35 EC                  DW     vRenameFile          ;  17 - Rename File                 ;
0430: E887 5E EC                  DW     vGetLoginVector      ;  18 - Return Login Vector         ;
0431: E889 65 EC                  DW     vGetCurrentDisk      ;  19 - Return Current Disk         ;
0432: E88B 6C EC                  DW     vSetDMA              ;  1A - Set DMA address             ;
0433: E88D 75 EC                  DW     vGetAllocAddr        ;  1B - Get ADDR (ALLOC)            ;
0434: E88F 7C EC                  DW     vWriteProtectDisk    ;  1C - Write Protect Disk          ;
0435: E891 7F EC                  DW     vGetReadOnlyMap      ;  1D - Get Read/Only MAP	        ;
0436: E893 86 EC                  DW     vSetFileAttributes   ;  1E - Set File Attributes ??      ;
0437: E895 A0 EC                  DW     vGetDiskParamBlock   ;  1F - Get ADDR (Disk Parameters)  ;
0438: E897 0D E9                  DW     vGetSetUserNumber    ;  20 - Set/Get User Code           ;
0439: E899 A7 EC                  DW     vReadRandom          ;  21 - Read Random                 ;
0440: E89B B3 EC                  DW     vWriteRandom         ;  22 - Write Random                ;
0441: E89D BF EC                  DW     vComputeFileSize     ;  23 - Compute File Size           ;
0442: E89F FB EC                  DW     vSetRandomRecord     ;  24 - Set Random Record           ;
0443: E8A1 0E ED                  DW     vResetDrive          ;  25 - Reset Drive                 ;
0444: E8A3 A9 E8                  DW     DUMMY                ;  26 - Access Drive (not supported);
0445: E8A5 A9 E8                  DW     DUMMY                ;  27 - Free Drive (not supported)  ;
0446: E8A7 11 ED                  DW     vWriteRandom0Fill    ;  28 - Write random w/Fill         ;
0447: E8A9             functionCount EQU    ($-functionTable)/2  ; Number of  functions              ;
0448: E8A9         ;
0449: E8A9             DUMMY:                          ;
0450: E8A9 76                     HALT                        ;
0451: E8AA         ;++++++++++++++++++++++++++++ Function Vector Table ++++++++++++++++++++++++;
0452: E8AA
0453: E8AA         ;-------------------------- System Reset - 0 (0) ---------------------------;
0454: E8AA         ;  The system reset function makes CP/M do a complete reset, exactly the    ;
0455: E8AA         ; same as the warm boot function invoked when you transfer control to the   ;
0456: E8AA         ; WARMBOOT point. In addition to resetting the BDOS, this function reloads  ;
0457: E8AA         ; the CCP, rebuilds the allocation vectors for the currently logged disks,  ;
0458: E8AA         ; sets the DMA address (used byCP/M to address the disk read/write buffer)  ;
0459: E8AA         ; to 80H, marks all disks as being Read/Write status, and transfers control ;
0460: E8AA         ; to the  CCP. The CCP then outputs its prompt to the console.              ;
0461: E8AA         ;																			;
0462: E8AA         ;			Function Code	 :	C = 00H                                     ;
0463: E8AA         ;			Entry Parameters:	None                                        ;
0464: E8AA         ;			Exit Parameters :	Does Not Return								;
0465: E8AA         ;																			;
0466: E8AA         ;-------------------------- System Reset - 0 (0) ---------------------------;
0467: E8AA             vSystemReset:
0468: E8AA C3 03 F6               JP     bcWboot              ; do a Warm Boot
0469: E8AD
0470: E8AD         ;***************************************************************************;
0471: E8AD         ;								IOByte device I/O							;
0472: E8AD         ;***************************************************************************;
0473: E8AD
0474: E8AD
0475: E8AD         ;-------------------------- Read Console Byte - 1 (1) ----------------------;
0476: E8AD         ;  This function reads the next byte of data from the console keyboard and  ;
0477: E8AD         ; puts it into register A. If the character input is a graphic character, it;
0478: E8AD         ; will be echoed back to the console. The only control characters that are  ;
0479: E8AD         ; echoed are  CARRIAGE RETURN, LINE FEED, BACKSPACE, and TAB. In the case   ;
0480: E8AD         ; of a TAB character, the BDOS outputs as many spaces as are required to    ;
0481: E8AD         ; move the cursor to the next multiple of eight columns. All of the other   ;
0482: E8AD         ; control characters, including CONTROL-C, are input but are not echoed.    ;
0483: E8AD         ;  This function also checks for CONTROL-S (XOFF) to see if console output  ;
0484: E8AD         ; should be suspended, and for CONTROL-P (printer echo toggle) to see if    ;
0485: E8AD         ; console output should also be sent to the list device. If CONTROL-S is    ;
0486: E8AD         ; found, further output will be suspended until you type another character. ;
0487: E8AD         ; CONTROL-P will enable the echoing of console output the first time it is  ;
0488: E8AD         ; pressed and disable it the second time. If there is no incoming data      ;
0489: E8AD         ; character, this function will wait until there is one.                    ;
0490: E8AD         ;                                                                           ;
0491: E8AD         ; This is a blocking function                                               ;
0492: E8AD         ;																			;
0493: E8AD         ;																			;
0494: E8AD         ;			Function Code	:	C = 01H                                     ;
0495: E8AD         ;			Entry Parameters:	None                                        ;
0496: E8AD         ;			Exit Parameters :	A = Data byte from console					;
0497: E8AD         ;																			;
0498: E8AD         ;-------------------------- Read Console Byte - 1 (1) ----------------------;
0499: E8AD             vConsoleIn:
0500: E8AD CD 21 E9               CALL   ConIn                ; Don't come back without input
0501: E8B0 CD 2C E9               CALL   IsPrintableASCII     ; CR,LF,TAB,BACK_SPACE or GE SPACE
0502: E8B3 D8                     RET    C                    ; return nothing to echo
0503: E8B4
0504: E8B4 F5                     PUSH   AF                   ; Save printable character
0505: E8B5 4F                     LD     C,A
0506: E8B6 CD 58 E9               CALL   TabOut               ; Send to console. if TAB expand
0507: E8B9 F1                     POP    AF                   ; retrieve exit value
0508: E8BA
0509: E8BA 32 B6 EA               LD     (exitParameterByte),A
0510: E8BD C9                     RET
0511: E8BE
0512: E8BE         ;------------------------- Write Console Byte - 2 (2) -----------------------;
0513: E8BE         ;  This function outputs the data byte in register E to the console. As      ;
0514: E8BE         ; with function 1, if the data byte is a TAB character, it will be expanded  ;
0515: E8BE         ; by the BDOS to the next column that is a multiple of eight. The BDOS also  ;
0516: E8BE         ; checks to see if there is an incoming character, and if there is,          ;
0517: E8BE         ; checks to see if it is a CONTROL-S ,in which case console output is        ;
0518: E8BE         ; suspended or CONTROL-P, in which case echoing of console output to the     ;
0519: E8BE         ; printer is  toggled on or off                                              ;
0520: E8BE         ;																			 ;
0521: E8BE         ;			Function Code	:	C = 02H                                      ;
0522: E8BE         ;			Entry Parameters:	E = Data byte to be output					 ;
0523: E8BE         ;			Exit Parameters :	None										 ;
0524: E8BE         ;																			 ;
0525: E8BE         ;------------------------- Write Console Byte - 2 (2) -----------------------;
0526: E8BE         ;BDOS put parameter in C before entering this routine
0527: E8BE             vConsoleOut:
0528: E8BE CD 58 E9               CALL   TabOut
0529: E8C1 C9                     RET
0530: E8C2
0531: E8C2         ;--------------------------- Read Reader Byte - 3 (3) ----------------------;
0532: E8C2         ;   function reads the next character from the logical "reader" device into ;
0533: E8C2         ; register A. In practice, the physical device that is accessed depends     ;
0534: E8C2         ; entirely on how your BIOS is configured. In some systems, there is no     ;
0535: E8C2         ; reader at all; this function will return some arbitrary value such as lAH ;
0536: E8C2         ; (the ASCII CONTROL-Z character, used by CP/M to denote "End of File').    ;
0537: E8C2         ; Control is not returned to the calling program until a character has been ;
0538: E8C2         ; read.                                                                     ;
0539: E8C2         ;                                                                           ;
0540: E8C2         ; This is a blocking function                                               ;
0541: E8C2         ;																			;
0542: E8C2         ;			Function Code	:	C = 03H                                     ;
0543: E8C2         ;			Entry Parameters:	None										;
0544: E8C2         ;			Exit Parameters :	A = Character Input							;
0545: E8C2         ;																			;
0546: E8C2         ;--------------------------- Read Reader Byte - 3 (3) ----------------------;
0547: E8C2             vReaderIn:
0548: E8C2 CD 15 F6               CALL   bcReader
0549: E8C5 32 B6 EA               LD     (exitParameterWord),A
0550: E8C8 C9                     RET
0551: E8C9
0552: E8C9         ;--------------------------- Write Punch Byte - 4 (4) ----------------------;
0553: E8C9         ;  This function is a counterpart to the Read "Reader" Byte It outputs the  ;
0554: E8C9         ; specified character from register E to the logical punch device. Again,   ;
0555: E8C9         ; the actual physical device used, if any, is determined by the BIOS.       ;
0556: E8C9         ; There is no set standard for this device; in some systems the punch       ;
0557: E8C9         ; device is a "bit bucket," so called because it absorbs all data that you  ;
0558: E8C9         ; output to it.                                                             ;
0559: E8C9         ;																			;
0560: E8C9         ;			Function Code	:	C = 04H                                     ;
0561: E8C9         ;			Entry Parameters:	E = Data byte to be output					;
0562: E8C9         ;			Exit Parameters :	None										;
0563: E8C9         ;																			;
0564: E8C9         ;--------------------------- Write Punch Byte - 4 (4) ----------------------;
0565: E8C9         ;BDOS put parameter in C before entering this routine
0566: E8C9             vPunchOut:
0567: E8C9 CD 12 F6               CALL   bcPunch
0568: E8CC C9                     RET
0569: E8CD
0570: E8CD         ;---------------------------- Write List Byte - 5 (5) ----------------------;
0571: E8CD         ;  This function outputs the specified byte in register E to the logical    ;
0572: E8CD         ; list device. As with the reader and the punch, the physical device used   ;
0573: E8CD         ; depends entirely on the BIOS.                                             ;
0574: E8CD         ;																			;
0575: E8CD         ;			Function Code	:	C = 05H                                     ;
0576: E8CD         ;			Entry Parameters:	E = Data byte to be output					;
0577: E8CD         ;			Exit Parameters :	None										;
0578: E8CD         ;																			;
0579: E8CD         ;---------------------------- Write List Byte - 5 (5) ----------------------;
0580: E8CD         ;BDOS put parameter in C before entering this routine
0581: E8CD             vListOut:                       ; func5 (05 - 05) List Output
0582: E8CD CD 0F F6               CALL   bcList               ; direct call to BIOS
0583: E8D0 C9                     RET
0584: E8D1
0585: E8D1         ;--------------------------- Direct Console I/O - 6 (6) --------------------;
0586: E8D1         ;  This function serves double duty: it both inputs and outputs characters  ;
0587: E8D1         ; from the console. However, it bypasses the normal control characters and  ;
0588: E8D1         ; line editing features (such as CONTROL-P and CONTROL-S) normally          ;
0589: E8D1         ; associated with console I( O. Hence the name "direct" (or "unadorned" as  ;
0590: E8D1         ; Digital Research describes it). If the value in register E is not OFFH,   ;
0591: E8D1         ; then E contains a valid ASCII character that is output to the console.    ;
0592: E8D1         ;  This function works well provided you never have to send a value ofOFFH  ;
0593: E8D1         ; or expect to receive a value ofOOH. If you do need to send or receive     ;
0594: E8D1         ;  pure binary data, you cannot use this function, since these values are   ;
0595: E8D1         ;  likely to be part of the data stream.                                    ;
0596: E8D1         ;                                                                           ;
0597: E8D1         ;			Function Code	:	C = 06H                                     ;
0598: E8D1         ;			Entry Parameters:	E = 0FFH for Input					  		;
0599: E8D1         ;								E = Other than 0FFH for Output				;
0600: E8D1         ;			Exit Parameters :	A = Input byte or status					;
0601: E8D1         ;																			;
0602: E8D1         ;--------------------------- Direct Console I/O - 6 (6) --------------------;
0603: E8D1         ;BDOS put parameter in C before entering this routine
0604: E8D1             vDirectConIO:
0605: E8D1 79                     LD     A,C
0606: E8D2 3C                     INC    A
0607: E8D3 28 04                  JR     Z,vDirectConIO1      ; 0ffh => 00h, means input mode
0608: E8D5         ; send byte to console
0609: E8D5 CD 0C F6               CALL   bcConout             ; Send the byte to the console
0610: E8D8 C9                     RET
0611: E8D9
0612: E8D9         ;read byte/status from console
0613: E8D9             vDirectConIO1:
0614: E8D9 CD 06 F6               CALL   bcConst              ; Check Status
0615: E8DC B7                     OR     A                    ; 00 means not data ready
0616: E8DD CA 4D E8               JP     Z,ReturnToCaller1    ; If no data return  00 to caller
0617: E8E0 CD 09 F6               CALL   bcConin              ; Data is available, get it to A
0618: E8E3 32 B6 EA               LD     (exitParameterByte),A ; Save it
0619: E8E6 C9                     RET
0620: E8E7
0621: E8E7         ;--------------------------- Get IOBYTE Setting - 7 (7) --------------------;
0622: E8E7         ; This function places the current value of the IOBYTE in register A.       ;
0623: E8E7         ;                                                                           ;
0624: E8E7         ; The IOBYTE structure:                                                     ;
0625: E8E7         ;								+-------+-------+-------+-------+           ;
0626: E8E7         ;						Bit No. | 7 : 6 | 5 : 4 | 3 : 2 | 1 : 0 |           ;
0627: E8E7         ;								+-------+-------+-------+-------+           ;
0628: E8E7         ;				Logical Device     List | Punch | Reader|Console            ;
0629: E8E7         ;                                                                           ;
0630: E8E7         ;                                                                           ;
0631: E8E7         ;			Function Code	:	C = 07H                                     ;
0632: E8E7         ;			Entry Parameters:	None					  		  			;
0633: E8E7         ;			Exit Parameters :	A = Current IOBYTE value					;
0634: E8E7         ;																			;
0635: E8E7         ;--------------------------- Get IOBYTE Setting - 7 (7) --------------------;
0636: E8E7             vGetIOBYTE:
0637: E8E7 3A 03 00               LD     A,(IOBYTE)           ; Get the IOBYTE
0638: E8EA 32 B6 EA               LD     (exitParameterWord),A ; Return it to caller
0639: E8ED C9                     RET
0640: E8EE         ;--------------------------- Set IOBYTE Setting - 8 (8) --------------------;
0641: E8EE         ; This function sets the IOBYTE         									;
0642: E8EE         ;                                                                           ;
0643: E8EE         ; The IOBYTE structure:                                                     ;
0644: E8EE         ;								+-------+-------+-------+-------+           ;
0645: E8EE         ;						Bit No. | 7 : 6 | 5 : 4 | 3 : 2 | 1 : 0 |           ;
0646: E8EE         ;								+-------+-------+-------+-------+           ;
0647: E8EE         ;				Logical Device     List | Punch | Reader|Console            ;
0648: E8EE         ;                                                                           ;
0649: E8EE         ;                                                                           ;
0650: E8EE         ;			Function Code	:	C = 08H                                     ;
0651: E8EE         ;			Entry Parameters:	E = New IOBYTE value	  		  			;
0652: E8EE         ;			Exit Parameters :	None                                        ;
0653: E8EE         ;																			;
0654: E8EE         ;--------------------------- Get IOBYTE Setting - 8 (8) --------------------;
0655: E8EE         ;BDOS put parameter in C before entering this routine
0656: E8EE             vSetIOBYTE:
0657: E8EE 21 03 00               LD     HL,IOBYTE            ; point at The IOBYTE
0658: E8F1 71                     LD     (HL),C               ; Place new vale in it
0659: E8F2 C9                     RET
0660: E8F3
0661: E8F3         ;---------------------- Display $ terminated String - 9 (9) ----------------;
0662: E8F3         ;  This function outputs a string of characters to the console device. The  ;
0663: E8F3         ; address of this string is in registers DE. You must make sure that the    ;
0664: E8F3         ; last character of the string is "$"; the BDOS uses this character as a    ;
0665: E8F3         ; marker for the end of the string. The "$" itself does not get output to   ;
0666: E8F3         ; the console.                                                              ;
0667: E8F3         ;                                                                           ;
0668: E8F3         ; While the BDOS is outputting the string, it expands tabs as previously    ;
0669: E8F3         ; described, checks to see if there is an incoming character, and checks    ;
0670: E8F3         ; for  CONTROL-S (XOFF, which stops the output until another character is   ;
0671: E8F3         ; entered) or CONTROL-P (which turns on or off echoing of console characters;
0672: E8F3         ; to  the printer).                                                         ;
0673: E8F3         ;                                                                           ;
0674: E8F3         ;			Function Code	:	C = 09H                                     ;
0675: E8F3         ;			Entry Parameters:	DE = Address of the first byte of the string;
0676: E8F3         ;			Exit Parameters :	None							            ;
0677: E8F3         ;																			;
0678: E8F3         ;---------------------- Display $ terminated String - 9 (9) ----------------;
0679: E8F3             vPrintString:
0680: E8F3 2A B4 EA               LD     HL,(paramDE)         ; Get address of the string
0681: E8F6 4D                     LD     C,L
0682: E8F7 44                     LD     B,H                  ; Put it into BC for call
0683: E8F8 CD 3B E9               CALL   Print                ; out to console
0684: E8FB C9                     RET
0685: E8FC
0686: E8FC         ;-------------------------- Read Console String - A (10) -------------------;
0687: E8FC         ;  This function reads a string of characters from the console device       ;
0688: E8FC         ; and stores them in a buffer (address in DE) that you define. Full line    ;
0689: E8FC         ; editing is possible: the operator can backspace, cancel the line and      ;
0690: E8FC         ; start over, and use all the normal control functions. What you will       ;
0691: E8FC         ; ultimately see in the buffer is the final version of the character string ;
0692: E8FC         ; entered, without any of the errors or control characters used to do the   ;
0693: E8FC         ; line editing;                                                             ;
0694: E8FC         ;                                                                           ;
0695: E8FC         ;  The buffer that you define has a special format. The first byte in the   ;
0696: E8FC         ; buffer tells the BDOS the maximum number of characters to be accepted.    ;
0697: E8FC         ; The second byte is reserved for the BDOS to tell you how many characters  ;
0698: E8FC         ; were actually placed in the buffer. The following bytes contain           ;
0699: E8FC         ; the characters of the string. Character input will cease either when a    ;
0700: E8FC         ; CARRIAGE RETURN is entered or when the maximum number of characters,      ;
0701: E8FC         ; as specified in the buffer, has been received. The CARRIAGE RETURN is not ;
0702: E8FC         ; stored in the buffer as a character-it just serves as a terminator. If    ;
0703: E8FC         ; the first character entered is a CARRIAGE RETURN, then the BDOS sets      ;
0704: E8FC         ; the "characters input" byte to O. If you attempt to input more than the   ;
0705: E8FC         ; maximum number of characters, the "characters input" count will be the    ;
0706: E8FC         ; same as the maximum value allowed.                                        ;
0707: E8FC         ;                                                                           ;
0708: E8FC         ;			Function Code	:	C = 0AH                                     ;
0709: E8FC         ;			Entry Parameters:	DE = Address string buffer					;
0710: E8FC         ;			Exit Parameters :	String Buffer with console bytes in it      ;
0711: E8FC         ;																			;
0712: E8FC         ;-------------------------- Read Console String - A (10) -------------------;
0713: E8FC             vReadString:
0714: E8FC CD E0 E9               CALL   ReadString
0715: E8FF C9                     RET
0716: E900
0717: E900         ;------------------------- Read Console Status - B (11) --------------------;
0718: E900         ; This function tells you whether a console input character is waiting to   ;
0719: E900         ; be processed. Unlike the Console Input functions, which will wait until   ;
0720: E900         ; there is input,this function simply checks and returns immediately.       ;
0721: E900         ;                                                                           ;
0722: E900         ;			Function Code	:	C = 0BH                                     ;
0723: E900         ;			Entry Parameters:	None										;
0724: E900         ;			Exit Parameters :	A = 00H if no incoming Data					;
0725: E900         ;								A = FFH	if incoming Data					;
0726: E900         ;																			;
0727: E900         ;------------------------- Read Console Status - B (11) --------------------;
0728: E900             vGetConsoleStatus:
0729: E900 CD 8C E9               CALL   ConBreak
0730: E903 32 B6 EA               LD     (exitParameterByte),A
0731: E906 C9                     RET
0732: E907
0733: E907         ;--------------------------- Get CP/M Version - C (12) ---------------------;
0734: E907         ;  This function tells you which version of CP/M you are currently running. ;
0735: E907         ; A two-byte value is returned:                                             ;
0736: E907         ;	H = OOH for CP/M, H = OlH for MP/M                                      ;
0737: E907         ;	L = OOH for all releases before CP/M 2.0                                ;
0738: E907         ;	L = 20H for CP/M 2.0,21 H for 2.1, 22H for 2.2,                         ;
0739: E907         ;		and so on for any subsequent releases.                              ;
0740: E907         ;                                                                           ;
0741: E907         ; This information is of interest only if your program has some version     ;
0742: E907         ; specific logic built into it. For example, CP/M version 1.4 does not      ;
0743: E907         ; support the same Random File Input/ Output operations that CP/M 2.2 does. ;
0744: E907         ; Therefore, if your program uses Random I/O, put this check at the         ;
0745: E907         ; beginning to ensure that it is indeed running under the appropriate       ;
0746: E907         ; version of CP/M.                                                          ;
0747: E907         ;                                                                           ;
0748: E907         ;			Function Code	:	C = 0CH                                     ;
0749: E907         ;			Entry Parameters:	None										;
0750: E907         ;			Exit Parameters :	HL =Version Number Code						;
0751: E907         ;								A = FFH	if incoming Data					;
0752: E907         ;																			;
0753: E907         ;--------------------------- Get CP/M Version - C (12) ---------------------;
0754: E907             vGetVersion:                      ; func12 (12 - 0C)	 Get Version
0755: E907 3E 20                  LD     A,VERSION
0756: E909 32 B6 EA               LD     (exitParameterByte),A ;exitParameterByte = VERSION
0757: E90C C9                     RET
0758: E90D
0759: E90D         ;--------------------------- Get/Set User Number - 20 (32) -----------------;
0760: E90D         ;  This subroutine either sets or gets the current user number. The current ;
0761: E90D         ; user number determines which file directory entries are matched during all;
0762: E90D         ; disk file operations. When you call this function, the contents of the    ;
0763: E90D         ; E register specify what action is to be taken. IfE=OFFH, then the function;
0764: E90D         ; will return the current user number in the A register. If you set E to a  ;
0765: E90D         ; number in the range 0 to 15 (that is, a valid user number), the function  ;
0766: E90D         ; will set the current user number to this value.                           ;
0767: E90D         ;                                                                           ;
0768: E90D         ;			Function Code	:	C = 0CH                                     ;
0769: E90D         ;			Entry Parameters:	E = 0FFH to get User Number  				;
0770: E90D         ;								  = 0 to 15 to set User Number				;
0771: E90D         ;			Exit Parameters :	A = Current user Number if E was set to 0FFH;
0772: E90D         ;								A = FFH	if incoming Data					;
0773: E90D         ;																			;
0774: E90D         ;                                                                           ;
0775: E90D         ;--------------------------- Get/Set User Number - 20 (32) -----------------;
0776: E90D             vGetSetUserNumber:
0777: E90D 3A B3 EA               LD     A,(paramE)
0778: E910 FE FF                  CP     0FFH
0779: E912 20 07                  JR     NZ,SetUserNumber     ; interrogate user code instead
0780: E914 3A 88 F4               LD     A,(currentUserNumber)
0781: E917 32 B6 EA               LD     (exitParameterByte),A ; exitParameterByte=currentUserNumber
0782: E91A C9                     RET
0783: E91B
0784: E91B             SetUserNumber:
0785: E91B E6 0F                  AND    LO_NIBBLE_MASK
0786: E91D 32 88 F4               LD     (currentUserNumber),A
0787: E920 C9                     RET
0788: E921
0789: E921         ;***************************************************************************;
0790: E921         ;								Character Support Routines					;
0791: E921         ;***************************************************************************;
0792: E921
0793: E921
0794: E921         ;-------------------- Return a Character from the console ------------------;
0795: E921         ;return byte from buffer or read from the console                           ;
0796: E921             ConIn:                          ;
0797: E921 21 AF EA               LD     HL,keyboardByte      ; is there a Byte waiting?          ;
0798: E924 7E                     LD     A,(HL)               ;
0799: E925 36 00                  LD     (HL),0               ;
0800: E927 B7                     OR     A                    ;
0801: E928 C0                     RET    NZ                   ;
0802: E929         ;
0803: E929 C3 09 F6               JP     bcConin              ; Go get byte from Console          ;
0804: E92C         ;-------------------- Return a Character from the console ------------------;
0805: E92C
0806: E92C         ;----------- Is the Character ASCII printable, CR,LF,TAB,BACKSPACE ---------;
0807: E92C         ; Resets Carry Flag if ASCII Printable, CR,LF,TAB,BackSpace or GE SPACE     ;
0808: E92C             IsPrintableASCII:                      ;
0809: E92C FE 0D                  CP     CR                   ;
0810: E92E C8                     RET    Z                    ; carriage return?                                                 ;
0811: E92F FE 0A                  CP     LF                   ;
0812: E931 C8                     RET    Z                    ; line feed?                                                       ;
0813: E932 FE 09                  CP     TAB                  ;
0814: E934 C8                     RET    Z                    ; TAB?                                                             ;
0815: E935 FE 08                  CP     CTRL_H               ;
0816: E937 C8                     RET    Z                    ; backspace?                                                       ;
0817: E938 FE 20                  CP     SPACE                ; Reset Carry if ASCII printable        ;
0818: E93A C9                     RET                         ;
0819: E93B         ;----------- Is the Character ASCII printable, CR,LF,TAB,BACKSPACE ---------;
0820: E93B
0821: E93B         ;------------------ Print character from (BC) until  $ found ---------------;
0822: E93B             Print:                          ;
0823: E93B 0A                     LD     A,(BC)               ; Get the next character            ;
0824: E93C FE 24                  CP     DOLLAR               ; Is it the end ?                   ;
0825: E93E C8                     RET    Z                    ;  exit if yes                      ;
0826: E93F 03                     INC    BC                   ; Update the pointer                ;
0827: E940 C5                     PUSH   BC                   ; Save it                           ;
0828: E941 4F                     LD     C,A                  ; Does Byte require                 ;
0829: E942 CD 58 E9               CALL   TabOut               ;  special attention - check        ;
0830: E945 C1                     POP    BC                   ; Retrieve the pointer				;
0831: E946 18 F3                  JR     Print                ; Loop back                         ;
0832: E948         ;------------------ Print character from (BC) until  $ found ---------------;
0833: E948
0834: E948         ;-- Send printable character to console. Precede with Caret if needed ------;
0835: E948         ; character is in Reg C                                                     ;
0836: E948             CaretOut:                       ;
0837: E948 79                     LD     A,C                  ;
0838: E949 CD 2C E9               CALL   IsPrintableASCII     ;
0839: E94C 30 0A                  JR     NC,TabOut            ; Skip if Caret not needed          ;
0840: E94E         ; send preceding up arrow                                                   ;
0841: E94E F5                     PUSH   AF                   ; Save the character                ;
0842: E94F 0E 5E                  LD     C,CARET              ;
0843: E951 CD 6B E9               CALL   ConsoleOut           ; Send Caret to Console             ;
0844: E954 F1                     POP    AF                   ; Get the character                 ;
0845: E955 F6 40                  OR     40H                  ; Make the graphic a letter         ;
0846: E957 4F                     LD     C,A                  ; Set up to print                   ;
0847: E958         ; fall thru to TabbOut                                                      ;
0848: E958         ;-- Send printable character to console. Precede with Caret if needed ------;
0849: E958
0850: E958         ;------------- Send printable character to console. Expand if TAB ----------;
0851: E958         ; character is in Reg C                                                     ;
0852: E958             TabOut:                         ;
0853: E958 79                     LD     A,C                  ;
0854: E959 FE 09                  CP     TAB                  ; Is it a TAB                       ;
0855: E95B C2 6B E9               JP     NZ,ConsoleOut        ; Go directly to ConsoleOut if not  ;
0856: E95E         ;
0857: E95E         ; TAB encountered                                                          ;
0858: E95E             TabOut0:                        ;
0859: E95E 0E 20                  LD     C,SPACE              ; Expand TABs with SPACEs           ;
0860: E960 CD 6B E9               CALL   ConsoleOut           ; Send to Console                   ;
0861: E963 3A B2 EA               LD     A,(columnPosition)   ; Get Column position               ;
0862: E966 E6 07                  AND    111b                 ; (ColumnPosition mod 8) = 0 ?      ;
0863: E968 20 F4                  JR     NZ,TabOut0           ; Do again if not                   ;
0864: E96A C9                     RET                         ;
0865: E96B         ;------------- Send printable character to console. Expand if TAB ----------;
0866: E96B
0867: E96B         ;-------------------------- Send character to console ----------------------;
0868: E96B         ; C  = Character to be output                                               ;
0869: E96B             ConsoleOut:                      ;
0870: E96B         ; Look for CNTL_S from keyboard and save it in keyboardByte                 ;
0871: E96B C5                     PUSH   BC                   ; Save character and Count          ;
0872: E96C CD 8C E9               CALL   ConBreak             ; Check for screen stop key stroke  ;
0873: E96F C1                     POP    BC                   ;
0874: E970 C5                     PUSH   BC                   ; Get/save character                ;
0875: E971         ; Send character to Console	                                                ;
0876: E971 CD 0C F6               CALL   bcConout             ; Send character to the console     ;
0877: E974 C1                     POP    BC                   ;
0878: E975 C5                     PUSH   BC                   ; Get/save character                ;
0879: E976         ; is the data to be output to print device?                                 ;
0880: E976 3A B0 EA               LD     A,(printEchoFlag)    ;
0881: E979 B7                     OR     A                    ;
0882: E97A C4 0F F6               CALL   NZ,bcList            ; Send it to printer, if so         ;
0883: E97D C1                     POP    BC                   ; Get the character                 ;
0884: E97E         ;
0885: E97E 79                     LD     A,C                  ; Put character to ACC              ;
0886: E97F 21 B2 EA               LD     HL,columnPosition    ; A = char, HL = .columnPosition    ;
0887: E982 34                     INC    M                    ; increment the ColumnPosition      ;
0888: E983         ;
0889: E983 FE 20                  CP     SPACE                ;
0890: E985 D0                     RET    NC                   ; Exit if ASCII printable           ;
0891: E986         ;
0892: E986 FE 0A                  CP     LF                   ;
0893: E988 C0                     RET    NZ                   ; Exit if not a Line Feed           ;
0894: E989         ;
0895: E989 36 00                  LD     (HL),0               ;  else force columnPosition = 0    ;
0896: E98B C9                     RET                         ;
0897: E98C         ;-------------------------- Send character to console ----------------------;
0898: E98C
0899: E98C         ;--------------------  Check for Status and Control S or C -----------------;
0900: E98C         ;  Returns:																	;
0901: E98C         ;			ACC = 0FFH if Saved keyboard byte or CNTL_S entered from console;
0902: E98C         ;			ACC = 00   No data Pending										;
0903: E98C         ;			DOES NOT RETURN if CTRL_C is entered from the keyboard          ;
0904: E98C         ;                                                                           ;
0905: E98C             ConBreak:                       ;
0906: E98C 3A AF EA               LD     A,(keyboardByte)     ;
0907: E98F B7                     OR     A                    ; If there is a char waiting        ;
0908: E990 20 2B                  JR     NZ,ConBreak1         ;  return with FF in ACC            ;
0909: E992         ;
0910: E992 CD 06 F6               CALL   bcConst              ; Get status                        ;
0911: E995 FE 00                  CP     00H                  ; If 00 => No data pending	        ;
0912: E997 C8                     RET    Z                    ; Return 00 No data pending         ;
0913: E998         ;
0914: E998 CD 09 F6               CALL   bcConin              ; Read the byte                     ;
0915: E99B         ;
0916: E99B FE 10                  CP     CTRL_P               ;
0917: E99D 20 0D                  JR     NZ,CheckCTL_S        ;
0918: E99F         ;<><><><><><><><><><><><><> Toggle Print Echo Flag<><><><><><><>            ;
0919: E99F 21 B0 EA               LD     HL,printEchoFlag     ;
0920: E9A2 3E FF                  LD     A,TRUE               ;
0921: E9A4 BE                     CP     (HL)                 ;
0922: E9A5 20 02                  JR     NZ,ToggleFlag1       ;
0923: E9A7 3E 00                  LD     A,FALSE              ;
0924: E9A9             ToggleFlag1:                      ;
0925: E9A9 77                     LD     (HL),A               ;
0926: E9AA 18 0C                  JR     NothingWaiting       ;
0927: E9AC         ;<><><><><><><><><><><><><> Toggle Print Echo Flag<><><><><><><>            ;
0928: E9AC             CheckCTL_S:                      ;
0929: E9AC FE 13                  CP     CTRL_S               ; If it is not Stop Screen, save    ;
0930: E9AE 20 0A                  JR     NZ,ConBreak0         ;   and and return 0FFH             ;
0931: E9B0         ;
0932: E9B0 CD 09 F6               CALL   bcConin              ; Else Read next byte               ;
0933: E9B3 FE 03                  CP     CTRL_C               ;
0934: E9B5 CA 00 00               JP     Z,WarmBoot           ; do WarmBoot if  CTRL_C            ;
0935: E9B8             NothingWaiting:                      ;
0936: E9B8 AF                     XOR    A                    ;
0937: E9B9 C9                     RET                         ; Set ACC = 0 and return            ;
0938: E9BA             ConBreak0:                      ;
0939: E9BA 32 AF EA               LD     (keyboardByte),A     ; save the byte                     ;
0940: E9BD             ConBreak1:                      ;
0941: E9BD 3E FF                  LD     A,TRUE               ; return with true set in ACC       ;
0942: E9BF C9                     RET                         ;
0943: E9C0         ;--------------------  Check for Status and Control S or C -----------------;
0944: E9C0
0945: E9C0         ;------------------------  Console Output Utilities ------------------------;
0946: E9C0             showHashCRLF:                      ;
0947: E9C0 0E 23                  LD     C,HASH_TAG           ;
0948: E9C2 CD 6B E9               CALL   ConsoleOut           ; Send # to console                 ;
0949: E9C5 CD D6 E9               CALL   showCRLF             ;
0950: E9C8             showHashCRLF1:                      ;
0951: E9C8 3E B2                  LD     A,columnPosition     ;
0952: E9CA 21 B1 EA               LD     HL,startingColumn    ;
0953: E9CD BF                     CP     A,M                  ;
0954: E9CE D0                     RET    NC                   ;
0955: E9CF 0E 20                  LD     C,SPACE              ;
0956: E9D1 CD 6B E9               CALL   ConsoleOut           ;
0957: E9D4 18 F2                  JR     showHashCRLF1        ;
0958: E9D6         ;------------------------  Console Output Utilities ------------------------;
0959: E9D6
0960: E9D6         ;------------------------  Send Carriage Return and Line Feed --------------;
0961: E9D6             showCRLF:                       ;
0962: E9D6 0E 0D                  LD     C,CR                 ;
0963: E9D8 CD 6B E9               CALL   ConsoleOut           ;
0964: E9DB 0E 0A                  LD     C,LF                 ;
0965: E9DD C3 6B E9               JP     ConsoleOut           ; exit via ConsoleOuts RET          ;
0966: E9E0         ;------------------------  Send Carriage Return and Line Feed --------------;
0967: E9E0
0968: E9E0         ;------------------------- Read a $ terminated String ----------------------;
0969: E9E0         ;read to paramDE address (max length, current length, buffer)              ;
0970: E9E0             ReadString:                      ;
0971: E9E0 3A B2 EA               LD     A,(columnPosition)   ;
0972: E9E3 32 B1 EA               LD     (startingColumn),A   ; Save start for CTRL_X and CTRL_R  ;
0973: E9E6 2A B4 EA               LD     HL,(paramDE)         ; Get the start of the String       ;
0974: E9E9 4E                     LD     C,(HL)               ; Get Max Count  					;
0975: E9EA 23                     INC    HL                   ; Point at actual bytes read        ;
0976: E9EB 06 00                  LD     B,0                  ; Initialize Current Count          ;
0977: E9ED         ;
0978: E9ED         ; B = Current Count                                                     ;
0979: E9ED         ; C = Maximum characters                                                ;
0980: E9ED         ; HL= Insertion Pointer                                                 ;
0981: E9ED         ;
0982: E9ED         ; read next character, BC, HL active                                       ;
0983: E9ED             ReadNext:                       ;
0984: E9ED C5                     PUSH   BC                   ; Save Current Index and Max Count  ;
0985: E9EE E5                     PUSH   HL                   ; Save pointer                      ;
0986: E9EF             ReadNext0:                      ;
0987: E9EF CD 21 E9               CALL   ConIn                ; Get the next Character            ;
0988: E9F2 E6 7F                  AND    ASCII_MASK           ; Mask parity bit                   ;
0989: E9F4 E1                     POP    HL                   ; Restore Pointer					;
0990: E9F5 C1                     POP    BC                   ; Current Index and Max Count		;
0991: E9F6         ;Is It Carriage Return                                                      ;
0992: E9F6 FE 0D                  CP     CR                   ;
0993: E9F8 28 3A                  JR     Z,EndRead            ; End the read if yes               ;
0994: E9FA FE 0A                  CP     LF                   ;
0995: E9FC         ;Is It Linefeed                                                             ;
0996: E9FC 28 36                  JR     Z,EndRead            ; End the read if yes               ;
0997: E9FE         ;Is It BackSpace                                                            ;
0998: E9FE FE 08                  CP     CTRL_H               ;
0999: EA00 28 3C                  JR     Z,BSspaceBS          ;
1000: EA02             IsItRubout:                      ;
1001: EA02 FE 7F                  CP     RUBOUT               ; Non destructive delete            ;
1002: EA04 28 41                  JR     Z,ItIsRubout         ;
1003: EA06             IsPhysicalEOL:                      ;
1004: EA06 FE 05                  CP     CTRL_E               ;
1005: EA08 28 46                  JR     Z,ItIsPhysicalEOL    ;
1006: EA0A             IsItPrintToggle:                      ;
1007: EA0A FE 10                  CP     CTRL_P               ;
1008: EA0C 28 49                  JR     Z,ItIsPrintToggle    ;
1009: EA0E             IsItDeleteTheLineX:                      ;
1010: EA0E FE 18                  CP     CTRL_X               ;
1011: EA10 28 6D                  JR     Z,DeleteTheLine      ; If CTRL_X go delete the line      ;
1012: EA12             IsItDeleteTheLineU:                      ;
1013: EA12 FE 15                  CP     CTRL_U               ;
1014: EA14 CA 9D EA               JP     Z,IgnoreTheLine      ; If CTRL_U ignore the line         ;
1015: EA17         ;Retype the line                                                            ;
1016: EA17 FE 12                  CP     CTRL_R               ;
1017: EA19 28 4B                  JR     Z,RepeatLine         ;
1018: EA1B
1019: EA1B         ;....................... Echo input back to the Console  ...................;
1020: EA1B         ; Full Duplex								                                ;
1021: EA1B         ; A = Character to display	                                                ;
1022: EA1B         ; B = current char count                                                    ;
1023: EA1B         ; C = maximum buffer length                                                 ;
1024: EA1B         ; HL= buffer pointer                                                        ;
1025: EA1B         ;ReadEcho                                                                   ;
1026: EA1B 04                     INC    B                    ; Increment byte count		        ;
1027: EA1C 23                     INC    HL                   ; Advance the Pointer               ;
1028: EA1D 77                     LD     (HL),A               ; Put char in buffer                ;
1029: EA1E         ;
1030: EA1E             ReadEchoRubOut:                      ;
1031: EA1E C5                     PUSH   BC                   ; Save index and length             ;
1032: EA1F E5                     PUSH   HL                   ; Save the Pointer                  ;
1033: EA20 4F                     LD     C,A                  ; Get char                          ;
1034: EA21 CD 48 E9               CALL   CaretOut             ; Output to Console (^ if needed)   ;
1035: EA24 E1                     POP    HL                   ; Restore the Pointer               ;
1036: EA25 C1                     POP    BC                   ; Restore index and length          ;
1037: EA26 7E                     LD     A,(HL)               ; Recall char                       ;
1038: EA27         ; check for Warm Boot                                                       ;
1039: EA27 FE 03                  CP     CTRL_C               ;
1040: EA29 78                     LD     A,B                  ; Get Line position                 ;
1041: EA2A 20 05                  JR     NZ,AreWeAtEndOfBuffer ; Skip if not CTRL_C                ;
1042: EA2C FE 01                  CP     1                    ; Beginning of the Line?            ;
1043: EA2E CA 00 00               JP     Z,WarmBoot           ;   if yes do the Boot              ;
1044: EA31         ; Check to see if we are at the end of the buffer                           ;
1045: EA31             AreWeAtEndOfBuffer:                      ;
1046: EA31 B9                     CP     C                    ; Over Max ?					    ;
1047: EA32 38 B9                  JR     C,ReadNext           ;  no, Go for more				    ;
1048: EA34         ;
1049: EA34         ; At the end of read                                  					    ;
1050: EA34             EndRead:                        ;
1051: EA34         ; 	POP		HL                                                              ;
1052: EA34 2A B4 EA               LD     HL,(paramDE)         ;
1053: EA37 23                     INC    HL                   ;
1054: EA38         ;
1055: EA38 70                     LD     (HL),B               ; Actual length at Pos 0 of Buffer  ;
1056: EA39 0E 0D                  LD     C,CR                 ;
1057: EA3B C3 6B E9               JP     ConsoleOut           ; Send CR to the Console			;
1058: EA3E         ;....................... Echo input back to the Console  ...................;
1059: EA3E         ;.......................... Backspace SPACE BackSpace ......................;
1060: EA3E             BSspaceBS:                      ;
1061: EA3E 05                     DEC    B                    ;
1062: EA3F 2B                     DEC    HL                   ;
1063: EA40 C5                     PUSH   BC                   ;
1064: EA41 E5                     PUSH   HL                   ;
1065: EA42 CD 90 EA               CALL   BackUp               ;
1066: EA45 18 A8                  JR     ReadNext0            ;
1067: EA47         ;.......................... Backspace SPACE BackSpace ......................;
1068: EA47         ;.......................... It is RubOut ...................................;
1069: EA47             ItIsRubout:                      ;
1070: EA47         ; RUBOUT if possible                                                        ;
1071: EA47 78                     LD     A,B                  ; Are we at the start of the line   ;
1072: EA48 B7                     OR     A                    ;
1073: EA49 28 A2                  JR     Z,ReadNext           ; then ignore and go for next char  ;
1074: EA4B         ;adjust pointers back one                                                   ;
1075: EA4B 7E                     LD     A,(HL)               ; ACC = current character           ;
1076: EA4C 05                     DEC    B                    ; Adjust the index			    	;
1077: EA4D 2B                     DEC    HL                   ; Adjust the pointer                ;
1078: EA4E 18 CE                  JR     ReadEchoRubOut       ; Echo back - Full Duplex           ;
1079: EA50         ;.......................... It is RubOut ...................................;
1080: EA50         ;.......................... It is PhysicalEOL ..............................;
1081: EA50             ItIsPhysicalEOL:                      ;
1082: EA50 C5                     PUSH   BC                   ; Save Current Index and Max Count  ;
1083: EA51 E5                     PUSH   HL                   ; Save pointer                      ;
1084: EA52 CD D6 E9               CALL   showCRLF             ; Make new line                     ;
1085: EA55 18 98                  JR     ReadNext0            ;   and go for next char   			;
1086: EA57         ;.......................... It is PhysicalEOL ..............................;
1087: EA57         ;.......................... It is PrintToggle ..............................;
1088: EA57             ItIsPrintToggle:                      ;
1089: EA57 E5                     PUSH   HL                   ; Save pointer                      ;
1090: EA58         ; Toggle the printEcho Flag                                                 ;
1091: EA58 21 B0 EA               LD     HL,printEchoFlag     ; Point at the flag                 ;
1092: EA5B 3E FF                  LD     A,TRUE               ; Load ACC with TRUE                ;
1093: EA5D BE                     CP     (HL)                 ; Is the flag true?                 ;
1094: EA5E 20 02                  JR     NZ,IsItPrintToggle1  ; Skip if not                       ;
1095: EA60 3E 00                  LD     A,FALSE              ;   else. load ACC with FALSE       ;
1096: EA62             IsItPrintToggle1:                      ;
1097: EA62 77                     LD     (HL),A               ; Set the Flags new Value	        ;
1098: EA63 E1                     POP    HL                   ; Restore pointer                   ;
1099: EA64 18 87                  JR     ReadNext             ;   and for another char            ;
1100: EA66         ;.......................... It is PrintToggle ..............................;
1101: EA66         ;.......................... RepeatLine .....................................;
1102: EA66             RepeatLine:                      ;
1103: EA66 C5                     PUSH   BC                   ; Save Current Index and Max Count  ;
1104: EA67 E5                     PUSH   HL                   ;  for exit                         ;
1105: EA68 CD C0 E9               CALL   showHashCRLF         ; Display Hash, new Line			;
1106: EA6B         ;
1107: EA6B 2A B4 EA               LD     HL,(paramDE)         ; Get start of Buffer               ;
1108: EA6E 23                     INC    HL                   ; Skip past character count         ;
1109: EA6F         ;
1110: EA6F             LL1:                            ;
1111: EA6F 23                     INC    HL                   ; Point at next char to display     ;
1112: EA70 C5                     PUSH   BC                   ; Save counter, in B                ;
1113: EA71 E5                     PUSH   HL                   ; Save buffer pointer               ;
1114: EA72 4E                     LD     C,M                  ; Get the next character            ;
1115: EA73 CD 48 E9               CALL   CaretOut             ; Display it                        ;
1116: EA76 E1                     POP    HL                   ; Restore                           ;
1117: EA77 C1                     POP    BC                   ;  the counter and pointer          ;
1118: EA78 10 F5                  DJNZ   LL1                  ; loop if still more to show        ;
1119: EA7A E1                     POP    HL                   ; Restore values                    ;
1120: EA7B C1                     POP    BC                   ;  from routine entry               ;
1121: EA7C C3 ED E9               JP     ReadNext             ; Done here !                       ;
1122: EA7F         ;.......................... RepeatLine .....................................;
1123: EA7F         ;.......................... Delete The Line ................................;
1124: EA7F             DeleteTheLine:                      ;
1125: EA7F E1                     POP    HL                   ; Adjust Stack                      ;
1126: EA80         ;                                            ;
1127: EA80             DeleteTheLine1:                      ;
1128: EA80 3A B1 EA               LD     A,(startingColumn)   ;
1129: EA83 21 B2 EA               LD     HL,columnPosition    ;
1130: EA86 BE                     CP     M                    ; Start of line ?                   ;
1131: EA87 D2 E0 E9               JP     NC,ReadString        ;  If yes get out and go for more   ;
1132: EA8A 35                     DEC    M                    ; Adjust the ColumnPosition         ;
1133: EA8B CD 90 EA               CALL   BackUp               ; Clear 1 column                    ;
1134: EA8E 18 F0                  JR     DeleteTheLine1       ; Loop for more                     ;
1135: EA90         ;.......................... Delete The Line ................................;
1136: EA90         ;------------------------ Back-up one screen position ----------------------;
1137: EA90             BackUp:                         ;
1138: EA90 CD 98 EA               CALL   BackUp1              ; Send Backspace                    ;
1139: EA93 0E 20                  LD     C,SPACE              ; Overwrite with SPACE              ;
1140: EA95 CD 0C F6               CALL   bcConout             ; Overwrite with SPACE				;
1141: EA98         ;does not affect column count                                               ;
1142: EA98             BackUp1:                        ;
1143: EA98 0E 08                  LD     C,CTRL_H             ;
1144: EA9A C3 0C F6               JP     bcConout             ; Send Backspace                    ;
1145: EA9D         ;------------------------ Back-up one screen position ----------------------;
1146: EA9D         ;.......................... Ignore The Line ................................;
1147: EA9D             IgnoreTheLine:                      ;
1148: EA9D CD C0 E9               CALL   showHashCRLF         ; Display Hash, new Line			;
1149: EAA0 0E 20                  LD     C,SPACE              ; We want to add a few spaces       ;
1150: EAA2 CD 0C F6               CALL   bcConout             ;  to the console                   ;
1151: EAA5 0E 20                  LD     C,SPACE              ;
1152: EAA7 CD 0C F6               CALL   bcConout             ;
1153: EAAA C3 E0 E9               JP     ReadString           ; Start all over                    ;
1154: EAAD         ;.......................... Ignore The Line ................................;
1155: EAAD
1156: EAAD         ;------------------------- Read a $ terminated String ----------------------;
1157: EAAD
1158: EAAD         ;****************************************************************************
1159: EAAD         ;                           DATA AREA                                       *
1160: EAAD         ;****************************************************************************
1161: EAAD
1162: EAAD         ;------------------------------Non Disk Data Area --------------------------;
1163: EAAD             usersStack: DS     2                    ; entry stack pointer               ;
1164: EAAF         ;
1165: EAAF 00          keyboardByte: DB     00                   ; Saved keyboard character          ;
1166: EAB0         ;
1167: EAB0 00          printEchoFlag: DB     00                   ; Controlled by ^P                  ;
1168: EAB1         ;
1169: EAB1         ; FunctionValue:DB	00H					; Reg C on BDOS Entry               ;
1170: EAB1 00          startingColumn: DB     0                    ; Starting col pos after read       ;
1171: EAB2 00          columnPosition: DB     0                    ; Current Column position           ;
1172: EAB3         ;
1173: EAB3             paramE:    DS     BYTE                 ; Byte Argument for BDOS Call       ;
1174: EAB4             paramDE:   DS     WORD                 ; Word Argument for BDOS Call	    ;
1175: EAB6             exitParameterByte:                      ; Byte returned Value               ;
1176: EAB6             exitParameterWord: DS     WORD                 ; Word                          ;
1177: EAB8         ;
1178: EAB8         ;
1179: EAB8         ;------------------------------------ Data Area ----------------------------;
1180: EAB8
1181: EAB8
1182: EAB8
1183: EAB8         ;***************************************************************************;
1184: EAB8         ;								Disk I/O									;
1185: EAB8         ;***************************************************************************;
1186: EAB8
1187: EAB8         ;---------------------------- Reset Disk System - D (13) -------------------;
1188: EAB8         ;  This function requests CP/M to completely reset the disk file system.    ;
1189: EAB8         ; CP/M then resets its internal tables, selects logical disk A as the       ;
1190: EAB8         ; default disk, resets the DMAaddress back to 0080H (the address of the     ;
1191: EAB8         ; buffer used by the BDOS to read and write to the disk), and marks all     ;
1192: EAB8         ; logical disks as having Read/Write status. The BDOS will then have to log ;
1193: EAB8         ; in each logical disk as each disk is accessed. This involves reading the  ;
1194: EAB8         ; entire file directory for the disk and rebuilding the allocation vectors  ;
1195: EAB8         ; which keep track of which allocation blocks are free and which            ;
1196: EAB8         ; are used for file storage.                                                ;
1197: EAB8         ;                                                                           ;
1198: EAB8         ;			Function Code	:	C = 0DH                                     ;
1199: EAB8         ;			Entry Parameters:	None										;
1200: EAB8         ;			Exit Parameters :	None										;
1201: EAB8         ;																			;
1202: EAB8         ;---------------------------- Reset Disk System - D (13) -------------------;
1203: EAB8             vResetSystem:
1204: EAB8 21 00 00               LD     HL,0
1205: EABB 22 8B F4               LD     (readOnlyVector),HL  ; Clear the vectors for
1206: EABE 22 8D F4               LD     (loggedDisks),HL     ;   R/O and Logged Disks
1207: EAC1 AF                     XOR    A                    ; Clear the current disk
1208: EAC2 32 89 F4               LD     (currentDisk),A
1209: EAC5         ; note that currentUserNumber remains unchanged
1210: EAC5 21 80 00               LD     HL,DMABuffer
1211: EAC8 22 8F F4               LD     (initDAMAddress),HL  ; initDAMAddress = DMABuffer
1212: EACB CD 07 EF               CALL   SetDataDMA           ; to data DMA address
1213: EACE C3 1D ED               JP     Select
1214: EAD1         ;---------------------------- Select Disk - E (14) -------------------------;
1215: EAD1         ;  This function makes the logical disk named in register E the default disk;
1216: EAD1         ; All subsequent references to disk files that do not specify the disk will ;
1217: EAD1         ; use this default. When you reference a disk file that does have an        ;
1218: EAD1         ; explicit logical disk in its name you do not have to issue another        ;
1219: EAD1         ; Select Disk function; the BDOS will take care of that for you.            ;
1220: EAD1         ;                                                                           ;
1221: EAD1         ;  Notice the way in which the logical disk is specified in register E.     ;
1222: EAD1         ; It is not the same as the disk drive specification in the first byte of   ;
1223: EAD1         ; the file control block. In the FeB, a value ofOOH is used to mean         ;
1224: EAD1         ; "use the current default disk" (as specified in the last Select Disk      ;
1225: EAD1         ; call or by the operator on the console). With this function, a value      ;
1226: EAD1         ; of OOH in register A means that A is the selected drive, a value of       ;
1227: EAD1         ; 01H means drive B, and so on to OFR for drive P, allowing                 ;
1228: EAD1         ; 16 drives in the system.                                                  ;
1229: EAD1         ;                                                                           ;
1230: EAD1         ;			Function Code	:	C = 0EH                                     ;
1231: EAD1         ;			Entry Parameters:	E = Logical Disk Code (00H = A,01H = B ..)	;
1232: EAD1         ;			Exit Parameters :	None										;
1233: EAD1         ;																			;
1234: EAD1         ;---------------------------- Select Disk - E (14) -------------------------;
1235: EAD1
1236: EAD1             vSelectDisk:
1237: EAD1 C3 12 ED               JP     SelectCurrent
1238: EAD4
1239: EAD4         ;---------------------------- Open File - F (15) ---------------------------;
1240: EAD4         ;  This function opens a specified file for reading or writing. The FCB,    ;
1241: EAD4         ; whose address must be in register DE, tells CP/M the user number,         ;
1242: EAD4         ; the logical disk, the file name, and the file type. All other bytes of    ;
1243: EAD4         ; the FCB will normally be set to O.                                        ;
1244: EAD4         ;  The code returned by the BDOS in register A indicates whether the file   ;
1245: EAD4         ; has been opened successfully. If A contains OFFH, then the BOOS was       ;
1246: EAD4         ; unable to find the correct entry in the directory. If A= 0,1,2, or 3,     ;
1247: EAD4         ; then the file has been opened.                                            ;
1248: EAD4         ;			Function Code	:	C  = 0FH                                    ;
1249: EAD4         ;			Entry Parameters:	DE = Address of File Control Block			;
1250: EAD4         ;			Exit Parameters :	A  = Directory Code							;
1251: EAD4         ;																			;
1252: EAD4         ;---------------------------- Open File - F (15) ---------------------------;
1253: EAD4             vOpenFile:
1254: EAD4 CD BE EF               CALL   InitializeExtentNumberMSB ; Clear the Extent number
1255: EAD7 CD 40 EF               CALL   ReselectDisk         ; do we need to reselect disk?
1256: EADA C3 F4 ED               JP     OpenFile
1257: EADD
1258: EADD         ;---------------------------- Close File - 10 (16) -------------------------;
1259: EADD         ;  This function terminates the processing of a file to which you have      ;
1260: EADD         ; written information. Under CP/M you do not need to close a file that you  ;
1261: EADD         ; have been reading. However, if you ever intend for your program to        ;
1262: EADD         ; function correctly under MP/M (the multi-user version of CP/M) you        ;
1263: EADD         ; should close all files regardless of their use.                           ;
1264: EADD         ;  The Close File function, like Open File, returns a directory code in     ;
1265: EADD         ; the A register. Register A will contain OFFH if the BOOS could not        ;
1266: EADD         ; close the file successfully. If A is 0, 1, 2, or 3, then the file has     ;
1267: EADD         ; been closed.                                                              ;
1268: EADD         ;                                                                           ;
1269: EADD         ;  When the BDOS closes a file to which data has been written, it writes    ;
1270: EADD         ; the current contents of the FCB out to the disk directory, updating       ;
1271: EADD         ; an existing directory entry by matching the disk, name, type, and         ;
1272: EADD         ; extent number in the same manner that the Open File function does.        ;
1273: EADD         ; Note that the BDOS does not transfer the last record of the file to the   ;
1274: EADD         ; disk during the close operation. It merely updates the file directory.    ;
1275: EADD         ; You must arrange to flush any partly filled record to the disk. If the    ;
1276: EADD         ; file that you have created is a standard CP/M ASCII text file, you must   ;
1277: EADD         ; arrange to fill the unused portion of the record with the standard lAH    ;
1278: EADD         ; end-of-file characters as CP/M expects.                                   ;
1279: EADD         ;                                                                           ;
1280: EADD         ;			Function Code	:	C  = 10H                                    ;
1281: EADD         ;			Entry Parameters:	DE = Address of File Control Block			;
1282: EADD         ;			Exit Parameters :	A  = Directory Code							;
1283: EADD         ;																			;
1284: EADD         ;---------------------------- Close File - 10 (16) -------------------------;
1285: EADD             vCloseFile:
1286: EADD CD 40 EF               CALL   ReselectDisk
1287: EAE0 C3 35 EE               JP     CloseDirEntry
1288: EAE3         ;---------------------Search for First Name Match - 11 (17) ----------------;
1289: EAE3         ;  This function scans down the file directory for the first entry that     ;
1290: EAE3         ; matches the file name, type, and extent in the FCB addressed by DE.       ;
1291: EAE3         ; The file name, type, and extent may contain a "?" (ASCII 3FH) in one or   ;
1292: EAE3         ; more character positions. Where a "?" occurs, the BDOS will match any     ;
1293: EAE3         ; character in the corresponding position in the file directory. This is    ;
1294: EAE3         ; known as ambiguous file name matching.                                    ;
1295: EAE3         ;  The first byte of an FCB normally contains the logical disk number code. ;
1296: EAE3         ; A value of 0 indicates the default disk, while 1 means disk A, 2 is B,    ;
1297: EAE3         ; and so on up to a possible maximum of 16 for disk P. However, if this     ;
1298: EAE3         ; byte contains a "?", the BDOS will search the default logical disk and    ;
1299: EAE3         ; will match the file name and type regardless of the user number. This     ;
1300: EAE3         ; function is normally used in conjunction with the Search Next function.   ;
1301: EAE3         ; Search First, in the process of matching a file, leaves certain           ;
1302: EAE3         ; variables in the BDOS set, ready for a subsequent Search Next.            ;
1303: EAE3         ;  Both Search First and Search Next return a directory code in the         ;
1304: EAE3         ; A register. With Search First, A = OFFH when no files match the FCB,      ;
1305: EAE3         ; if a file match is found, A will have a value of 0, I, 2, or 3.           ;
1306: EAE3         ;                                                                           ;
1307: EAE3         ;  To locate the particular directory entry that either the Search First    ;
1308: EAE3         ; or Search Next function matched, multiply the directory code returned     ;
1309: EAE3         ; in A by the length of a directory entry (32 bytes). This is easily done   ;
1310: EAE3         ; by adding the A register to itself five times. Then add the DMA address   ;
1311: EAE3         ; to get the actual address where the matched directory entry is stored.    ;
1312: EAE3         ;  There are many occasions when you may need to write a program that will  ;
1313: EAE3         ; accept an ambiguous file name and operate on all of the file names that   ;
1314: EAE3         ; match it. (The DIR and ERA commands built into the CCP are examples that  ;
1315: EAE3         ; use ambiguous file names.) To do this, you must use several BDOS          ;
1316: EAE3         ; functions: the Set DMA Address function (code 26), this function          ;
1317: EAE3         ; (Search First), and Search Next (code 18). All of this is shown in the    ;
1318: EAE3         ; subroutine given in Figure 5-17.                                          ;
1319: EAE3         ;                                                                           ;
1320: EAE3         ;                                                                           ;
1321: EAE3         ;			Function Code	:	C  = 11H                                    ;
1322: EAE3         ;			Entry Parameters:	DE = Address of File Control Block			;
1323: EAE3         ;			Exit Parameters :	A  = Directory Code							;
1324: EAE3         ;																			;
1325: EAE3         ;---------------------Search for First Name Match - 11 (17) ----------------;
1326: EAE3             vFindFirst:
1327: EAE3 0E 00                  LD     C,0                  ; Length assuming '?' true
1328: EAE5 2A B4 EA               LD     HL,(paramDE)         ; Get the FCB
1329: EAE8 7E                     LD     A,(HL)               ; DIsk/User No
1330: EAE9 FE 3F                  CP     QMARK                ; Does it contain '?' ?
1331: EAEB 28 08                  JR     Z,QMarkFind          ;  if Yes, skip disk reselect
1332: EAED         ;  and reset of EXT
1333: EAED
1334: EAED CD BE EF               CALL   InitializeExtentNumberMSB ; Set Ext to 0
1335: EAF0 CD 40 EF               CALL   ReselectDisk         ; Use FCB to set currentDisk
1336: EAF3 0E 0F                  LD     C,nameLength         ; Match name,type and extent
1337: EAF5
1338: EAF5             QMarkFind:
1339: EAF5 CD F6 EF               CALL   SearchForDirectoryRecord ; Find the directory record
1340: EAF8 C3 15 F2               JP     CopyDirEntryToUserDMA ; Move it to the User's buffer
1341: EAFB
1342: EAFB         ;---------------------Search for Next Name Match - 12 (18) -----------------;
1343: EAFB         ;	This function searches down the file directory for the next file name,  ;
1344: EAFB         ; type, and extent that match the FCB specified in a previous Search First  ;
1345: EAFB         ; function call. Search First and Search Next are the only BDOS functions   ;
1346: EAFB         ; that must be used together. As you can see, the Search Next function      ;
1347: EAFB         ; does not require an FCB address as an input parameter-all the necessary   ;
1348: EAFB         ; information will have been left in the BDOS on the Search First call.     ;
1349: EAFB         ; Like Search First, Search Next returns a directory code in the A register,;
1350: EAFB         ; in this case, if A = OFFH, it means that there are no more files that     ;
1351: EAFB         ; match the file control block. If A is not OFFH, it will be a value of     ;
1352: EAFB         ; 0, 1, 2, or 3, indicating the relative directory entry number.            ;
1353: EAFB         ;                                                                           ;
1354: EAFB         ;  There are two ways of using the Search First/ Next calls. Consider a     ;
1355: EAFB         ; simple file copying program that takes as input an ambiguous file name.   ;
1356: EAFB         ; You could scan the file directory, matching all of the possible file      ;
1357: EAFB         ; names, possibly displaying them on the console, and storing the names of  ;
1358: EAFB         ; the files to be copied in a table inside your program. This would have    ;
1359: EAFB         ; the advantage of enabling you to present the file names to the operator   ;
1360: EAFB         ; before any copying occurred. You could even arrange for the operator to   ;
1361: EAFB         ; select which files to copy on a file-by-file basis. One disadvantage      ;
1362: EAFB         ; would be that you could not accurately predict how many files might be    ;
1363: EAFB         ; selected. On some hard disk systems you might have to accommodate several ;
1364: EAFB         ; thousand file names.                                                      ;
1365: EAFB         ;  The alternative way of handling the problem would be to match one file   ;
1366: EAFB         ; name, copy it, then match the next file name, copy it, and so on. If you  ;
1367: EAFB         ; gave the operator the choice of selecting which files to copy, this person;
1368: EAFB         ; would have to wait at the terminal as each file was being copied, but the ;
1369: EAFB         ; program would not need to have large table areas set aside to hold file   ;
1370: EAFB         ; names. This solution to the problem is slightly more complicated, as you  ;
1371: EAFB         ; can see from the logic in Figure 5-17.                                    ;
1372: EAFB         ;  The subroutine in Figure 5-17, Get Next File (GNF), contains all of the  ;
1373: EAFB         ; necessary logic to search down a directory for both alternatives described;
1374: EAFB         ; It does require that you indicate on entry whether it should search for   ;
1375: EAFB         ; the first or next file match, by setting A to zero or some nonzero value  ;
1376: EAFB         ; respectively.                                                             ;
1377: EAFB         ;  You can see from Figure 5-17 that whenever the subroutine is called to   ;
1378: EAFB         ; get the next file, you must execute a Search First function to re-find    ;
1379: EAFB         ; the  previous file. Only then can a Search Next be issued. As with all    ;
1380: EAFB         ; functions that return a directory code in A, if this value is not OFFH, it;
1381: EAFB         ; will be the relative directory entry number in the directory record       ;
1382: EAFB         ; currently in memory. This directory record will have been read into memory;
1383: EAFB         ; at whatever address was specified at the last Set DMA Address function    ;
1384: EAFB         ; call. Notwithstanding its odd name, the DMA Address is simply the address ;
1385: EAFB         ; into which any record input from disk will be placed. If the Set DMA      ;
1386: EAFB         ; Address function has not been used to change the value, then the CP/M     ;
1387: EAFB         ; default DMA address, location 0080H, will be used to hold the directory   ;
1388: EAFB         ; record.                                                                   ;
1389: EAFB         ;  The actual code for locating the address of the particular directory     ;
1390: EAFB         ;  entry matched by the Search First/ Next functions is shown in Figure 5-17;
1391: EAFB         ;  near the label GNFC. The method involves multiplying the directory code  ;
1392: EAFB         ;  by 32 and then adding this product to the current DMA address.	        ;
1393: EAFB         ;                                                                           ;
1394: EAFB         ;                                                                           ;
1395: EAFB         ;			Function Code	:	C  = 12H                                    ;
1396: EAFB         ;			Entry Parameters:	None , Assume previous Search First Call	;
1397: EAFB         ;			Exit Parameters :	A  = Directory Code							;
1398: EAFB         ;																			;
1399: EAFB         ;---------------------Search for Next Name Match - 12 (18) -----------------;
1400: EAFB             vFindNext:
1401: EAFB 2A B6 F4               LD     HL,(searchAddress)   ; Get Current Dir Entry
1402: EAFE 22 B4 EA               LD     (paramDE),HL         ; Get the user's FCB
1403: EB01 CD 40 EF               CALL   ReselectDisk         ; Reselect if needed
1404: EB04 CD 0B F0               CALL   GetNextDirectoryRecord ; Go find the next directory record
1405: EB07 C3 15 F2               JP     CopyDirEntryToUserDMA ; Copy directory entry to user
1406: EB0A
1407: EB0A         ;--------------------------------Delete File - 13 (19) ---------------------;
1408: EB0A         ; This function logically deletes from the file directory files that match  ;
1409: EB0A         ; the FCB addressed by DE. It does so by replacing the first byte of each   ;
1410: EB0A         ; relevant directory entry (remember, a single file can have several        ;
1411: EB0A         ; entries, one for each extent) by the value OE5H. This flags the directory ;
1412: EB0A         ; entry as being available for use.                                         ;
1413: EB0A         ;                                                                           ;
1414: EB0A         ;  Like the previous two functions, Search First and Search Next, this      ;
1415: EB0A         ; function can take an ambiguous file name and type as part of the          ;
1416: EB0A         ; File Control Block, but unlike those functions, the logical disk select   ;
1417: EB0A         ; code cannot be a"?". This function returns a directory code in A in the   ;
1418: EB0A         ; same way as the previous file operations.                                 ;
1419: EB0A         ;                                                                           ;
1420: EB0A         ;                                                                           ;
1421: EB0A         ;			Function Code	:	C  = 13H                                    ;
1422: EB0A         ;			Entry Parameters:	DE = Address of File Control Block			;
1423: EB0A         ;			Exit Parameters :	A  = Directory Code							;
1424: EB0A         ;																			;
1425: EB0A         ;--------------------------------Delete File - 13 (19) ---------------------;
1426: EB0A             vDeleteFile:
1427: EB0A CD 40 EF               CALL   ReselectDisk         ; Reselect if needed
1428: EB0D CD 29 F2               CALL   CheckWrite           ; Terminate with error if Disk R/O
1429: EB10 0E 0C                  LD     C,fcbExtIndex        ; Load the extent number field
1430: EB12 CD F6 EF               CALL   SearchForDirectoryRecord ; Look for directory entry
1431: EB15
1432: EB15             DeleteFileLoop:
1433: EB15 CD 47 F1               CALL   AtEndOfDirectory     ; Have we worked thru all entries
1434: EB18 CA 22 F2               JP     Z,DirLocationToReturnLoc ; Return directory Index to caller
1435: EB1B
1436: EB1B         ; set each non zero disk map entry to 0 in the allocation vector
1437: EB1B CD 30 F2               CALL   CheckRODirectory     ; Terminate with error if File R/O
1438: EB1E CD 50 F1               CALL   GetCurrentDirectoryRecord ; Point to Directory Entry
1439: EB21 36 E5                  LD     (HL),emptyDir        ; Mark as Empty
1440: EB23 0E 00                  LD     C,FALSE              ; Set flag for remove
1441: EB25 CD 74 F1               CALL   ScanDiskMap          ; Reclaim Bisk Blocks, set to 0
1442: EB28 CD 69 F0               CALL   WriteDir             ; Update the directory
1443: EB2B CD 0B F0               CALL   GetNextDirectoryRecord ; Look for more
1444: EB2E C3 15 EB               JP     DeleteFileLoop       ; Loop
1445: EB31
1446: EB31         ;----------------------------Read Sequential - 14 (20) ---------------------;
1447: EB31         ;  This function reads the next record (l28-byte sector) from the designated;
1448: EB31         ; file into memory at the address set by the last Set DMA function call     ;
1449: EB31         ; (code 26, lAH). The record read is specified by the FCB's sequential      ;
1450: EB31         ; record field. This field is incremented by 1 so that a subsequent call    ;
1451: EB31         ; to Read Sequential will get the next record from the file. If the end of  ;
1452: EB31         ; the current extent is reached, then the BDOS will automatically open the  ;
1453: EB31         ; next extent and reset the sequential record field to 0, ready for the     ;
1454: EB31         ; next Read function call.                                                  ;
1455: EB31         ;  The file specified in the FCB must have been readied for input by        ;
1456: EB31         ; issuing an Open File (code 15, OFH) or a Create File (code 22, 16H)       ;
1457: EB31         ; BDOS call. The value OOH is returned in A to indicate a successful Read   ;
1458: EB31         ; Sequential operation, while a nonzero value shows that the Read could     ;
1459: EB31         ; not be completed because there was no data in the next record, as at the  ;
1460: EB31         ; end of file.                                                              ;
1461: EB31         ;                                                                           ;
1462: EB31         ;  Although it is not immediately obvious, you can change the sequential    ;
1463: EB31         ; record number, FCB$SEQREC, and within a given extent, read a record at    ;
1464: EB31         ; random. If you want to access any given record within a file, you must    ;
1465: EB31         ; compute which extent that record would be in and set the extent field in  ;
1466: EB31         ; the file control block (FCB$EXTENT) before you open the file. Thus,       ;
1467: EB31         ; although the function name implies sequential access, in practice you can ;
1468: EB31         ; use it to perform a simple type of random access. If you need to do true  ;
1469: EB31         ; random access, look ahead to the Random Read function (code 33), which    ;
1470: EB31         ; takes care of opening the correct extent automatically.                   ;
1471: EB31         ;  When you read data from a CP/M text file, the normal convention is to    ;
1472: EB31         ; fill the last record of the file with lAH characters (CONTROL-Z).         ;
1473: EB31         ; Therefore, two possible conditions can indicate end-of-file: either       ;
1474: EB31         ; encountering a IAH, or receiving a return code from the BDOS function     ;
1475: EB31         ; (in the A register) of OFFH. However, if the file that you are reading    ;
1476: EB31         ; is not an ASCII text file, then a IAH character has no special meaning,   ;
1477: EB31         ; it is just a normal data byte in the body of the file.	                ;
1478: EB31         ;                                                                           ;
1479: EB31         ;			Function Code	:	C  = 14H                                    ;
1480: EB31         ;			Entry Parameters:	DE = Address of File Control Block			;
1481: EB31         ;			Exit Parameters :	A  = 0  => Success							;
1482: EB31         ;								  <> 0  => No data read, Probably EOF		;
1483: EB31         ;																			;
1484: EB31         ;----------------------------Read Sequential - 14 (20) ---------------------;
1485: EB31             vReadSeq:
1486: EB31 CD 40 EF               CALL   ReselectDisk         ; Reselect if needed
1487: EB34         ;ReadSeq:
1488: EB34 3E 01                  LD     A,SEQ_ACCESS
1489: EB36 32 AE F4               LD     (diskAccessType),A   ; Set flag as sequential Disk I/O
1490: EB39
1491: EB39             DiskRead:
1492: EB39 3E FF                  LD     A,TRUE
1493: EB3B 32 B2 F4               LD     (readModeFlag),A     ; Set Flag for read
1494: EB3E
1495: EB3E CD 6C EF               CALL   SetRecordVars        ; Set variables for current FCB
1496: EB41 3A BE F4               LD     A,(currentFileRecord)
1497: EB44 21 BC F4               LD     HL,fcbRecordCount
1498: EB47 BE                     CP     M                    ; is File Record < fcbRecordCount
1499: EB48 DA 5C EB               JP     C,RecordOK           ; skip if  yes
1500: EB4B         ; not enough records in the extent
1501: EB4B FE 80                  CP     RecordsPerExtent     ; Is record count the Max ?
1502: EB4D 20 22                  JR     NZ,NothingRead       ;  No, Exit with EOF
1503: EB4F
1504: EB4F CD A8 F2               CALL   OpenNextExt          ; Need to open the next extent
1505: EB52 AF                     XOR    A
1506: EB53 32 BE F4               LD     (currentFileRecord),A ; Reset the record count
1507: EB56 3A B6 EA               LD     A,(exitParameterByte) ; Was it a good Open
1508: EB59 B7                     OR     A
1509: EB5A 20 15                  JR     NZ,NothingRead       ;  exit if No
1510: EB5C
1511: EB5C             RecordOK:
1512: EB5C CD 58 F2               CALL   GetBlockNumber       ; Put it in absoluteCPMRecord
1513: EB5F CD 8A F2               CALL   WasBlockAllocated    ; Was it a good Allocation ?
1514: EB62 28 0D                  JR     Z,NothingRead        ; get out if not allocated
1515: EB64
1516: EB64 CD 90 F2               CALL   SetActualRecordAdd   ; Absolute CPM Record
1517: EB67 CD 7C F3               CALL   Seek                 ; Go to proper track,sector
1518: EB6A CD 15 EF               CALL   ReadBuffer           ; Read into DMA address
1519: EB6D CD 81 F0               CALL   UpdateRecordVariables ; update Record info
1520: EB70 C9                     RET
1521: EB71
1522: EB71             NothingRead:
1523: EB71 C3 2E F3               JP     SetExitParamTo1      ; No Data read
1524: EB74
1525: EB74         ;----------------------------Write Sequential - 15 (21) --------------------;
1526: EB74         ;	This function writes a record from the address specified in the last Set;
1527: EB74         ; DMA (code 26, lAH) function call to the file defined in the FCB. The      ;
1528: EB74         ; sequential record number in the FCB (RC) is updated by 1 so that          ;
1529: EB74         ; the next call to Write Sequential will write to the next record position  ;
1530: EB74         ; in the file. If necessary, a new extent will be opened to receive the new ;
1531: EB74         ; record.                                                                   ;
1532: EB74         ;  This function is directly analogous to the Read Sequential function,     ;
1533: EB74         ; writing instead of reading. The file specified in the FCB must first be   ;
1534: EB74         ; activated by an Open File (code 15,OFH) or create File call (code 22,16H).;
1535: EB74         ;  A directory code of OOH is returned in A to indicate that the Write was  ;
1536: EB74         ; successful, a nonzero value is returned if the Write could not be         ;
1537: EB74         ; completed because the disk was full.                                      ;
1538: EB74         ;                                                                           ;
1539: EB74         ;  As with the Read Sequential function (code 20, 14H), you can achieve     ;
1540: EB74         ; a simple form of random writing to the file by manipulating the           ;
1541: EB74         ; sequential record number (RC). However, you can only overwrite existing   ;
1542: EB74         ; records in the file, and if you want to move to another extent, you       ;
1543: EB74         ; must close the file and reopen it with the FCB$EXTENT field set to the    ;
1544: EB74         ; correct value.                                                            ;
1545: EB74         ;  The only logical error condition that can occur when writing to a file   ;
1546: EB74         ; is insufficient room on the disk to accommodate the next extent of the    ;
1547: EB74         ; file. Any hardware errors detected will be handled by the disk driver     ;
1548: EB74         ; built into the BIOS or BDOS.                                              ;
1549: EB74         ;                                                                           ;
1550: EB74         ;                                                                           ;
1551: EB74         ;			Function Code	:	C  = 15H                                    ;
1552: EB74         ;			Entry Parameters:	DE = Address of File Control Block			;
1553: EB74         ;			Exit Parameters :	A  = 0  => Success							;
1554: EB74         ;								  <> 0  => No data read, Probably EOF		;
1555: EB74         ;																			;
1556: EB74         ;----------------------------Write Sequential - 15 (21) --------------------;
1557: EB74
1558: EB74             vWriteSeq:
1559: EB74 CD 40 EF               CALL   ReselectDisk         ; Reselect if needed
1560: EB77         ;	CALL	DiskWriteSeq
1561: EB77         ;	RET
1562: EB77         ;====================
1563: EB77         ;sequential disk write
1564: EB77             DiskWriteSeq:
1565: EB77 3E 01                  LD     A,SEQ_ACCESS
1566: EB79 32 AE F4               LD     (diskAccessType),A   ; Set flag as sequential Disk I/O
1567: EB7C
1568: EB7C             DiskWrite:
1569: EB7C 3E 00                  LD     A,FALSE
1570: EB7E 32 B2 F4               LD     (readModeFlag),A     ; Set Flag for Write
1571: EB81
1572: EB81 CD 29 F2               CALL   CheckWrite           ; Terminate with error if Disk R/O
1573: EB84 2A B4 EA               LD     HL,(paramDE)         ; Put FCB in HL
1574: EB87 CD 33 F2               CALL   CheckROFile          ; Terminate with error if File R/O
1575: EB8A CD 6C EF               CALL   SetRecordVars        ; Set variables for current FCB
1576: EB8D 3A BE F4               LD     A,(currentFileRecord) ; Get current record number
1577: EB90 FE 80                  CP     highestRecordNumber+1 ; Is it still in the same extent?
1578: EB92 D2 2E F3               JP     NC,SetExitParamTo1   ; Exit with NO WRITE set
1579: EB95
1580: EB95 CD 58 F2               CALL   GetBlockNumber       ; Compute disk block number
1581: EB98 CD 8A F2               CALL   WasBlockAllocated    ; Is it really allocated ?
1582: EB9B 0E 00                  LD     C,WriteAllocated     ; Assume a normal write operation
1583: EB9D C2 E4 EB               JP     NZ,HaveWriteBlock    ;  Skip if block already allocated
1584: EBA0         ; not allocated -
1585: EBA0         ; the argument to getblock is the starting position for the disk search
1586: EBA0         ; and should be the last allocated block for this file,
1587: EBA0         ; or the value 0 if no space has been allocated
1588: EBA0
1589: EBA0 CD 65 F2               CALL   GetDiskMapIndex      ; Disk Map Index in ACC
1590: EBA3 32 B4 F4               LD     (diskMapIndex),A     ; Save it
1591: EBA6 01 00 00               LD     BC,0000h             ; Anticipate using 0000
1592: EBA9 B7                     OR     A                    ; Is it block 0?
1593: EBAA 28 07                  JR     Z,FindAvailableBlock ;  skip if yes
1594: EBAC
1595: EBAC 4F                     LD     C,A                  ;  else a previous block exists
1596: EBAD 0B                     DEC    BC                   ; Adjust the index
1597: EBAE CD 72 F2               CALL   GetDiskMapValue      ; Put previous block # into HL
1598: EBB1 44                     LD     B,H                  ; Move previous block
1599: EBB2 4D                     LD     C,L                  ;  number into BC
1600: EBB3
1601: EBB3             FindAvailableBlock:
1602: EBB3 CD 9F F1               CALL   GetClosestBlock      ; Block number in HL
1603: EBB6 7D                     LD     A,L                  ; If no available blocks HL
1604: EBB7 B4                     OR     H                    ;  HL set to 0000H
1605: EBB8 20 06                  JR     NZ,FoundAvailableBlock ; Skip if found
1606: EBBA
1607: EBBA 3E 02                  LD     A,2                  ; Load return value
1608: EBBC 32 B6 EA               LD     (exitParameterByte),A ; Save for caller
1609: EBBF C9                     RET                         ; Exit with exitParameterByte=2
1610: EBC0
1611: EBC0             FoundAvailableBlock:
1612: EBC0 22 C0 F4               LD     (absoluteCPMRecord),HL ; Save the block number
1613: EBC3 EB                     EX     DE,HL                ; block number to DE (E)
1614: EBC4 2A B4 EA               LD     HL,(paramDE)         ; HL at FCB
1615: EBC7 01 10 00               LD     BC,fcbDiskMapIndex   ; Index to start of FCB Map
1616: EBCA 09                     ADD    HL,BC                ; HL=.start of FCB Map
1617: EBCB
1618: EBCB
1619: EBCB 3A B4 F4               LD     A,(diskMapIndex)     ; Get target block index
1620: EBCE 4F                     LD     C,A                  ; Map index to C
1621: EBCF 06 00                  LD     B,0                  ; Set MSB to 00
1622: EBD1 09                     ADD    HL,BC                ; Calculate 8 bit block's location
1623: EBD2 3A B8 F4               LD     A,(byteAllocationFlag) ; Get allocation size flag
1624: EBD5 B7                     OR     A                    ; Test it
1625: EBD6 28 03                  JR     Z,Allocate16Bit      ; Skip if allocating word
1626: EBD8
1627: EBD8 73                     LD     (HL),E               ; Update the Map
1628: EBD9 18 04                  JR     MarkNewBlock         ; Skip 16 bit calculations
1629: EBDB
1630: EBDB             Allocate16Bit:
1631: EBDB 09                     ADD    HL,BC                ; Adjust for 16 bit value
1632: EBDC 72                     LD     (HL),D               ; Save MSB
1633: EBDD 23                     INC    HL
1634: EBDE 73                     LD     (HL),E               ; SAVE LSB
1635: EBDF             MarkNewBlock:
1636: EBDF CD D8 EF               CALL   ResetFileWriteFlag
1637: EBE2         ;	CALL	GetWriteFileFlagValue		; HL = Address of fcbS2
1638: EBE2         ;	RES		7,(HL)						; Reset the FileWriteFlag
1639: EBE2 0E 02                  LD     C,WriteCleanBuffer   ; Marked as unallocated write
1640: EBE4
1641: EBE4             HaveWriteBlock:
1642: EBE4 3A B6 EA               LD     A,(exitParameterByte)
1643: EBE7 B7                     OR     A
1644: EBE8 C0                     RET    NZ                   ; Exit if non zero returned value ??
1645: EBE9
1646: EBE9 C5                     PUSH   BC                   ; Write flag (in C)
1647: EBEA CD 90 F2               CALL   SetActualRecordAdd   ; Set absoluteCPMRecord
1648: EBED CD 7C F3               CALL   Seek                 ; Seek to o proper file position
1649: EBF0 C1                     POP    BC                   ; Write flag (in C)
1650: EBF1 C5                     PUSH   BC                   ; Write flag (in C)
1651: EBF2 CD 79 F0               CALL   WriteBuffer          ; Write buffer and check result
1652: EBF5 C1                     POP    BC                   ; Write flag (in C)
1653: EBF6
1654: EBF6 3A BE F4               LD     A,(currentFileRecord) ; Get the current record
1655: EBF9 21 BC F4               LD     HL,fcbRecordCount    ; Get the starting FCB record count
1656: EBFC BE                     CP     M                    ; Current File Record > fcbRecordCount
1657: EBFD 38 04                  JR     C,DiskWrite1         ;  skip if yes
1658: EBFF 77                     LD     (HL),A               ; update the FCB RC
1659: EC00 34                     INC    M                    ; fcbRecordCount = current File Record+1
1660: EC01 0E 02                  LD     C,WriteCleanBuffer   ; Marked as unallocated write
1661: EC03             DiskWrite1:
1662: EC03         ; A has current File Record, C=2 if new block or new record#
1663: EC03 0D                     DEC    C
1664: EC04 0D                     DEC    C                    ; Check if C = unallocated write
1665: EC05 20 05                  JR     NZ,DiskWrite2        ; Skip if C not unallocated write
1666: EC07 F5                     PUSH   AF                   ; currentFileRecord
1667: EC08 CD D8 EF               CALL   ResetFileWriteFlag
1668: EC0B         ;	CALL	GetWriteFileFlagValue		; HL points to FCB s2
1669: EC0B         ;	RES		7,(HL)						; Reset WriteFileFlag
1670: EC0B F1                     POP    AF                   ; currentFileRecord
1671: EC0C             DiskWrite2:
1672: EC0C         ; check for end of extent, if found attempt
1673: EC0C         ; to open next extent in preparation for next write
1674: EC0C FE 7F                  CP     highestRecordNumber  ; Space for more records ?
1675: EC0E 20 19                  JR     NZ,DiskWriteCleanup  ;  finish up if Yes
1676: EC10
1677: EC10 3A AE F4               LD     A,(diskAccessType)   ; Is this using Random Access
1678: EC13 B7                     OR     A
1679: EC14 28 13                  JR     Z,DiskWriteCleanup   ;  finish up if Yes
1680: EC16
1681: EC16 CD 81 F0               CALL   UpdateRecordVariables ; Update variables from I/O in  FCB
1682: EC19 CD A8 F2               CALL   OpenNextExt          ; Acc = 0 OK, Acc = 1 Failed
1683: EC1C 21 B6 EA               LD     HL,exitParameterByte
1684: EC1F 7E                     LD     A,(HL)               ; Put Open  result in parameter
1685: EC20 B7                     OR     A                    ; Is it 00
1686: EC21 20 04                  JR     NZ,DiskWriteCleanup0 ;  no, skip currentRecord update
1687: EC23 3D                     DEC    A                    ; A gets FF
1688: EC24 32 BE F4               LD     (currentFileRecord),A ; Update currentFileRecord
1689: EC27
1690: EC27             DiskWriteCleanup0:
1691: EC27 36 00                  LD     (HL),0               ; Set exitParameterByte
1692: EC29             DiskWriteCleanup:
1693: EC29 C3 81 F0               JP     UpdateRecordVariables ; update variables from I/O in  FCB
1694: EC2C
1695: EC2C
1696: EC2C         ;--------------------------------- Make File - 16 (22) ---------------------;
1697: EC2C         ;  This function creates a new file of the specified name and type. You must;
1698: EC2C         ; first ensure that no file of the same name and type already exists on the ;
1699: EC2C         ; same logical disk, either by trying to open the file (if this succeeds,   ;
1700: EC2C         ; the file already exists) or by unconditionally erasing the file.          ;
1701: EC2C         ;  In addition to creating the file and its associated file directory entry,;
1702: EC2C         ; this function also effectively opens the file so that it is ready for     ;
1703: EC2C         ; records to be written to it.                                              ;
1704: EC2C         ;  This function returns a normal directory code if the file creation has   ;
1705: EC2C         ; completed successfully or a value of OFFH if there is insufficient        ;
1706: EC2C         ; disk or directory space.                                                  ;
1707: EC2C         ;  Note that this function cannot accept an ambiguous file name in the FCB. ;
1708: EC2C         ;                                                                           ;
1709: EC2C         ;                                                                           ;
1710: EC2C         ;			Function Code	:	C  = 16H                                    ;
1711: EC2C         ;			Entry Parameters:	DE = Address of File Control Block			;
1712: EC2C         ;			Exit Parameters :	A  = Directory Code							;
1713: EC2C         ;																			;
1714: EC2C         ;---------------------------- Make File - 16 (22) --------------------------;
1715: EC2C             vMakeFile:
1716: EC2C CD BE EF               CALL   InitializeExtentNumberMSB ; Clear the Extent number
1717: EC2F CD 40 EF               CALL   ReselectDisk         ; Reselect if needed
1718: EC32 C3 B3 EE               JP     MakeNewFile          ; Go Make it
1719: EC35
1720: EC35         ;-------------------------- Rename File - 17 (23) --------------------------;
1721: EC35         ;  This function renames an existing file name and type to a new name and   ;
1722: EC35         ; type. It is unusual in that it uses a single FCB to store both the old    ;
1723: EC35         ; file name and type (in the first 16 bytes) and the new file name and type ;
1724: EC35         ; (in the second 16 bytes).                                                 ;
1725: EC35         ;  This function returns a normal directory code if the file rename was     ;
1726: EC35         ; completed successfully or a value of OFFH if the old file name could not  ;
1727: EC35         ; be found.                                                                 ;
1728: EC35         ;                                                                           ;
1729: EC35         ;  The Rename File function only checks that the old file name and type     ;
1730: EC35         ; exist; it makes no check to ensure that the new name and type combination ;
1731: EC35         ; does not already exist. Therefore, you should try to open the new file    ;
1732: EC35         ; name and type. If you succeed, do not attempt the rename operation.       ;
1733: EC35         ; CP/M will create more than one file of the same name and type, and you    ;
1734: EC35         ; stand to lose the information in both files as you attempt to sort out    ;
1735: EC35         ; the problem.                                                              ;
1736: EC35         ;  Never use ambiguous file names in a rename operation; it produces strange;
1737: EC35         ; effects and may result in files being irreparably damaged. This function  ;
1738: EC35         ; will change all occurrences of the old file name to the new name.         ;
1739: EC35         ;                                                                           ;
1740: EC35         ;                                                                           ;
1741: EC35         ;			Function Code	:	C  = 17H									;
1742: EC35         ;			Entry Parameters:	DE = Address of File Control Block			;
1743: EC35         ;			Exit Parameters :	A  = Directory Code							;
1744: EC35         ;																			;
1745: EC35         ;-------------------------- Rename File - 17 (23) --------------------------;
1746: EC35             vRenameFile:
1747: EC35 CD 40 EF               CALL   ReselectDisk         ; Reselect if needed
1748: EC38 CD 29 F2               CALL   CheckWrite           ; Terminate with error if Disk R/O
1749: EC3B 0E 0C                  LD     C,fcbExtIndex        ; Match user#, Name & Type only
1750: EC3D CD F6 EF               CALL   SearchForDirectoryRecord
1751: EC40
1752: EC40         ; Move the old use number to the new entry (2nd half of FCB)
1753: EC40 2A B4 EA               LD     HL,(paramDE)         ; FCB pointer
1754: EC43 7E                     LD     A,(HL)               ; First byte of Dir entry
1755: EC44 11 10 00               LD     DE,fcbDiskMapIndex   ; Use second half of FCB
1756: EC47 19                     ADD    HL,DE                ; Point at the second half of FCB
1757: EC48 77                     LD     (HL),A               ; Put into new name user position
1758: EC49
1759: EC49             RenameLoop:
1760: EC49 CD 47 F1               CALL   AtEndOfDirectory     ; If have we checked the whole dir
1761: EC4C CA 22 F2               JP     Z,DirLocationToReturnLoc ;  return directory Index to caller
1762: EC4F         ; process this match
1763: EC4F CD 30 F2               CALL   CheckRODirectory     ; Terminate with error if File R/O
1764: EC52 0E 10                  LD     C,fcbDiskMapIndex    ; Set starting position
1765: EC54 1E 0C                  LD     E,fcbExtIndex        ; Set Length
1766: EC56 CD 41 F2               CALL   CopyDir              ; copy from FCB to dir entry
1767: EC59         ; element renamed, look for more
1768: EC59 CD 0B F0               CALL   GetNextDirectoryRecord ; Look for more dir entries
1769: EC5C 18 EB                  JR     RenameLoop           ; Loop
1770: EC5E
1771: EC5E         ;---------------------------- Get Active Disks - 18 (24) -------------------;
1772: EC5E         ; This function returns a bit map, called the login vector, in register     ;
1773: EC5E         ; pair  HL, indicating which logical disk drives have been selected since   ;
1774: EC5E         ; the last  warm boot or Reset Disk function (code 13, ODH). The least      ;
1775: EC5E         ; significant bit of L corresponds to disk A, while the highest order bit   ;
1776: EC5E         ; in H maps disk P. The bit corresponding to the specific logical disk is   ;
1777: EC5E         ; set to 1 if the disk has been selected or to 0 if the disk is not         ;
1778: EC5E         ; currently on-line.                                                        ;
1779: EC5E         ;  Logical disks can be selected programmatically through any file          ;
1780: EC5E         ; operation  that sets the drive field to a nonzero value, through the      ;
1781: EC5E         ; Select Disk function (code 14, OEH), or by the operator entering an       ;
1782: EC5E         ; "X:" command where "X" is equal to A, B, ... , P.                         ;
1783: EC5E         ;                                                                           ;
1784: EC5E         ;			Function Code	:	C = 018H                                    ;
1785: EC5E         ;			Entry Parameters:	None										;
1786: EC5E         ;			Exit Parameters :	HL = Active disk map (login vector)			;
1787: EC5E         ;																			;
1788: EC5E         ;---------------------------- Get Active Disks - 18 (24) -------------------;
1789: EC5E             vGetLoginVector:
1790: EC5E 2A 8D F4               LD     HL,(loggedDisks)
1791: EC61 22 B6 EA               LD     (exitParameterWord),HL
1792: EC64 C9                     RET
1793: EC65
1794: EC65         ;---------------------------- Get Current Disk- 19 (25) --------------------;
1795: EC65         ;   This function returns the current default disk set by the last Select   ;
1796: EC65         ; Disk function call (code 14, OEH) or by the operator entering the         ;
1797: EC65         ; "X:"command (where "X" is A, B, ..., P) to the CCP.                       ;
1798: EC65         ;                                                                           ;
1799: EC65         ;  This function returns the current default disk in coded form.            ;
1800: EC65         ; Register A= 0 if drive A is the current drive, I if drive B, and so on.   ;
1801: EC65         ; If you need to convert this to the corresponding ASCII character, simply  ;
1802: EC65         ; add 41H to register A. Use this function when you convert a file name and ;
1803: EC65         ; type in an FCB to an ASCII string in order to display it. If the first    ;
1804: EC65         ; byte of the FCB is OOH, the current default drive is to be used.          ;
1805: EC65         ; You must therefore use this function to determine the logical disk letter ;
1806: EC65         ; for the default drive.                                                    ;
1807: EC65         ;                                                                           ;
1808: EC65         ;			Function Code	:	C = 019H                                    ;
1809: EC65         ;			Entry Parameters:	None										;
1810: EC65         ;			Exit Parameters :	A = Current Disk (0=A,1=B...,F=P)			;
1811: EC65         ;																			;
1812: EC65         ;---------------------------- Get Current Disk- 19 (25) --------------------;
1813: EC65             vGetCurrentDisk:
1814: EC65 3A 89 F4               LD     A,(currentDisk)
1815: EC68 32 B6 EA               LD     (exitParameterByte),A
1816: EC6B C9                     RET
1817: EC6C
1818: EC6C         ;---------------------------- Set DMA Address - 1A (26) --------------------;
1819: EC6C         ;  This function sets the BDOS's direct memory access (DMA) address to a new;
1820: EC6C         ; value. The name is an historic relic dating back to the Intel Development ;
1821: EC6C         ; System on which CP/M was originally developed. This machine, by virtue of ;
1822: EC6C         ; its hardware, could read data from a diskette directly into memory or     ;
1823: EC6C         ; write data to a diskette directly from memory. The name DMA address now   ;
1824: EC6C         ; applies to the address of the buffer to and from which data is            ;
1825: EC6C         ; transferred whenever a diskette Read, Write, or directory operation is    ;
1826: EC6C         ; performed. Whenever CP/M first starts up (cold boot) m a warm boot or     ;
1827: EC6C         ; Reset Disk operation occurs, the DMA address is reset to its default      ;
1828: EC6C         ; value of 0080H.                                                           ;
1829: EC6C         ;                                                                           ;
1830: EC6C         ;			Function Code	:	C = 0A9H                                    ;
1831: EC6C         ;			Entry Parameters:	DE = DMA Address							;
1832: EC6C         ;			Exit Parameters :	None										;
1833: EC6C         ;																			;
1834: EC6C         ;---------------------------- Set DMA Address - 1A (26) --------------------;
1835: EC6C             vSetDMA:
1836: EC6C 2A B4 EA               LD     HL,(paramDE)
1837: EC6F 22 8F F4               LD     (initDAMAddress),HL
1838: EC72 C3 07 EF               JP     SetDataDMA
1839: EC75
1840: EC75         ;---------------------------- Get Allocation Vector - 1B (27) --------------;
1841: EC75         ;  This function returns the base, or starting, address of the allocation   ;
1842: EC75         ; vector for the currently selected logical disk. This information,         ;
1843: EC75         ; indicating which parts of the disk are assigned, is used by utility       ;
1844: EC75         ; programs and the BDOS itself to determine how much unused space is on the ;
1845: EC75         ; logical disk, to locate an unused allocation block in order to extend     ;
1846: EC75         ; a file, or to relinquish an allocation block when a file is deleted.      ;
1847: EC75         ;                                                                           ;
1848: EC75         ;			Function Code	:	C = 01BH                                    ;
1849: EC75         ;			Entry Parameters:	None										;
1850: EC75         ;			Exit Parameters :	HL = Address of allocation vector			;
1851: EC75         ;																			;
1852: EC75         ;---------------------------- Get Allocation Vector - 1B (27) --------------;
1853: EC75             vGetAllocAddr:
1854: EC75 2A 9D F4               LD     HL,(caAllocVector)
1855: EC78 22 B6 EA               LD     (exitParameterWord),HL
1856: EC7B C9                     RET
1857: EC7C
1858: EC7C         ;---------------------------- Write Protect Disk - 1C (28) -----------------;
1859: EC7C         ;  This function logically sets the currently selected disk to a Read-Only  ;
1860: EC7C         ; state. Any attempts to execute a Write Sequential or Write Random function;
1861: EC7C         ; to the selected disk will be intercepted by the BDOS, and the following   ;
1862: EC7C         ; message will appear on the console:                                       ;
1863: EC7C         ;	BDOS Err on X: R/O                                                      ;
1864: EC7C         ;	where X: is the selected disk.                                          ;
1865: EC7C         ;                                                                           ;
1866: EC7C         ;  Once you have requested Read-Only status for the currently selected      ;
1867: EC7C         ; logical disk, this status will persist even if you proceed to select      ;
1868: EC7C         ; other logical disks. In fact, it will remain in force until the next warm ;
1869: EC7C         ; boot or Reset Disk System function call.                                  ;
1870: EC7C         ;  Digital Research documentation refers to this function code as Disk Write;
1871: EC7C         ; Protect. The Read-Only description is used here because it corresponds    ;
1872: EC7C         ; to the error message produced if your program attempts to write on        ;
1873: EC7C         ; the disk.                                                                 ;
1874: EC7C         ;                                                                           ;
1875: EC7C         ;			Function Code	:	C = 01CH                                    ;
1876: EC7C         ;			Entry Parameters:	None										;
1877: EC7C         ;			Exit Parameters :	None										;
1878: EC7C         ;																			;
1879: EC7C         ;---------------------------- Write Protect Disk - 1C (28) -----------------;
1880: EC7C         ;;write protect current disk
1881: EC7C             vWriteProtectDisk:
1882: EC7C C3 1D EF               JP     SetDiskReadOnly
1883: EC7F
1884: EC7F         ;---------------------------- Get Read-Only Map - 1D (29) ------------------;
1885: EC7F         ;  This function returns a bit map in registers H and L showing which       ;
1886: EC7F         ; logical disks in the system have been set to Read-Only status, either by  ;
1887: EC7F         ; the Set Logical Disk to Read-Only function call (code 28, ICH), or by     ;
1888: EC7F         ; the BDOS itself, because it detected that a diskette had been changed.    ;
1889: EC7F         ;  The least significant bit of L corresponds to logical disk A, while the  ;
1890: EC7F         ; most significant bit of H corresponds to disk P. The bit corresponding to ;
1891: EC7F         ; the specific logical disk is set to I if the disk has been set to         ;
1892: EC7F         ; Read-Only status.                                                         ;
1893: EC7F         ;                                                                           ;
1894: EC7F         ;			Function Code	:	C = 01DH                                    ;
1895: EC7F         ;			Entry Parameters:	None										;
1896: EC7F         ;			Exit Parameters :	HL = Read-Only Vector						;
1897: EC7F         ;																			;
1898: EC7F         ;---------------------------- Get Read-Only Map - 1D (29) ------------------;
1899: EC7F             vGetReadOnlyMap:
1900: EC7F 2A 8B F4               LD     HL,(readOnlyVector)
1901: EC82 22 B6 EA               LD     (exitParameterWord),HL
1902: EC85 C9                     RET
1903: EC86
1904: EC86         ;---------------------- Set File Attributes - 1E (30) ----------------------;
1905: EC86         ;  This function sets the bits that describe attributes of a file in the    ;
1906: EC86         ; relevant directory entries for the specified file. Each file can be       ;
1907: EC86         ; assigned up to 11 file attributes. Of these 11, two have predefined       ;
1908: EC86         ; meanings, four others are available for you to use, and the remaining     ;
1909: EC86         ; five are reserved for future use by CP/M.                                 ;
1910: EC86         ;  Each attribute consists of a single bit. The most significant bit of     ;
1911: EC86         ; each byte of the file name and type is used to store the attributes.      ;
1912: EC86         ; The file attributes are known by a code consisting of the letter "f"      ;
1913: EC86         ; (for file name) or "t" (for file type), followed by the number of the     ;
1914: EC86         ; character position and a single quotation mark. For example, the Read-Only;
1915: EC86         ; attribute is tl'.                                                         ;
1916: EC86         ;	The significance of the attributes is as follows:                       ;
1917: EC86         ;			fl' to f4' Available for you to use                             ;
1918: EC86         ;			f5' to fS' Reserved for future CP/M use                         ;
1919: EC86         ;			tl' Read-Only File attribute                                    ;
1920: EC86         ;			t2' System File attribute                                       ;
1921: EC86         ;			t3' Reserved for future CP/M use                                ;
1922: EC86         ;			                                                                ;
1923: EC86         ;  Attributes are set by presenting this function with an FCB in which the  ;
1924: EC86         ; unambiguous file name has been preset with the most significant bits      ;
1925: EC86         ; set appropriately. This function then searches the directory for a match  ;
1926: EC86         ; and changes the matched entries to contain the attributes which have been ;
1927: EC86         ; set in the FCB.                                                           ;
1928: EC86         ;  The BDOS will intercept any attempt to write on a file that has the      ;
1929: EC86         ; Read-Only attribute set. The DIR command in the CCP does not display any  ;
1930: EC86         ; file with System status.                                                  ;
1931: EC86         ;                                                                           ;
1932: EC86         ;  You can use the four attributes available to you to set up a file        ;
1933: EC86         ; security system, or perhaps to flag certain files that must be backed up  ;
1934: EC86         ; to other disks. The Search First and Search Next functions allow you to   ;
1935: EC86         ; view the complete file directory entry, so your programs can test the     ;
1936: EC86         ; attributes easily.                                                        ;
1937: EC86         ;                                                                           ;
1938: EC86         ;                                                                           ;
1939: EC86         ;			Function Code	:	C  = 1EH                                    ;
1940: EC86         ;			Entry Parameters:	DE = Address of File Control Block			;
1941: EC86         ;			Exit Parameters :	A  = Directory Code							;
1942: EC86         ;																			;
1943: EC86         ;---------------------- Set File Attributes - 1E (30) ----------------------;
1944: EC86             vSetFileAttributes:
1945: EC86 CD 40 EF               CALL   ReselectDisk         ; Reselect if needed
1946: EC89 0E 0C                  LD     C,fcbExtIndex        ; Size of search/match
1947: EC8B CD F6 EF               CALL   SearchForDirectoryRecord ; Find a match
1948: EC8E
1949: EC8E             SetAttributesLoop:
1950: EC8E CD 47 F1               CALL   AtEndOfDirectory     ; Any more dir entries ?
1951: EC91 CA 22 F2               JP     Z,DirLocationToReturnLoc ; Return directory Index to caller
1952: EC94         ; Directory entry found
1953: EC94 0E 00                  LD     C,0                  ; Set starting position
1954: EC96 1E 0C                  LD     E,fcbExtIndex        ; Set Length
1955: EC98 CD 41 F2               CALL   CopyDir              ; copy from FCB to dir entry
1956: EC9B CD 0B F0               CALL   GetNextDirectoryRecord ; Go find the next directory record
1957: EC9E 18 EE                  JR     SetAttributesLoop    ; Loop
1958: ECA0
1959: ECA0         ;------------------ Get Disk Parameter Block Address - 1F (31) -------------;
1960: ECA0         ;  This function returns the address of the disk parameter block (DPB) for  ;
1961: ECA0         ; the last selected logical disk. The DPB describes the physical            ;
1962: ECA0         ; characteristics of a specific logical disk-information mainly of interest ;
1963: ECA0         ; for system utility programs.                                              ;
1964: ECA0         ;                                                                           ;
1965: ECA0         ;			Function Code	:	C = 1FH                                     ;
1966: ECA0         ;			Entry Parameters:	None										;
1967: ECA0         ;			Exit Parameters :	HL = Address of Disk Parameter Block		;
1968: ECA0         ;																			;
1969: ECA0         ;------------------ Get Disk Parameter Block Address - 1F (31) -------------;
1970: ECA0             vGetDiskParamBlock:                      ; func31 (31 - 1F)
1971: ECA0 2A 99 F4               LD     HL,(caDiskParamBlock)
1972: ECA3 22 B6 EA               LD     (exitParameterWord),HL
1973: ECA6 C9                     RET
1974: ECA7
1975: ECA7         ;------------------------- Read Random - 21 (33) ---------------------------;
1976: ECA7         ; This function reads a specific CP/M record (128 bytes) from a random file ;
1977: ECA7         ; that is, a file in which records can be accessed directly. It assumes that;
1978: ECA7         ; you have already opened the file, set the DMA address using the BDOS      ;
1979: ECA7         ; Set DMA function, and set the specific record to be read into the random  ;
1980: ECA7         ; record number in the FCB. This function computes the extent of the        ;
1981: ECA7         ; specified record number and attempts to open it and read the correct CP/M ;
1982: ECA7         ; record into the DMA address.                                              ;
1983: ECA7         ;  The random record number in the FCB is three bytes long (at relative     ;
1984: ECA7         ; bytes 33, 34, and 35). Byte 33 is the least significant byte, 34 is the   ;
1985: ECA7         ; middle byte, and 35 the most significant. CP/M uses only the most         ;
1986: ECA7         ; significant byte (35) for computing the overall file size (function 35).  ;
1987: ECA7         ; You must set this byte to 0 when setting up the FCB. Bytes 33 and 34      ;
1988: ECA7         ; are used together for the Read Random, so you can access from record      ;
1989: ECA7         ; 0 to 65535 (a maximum file size of 8,388,480 bytes).                      ;
1990: ECA7         ;  This function returns with A set to 0 to indicate that the operation has ;
1991: ECA7         ; been completed successfully, or A set to a nonzero value if an error has  ;
1992: ECA7         ; occurred. The error codes are as follows:                                 ;
1993: ECA7         ;		A = 01 (attempt to read unwritten record)                           ;
1994: ECA7         ;		A = 03 (CP/M could not close current extent)                        ;
1995: ECA7         ;		A = 04 (attempt to read unwritten extent)                           ;
1996: ECA7         ;		A = 06 (attempt to read beyond end of disk)                         ;
1997: ECA7         ;		                                                                    ;
1998: ECA7         ;  Unlike the Read Sequential BOOS function (code 20, l4H), which updates   ;
1999: ECA7         ; the current (sequential) record number in the FCB, the Read Random        ;
2000: ECA7         ; function leaves the record number unchanged, so that a subsequent Write   ;
2001: ECA7         ; Random will replace the record just read.                                 ;
2002: ECA7         ;  You can follow a Read Random with a Write Sequential (code 21, l5H).     ;
2003: ECA7         ; This will rewrite the record just read, but will then update the          ;
2004: ECA7         ; sequential record number. Or you may choose to use a Read Sequential after;
2005: ECA7         ; the Read Random. In this case, the same record will be reread and the     ;
2006: ECA7         ; sequential record number will be incremented. In short, the file can be   ;
2007: ECA7         ; sequentially read or written once the Read Random has been used to        ;
2008: ECA7         ; position to the required place in the file.                               ;
2009: ECA7         ;                                                                           ;
2010: ECA7         ; To use the Read Random function, you must first open the base extent of   ;
2011: ECA7         ; the file, that is, extent O. Even though there may be no actual data      ;
2012: ECA7         ; records in this extent, opening permits the file to be processed          ;
2013: ECA7         ; correctly.                                                                ;
2014: ECA7         ;  One problem that is not immediately obvious with random files is that    ;
2015: ECA7         ; they can easily be created with gaps in the file. If you were to create   ;
2016: ECA7         ; the file with record number 0 and record number 5000, there would be no   ;
2017: ECA7         ; intervening file extents. Should you attempt to read or copy the file     ;
2018: ECA7         ; sequentially, even using CP/M's file copy utility, only the first extent  ;
2019: ECA7         ; (and in this case, record 0) would get copied. A Read Sequential function ;
2020: ECA7         ; would return an "end of file" error after reading record O. You must      ;
2021: ECA7         ; therefore be conscious of the type of the file that you try and read.     ;
2022: ECA7         ;                                                                           ;
2023: ECA7         ;                                                                           ;
2024: ECA7         ;                                                                           ;
2025: ECA7         ;			Function Code	:   C  = 21H                                    ;
2026: ECA7         ;			Entry Parameters:  DE = Address of File Control Block			;
2027: ECA7         ;			Exit Parameters :	A = 01 (attempt to read unwritten record)   ;
2028: ECA7         ;								A = 03 (CP/M could not close current extent);
2029: ECA7         ;								A = 04 (attempt to read unwritten extent)   ;
2030: ECA7         ;								A = 06 (attempt to read beyond end of disk) ;
2031: ECA7         ;																			;
2032: ECA7         ;------------------------- Read Random - 21 (33) ---------------------------;
2033: ECA7             vReadRandom:
2034: ECA7 CD 40 EF               CALL   ReselectDisk         ; Reselect if needed
2035: ECAA
2036: ECAA 0E FF                  LD     C,TRUE               ; Identify as a Read
2037: ECAC CD 93 F0               CALL   RandomSeek           ; Set up correct Dir entry etc.
2038: ECAF CC 39 EB               CALL   Z,DiskRead           ; Go Read
2039: ECB2 C9                     RET
2040: ECB3         ;------------------------- Write Random - 22 (34) --------------------------;
2041: ECB3         ; This function writes a specific CP/M record (128 bytes) into a random     ;
2042: ECB3         ; file. It is initiated in much the same way as the companion function,     ;
2043: ECB3         ; Read Random (code 33,21H). It assumes that you have already opened the    ;
2044: ECB3         ; file, set the DMAaddress to the address in memory containing the record to;
2045: ECB3         ; be written to disk, and set the random record number in the FCB to the    ;
2046: ECB3         ; specified record being written. This function also computes the extent in ;
2047: ECB3         ; which the specified record number lies and opens the extent (creating it  ;
2048: ECB3         ; if it does not already exist). The error codes returned in A by this call ;
2049: ECB3         ; are the same as those for Read Random, with the addition of error         ;
2050: ECB3         ; code 05, which indicates a full directory.                                ;
2051: ECB3         ;  Like the Read Random (but unlike the Write Sequential), this function    ;
2052: ECB3         ; does not update the logical extent and sequential (current) record number ;
2053: ECB3         ; in the FCB. Therefore, any subsequent sequential operation will access    ;
2054: ECB3         ; the record just written by the Read Random call, but these functions will ;
2055: ECB3         ; update the sequential record number. The Write Random can therefore be    ;
2056: ECB3         ; used to position to the required place in the file, which can then be     ;
2057: ECB3         ; accessed sequentially.                                                    ;
2058: ECB3         ;                                                                           ;
2059: ECB3         ;  In order to use the Write Random, you must first open the base extent    ;
2060: ECB3         ; (extent 0) of the file. Even though there may be no data records in this  ;
2061: ECB3         ; extent, opening permits the file to be processed correctly.               ;
2062: ECB3         ;  As explained in the notes for the Read Random function, you can easily   ;
2063: ECB3         ; create a random file with gaps in it. If you were to create a file with   ;
2064: ECB3         ; record number 0 and record number 5000, there would be no intervening     ;
2065: ECB3         ; file extents.                                                             ;
2066: ECB3         ;                                                                           ;
2067: ECB3         ;			Function Code	:   C  = 24H                                    ;
2068: ECB3         ;			Entry Parameters:  DE = Address of File Control Block			;
2069: ECB3         ;			Exit Parameters :	A = 01 (attempt to read unwritten record)   ;
2070: ECB3         ;								A = 03 (CP/M could not close current extent);
2071: ECB3         ;								A = 04 (attempt to read unwritten extent)   ;
2072: ECB3         ;								A = 05 (CP/M cannot create new extent)		;
2073: ECB3         ;								A = 06 (attempt to read beyond end of disk) ;
2074: ECB3         ;																			;
2075: ECB3         ;------------------------- Write Random - 22 (34) --------------------------;
2076: ECB3             vWriteRandom:
2077: ECB3 CD 40 EF               CALL   ReselectDisk         ; Reselect if needed
2078: ECB6
2079: ECB6 0E 00                  LD     C,FALSE              ; Identify as a Write
2080: ECB8 CD 93 F0               CALL   RandomSeek
2081: ECBB CC 7C EB               CALL   Z,DiskWrite          ; Go Write
2082: ECBE C9                     RET
2083: ECBF
2084: ECBF         ;------------------------- Get File Size - 23 (35) -------------------------;
2085: ECBF         ;  This function returns the virtual size of the specified file. It does so ;
2086: ECBF         ; by setting the random record number (bytes 33-35) in the specified FCB to ;
2087: ECBF         ; the maximum 128-byte record number in the file. The virtual file size is  ;
2088: ECBF         ; calculated from the record address of the record following the end of the ;
2089: ECBF         ; file. Bytes 33 and 34 form a 16-bit value that contains the record number,;
2090: ECBF         ; with overflow indicated in byte 35. If byte 35 is 01, this means that the ;
2091: ECBF         ; file has the maximum record count of 65,536.                              ;
2092: ECBF         ;  If the function cannot find the file specified by the FCB, it returns    ;
2093: ECBF         ; with the random record field set to O.                                    ;
2094: ECBF         ;  You can use this function when you want to add data to the end of an     ;
2095: ECBF         ; existing file. By calling this function first, the random record bytes    ;
2096: ECBF         ; will be set to the end of file. Subsequent Write Random calls will write  ;
2097: ECBF         ; out records to this preset address.                                       ;
2098: ECBF         ;                                                                           ;
2099: ECBF         ;  Do not confuse the virtual file size with the actual file size. In a     ;
2100: ECBF         ; random file, if you write just a single CP/M record to record number      ;
2101: ECBF         ; 1000 and then call this function, it will return with the random record   ;
2102: ECBF         ; number field set in the FCB to 1000, even though only a single record     ;
2103: ECBF         ; exists in the file. For sequential files, this function returns the       ;
2104: ECBF         ; number of records in the file. In this case, the virtual and actual file  ;
2105: ECBF         ; sizes coincide.                                                           ;
2106: ECBF         ;                                                                           ;
2107: ECBF         ;                                                                           ;
2108: ECBF         ;			Function Code	:	C  = 23H                                    ;
2109: ECBF         ;			Entry Parameters:	DE = Address of File Control Block			;
2110: ECBF         ;			Exit Parameters :	Random record field set in FCB				;
2111: ECBF         ;																			;
2112: ECBF         ;------------------------- Get File Size - 23 (35) -------------------------;
2113: ECBF             vComputeFileSize:
2114: ECBF CD 40 EF               CALL   ReselectDisk         ; Reselect if needed
2115: ECC2
2116: ECC2 0E 0C                  LD     C,fcbExtIndex        ; Set search/match length
2117: ECC4 CD F6 EF               CALL   SearchForDirectoryRecord ; Set directoryIndex
2118: ECC7         ; zero the receiving FCB Random Record field
2119: ECC7 2A B4 EA               LD     HL,(paramDE)         ; Point at FCB
2120: ECCA 11 21 00               LD     DE,recordRandom      ; Random Record index
2121: ECCD 19                     ADD    HL,DE                ; Point at Random Record
2122: ECCE E5                     PUSH   HL                   ; Random Record LSB pointer
2123: ECCF 72                     LD     (HL),D               ; Set Random Record LSB = 0
2124: ECD0 23                     INC    HL                   ; Random Record MSB pointer
2125: ECD1 72                     LD     (HL),D               ; Set Random Record MSB = 0
2126: ECD2 23                     INC    HL                   ; Random Record overflow pointer
2127: ECD3 72                     LD     (HL),D               ; Set Random Record overflow = 0
2128: ECD4
2129: ECD4             GetFileSize1:
2130: ECD4 CD 47 F1               CALL   AtEndOfDirectory     ; Any more dir entries ?
2131: ECD7 28 20                  JR     Z,GetFileSizeExit    ;  exit if no
2132: ECD9
2133: ECD9 CD 50 F1               CALL   GetCurrentDirectoryRecord ; HL points at Directory entry
2134: ECDC 11 0F 00               LD     DE,fcbRCIndex        ; FCB Record Count index
2135: ECDF CD 13 F1               CALL   GetRandomRecordPosition
2136: ECE2         ;???????????????????????????????????????????????????????????????????????????;
2137: ECE2         ; A=0000 000? BC = mmmm eeee errr rrrr compare with memory, larger?
2138: ECE2 E1                     POP    HL
2139: ECE3 E5                     PUSH   HL                   ; recall, replace .fcb(Random record Field)
2140: ECE4 5F                     LD     E,A                  ; save cy
2141: ECE5 79                     LD     A,C
2142: ECE6 96                     SUB    M
2143: ECE7 23                     INC    HL                   ; ls byte
2144: ECE8 78                     LD     A,B
2145: ECE9 9E                     SBC    A,(HL)
2146: ECEA 23                     INC    HL                   ; middle byte
2147: ECEB 7B                     LD     A,E
2148: ECEC 9E                     SBC    A,(HL)               ; carry if .fcb(random record field) > directory
2149: ECED 38 05                  JR     C,GetFileSize2       ; for another try
2150: ECEF         ; fcb is less or equal, fill from directory
2151: ECEF 73                     LD     (HL),E
2152: ECF0 2B                     DEC    HL
2153: ECF1 70                     LD     (HL),B
2154: ECF2 2B                     DEC    HL
2155: ECF3 71                     LD     (HL),C
2156: ECF4             GetFileSize2:                      ; getnextsize:
2157: ECF4 CD 0B F0               CALL   GetNextDirectoryRecord
2158: ECF7 18 DB                  JR     GetFileSize1
2159: ECF9             GetFileSizeExit:                      ; setsize:
2160: ECF9 E1                     POP    HL                   ; discard .fcb(random record field)
2161: ECFA C9                     RET
2162: ECFB
2163: ECFB         ;------------------ Set Random Record Number - 24 (36) ---------------------;
2164: ECFB         ;  This function sets the random record number in the FCB to the correct    ;
2165: ECFB         ; value for the last record read or written sequentially to the file.       ;
2166: ECFB         ;                                                                           ;
2167: ECFB         ;  This function provides you with a convenient way to build an index file  ;
2168: ECFB         ; so that you can randomly access a sequential file. Open the sequential    ;
2169: ECFB         ; file, and as you read each record, extract the appropriate key field from ;
2170: ECFB         ; the data record. Make the BDOS Set Random Record request and create a new ;
2171: ECFB         ; data record with just the key field and the random record number. Write   ;
2172: ECFB         ; the new data record out to the index file.                                ;
2173: ECFB         ;  Once you have done this for each record in the file, your index file     ;
2174: ECFB         ; provides a convenient method, given a search key value, of finding the    ;
2175: ECFB         ; appropriate CP/M record in which the data lies.                           ;
2176: ECFB         ;  You can also use this function as a means of finding out where you are   ;
2177: ECFB         ; currently positioned in a sequential file-either to relate a CP/M record  ;
2178: ECFB         ; number to the position, or simply as a place-marker to allow a            ;
2179: ECFB         ; repositioning to the same place later.                                    ;
2180: ECFB         ;                                                                           ;
2181: ECFB         ;                                                                           ;
2182: ECFB         ;			Function Code	:	C  = 24H                                    ;
2183: ECFB         ;			Entry Parameters:	DE = Address of File Control Block			;
2184: ECFB         ;			Exit Parameters :	Random record field set in FCB				;
2185: ECFB         ;																			;
2186: ECFB         ;------------------ Set Random Record Number - 24 (36) ---------------------;
2187: ECFB             vSetRandomRecord:
2188: ECFB 2A B4 EA               LD     HL,(paramDE)         ; FCB
2189: ECFE 11 20 00               LD     DE,recordSeq         ; Sequential record index
2190: ED01 CD 13 F1               CALL   GetRandomRecordPosition
2191: ED04         ; A = Overflow, B = randomRecord MSB, C = randomRecord LSB
2192: ED04 21 21 00               LD     HL,recordRandom
2193: ED07 19                     ADD    HL,DE                ; HL = .FCB(RANDOM_REC_FIELD)
2194: ED08 71                     LD     (HL),C
2195: ED09 23                     INC    HL
2196: ED0A 70                     LD     (HL),B
2197: ED0B 23                     INC    HL
2198: ED0C 77                     LD     (HL),A               ; to RANDOM_REC_FIELD
2199: ED0D C9                     RET
2200: ED0E
2201: ED0E         ;------------------------ Reset Logical Disk Drive - 25 (37) ---------------;
2202: ED0E         ;  This function resets individual disk drives. It is a more precise        ;
2203: ED0E         ; version of the Reset Disk System function (code 13,ODH), in that you      ;
2204: ED0E         ; can set specific logical; disks rather than all of them.                  ;
2205: ED0E         ;  The bit map in DE shows which disks are to be reset. The least           ;
2206: ED0E         ; significant bit of E represents disk A, and the most significant bit of   ;
2207: ED0E         ; D, disk P. The bits set to 1 indicate the disks to be reset.              ;
2208: ED0E         ;  Note that this function returns a zero value in A in order to maintain   ;
2209: ED0E         ; compatibility with MP/ M.                                                 ;
2210: ED0E         ;                                                  ;                        ;
2211: ED0E         ;  Use this function when only specific diskettes need to be changed.       ;
2212: ED0E         ; Changing a diskette without requesting CP/M to log it in will cause the   ;
2213: ED0E         ; BDOS to assume that an error has occurred and to set the new diskette to  ;
2214: ED0E         ; Read-Only status as a protective measure                                  ;
2215: ED0E         ;                                                                           ;
2216: ED0E         ;			Function Code	:	C = 25H                                     ;
2217: ED0E         ;			Entry Parameters:	DE = Logical Drive Bit Vector				;
2218: ED0E         ;			Exit Parameters :	A = 00H										;
2219: ED0E         ;																			;
2220: ED0E         ;------------------------ Reset Logical Disk Drive - 25 (37) ---------------;
2221: ED0E         ;  **************  Not Yet Implemented   **************
2222: ED0E             vResetDrive:
2223: ED0E 3E FF                  LD     A,-1                 ; Error return
2224: ED10 C9                     RET
2225: ED11
2226: ED11         ;------------------------------ Access Drive - 26 (38) ---------------------;
2227: ED11         ;								NOT SUPPORTED								;
2228: ED11         ;------------------------------ Access Drive - 26 (38) ---------------------;
2229: ED11
2230: ED11         ;------------------------------ Free   Drive - 27 (39) ---------------------;
2231: ED11         ;								NOT SUPPORTED								;
2232: ED11         ;------------------------------ Free   Drive - 27 (39) ---------------------;
2233: ED11
2234: ED11         ;---------------- Write Random with Zero Fill - 28 (40) --------------------;
2235: ED11         ;  This function is an extension to the Write Random function described     ;
2236: ED11         ; previously. In addition to performing the Write Random, it will also fill ;
2237: ED11         ; each new allocation block with OOH's. Digital Research added this function;
2238: ED11         ; to assist Microsoft with the production of its COBOL compiler-it makes the;
2239: ED11         ; logic of the file handling code easier. It also is an economical way to   ;
2240: ED11         ; completely fill a random file with OOH's. You need only write one record  ;
2241: ED11         ; per allocation block, the BDOS will clear the rest of the block for you.  ;
2242: ED11         ;                                                                           ;
2243: ED11         ;                                                                           ;
2244: ED11         ;			Function Code	:	C  = 24H                                    ;
2245: ED11         ;			Entry Parameters:	DE = Address of File Control Block			;
2246: ED11         ;			Exit Parameters :	A = Return Code								;
2247: ED11         ;																			;
2248: ED11         ;---------------- Write Random with Zero Fill - 28 (40) --------------------;
2249: ED11             vWriteRandom0Fill:
2250: ED11         ; Not Yet Implemented   **************
2251: ED11 C9                     RET
2252: ED12         ;--------------------------- Select  Drive ---------------------------------;
2253: ED12         ; Establish the disk found in (paramE) as the current disk drive            ;
2254: ED12             SelectCurrent:                      ;
2255: ED12 3A B3 EA               LD     A,(paramE)           ; Get Disk (00H = A,01H = B ..)     ;
2256: ED15 21 89 F4               LD     HL,currentDisk       ; Get the current disk              ;
2257: ED18 BE                     CP     M                    ; Are the the same ?                ;
2258: ED19 C8                     RET    Z                    ; Exit if yes, nothing to do        ;
2259: ED1A 77                     LD     (HL),A               ;  else update curretDisk and       ;
2260: ED1B 18 00                  JR     Select               ;  select it                        ;
2261: ED1D         ;--------------------------- Select  Drive ---------------------------------;
2262: ED1D         ;--------------------------- Select Login Drive ----------------------------;
2263: ED1D         ; select Login Drive                                                       ;
2264: ED1D             Select:                         ;
2265: ED1D CD 3E ED               CALL   SelectDisk           ; Select the Disk                   ;
2266: ED20 CC 17 F4               CALL   Z,Error_Select       ;
2267: ED23 21 89 F4               LD     HL,currentDisk       ;
2268: ED26 46                     LD     B,(HL)               ; Get Current Disk                  ;
2269: ED27 2A 8D F4               LD     HL,(loggedDisks)     ; Load Logged Disk MAP              ;
2270: ED2A CD E9 F3               CALL   IsBitSet             ;
2271: ED2D C0                     RET    NZ                   ; Exit if already logged in         ;
2272: ED2E         ;                                                                           ;
2273: ED2E 21 89 F4               LD     HL,currentDisk       ;
2274: ED31 46                     LD     B,(HL)               ; Get Current Disk                  ;
2275: ED32 2A 8D F4               LD     HL,(loggedDisks)     ; else log in a different disk	    ;
2276: ED35 CD F9 F3               CALL   SetVectorBit         ;
2277: ED38 22 8D F4               LD     (loggedDisks),HL     ; Update the Vector                 ;
2278: ED3B         ;
2279: ED3B C3 84 ED               JP     InitDisk             ;
2280: ED3E         ;--------------------------- Select Login Drive ----------------------------;
2281: ED3E         ;--------------------------- Select Disk -----------------------------------;
2282: ED3E         ; select the disk drive given by currentDisk, and fill the base addresses   ;
2283: ED3E         ; caTrack - caAllocVector, then fill the values of the disk parameter block ;
2284: ED3E             SelectDisk:                      ;
2285: ED3E 3A 89 F4               LD     A,(currentDisk)      ; Get current disk (0=A,1=B...)     ;
2286: ED41 4F                     LD     C,A                  ; Prepare for BIOS Call             ;
2287: ED42 CD 1B F6               CALL   bcSeldsk             ; Select the disk                   ;
2288: ED45 7C                     LD     A,H                  ; Return Pointer to                 ;
2289: ED46 B5                     OR     L                    ;  Disk Parameter Header            ;
2290: ED47 C8                     RET    Z                    ; exit if error, with HL = 0000     ;
2291: ED48         ;
2292: ED48 5E                     LD     E,(HL)               ;
2293: ED49 23                     INC    HL                   ;
2294: ED4A 56                     LD     D,(HL)               ; Skew Table in DE                  ;
2295: ED4B 23                     INC    HL                   ; HL = DPH + 2, Rel Pos for File    ;
2296: ED4C ED 53 AF F4               LD     (caSkewTable),DE     ; Move to Current Skew Table        ;
2297: ED50         ;
2298: ED50 22 91 F4               LD     (caDirMaxValue),HL   ; Move to Current Dir max           ;
2299: ED53 23                     INC    HL                   ;
2300: ED54 23                     INC    HL                   ; HL = Last Track #                 ;
2301: ED55 22 93 F4               LD     (caTrack),HL         ; Move to Current Track #           ;
2302: ED58 23                     INC    HL                   ;
2303: ED59 23                     INC    HL                   ; HL = Last Sector #                ;
2304: ED5A 22 95 F4               LD     (caSector),HL        ; Move to Current Sector #          ;
2305: ED5D 23                     INC    HL                   ;
2306: ED5E 23                     INC    HL                   ;
2307: ED5F 11 97 F4               LD     DE,caDirectoryDMA    ;
2308: ED62 01 08 00               LD     BC,caListSize        ;
2309: ED65 ED B0                  LDIR                        ;
2310: ED67         ;
2311: ED67         ; finish filling in address list                                            ;
2312: ED67 2A 99 F4               LD     HL,(caDiskParamBlock) ; Point Disk Parameter Block        ;
2313: ED6A 11 9F F4               LD     DE,dpbStart          ; Point at BIOS DPB                 ;
2314: ED6D 01 0F 00               LD     BC,dpbSize           ;
2315: ED70 ED B0                  LDIR                        ; Move DPB to current               ;
2316: ED72         ;
2317: ED72         ; Determine if Byte or Word Allocation Table	                            ;
2318: ED72 2A A4 F4               LD     HL,(dpbDSM)          ; Get max entry number              ;
2319: ED75 7C                     LD     A,H                  ; If  its 00 then < 255             ;
2320: ED76 21 B8 F4               LD     HL,byteAllocationFlag ; Point at the  flag				;
2321: ED79 36 FF                  LD     (HL),TRUE            ; Assume its less than 255          ;
2322: ED7B B7                     OR     A                    ;  is the assumption confirmed ?    ;
2323: ED7C 28 02                  JR     Z,SelectDisk1        ;  skip if yes                      ;
2324: ED7E 36 00                  LD     (HL),FALSE           ; Fix assumption,set flag to false  ;
2325: ED80         ;
2326: ED80         ; Set Sign, reset Carry and Zero to indicate success                        ;
2327: ED80             SelectDisk1:                      ;
2328: ED80 3E FF                  LD     A,TRUE               ;
2329: ED82 B7                     OR     A                    ;
2330: ED83 C9                     RET                         ;
2331: ED84         ;--------------------------- Select Disk -----------------------------------;
2332: ED84         ;--------------------------- Initialize Disk -------------------------------;
2333: ED84             InitDisk:                       ;
2334: ED84 2A A4 F4               LD     HL,(dpbDSM)          ; Maximum allocation value          ;
2335: ED87 CD 0C F3               CALL   DivideHLby8          ; Length of Map                     ;
2336: ED8A E5                     PUSH   HL                   ; Save Length                       ;
2337: ED8B E5                     PUSH   HL                   ; Save for end of MAP               ;
2338: ED8C C1                     POP    BC                   ; BC = dpbDSM/8                     ;
2339: ED8D         ; Clear the Allocation Vector	                                            ;
2340: ED8D 2A 9D F4               LD     HL,(caAllocVector)   ; Allocation vector Start           ;
2341: ED90 36 00                  LD     (HL),0               ; Clear location                    ;
2342: ED92 ED 5B 9D F4               LD     DE,(caAllocVector)   ;
2343: ED96 13                     INC    DE                   ; Allocation vector Start + 1       ;
2344: ED97 ED B0                  LDIR                        ; Cascade 00 thru Map               ;
2345: ED99         ; Force bits at End of Map                                                  ;
2346: ED99 EB                     EX     DE,HL                ; Put last Map byte into DE         ;
2347: ED9A E1                     POP    HL                   ;
2348: ED9B 23                     INC    HL                   ;
2349: ED9C CD 16 F3               CALL   MultiplyHLby8        ; Blocks if all bits used           ;
2350: ED9F ED 4B A4 F4               LD     BC,(dpbDSM)          ; Actual block max                  ;
2351: EDA3 03                     INC    BC                   ; Now has size of the Map           ;
2352: EDA4 AF                     XOR    A                    ; Clear CY                          ;
2353: EDA5 ED 42                  SBC    HL,BC                ; Extra unused bits                 ;
2354: EDA7 BD                     CP     L                    ;  are there any                    ;
2355: EDA8 28 07                  JR     Z,Mark4Directory     ;
2356: EDAA 45                     LD     B,L                  ; Number of bits to set             ;
2357: EDAB EB                     EX     DE,HL                ; Put last Map byte into HL         ;
2358: EDAC             SetBitLoop:                      ;
2359: EDAC 37                     SCF                         ;
2360: EDAD CB 16                  RL     (HL)                 ; Set LSB                           ;
2361: EDAF 10 FB                  DJNZ   SetBitLoop           ; Loop thru the bits                ;
2362: EDB1         ;
2363: EDB1             Mark4Directory:                      ;
2364: EDB1         ; Mark the reserved space for the directory                                 ;
2365: EDB1 2A A8 F4               LD     HL,(dpbDABM)         ; Directory block reserved bits     ;
2366: EDB4 EB                     EX     DE,HL                ;
2367: EDB5 2A 9D F4               LD     HL,(caAllocVector)   ; HL Start of Allocation Vector     ;
2368: EDB8 73                     LD     (HL),E               ;
2369: EDB9 23                     INC    HL                   ;
2370: EDBA 72                     LD     (HL),D               ; Put reserved blocks in Vector     ;
2371: EDBB         ; end of Map                                                                ;
2372: EDBB         ; Home disk, and set current track and sector to 00                         ;
2373: EDBB CD ED EE               CALL   Home                 ;
2374: EDBE 2A 91 F4               LD     HL,(caDirMaxValue)   ;
2375: EDC1 36 03                  LD     (HL),3               ;
2376: EDC3 23                     INC    HL                   ;
2377: EDC4 36 00                  LD     (HL),0               ; Current Max Dir Value = 0003      ;
2378: EDC6 CD 40 F1               CALL   SetEndDirectory      ; dirEntryIndex = EOD (-1)          ;
2379: EDC9         ;
2380: EDC9             InitDisk1:                      ;
2381: EDC9         ; Process the directory                                                     ;
2382: EDC9 0E FF                  LD     C,TRUE               ; Set flag for setting CheckSum	    ;
2383: EDCB CD 3D F3               CALL   ReadDirectory        ; Get the directory Record          ;
2384: EDCE CD 47 F1               CALL   AtEndOfDirectory     ; Are we Done ?                     ;
2385: EDD1 C8                     RET    Z                    ;  Exit if Yes                      ;
2386: EDD2         ; Not end of directory, valid entry?                                        ;
2387: EDD2 CD 50 F1               CALL   GetCurrentDirectoryRecord ; Calculate location of the element ;
2388: EDD5 3E E5                  LD     A,emptyDir           ;
2389: EDD7 BE                     CP     M                    ; Is it an Empty Dir Entry          ;
2390: EDD8 28 EF                  JR     Z,InitDisk1          ;   Loop back if yes                ;
2391: EDDA         ; Not emptyDir, user code the same?                                         ;
2392: EDDA 3A 88 F4               LD     A,(currentUserNumber) ;
2393: EDDD BE                     CP     M                    ;
2394: EDDE 20 0A                  JR     NZ,InitDisk2         ; Skip if this entry not the users  ;
2395: EDE0         ; Same user, check for '$' submit                                           ;
2396: EDE0 23                     INC    HL                   ;
2397: EDE1 7E                     LD     A,(HL)               ;
2398: EDE2 D6 24                  SUB    DOLLAR               ; Is first Char a $                 ;
2399: EDE4 20 04                  JR     NZ,InitDisk2         ;
2400: EDE6         ; dollar file found, mark in exitParameterByte                              ;
2401: EDE6 3D                     DEC    A                    ; Set A to FFH                      ;
2402: EDE7 32 B6 EA               LD     (exitParameterByte),A ; Return it the exit parameter      ;
2403: EDEA             InitDisk2:                      ;
2404: EDEA         ; now scan the disk map for allocated blocks                                ;
2405: EDEA 0E FF                  LD     C,TRUE               ; set to allocated                  ;
2406: EDEC CD 74 F1               CALL   ScanDiskMap          ;
2407: EDEF CD 5E F1               CALL   SetDirectoryEntry    ; Mark directory entry              ;
2408: EDF2 18 D5                  JR     InitDisk1            ; Loop for another entry            ;
2409: EDF4         ;--------------------------- Initialize Disk -------------------------------;
2410: EDF4         ;----------------------------- Open File -----------------------------------;
2411: EDF4         ;search for the directory entry matching FCB at paramDE						;
2412: EDF4             OpenFile:                       ;
2413: EDF4 0E 0F                  LD     C,nameLength         ;
2414: EDF6 CD F6 EF               CALL   SearchForDirectoryRecord ;
2415: EDF9 CD 47 F1               CALL   AtEndOfDirectory     ; Have we gone thru all the dir    	;
2416: EDFC C8                     RET    Z                    ; Exit exitParameterByte=255 if yes	;
2417: EDFD         ;
2418: EDFD             CopyDirRecordToFCB:                      ;
2419: EDFD CD 90 EF               CALL   GetExtentAddress     ; HL points to FCB's EXT           	;
2420: EE00 7E                     LD     A,(HL)               ; Get the EXT                      	;
2421: EE01 F5                     PUSH   AF                   ; Save the FCB's EXT value         	;
2422: EE02 E5                     PUSH   HL                   ;  also save FCB's pointer         	;
2423: EE03 CD 50 F1               CALL   GetCurrentDirectoryRecord ; Get pointer to Dir record in HL  	;
2424: EE06 E5                     PUSH   HL                   ; Save Directory Record address    	;
2425: EE07         ;
2426: EE07 ED 5B B4 EA               LD     DE,(paramDE)         ;
2427: EE0B 01 20 00               LD     BC,fcbLength         ;
2428: EE0E ED B0                  LDIR                        ; Move dir record to FCB           	;
2429: EE10         ;
2430: EE10         ; note that entire fcb is copied, including indicators                    	;
2431: EE10 CD CB EF               CALL   SetFileWriteFlag     ; Set clean file flag				;
2432: EE13 D1                     POP    DE                   ; Get Directory Record address     	;
2433: EE14 21 0C 00               LD     HL,fcbExtIndex       ; Extent Index                     	;
2434: EE17 19                     ADD    HL,DE                ; Directory's EXT address          	;
2435: EE18 4E                     LD     C,(HL)               ; Dir's EXT is in B		           	;
2436: EE19 21 0F 00               LD     HL,fcbRCIndex        ; Get Record Count Index           	;
2437: EE1C 19                     ADD    HL,DE                ; Directory's RC address           	;
2438: EE1D 46                     LD     B,(HL)               ; B holds Dir's  record count      	;
2439: EE1E E1                     POP    HL                   ; Get FCB's Extent Address         	;
2440: EE1F F1                     POP    AF                   ; Get FCB's Extent Value           	;
2441: EE20 77                     LD     (HL),A               ; Restore Extent Value             	;
2442: EE21         ; if user ext < dir ext then user := 128 records                           	;
2443: EE21         ; if user ext = dir ext then user := dir records                           	;
2444: EE21         ; if user ext > dir ext then user := 0 records                             	;
2445: EE21 79                     LD     A,C                  ; Get the Dir's EXT                	;
2446: EE22 BE                     CP     M                    ; Does it match the FCB'd          	;
2447: EE23 78                     LD     A,B                  ; Get the Dir's  record count      	;
2448: EE24 28 06                  JR     Z,OpenSetRecordCount ; If same EXT value, use it.       	;
2449: EE26 3E 00                  LD     A,0                  ;   else prepare for RC = 0        	;
2450: EE28 38 02                  JR     C,OpenSetRecordCount ; If FCB EXT > Dir EXTr            	;
2451: EE2A 3E 80                  LD     A,RecordsPerExtent   ;   else max record count out      	;
2452: EE2C             OpenSetRecordCount:                      ;
2453: EE2C 2A B4 EA               LD     HL,(paramDE)         ; Get FCB's address                	;
2454: EE2F 11 0F 00               LD     DE,fcbRCIndex        ; Get record count index           	;
2455: EE32 19                     ADD    HL,DE                ; FCB's record count               	;
2456: EE33 77                     LD     (HL),A               ; Set the value                    	;
2457: EE34 C9                     RET                         ;
2458: EE35         ;----------------------------- Open File -----------------------------------;
2459: EE35         ;---------------------------- Close Directory Entry ------------------------;
2460: EE35             CloseDirEntry:                      ;
2461: EE35 AF                     XOR    A                    ;
2462: EE36 32 B6 EA               LD     (exitParameterByte),A ; Clear exit parameter              ;
2463: EE39 CD 35 EF               CALL   IsDiskWriteProtected ; Return Z set if writable          ;
2464: EE3C C0                     RET    NZ                   ; Skip close if r/o disk            ;
2465: EE3D         ; check file write flag - 0 indicates written                               ;
2466: EE3D
2467: EE3D DD E5                  PUSH   IX
2468: EE3F DD 2A B4 EA               LD     IX,(paramDE)         ; FCB address
2469: EE43 DD CB 0E 7E               BIT    7,(IX+fcbS2Index)    ; Has WFF changed ?
2470: EE47 DD E1                  POP    IX
2471: EE49 C0                     RET    NZ                   ; Skip close if clean file          ;
2472: EE4A
2473: EE4A         ;	CALL	GetWriteFileFlagValue		; Get file's WriteFileFlag          ;
2474: EE4A         ;	BIT		7,A							;  Has it changed ?					;
2475: EE4A         ;	RET		NZ							; Skip close if clean file          ;
2476: EE4A         ;
2477: EE4A 0E 0F                  LD     C,nameLength         ;
2478: EE4C CD F6 EF               CALL   SearchForDirectoryRecord ; Find the file's directory record  ;
2479: EE4F CD 47 F1               CALL   AtEndOfDirectory     ; If EOD then there is no more      ;
2480: EE52 C8                     RET    Z                    ;  exit if at EOD                   ;
2481: EE53         ;
2482: EE53         ; merge the FCB's Disk Map with the Directory record Disk Map               ;
2483: EE53 CD 50 F1               CALL   GetCurrentDirectoryRecord ; HL points to directory record     ;
2484: EE56 01 10 00               LD     BC,fcbDiskMapIndex   ; Disk Alloc block map index        ;
2485: EE59 09                     ADD    HL,BC                ;
2486: EE5A EB                     EX     DE,HL                ; DE = Directory Entry Map pointer  ;
2487: EE5B 2A B4 EA               LD     HL,(paramDE)         ;
2488: EE5E 09                     ADD    HL,BC                ; HL = FCB Map Pointer              ;
2489: EE5F 0E 10                  LD     C,(fcbLength-fcbDiskMapIndex) ; Size Allocation Map              ;
2490: EE61         ;
2491: EE61             MergeAllocationMaps:                      ;
2492: EE61 3A B8 F4               LD     A,(byteAllocationFlag) ;
2493: EE64 B7                     OR     A                    ;
2494: EE65 28 10                  JR     Z,MergeWordMaps      ; Process Word size Block Numbers   ;
2495: EE67         ; process byte size Map	                                                    ;
2496: EE67 7E                     LD     A,(HL)               ; FCB Block number                  ;
2497: EE68 B7                     OR     A                    ; Is it 0 ?                         ;
2498: EE69 1A                     LD     A,(DE)               ;  anticipate yes                   ;
2499: EE6A 20 01                  JR     NZ,MergeFCBisNot0    ;  Skip if no	                    ;
2500: EE6C 77                     LD     (HL),A               ; Move Dir Entry Value to FCB		;
2501: EE6D             MergeFCBisNot0:                      ;
2502: EE6D B7                     OR     A                    ; Is Dir Entry Value = 0 ?          ;
2503: EE6E 20 02                  JR     NZ,MergeDirEntryNot0 ; Skip if no                        ;
2504: EE70 7E                     LD     A,(HL)               ;  else move FCB map value          ;
2505: EE71 12                     LD     (DE),A               ;  to Dir Entry Value 	            ;
2506: EE72             MergeDirEntryNot0:                      ;
2507: EE72 BE                     CP     M                    ; Do FCB and Dir match values       ;
2508: EE73 20 39                  JR     NZ,CloseDirEntryError ;  If not then report error         ;
2509: EE75 18 13                  JR     MergeMapLoop         ; Go see if there is more           ;
2510: EE77         ;
2511: EE77             MergeWordMaps:                      ;
2512: EE77 CD 20 F3               CALL   Merge                ; If FCB map value = 0 move Dir's   ;
2513: EE7A EB                     EX     DE,HL                ;
2514: EE7B CD 20 F3               CALL   Merge                ; IF Dir Map value = 0 move FCB's   ;
2515: EE7E EB                     EX     DE,HL                ; HL = FCB Map pointer, DE = Dir's  ;
2516: EE7F 1A                     LD     A,(DE)               ; Does the FCB Map value            ;
2517: EE80 BE                     CP     M                    ;  = Dir record Map pointer ?       ;
2518: EE81 20 2B                  JR     NZ,CloseDirEntryError ;  If not then report error         ;
2519: EE83 13                     INC    DE                   ;
2520: EE84 23                     INC    HL                   ; move on to the MSB                ;
2521: EE85 1A                     LD     A,(DE)               ;
2522: EE86 BE                     CP     M                    ; do the check for equality         ;
2523: EE87 20 25                  JR     NZ,CloseDirEntryError ;  If not then report error         ;
2524: EE89 0D                     DEC    C                    ; Extra count for 2 bytes           ;
2525: EE8A             MergeMapLoop:                      ;
2526: EE8A 13                     INC    DE                   ; Advance to the next positions     ;
2527: EE8B 23                     INC    HL                   ; in The Maps                       ;
2528: EE8C 0D                     DEC    C                    ; Are we done ?                     ;
2529: EE8D 20 D2                  JR     NZ,MergeAllocationMaps ;  No, do it again                  ;
2530: EE8F         ;
2531: EE8F         ; Check the EXT                                                             ;
2532: EE8F 01 EC FF               LD     BC,-(fcbLength-fcbExtIndex) ;Adjust to get Ext pointer          ;
2533: EE92 09                     ADD    HL,BC                ;
2534: EE93 EB                     EX     DE,HL                ; HL = Directory Entry EXT pointer  ;
2535: EE94 09                     ADD    HL,BC                ; DE = FCB EXT Pointer              ;
2536: EE95 1A                     LD     A,(DE)               ; FCB's extent number               ;
2537: EE96 BE                     CP     M                    ; Is it < Dir Record EXT ?          ;
2538: EE97 38 09                  JR     C,CloseDirEntryEnd   ;  we are done if yes               ;
2539: EE99 77                     LD     (HL),A               ; Else replace the Dir Record EXT   ;
2540: EE9A         ; Update directory record count field                                       ;
2541: EE9A 01 03 00               LD     BC,fcbRCIndex-fcbExtIndex ; Need to adjust to the record Count;
2542: EE9D 09                     ADD    HL,BC                ;
2543: EE9E EB                     EX     DE,HL                ; DE = = Directory Entry EXT pointer;
2544: EE9F 09                     ADD    HL,BC                ; HL = FCB EXT Pointer              ;
2545: EEA0 7E                     LD     A,(HL)               ; Copy the FCB RC to                ;
2546: EEA1 12                     LD     (DE),A               ;  the Directory Record RC          ;
2547: EEA2         ;
2548: EEA2             CloseDirEntryEnd:                      ;
2549: EEA2 3E FF                  LD     A,TRUE               ;
2550: EEA4 32 B1 F4               LD     (fcbCopiedFlag),A    ; Set copied flag as true           ;
2551: EEA7         ;/	CALL	SeekCopy					; ok to "Write Dir" here            ;
2552: EEA7 CD 6B F3               CALL   SeekDir              ; Set up parameters for a Disk I/O  ;
2553: EEAA C3 69 F0               JP     WriteDir             ; Write the directory element       ;
2554: EEAD C9                     RET                         ;
2555: EEAE         ;
2556: EEAE             CloseDirEntryError:                      ;
2557: EEAE 21 B6 EA               LD     HL,exitParameterByte ;
2558: EEB1 35                     DEC    M                    ; Set Exit value to 0FFH            ;
2559: EEB2 C9                     RET                         ;
2560: EEB3         ;---------------------------- Close Directory Entry ------------------------;
2561: EEB3         ;----------------------------------- Make new File -------------------------;
2562: EEB3         ;create a new file by creating a directory entry then opening the file      ;
2563: EEB3             MakeNewFile:                      ;
2564: EEB3 CD 29 F2               CALL   CheckWrite           ; Terminate with error if Disk R/O  ;
2565: EEB6 2A B4 EA               LD     HL,(paramDE)         ; Get the FCB                       ;
2566: EEB9 E5                     PUSH   HL                   ; FCB                               ;
2567: EEBA 21 8A F4               LD     HL,emptyFCB          ;
2568: EEBD 22 B4 EA               LD     (paramDE),HL         ; Find the first empty dir record   ;
2569: EEC0 0E 01                  LD     C,1                  ;
2570: EEC2 CD F6 EF               CALL   SearchForDirectoryRecord ; 0F5H in first position            ;
2571: EEC5 CD 47 F1               CALL   AtEndOfDirectory     ; Check if at end of directory      ;
2572: EEC8 E1                     POP    HL                   ; Recall the FCB pointer            ;
2573: EEC9 22 B4 EA               LD     (paramDE),HL         ;  in case we return here           ;
2574: EECC C8                     RET    Z                    ; Exit with No Dir space error      ;
2575: EECD         ; fill Allocation Map with Zeros	                                        ;
2576: EECD 11 0F 00               LD     DE,nameLength        ;
2577: EED0 19                     ADD    HL,DE                ; Start of fill                     ;
2578: EED1 36 00                  LD     (HL),00              ; Prime the values                  ;
2579: EED3 E5                     PUSH   HL                   ;
2580: EED4 D1                     POP    DE                   ; Copy to DE                        ;
2581: EED5 13                     INC    DE                   ; adjust the to pointer             ;
2582: EED6 01 10 00               LD     BC,fcbLength-nameLength-1 ; number of bytes to fill           ;
2583: EED9 ED B0                  LDIR                        ;
2584: EEDB         ;
2585: EEDB 2A B4 EA               LD     HL,(paramDE)         ; get FCB                           ;
2586: EEDE 11 0D 00               LD     DE,fcbS1Index        ; Get the S1 index                  ;
2587: EEE1 19                     ADD    HL,DE                ; Point to S1                       ;
2588: EEE2 36 00                  LD     (HL),0               ; Set to 0                          ;
2589: EEE4 CD 5E F1               CALL   SetDirectoryEntry    ; Update directory entry            ;
2590: EEE7 CD 3D F2               CALL   CopyFCB              ; Update dir entry to Disk          ;
2591: EEEA         ; and set the file write flag to "1"                                        ;
2592: EEEA C3 CB EF               JP     SetFileWriteFlag     ; Set the clean entry flag          ;
2593: EEED         ;----------------------------------- Make new File -------------------------;
2594: EEED
2595: EEED         ;=========================== Disk Utilities ================================;
2596: EEED
2597: EEED         ;--------------------------- Home The Current Disk -------------------------;
2598: EEED         ;move to home position, then offset to start of dir                         ;
2599: EEED             Home:                           ;
2600: EEED CD 18 F6               CALL   bcHome               ; Sets Track to 0, and checks       ;
2601: EEF0         ; if Buffer needs to be written     ;
2602: EEF0 21 AC F4               LD     HL,dpbOFF            ; Number of tracks before directory ;
2603: EEF3 4E                     LD     C,(HL)               ;
2604: EEF4 23                     INC    HL                   ;
2605: EEF5 46                     LD     B,(HL)               ;
2606: EEF6 CD 1E F6               CALL   bcSettrk             ; Point at 1st directory position   ;
2607: EEF9         ;
2608: EEF9         ; Set Current Track and Sector to 00                                        ;
2609: EEF9 AF                     XOR    A                    ; set ACC to 00                     ;
2610: EEFA 2A 93 F4               LD     HL,(caTrack)         ;
2611: EEFD 77                     LD     (HL),A               ;
2612: EEFE 23                     INC    HL                   ;
2613: EEFF 77                     LD     (HL),A               ;
2614: EF00 2A 95 F4               LD     HL,(caSector)        ;
2615: EF03 77                     LD     (HL),A               ;
2616: EF04 23                     INC    HL                   ;
2617: EF05 77                     LD     (HL),A               ;
2618: EF06 C9                     RET                         ;
2619: EF07         ;
2620: EF07         ;--------------------------- Home The Current Disk -------------------------;
2621: EF07         ;--------------------------- Set DMAs --------------------------------------;
2622: EF07             SetDataDMA:                      ;
2623: EF07 21 8F F4               LD     HL,initDAMAddress    ;
2624: EF0A 18 03                  JR     SetDMA               ; Skip to complete the call         ;
2625: EF0C         ;
2626: EF0C             SetDirDMA:                      ;
2627: EF0C 21 97 F4               LD     HL,caDirectoryDMA    ; Load current directory Buffer     ;
2628: EF0F         ;
2629: EF0F             SetDMA:                         ;
2630: EF0F 4E                     LD     C,(HL)               ;
2631: EF10 23                     INC    HL                   ;
2632: EF11 46                     LD     B,(HL)               ; parameter ready               ;
2633: EF12 C3 24 F6               JP     bcSetdma             ; call bios to set              ;
2634: EF15         ;--------------------------- Set DMAs --------------------------------------;
2635: EF15         ;--------------------------- Read Buffer -----------------------------------;
2636: EF15         ;reads into current DMA, using current Disk,Track and Sector                ;
2637: EF15             ReadBuffer:                      ;
2638: EF15 CD 27 F6               CALL   bcRead               ; Do the read at the BIOS level     ;
2639: EF18 B7                     OR     A                    ; Check status                      ;
2640: EF19 C2 29 F4               JP     NZ,Error_BadSector   ; Report if Status not OK		;
2641: EF1C C9                     RET                         ;
2642: EF1D         ;--------------------------- Read Buffer -----------------------------------;
2643: EF1D         ;--------------------------- Set Current Disk Read Only --------------------;
2644: EF1D         ;set current disk to read only                                              ;
2645: EF1D             SetDiskReadOnly:                      ;
2646: EF1D 2A 8B F4               LD     HL,(readOnlyVector)  ; Get the Vector                    ;
2647: EF20         ;
2648: EF20 3A 89 F4               LD     A,(currentDisk)      ; Get the current disk              ;
2649: EF23 47                     LD     B,A                  ; Move into B                       ;
2650: EF24 CD F9 F3               CALL   SetVectorBit         ; Set the bit	                    ;
2651: EF27 22 8B F4               LD     (readOnlyVector),HL  ; Update the Vector                 ;
2652: EF2A         ;
2653: EF2A 2A A6 F4               LD     HL,(dpbDRM)          ; Directory Max Value               ;
2654: EF2D EB                     EX     DE,HL                ;
2655: EF2E 2A 91 F4               LD     HL,(caDirMaxValue)   ; HL = .Directory max value         ;
2656: EF31 73                     LD     (HL),E               ;
2657: EF32 23                     INC    HL                   ;
2658: EF33 72                     LD     (HL),D               ;
2659: EF34 C9                     RET                         ;
2660: EF35         ;--------------------------- Set disk Read Only ----------------------------;
2661: EF35         ;--------------------------- Is Disk Write Protected -----------------------;
2662: EF35         ;Returns:	Z flag	= Set if not Write Protected	(Z)                     ;
2663: EF35         ;					= reset if Write Protected		(NZ)					;
2664: EF35             IsDiskWriteProtected:                      ;
2665: EF35 2A 8B F4               LD     HL,(readOnlyVector)  ; Get Read Only Vector              ;
2666: EF38 3A 89 F4               LD     A,(currentDisk)      ; Get current disk                  ;
2667: EF3B 47                     LD     B,A                  ;
2668: EF3C CD E9 F3               CALL   IsBitSet             ; Check the bit                     ;
2669: EF3F C9                     RET                         ; NZ if Disk is RO                  ;
2670: EF40         ;--------------------------- Is Disk Write Protected -----------------------;
2671: EF40
2672: EF40         ;------------------------- Reselect Disk if Necessary ----------------------;
2673: EF40         ;check current fcb to see if reselection necessary                         ;
2674: EF40             ReselectDisk:                      ;
2675: EF40 3E FF                  LD     A,TRUE               ;
2676: EF42 32 B9 F4               LD     (fResel),A           ; Mark as possible reselect         ;
2677: EF45 2A B4 EA               LD     HL,(paramDE)         ; Point at current FCB              ;
2678: EF48 7E                     LD     A,(HL)               ; Load disk drive (0 = current)     ;
2679: EF49 E6 1F                  AND    01FH                 ; Mask out user Number ??           ;
2680: EF4B 3D                     DEC    A                    ; Normalized to 0..29, or 255       ;
2681: EF4C 32 B3 EA               LD     (paramE),A           ; Save drive code                   ;
2682: EF4F FE 1E                  CP     30                   ;
2683: EF51 30 10                  JR     NC,NoSelect          ; Skip drive >= 30                  ;
2684: EF53         ;
2685: EF53 3A 89 F4               LD     A,(currentDisk)      ; Determine the current drive       ;
2686: EF56 32 BA F4               LD     (entryDisk),A        ; Save it                           ;
2687: EF59 7E                     LD     A,(HL)               ;
2688: EF5A 32 BB F4               LD     (fcbDisk),A          ; Get calling disk                  ;
2689: EF5D E6 E0                  AND    11100000B            ;
2690: EF5F 77                     LD     (HL),A               ; Preserve User Number              ;
2691: EF60 CD 12 ED               CALL   SelectCurrent        ; Select the new disk               ;
2692: EF63         ;
2693: EF63             NoSelect:                       ;
2694: EF63 3A 88 F4               LD     A,(currentUserNumber) ; Get user code 0...31              ;
2695: EF66 2A B4 EA               LD     HL,(paramDE)         ; Point at disk number              ;
2696: EF69 B6                     OR     M                    ; Combine                           ;
2697: EF6A 77                     LD     (HL),A               ; FCB[0] = user number & disk       ;
2698: EF6B C9                     RET                         ;
2699: EF6C         ;------------------------- Reselect Disk if Necessary ----------------------;
2700: EF6C
2701: EF6C
2702: EF6C         ;=========================== Disk Utilities ================================;
2703: EF6C
2704: EF6C         ;=========================== File Utilities ================================;
2705: EF6C         ;--------------------------- Set Record Variables --------------------------;
2706: EF6C         ;set variables from currently FCB - Current Record, RC, EXM                 ;
2707: EF6C             SetRecordVars:                      ;
2708: EF6C CD 83 EF               CALL   GetFcbRecordDetails  ; DE = .RecordCount                 ;
2709: EF6F         ;  and HL => .CurrentRecord         ;
2710: EF6F 7E                     LD     A,(HL)               ;
2711: EF70 32 BE F4               LD     (currentFileRecord),A ; Save current record               ;
2712: EF73 EB                     EX     DE,HL                ;
2713: EF74 7E                     LD     A,(HL)               ;
2714: EF75 32 BC F4               LD     (fcbRecordCount),A   ; Save the FCBs RC                  ;
2715: EF78 CD 90 EF               CALL   GetExtentAddress     ; HL=.FCB(fcbExtIndex)              ;
2716: EF7B 3A A3 F4               LD     A,(dpbEXM)           ; Extent mask                       ;
2717: EF7E A6                     AND    M                    ; Remove unwanted bits              ;
2718: EF7F 32 BD F4               LD     (extentValue),A      ; Store the value                   ;
2719: EF82 C9                     RET                         ;
2720: EF83         ;--------------------------- Set Record Variables --------------------------;
2721: EF83         ;----------------------Get File Record Count and Current Record-------------;
2722: EF83         ; returns with DE pointing at RC from FCB                                   ;
2723: EF83         ;         with HL pointing at Current Record                                ;
2724: EF83             GetFcbRecordDetails:                      ;
2725: EF83 2A B4 EA               LD     HL,(paramDE)         ; Get FCB start                     ;
2726: EF86 11 0F 00               LD     DE,fcbRCIndex        ; Offset to Record Count            ;
2727: EF89 19                     ADD    HL,DE                ;
2728: EF8A EB                     EX     DE,HL                ; DE Points to Record Count         ;
2729: EF8B 21 11 00               LD     HL,recordSeq-fcbRCIndex ;
2730: EF8E 19                     ADD    HL,DE                ; HL Points to Current Record       ;
2731: EF8F C9                     RET                         ;
2732: EF90         ;----------------------Get File Record Count and Current Record-------------;
2733: EF90         ;----------------------Get FileExtent---------------------------------------;
2734: EF90         ;get current extent field address to (HL)                                  ;
2735: EF90             GetExtentAddress:                      ;
2736: EF90 2A B4 EA               LD     HL,(paramDE)         ; Get FCB                           ;
2737: EF93 11 0C 00               LD     DE,fcbExtIndex       ; Get EXT offset                    ;
2738: EF96 19                     ADD    HL,DE                ; HL=.fcb(fcbExtIndex)              ;
2739: EF97 C9                     RET                         ;
2740: EF98         ;----------------------Get FileExtent---------------------------------------;
2741: EF98         ;--------------------- Set/Reset Disk Map Allocation Bit -------------------;
2742: EF98         ; At Entry:	BC Contains to the Block to be modified                         ;
2743: EF98         ;			E  = TRUE if bit is to be set                                   ;
2744: EF98         ;			E  <> TRUE if bit is to be reset                                ;
2745: EF98         ; At Exit:  The target bit in the target Octet will be set/reset	        ;
2746: EF98             SetResetMapBit:                      ;
2747: EF98         ;
2748: EF98 21 00 00               LD     HL,0000H             ; Move the block number from BC     ;
2749: EF9B 09                     ADD    HL,BC                ;  to HL                            ;
2750: EF9C 4B                     LD     C,E                  ; Move the flag to E                ;
2751: EF9D         ;
2752: EF9D 7D                     LD     A,L                  ; LSB of the Block Number           ;
2753: EF9E E6 07                  AND    07H                  ; Calculate Mod(Block,8)            ;
2754: EFA0 F5                     PUSH   AF                   ; Save the OctetBit                 ;
2755: EFA1 06 03                  LD     B,3                  ;
2756: EFA3 CD 0E F3               CALL   ShiftRightHLbyB      ; Calculate Block / 8               ;
2757: EFA6 ED 5B 9D F4               LD     DE,(caAllocVector)   ; Start Of Map                      ;
2758: EFAA 19                     ADD    HL,DE                ; Address of targeted Octet         ;
2759: EFAB F1                     POP    AF                   ;
2760: EFAC 47                     LD     B,A                  ; Get the bit                       ;
2761: EFAD         ;
2762: EFAD 04                     INC    B                    ; Adjust for looping                ;
2763: EFAE C5                     PUSH   BC                   ; Will need this later              ;
2764: EFAF             Left:                           ;
2765: EFAF CB 16                  RL     (HL)                 ; Rotate the Octet                  ;
2766: EFB1 10 FC                  DJNZ   Left                 ;  to move target bit to bit 0      ;
2767: EFB3 C1                     POP    BC                   ; Restore loop limit and            ;
2768: EFB4 37                     SCF                         ;  set/reset flag                   ;
2769: EFB5 0C                     INC    C                    ; was C = TRUE                      ;
2770: EFB6 28 01                  JR     Z,Right              ; Skip if Set                       ;
2771: EFB8 3F                     CCF                         ; Set for Reset                     ;
2772: EFB9             Right:                          ;
2773: EFB9 CB 1E                  RR     (HL)                 ; Move the Octet back               ;
2774: EFBB 10 FC                  DJNZ   Right                ;  to its original alignment        ;
2775: EFBD C9                     RET                         ;
2776: EFBE         ;--------------------- Set/Reset Disk Map Allocation Bit -------------------;
2777: EFBE         ;--------------------- Initialize Extent Number MSB ------------------------;
2778: EFBE         ;clear the Extent number field for user open/make (S2)                     ;
2779: EFBE             InitializeExtentNumberMSB:                      ;
2780: EFBE DD E5                  PUSH   IX
2781: EFC0 DD 2A B4 EA               LD     IX,(paramDE)         ; FCB address
2782: EFC4 DD 36 0E 00               LD     (IX+fcbS2Index),0    ; Clear value
2783: EFC8 DD E1                  POP    IX
2784: EFCA C9                     RET
2785: EFCB         ;	CALL	GetExtentNumberMSB                                              ;
2786: EFCB         ;	LD		(HL),0								; Set it to = 0             ;
2787: EFCB         ;	RET                                                                     ;
2788: EFCB         ;--------------------- Initialize Extent Number MSB ------------------------;
2789: EFCB         ;--------------------- Get Extent Number MSB| Write Protect ----------------;
2790: EFCB         ; Get S2 value                                                              ;
2791: EFCB         ;  Returns:	A = S2 Value (bit 7 write protect, bits 0-6 Ext MSB)            ;
2792: EFCB         ;			HL = Address of S2 for the FCB pointed to by paramDE            ;
2793: EFCB         ;GetWriteFileFlagValue:							; S2 bit 7                  ;
2794: EFCB         ;;GetExtentNumberMSB:							; S2 bits 0-6               ;
2795: EFCB         ;	LD		HL,(paramDE)						; FCB address               ;
2796: EFCB         ;	LD		DE,fcbS2Index						; Index to value            ;
2797: EFCB         ;	ADD		HL,DE								; Address of value          ;
2798: EFCB         ;	LD		A,(HL)								; load into ACC             ;
2799: EFCB         ;	RET	                                                                    ;
2800: EFCB         ;--------------------- Get Extent Number MSB| Write Protect ----------------;
2801: EFCB         ;--------------------------- Set File Write Flag----------------------------;
2802: EFCB         ;Set file write flag in FCB in (paramDE)									;
2803: EFCB         ; Used to indicate the FCB is clean. No need to write on close				;
2804: EFCB             SetFileWriteFlag:                      ;
2805: EFCB DD E5                  PUSH   IX
2806: EFCD DD 2A B4 EA               LD     IX,(paramDE)         ; FCB address
2807: EFD1 DD CB 0E FE               SET    7,(IX+fcbS2Index)    ; Set Flag
2808: EFD5 DD E1                  POP    IX
2809: EFD7 C9                     RET
2810: EFD8
2811: EFD8         ;	CALL	GetWriteFileFlagValue		; A= Value, HL = Address of fcbS2   ;
2812: EFD8         ;	SET		7,(HL)						; Set the FileWriteFlag				;
2813: EFD8         ;	RET																		;
2814: EFD8         ;--------------------------- Set File Write Flag----------------------------;
2815: EFD8         ;--------------------------- Reset File Write Flag--------------------------;
2816: EFD8         ;Reset file write flag in FCB in (paramDE)									;
2817: EFD8         ; Used to indicate the FCB is dirty. Need to write on close					;
2818: EFD8             ResetFileWriteFlag:                      ;
2819: EFD8 DD E5                  PUSH   IX
2820: EFDA DD 2A B4 EA               LD     IX,(paramDE)         ; FCB address
2821: EFDE DD CB 0E BE               RES    7,(IX+fcbS2Index)    ; Reset Flag
2822: EFE2 DD E1                  POP    IX
2823: EFE4 C9                     RET
2824: EFE5
2825: EFE5         ;	CALL	GetWriteFileFlagValue		; A= Value, HL = Address of fcbS2   ;
2826: EFE5         ;	RES		7,(HL)						; Reset the FileWriteFlag			;
2827: EFE5         ;	RET																		;
2828: EFE5         ;--------------------------- Reset File Write Flag--------------------------;
2829: EFE5         ;-------------------------- Compare FCB Extents ----------------------------;
2830: EFE5         ; Enters:	A containing Target FCB EXT value								;
2831: EFE5         ;			HL Points at Possible FCB EXT value								;
2832: EFE5         ;compare extent# in A with that in C, return nonzero if they do not match	;
2833: EFE5             CompareExtents:                      ;
2834: EFE5 C5                     PUSH   BC                   ; Save Callers Registers			;
2835: EFE6 F5                     PUSH   AF                   ; Save Target FCB EXT value    		;
2836: EFE7 3A A3 F4               LD     A,(dpbEXM)           ; Load the Extent Mask         		;
2837: EFEA 2F                     CPL                         ; Complement for And           		;
2838: EFEB 47                     LD     B,A                  ; Put negated Mask into B      		;
2839: EFEC 7E                     LD     A,(HL)               ; Get Possible FCBs EXT        		;
2840: EFED A0                     AND    B                    ; Apply the Mask               		;
2841: EFEE 4F                     LD     C,A                  ; Low bits removed from C      		;
2842: EFEF F1                     POP    AF                   ; Restore Target FCB EXT value 		;
2843: EFF0 A0                     AND    B                    ; Apply the Mask               		;
2844: EFF1 91                     SUB    C                    ; Test if Equal ( Z Flag)      		;
2845: EFF2 E6 1F                  AND    maxExtValue          ; Limit Size ?                 		;
2846: EFF4 C1                     POP    BC                   ; Restore Callers Registers    		;
2847: EFF5 C9                     RET                         ;
2848: EFF6         ;-------------------------- Compare FCB Extents ----------------------------;
2849: EFF6         ;---------------------Search for Directory Record --------------------------;
2850: EFF6         ;  Search for directory record of length C.									;
2851: EFF6         ; Target is pointed to by paramDE. The whole directory is searched.			;
2852: EFF6         ; If not found then dirEntryIndex is set to -1, else it points to the		;
2853: EFF6         ; matched directory record													;
2854: EFF6         ; Entry:	C = Search Length                                               ;
2855: EFF6         ; Exit		dirEntryIndex  =	Matched directory index, if found			;
2856: EFF6         ;								-1 (EOD) if there is no match				;
2857: EFF6             SearchForDirectoryRecord:                      ;
2858: EFF6 3E FF                  LD     A,0FFH               ;
2859: EFF8 32 B3 F4               LD     (directoryIndex),A   ; Initialize directory Index        ;
2860: EFFB 21 B5 F4               LD     HL,searchLength      ;
2861: EFFE 71                     LD     (HL),C               ; Save Search Length                ;
2862: EFFF 2A B4 EA               LD     HL,(paramDE)         ; Active FCB                        ;
2863: F002 22 B6 F4               LD     (searchAddress),HL   ; Start of search                   ;
2864: F005 CD 40 F1               CALL   SetEndDirectory      ; DirEntryIndex = -1                ;
2865: F008 CD ED EE               CALL   Home                 ; Reset Disk,Track, & Sector        ;
2866: F00B         ;
2867: F00B             GetNextDirectoryRecord:                      ;
2868: F00B 0E 00                  LD     C,FALSE              ;
2869: F00D CD 3D F3               CALL   ReadDirectory        ; Read next Dir Record              ;
2870: F010 CD 47 F1               CALL   AtEndOfDirectory     ;
2871: F013 28 4B                  JR     Z,NoDirRecordsMatch  ; Done if at EOD                ;
2872: F015         ;
2873: F015 2A B6 F4               LD     HL,(searchAddress)   ; Get Current Dir Entry             ;
2874: F018 EB                     EX     DE,HL                ; DE=beginning of Directory Entry   ;
2875: F019 1A                     LD     A,(DE)               ; User Number                       ;
2876: F01A FE E5                  CP     emptyDir             ; Is Dir entry is empty             ;
2877: F01C 28 07                  JR     Z,GetNextDirectoryRecord1 ; Skip if empty                     ;
2878: F01E         ;
2879: F01E         ; Check to be sure we are sill in the Directory                             ;
2880: F01E D5                     PUSH   DE                   ; Save search address               ;
2881: F01F CD 67 F1               CALL   StillInDirectory     ; Still in the directorY            ;
2882: F022 D1                     POP    DE                   ; Recall address                    ;
2883: F023 30 3B                  JR     NC,NoDirRecordsMatch ; Get out if past directory			;
2884: F025         ;
2885: F025             GetNextDirectoryRecord1:                      ;
2886: F025 CD 50 F1               CALL   GetCurrentDirectoryRecord ; Point at next directory record    ;
2887: F028 3A B5 F4               LD     A,(searchLength)     ;
2888: F02B 4F                     LD     C,A                  ; SearchLength to c (down)          ;
2889: F02C 06 00                  LD     B,0                  ; Character Index (up)              ;
2890: F02E         ;
2891: F02E             TestNextPosition:                      ;
2892: F02E 1A                     LD     A,(DE)               ;
2893: F02F FE 3F                  CP     QMARK                ; ? is always a char match          ;
2894: F031 28 16                  JR     Z,SetNextPosition    ; Done with this if it is ?		;
2895: F033         ;
2896: F033 78                     LD     A,B                  ;
2897: F034 FE 0D                  CP     fcbS1Index           ; At File S1 position ?             ;
2898: F036 28 11                  JR     Z,SetNextPosition    ; Done with this if it is ?		;
2899: F038         ; not the fcbS1Index field, extent field?                                  ;
2900: F038 FE 0C                  CP     fcbExtIndex          ; Past File Type position ?         ;
2901: F03A 1A                     LD     A,(DE)               ; Get next character                ;
2902: F03B 28 07                  JR     Z,CheckExtents       ; Skip to search extent             ;
2903: F03D 96                     SUB    M                    ; Do they match ?                   ;
2904: F03E E6 7F                  AND    07FH                 ; Strip MSBit                       ;
2905: F040 20 C9                  JR     NZ,GetNextDirectoryRecord ; Skip if not matched               ;
2906: F042 18 05                  JR     SetNextPosition      ; Matched the character             ;
2907: F044         ;                                                                           ;
2908: F044             CheckExtents:                      ;
2909: F044 CD E5 EF               CALL   CompareExtents       ; Matching EXTs is work             ;
2910: F047 20 C2                  JR     NZ,GetNextDirectoryRecord ; Get out if not matched            ;
2911: F049         ;
2912: F049             SetNextPosition:                      ;
2913: F049 13                     INC    DE                   ; Pointer to Looking FOR            ;
2914: F04A 23                     INC    HL                   ; Pointer to Looking IN             ;
2915: F04B 04                     INC    B                    ; Character Index in FCB            ;
2916: F04C 0D                     DEC    C                    ; Length of search                  ;
2917: F04D 20 DF                  JR     NZ,TestNextPosition  ;
2918: F04F         ; Match Found, entire name matches                                          ;
2919: F04F 3A C3 F4               LD     A,(dirEntryIndex)    ; Get current Directory Index       ;
2920: F052 E6 03                  AND    dirEntryMask         ; Apply the mask                    ;
2921: F054 32 B6 EA               LD     (exitParameterByte),A ; Put 0...3. Match FOund            ;
2922: F057         ;
2923: F057 21 B3 F4               LD     HL,directoryIndex    ; Point at Directory Flag           ;
2924: F05A 7E                     LD     A,(HL)               ; Get value                         ;
2925: F05B 17                     RLA                         ; Set Carry if Flag = -1            ;
2926: F05C D0                     RET    NC                   ; Return with flag still -1         ;
2927: F05D         ;
2928: F05D AF                     XOR    A                    ; Else Clear the flag               ;
2929: F05E 77                     LD     (HL),A               ;
2930: F05F C9                     RET                         ;  and exit                         ;
2931: F060         ;------                                                                     ;
2932: F060             NoDirRecordsMatch:                      ;
2933: F060 CD 40 F1               CALL   SetEndDirectory      ; Set End of Directory -1           ;
2934: F063 3E FF                  LD     A,-1                 ; Put Failure Code                  ;
2935: F065 32 B6 EA               LD     (exitParameterByte),A ;  into return parameter            ;
2936: F068 C9                     RET                         ;
2937: F069         ;---------------------Search for Directory Record --------------------------;
2938: F069         ;---------------------------- Write Current Directory Entry ----------------;
2939: F069             WriteDir:                       ;
2940: F069         ;	CALL	NewCheckSum						; initialize entry              ;
2941: F069 0E FF                  LD     C,TRUE               ;
2942: F06B CD BA F3               CALL   CheckSumUtility      ; Set New CheckSum              ;
2943: F06E         ;
2944: F06E CD 0C EF               CALL   SetDirDMA            ; Directory DMA                 ;
2945: F071 0E 01                  LD     C,WriteDirectory     ; Write type                    ;
2946: F073 CD 79 F0               CALL   WriteBuffer          ; Write the buffer              ;
2947: F076 C3 07 EF               JP     SetDataDMA           ; Reset DMA to default			;
2948: F079         ;
2949: F079         ;---------------------------- Write Current Directory Entry ----------------;
2950: F079         ;----------------------------------- Write Buffer --------------------------;
2951: F079         ; Write buffer and check result. Current drive,Track, Sector and DMA		;
2952: F079         ; Are set up prior to calling this routine                                  ;
2953: F079         ;                                                                           ;
2954: F079         ; On Entry: C = 0 => normal write operation		WriteAllocated              ;
2955: F079         ;				1 => directory write operation	WriteDirectory              ;
2956: F079         ;				2 => start of new block			WriteCleanBuffer			;
2957: F079             WriteBuffer:                      ;
2958: F079 CD 2A F6               CALL   bcWrite              ; Call into BIOS                    ;
2959: F07C B7                     OR     A                    ; Get return code                   ;
2960: F07D C2 29 F4               JP     NZ,Error_BadSector   ; Error if not 00                   ;
2961: F080 C9                     RET                         ;
2962: F081         ;----------------------------------- Write Buffer --------------------------;
2963: F081         ;---------------------------- Update Record Vars ---------------------------;
2964: F081         ;update variables from I/O in  FCB                                          ;
2965: F081             UpdateRecordVariables:                      ;
2966: F081 CD 83 EF               CALL   GetFcbRecordDetails  ; DE => FCB RC, HL => CurrentRecord ;
2967: F084 3A AE F4               LD     A,(diskAccessType)   ; If Seq IO it is set to 1			;
2968: F087 4F                     LD     C,A                  ;  and move it to C                 ;
2969: F088 3A BE F4               LD     A,(currentFileRecord) ; Get NEXT_RECORD                   ;
2970: F08B 81                     ADD    A,C                  ; Update record count               ;
2971: F08C 77                     LD     (HL),A               ;  for CurrentRecord                ;
2972: F08D EB                     EX     DE,HL                ;
2973: F08E 3A BC F4               LD     A,(fcbRecordCount)   ;
2974: F091 77                     LD     (HL),A               ;  and FCB RC                       ;
2975: F092 C9                     RET                         ;
2976: F093         ;---------------------------- Update Record Vars ---------------------------;
2977: F093         ;-------------------------------- Random Seek ------------------------------;
2978: F093         ;  Record # = |000M EEEE| |ERRR RRRR|                                       ;
2979: F093         ;		M => Module                                                         ;
2980: F093         ;		E => Extent                                                         ;
2981: F093         ;		R => Record in Extent                                               ;
2982: F093             RandomSeek:                      ;
2983: F093 AF                     XOR    A                    ;
2984: F094 32 AE F4               LD     (diskAccessType),A   ; Set random access                 ;
2985: F097 C5                     PUSH   BC                   ; Save Read(TRUE) / Write (FALSE)   ;
2986: F098         ;?	LD		HL,(paramDE)				; Get the FCB                       ;
2987: F098         ;?	PUSH	HL                                                              ;
2988: F098         ;?	POP		IX							; IX has the FCB address            ;
2989: F098 DD 2A B4 EA               LD     IX,(paramDE)         ; Get the FCB						;
2990: F09C DD 7E 21               LD     A,(IX+recordRandomLSB) ; Get LSB from Random Record        ;
2991: F09F E6 7F                  AND    7FH                  ; Strip E , left with |0RRR RRRR|   ;
2992: F0A1 F5                     PUSH   AF                   ; recordSEQ                         ;
2993: F0A2 DD 7E 21               LD     A,(IX+recordRandomLSB) ; Get LSB from Random Record        ;
2994: F0A5 17                     RLA                         ; CY = bit 7 from LSB (M's LSBit)   ;
2995: F0A6 DD 7E 22               LD     A,(IX+recordRandomMSB) ; Get MSB from Random Record        ;
2996: F0A9 F5                     PUSH   AF                   ; Random record's MSB               ;
2997: F0AA 17                     RLA                         ; Shift LSBit into E |00ME EEEE|    ;
2998: F0AB E6 1F                  AND    01FH                 ; Extent mask                       ;
2999: F0AD 4F                     LD     C,A                  ; Extent is in C                    ;
3000: F0AE F1                     POP    AF                   ; Random record's MSB               ;
3001: F0AF 1F                     RRA                         ;
3002: F0B0 1F                     RRA                         ;
3003: F0B1 1F                     RRA                         ;
3004: F0B2 1F                     RRA                         ; MSB's Hi Nibble                   ;
3005: F0B3 E6 0F                  AND    00FH                 ;  moved to Lo Nibble               ;
3006: F0B5 47                     LD     B,A                  ; S2' value in B                    ;
3007: F0B6 F1                     POP    AF                   ; recordSEQ                         ;
3008: F0B7         ;
3009: F0B7 DD 6E 23               LD     L,(IX+recordRandomOVF) ;
3010: F0BA 2C                     INC    L                    ; Insure that high byte             ;
3011: F0BB 2D                     DEC    L                    ;  of ran rec = 00                  ;
3012: F0BC 2E 06                  LD     L,06                 ; "attempt to read beyond end of disk"  ;
3013: F0BE 20 4B                  JR     NZ,RandomSeekError   ;
3014: F0C0         ;
3015: F0C0 DD 77 20               LD     (IX+recordSeq),A     ; Put target record # in FCB	    ;
3016: F0C3 DD 7E 0C               LD     A,(IX+fcbExtIndex)   ; Target EXT in A, FCB EXT in C     ;
3017: F0C6 B9                     CP     C                    ; Are we in the right directory ?	;
3018: F0C7 20 08                  JR     NZ,RandomSeekClose   ;  Skip if not                      ;
3019: F0C9         ;
3020: F0C9 DD 7E 0E               LD     A,(IX+fcbS2Index)    ; Target S2 in A, FCB S2 in C       ;
3021: F0CC B8                     CP     B                    ; Still in the right directory ?    ;
3022: F0CD E6 7F                  AND    7FH                  ; Mask out MSBit                    ;
3023: F0CF 28 30                  JR     Z,RandomSeekExit     ;  Exit if yes                      ;
3024: F0D1         ;
3025: F0D1             RandomSeekClose:                      ;
3026: F0D1 C5                     PUSH   BC                   ; Save EXT                          ;
3027: F0D2 D5                     PUSH   DE                   ; Save FCB                          ;
3028: F0D3 CD 35 EE               CALL   CloseDirEntry        ; Close this directory entry        ;
3029: F0D6 D1                     POP    DE                   ; FCB                               ;
3030: F0D7 C1                     POP    BC                   ; EXT                               ;
3031: F0D8 2E 03                  LD     L,03                 ; "CP/M could not close current extent" ;
3032: F0DA 3A B6 EA               LD     A,(exitParameterByte) ; Get result from Close             ;
3033: F0DD 3C                     INC    A                    ;
3034: F0DE 28 27                  JR     Z,RandomSeekErrorBadSeek ; Error exit if 0FFH                ;
3035: F0E0         ;
3036: F0E0 DD 71 0C               LD     (IX+fcbExtIndex),C   ; Update FCB Ext value              ;
3037: F0E3 DD 70 0E               LD     (IX+fcbS2Index),B    ; Update FCB S2 value               ;
3038: F0E6 CD F4 ED               CALL   OpenFile             ; Open the targeted Dir entry       ;
3039: F0E9 3A B6 EA               LD     A,(exitParameterByte) ; is the file present?              ;
3040: F0EC 3C                     INC    A                    ;
3041: F0ED 20 12                  JR     NZ,RandomSeekExit    ; Exit if open successful	        ;
3042: F0EF         ; cannot open the file, read mode?                                          ;
3043: F0EF C1                     POP    BC                   ; Get Read/Write flag               ;
3044: F0F0 C5                     PUSH   BC                   ; Read/Write flag                   ;
3045: F0F1 2E 04                  LD     L,04                 ; "attempt to read unwritten extent"    ;
3046: F0F3 0C                     INC    C                    ; Becomes 00 if read operation      ;
3047: F0F4 28 11                  JR     Z,RandomSeekErrorBadSeek ; Error exit if read operation      ;
3048: F0F6         ;
3049: F0F6 CD B3 EE               CALL   MakeNewFile          ; Make Directory Entry              ;
3050: F0F9 2E 05                  LD     L,05                 ; "cannot create new extent"        ;
3051: F0FB 3A B6 EA               LD     A,(exitParameterByte) ; Get result from Make              ;
3052: F0FE 3C                     INC    A                    ;
3053: F0FF 28 06                  JR     Z,RandomSeekErrorBadSeek ;  Exit if failed on Make           ;
3054: F101         ;
3055: F101             RandomSeekExit:                      ;
3056: F101 C1                     POP    BC                   ; Balance Stack                     ;
3057: F102 AF                     XOR    A                    ; Success                           ;
3058: F103 32 B6 EA               LD     (exitParameterByte),A ;
3059: F106 C9                     RET                         ;
3060: F107         ;
3061: F107             RandomSeekErrorBadSeek:                      ;
3062: F107 DD 36 0E C0               LD     (IX+fcbS2Index),0C0H ; Set Write protect & overflow      ;
3063: F10B             RandomSeekError:                      ;
3064: F10B C1                     POP    BC                   ; Balance Stack                     ;
3065: F10C 7D                     LD     A,L                  ; Get error code                    ;
3066: F10D 32 B6 EA               LD     (exitParameterByte),A ;  and return it to caller          ;
3067: F110 C3 CB EF               JP     SetFileWriteFlag     ; Set flag for following close      ;
3068: F113         ;-------------------------------- Random Seek ------------------------------;
3069: F113         ;--------------------------- Get Random Record Position -------------------;?
3070: F113         ; on Entry :                                                               ;?
3071: F113         ;			HL = pointer to directory entry                                ;?
3072: F113         ;			DE = fcbRCIndex/seqRecord index                                ;?
3073: F113             GetRandomRecordPosition:                      ;?
3074: F113 EB                     EX     DE,HL                ; DE = pointer to directory entry  ;?
3075: F114 19                     ADD    HL,DE                ;?
3076: F115         ; DE=.buf(dptr) or .fcb(0), HL = .f(NEXT_RECORD/fcbRCIndex)               ;?
3077: F115 4E                     LD     C,(HL)               ; C = record count                 ;?
3078: F116 06 00                  LD     B,0                  ; Make count a word value          ;?
3079: F118         ;?
3080: F118 21 0C 00               LD     HL,fcbExtIndex       ; FCB Extent index                 ;?
3081: F11B 19                     ADD    HL,DE                ;?
3082: F11C 7E                     LD     A,(HL)               ; ACC has Extent value             ;?
3083: F11D 0F                     RRCA                        ;?
3084: F11E E6 80                  AND    80H                  ; A=e000 0000                      ;?
3085: F120 81                     ADD    A,C                  ;?
3086: F121 4F                     LD     C,A                  ;?
3087: F122 3E 00                  LD     A,0                  ;?
3088: F124 88                     ADC    A,B                  ;?
3089: F125 47                     LD     B,A                  ;?
3090: F126         ; BC = 0000 000? errrr rrrr                                               ;?
3091: F126 7E                     LD     A,(HL)               ;?
3092: F127 0F                     RRCA                        ;?
3093: F128 E6 0F                  AND    LO_NIBBLE_MASK       ;?
3094: F12A 80                     ADD    A,B                  ;?
3095: F12B 47                     LD     B,A                  ;?
3096: F12C         ; BC = 000? eeee errrr rrrr        ;?
3097: F12C 21 0E 00               LD     HL,fcbS2Index        ;?
3098: F12F 19                     ADD    HL,DE                ;?
3099: F130 7E                     LD     A,(HL)               ; A=XXX? mmmm                      ;?
3100: F131 87                     ADD    A,A                  ;?
3101: F132 87                     ADD    A,A                  ;?
3102: F133 87                     ADD    A,A                  ;?
3103: F134 87                     ADD    A,A                  ; cy=? A=mmmm 0000                 ;?
3104: F135 F5                     PUSH   AF                   ;?
3105: F136 80                     ADD    A,B                  ;?
3106: F137 47                     LD     B,A                  ;?
3107: F138         ; cy=?, BC = mmmm eeee errr rrrr                                          ;?
3108: F138 F5                     PUSH   AF                   ; possible second carry            ;?
3109: F139 E1                     POP    HL                   ; cy = lsb of L                    ;?
3110: F13A 7D                     LD     A,L                  ; cy = lsb of A                    ;?
3111: F13B E1                     POP    HL                   ; cy = lsb of L                    ;?
3112: F13C B5                     OR     L                    ; cy/cy = lsb of A                 ;?
3113: F13D E6 01                  AND    1                    ; A = 0000 000? possible carry-out ;?
3114: F13F C9                     RET                         ;?
3115: F140         ;--------------------------- Get Random Record Position -------------------;?
3116: F140
3117: F140
3118: F140         ; FU
3119: F140         ;=========================== File Utilities ================================;
3120: F140
3121: F140         ;=========================== Directory Utilities ===========================;
3122: F140         ;--------------------------- Set End of Directory indicator ----------------;
3123: F140             SetEndDirectory:                      ;
3124: F140 21 FF FF               LD     HL,EOD               ; Put -1 (0FFFFH) in index          ;
3125: F143 22 C3 F4               LD     (dirEntryIndex),HL   ;
3126: F146 C9                     RET                         ;
3127: F147         ;--------------------------- Set End of Directory indicator ----------------;
3128: F147         ;--------------------------- Are we at End Of Directory --------------------;
3129: F147         ; Tests to see if we are at the End Of the Directory                        ;
3130: F147         ;                                                                           ;
3131: F147         ; exits With Z Flag Set if at EOD (dirEntryIndex = -1)                      ;
3132: F147         ;			 Z Flag reset if still in directory                             ;
3133: F147         ;
3134: F147             AtEndOfDirectory:                      ;
3135: F147 21 C3 F4               LD     HL,dirEntryIndex     ; Point at LSB of Dir index         ;
3136: F14A 7E                     LD     A,(HL)               ; Get it                            ;
3137: F14B 23                     INC    HL                   ; Point at MSB	of Dir Index		;
3138: F14C BE                     CP     M                    ; LSB = MSB ?                       ;
3139: F14D C0                     RET    NZ                   ;  exit if not if different         ;
3140: F14E         ; Same.  are they = 0ffh?           ;
3141: F14E 3C                     INC    A                    ;  if yes, A= 0, set Z flag         ;
3142: F14F C9                     RET                         ;
3143: F150         ;--------------------------- Are we at End Of Directory --------------------;
3144: F150         ;--------------------------- Get Directory Element -------------------------;
3145: F150         ; compute the address of a directory element in Directory Buffer            ;
3146: F150         ; Returns:  HL = Address of the specific directory Entry                    ;
3147: F150             GetCurrentDirectoryRecord:                      ;
3148: F150 C5                     PUSH   BC                   ; Save BC                           ;
3149: F151 2A 97 F4               LD     HL,(caDirectoryDMA)  ; Get the Directory Buffer base     ;
3150: F154 3A C2 F4               LD     A,(dirBlockIndex)    ; Get the index value               ;
3151: F157 4F                     LD     C,A                  ;
3152: F158 AF                     XOR    A                    ; Set to Zero and reset CY          ;
3153: F159 47                     LD     B,A                  ;
3154: F15A ED 4A                  ADC    HL,BC                ; Compute the Entry Location        ;
3155: F15C C1                     POP    BC                   ; Restore	                        ;
3156: F15D C9                     RET                         ;
3157: F15E         ;--------------------------- Get Directory Element -------------------------;
3158: F15E         ;--------------------------- Set Directory Entry ---------------------------;
3159: F15E         ; Will update directory if not in the directory                             ;
3160: F15E         ;
3161: F15E             SetDirectoryEntry:                      ;
3162: F15E CD 67 F1               CALL   StillInDirectory     ;
3163: F161 D8                     RET    C                    ; Exit if still in the Directory  	;
3164: F162         ;
3165: F162         ; StillInDirectory will return with:                                        ;
3166: F162         ;									DE = Directory entry number             ;
3167: F162         ;									HL = Address of entry number + 1        ;
3168: F162 13                     INC    DE                   ;
3169: F163 72                     LD     (HL),D               ;
3170: F164 2B                     DEC    HL                   ;
3171: F165 73                     LD     (HL),E               ;
3172: F166 C9                     RET                         ;
3173: F167         ;--------------------------- Set Directory Entry ---------------------------;
3174: F167         ;--------------------------- Are we sill in the Directory ------------------;
3175: F167         ;Returns	:                                                               ;
3176: F167         ;			CY Set   if dirEntryIndex <= Directory Max Value                ;
3177: F167         ;			CY Reset if dirEntryIndex  > Directory Max Value                ;
3178: F167         ;			HL = (address of Index Value) + 1                               ;
3179: F167         ;			DE = Directory Index Value                                      ;
3180: F167             StillInDirectory:                      ;
3181: F167 2A C3 F4               LD     HL,(dirEntryIndex)   ;
3182: F16A EB                     EX     DE,HL                ; DE = directory counter            ;
3183: F16B 2A 91 F4               LD     HL,(caDirMaxValue)   ; HL = caDirMaxValue              	;
3184: F16E 7B                     LD     A,E                  ;
3185: F16F 96                     SUB    M                    ;
3186: F170 23                     INC    HL                   ;
3187: F171 7A                     LD     A,D                  ;
3188: F172 9E                     SBC    A,(HL)               ; Set CY if dirEntryIndex           ;
3189: F173 C9                     RET                         ;  <= Directory Max Value       ;
3190: F174         ;--------------------------- Are we sill in the Directory ------------------;
3191: F174         ;--------------------------- Scan Disk Map ---------------------------------;
3192: F174         ; Will Set/Reset the Allocation Map bit(s) for the current directory entry. ;
3193: F174         ;                                                                           ;
3194: F174         ; On Entry  C = TRUE	Set the Map bits for each block found in FCB        ;
3195: F174         ;           C = FALSE	reset the Map bits for each block found in FCB      ;
3196: F174         ;
3197: F174             ScanDiskMap:                      ;
3198: F174 C5                     PUSH   BC                   ; Save the Set/Reset Info           ;
3199: F175 CD 50 F1               CALL   GetCurrentDirectoryRecord ; HL points at the directory record ;
3200: F178 11 10 00               LD     DE,fcbDiskMapIndex   ; DE is the index to the FCBs Map   ;
3201: F17B 19                     ADD    HL,DE                ; HL is now at start of the MAP     ;
3202: F17C 0E 11                  LD     C,fcbLength-fcbDiskMapIndex+1 ; Size of Disk Allocation Map + 1  ;
3203: F17E         ;
3204: F17E             ScanDiskMap0:                      ;
3205: F17E D1                     POP    DE                   ; Recall the set/reset Info         ;
3206: F17F 0D                     DEC    C                    ;
3207: F180 C8                     RET    Z                    ; Loop once for each disk map entry ;
3208: F181         ;
3209: F181 D5                     PUSH   DE                   ; Save the Set/Reset Info           ;
3210: F182 3A B8 F4               LD     A,(byteAllocationFlag) ; Is Map Byte or Word sized         ;
3211: F185 B7                     OR     A                    ;
3212: F186 28 07                  JR     Z,ScanDiskMapWord    ; Skip if Word Sized                ;
3213: F188         ;  Byte Allocation scan operation                                           ;
3214: F188 C5                     PUSH   BC                   ; Save counter                      ;
3215: F189 E5                     PUSH   HL                   ; Save map address                  ;
3216: F18A 4E                     LD     C,(HL)               ;
3217: F18B 06 00                  LD     B,0                  ; BC=block# for Byte                ;
3218: F18D 18 06                  JR     ScanDiskMap2         ;
3219: F18F         ; Word scan operation                                                       ;
3220: F18F             ScanDiskMapWord:                      ;
3221: F18F 0D                     DEC    C                    ; Adjust counter for 2 bytes        ;
3222: F190 C5                     PUSH   BC                   ; Save counter                      ;
3223: F191 46                     LD     B,(HL)               ;
3224: F192 23                     INC    HL                   ;
3225: F193 4E                     LD     C,(HL)               ; BC=block# for Word                ;
3226: F194 E5                     PUSH   HL                   ; Save map address                  ;
3227: F195         ;
3228: F195         ; Arrive here with BC=block#, E=0/1	                                        ;
3229: F195             ScanDiskMap2:                      ;
3230: F195 79                     LD     A,C                  ;
3231: F196 B0                     OR     B                    ; Skip if = 0000 (No Block)         ;
3232: F197 C4 98 EF               CALL   NZ,SetResetMapBit    ; bit set to 0/1 its in C           ;
3233: F19A E1                     POP    HL                   ;
3234: F19B 23                     INC    HL                   ; to next bit position              ;
3235: F19C C1                     POP    BC                   ; recall counter                    ;
3236: F19D 18 DF                  JR     ScanDiskMap0         ; for another item                  ;
3237: F19F         ;
3238: F19F         ;--------------------------- Scan Disk Map ---------------------------------;
3239: F19F         ;--------------------------- Get Closest Disk Block ------------------------;
3240: F19F         ; Find the closest available disk block, and mark in Map as allocated       ;
3241: F19F         ; Enter	BC	= Block number to base the search on                            ;
3242: F19F         ; Exit	HL	= 0000 if There are no available open blocks                    ;
3243: F19F         ;			= block number of available and marked block                    ;
3244: F19F         ;
3245: F19F             GetClosestBlock:                      ;
3246: F19F C5                     PUSH   BC                   ; save the starting Block #         ;
3247: F1A0         ;
3248: F1A0 2A A4 F4               LD     HL,(dpbDSM)          ; Maximum allocation value          ;
3249: F1A3 CD 0C F3               CALL   DivideHLby8          ; Length of Map	                    ;
3250: F1A6 EB                     EX     DE,HL                ; put size into DE			        ;
3251: F1A7 E1                     POP    HL                   ; Block number into HL              ;
3252: F1A8 CD 0C F3               CALL   DivideHLby8          ; Length of Map                     ;
3253: F1AB EB                     EX     DE,HL                ; Size in HL, Start in DE           ;
3254: F1AC AF                     XOR    A                    ; Reset CY                          ;
3255: F1AD ED 52                  SBC    HL,DE                ; Size for right                    ;
3256: F1AF         ; DE = Start Index                                                          ;
3257: F1AF         ; DE = Left Size                                                            ;
3258: F1AF         ; HL	= Right Size                                                        ;
3259: F1AF E5                     PUSH   HL                   ; Save right size                   ;
3260: F1B0 D5                     PUSH   DE                   ; Save left size & Start Index      ;
3261: F1B1 3E FF                  LD     A,0FFH               ; Full Octet                        ;
3262: F1B3         ;
3263: F1B3 2A 9D F4               LD     HL,(caAllocVector)   ; Start of Map                      ;
3264: F1B6 19                     ADD    HL,DE                ; Determine initial Octet			;
3265: F1B7         ; Set up Left side                                                          ;
3266: F1B7 C1                     POP    BC                   ; Left size                         ;
3267: F1B8 03                     INC    BC                   ; adjust                            ;
3268: F1B9 E5                     PUSH   HL                   ; Save initial Octet                ;
3269: F1BA 11 FF FF               LD     DE,-1                ; Flag as Left register set         ;
3270: F1BD         ; HL = Initial Octet                                                        ;
3271: F1BD         ; BC = Left Size                                                            ;
3272: F1BD D9                     EXX                         ; Use alternate registers           ;
3273: F1BE 11 00 00               LD     DE,0000H             ; Flag as Right register set        ;
3274: F1C1 E1                     POP    HL                   ; Get Initial Octet                 ;
3275: F1C2 C1                     POP    BC                   ; Get Right Size                    ;
3276: F1C3 03                     INC    BC                   ; adjust                            ;
3277: F1C4             LookRight:                      ;
3278: F1C4 ED A1                  CPI                         ; UnSet Bit?                        ;
3279: F1C6 20 28                  JR     NZ,FoundFreeOctet    ;  Then get out of search           ;
3280: F1C8 E2 E1 F1               JP     PO,NoMoreRight       ; Exhausted Map to the right        ;
3281: F1CB         ;
3282: F1CB D9                     EXX                         ; Switch to the Left                ;
3283: F1CC ED A9                  CPD                         ; UnSet Bit?                        ;
3284: F1CE 20 20                  JR     NZ,FoundFreeOctet    ;  Then get out of search           ;
3285: F1D0 E2 D6 F1               JP     PO,NoMoreLeft        ; Exhausted Map to the right        ;
3286: F1D3 D9                     EXX                         ; switch to right                   ;
3287: F1D4 18 EE                  JR     LookRight            ; Keep on looking                   ;
3288: F1D6         ;			----------------			                                    ;
3289: F1D6             NoMoreLeft:                      ;
3290: F1D6 D9                     EXX                         ; Switch to Right                   ;
3291: F1D7             NoMoreLeftLoop:                      ;
3292: F1D7 ED A1                  CPI                         ;
3293: F1D9 20 15                  JR     NZ,FoundFreeOctet    ;  Then get out of search           ;
3294: F1DB E2 EC F1               JP     PO,NoFreeBlocks      ; Exhausted Map to the right		;
3295: F1DE 18 F7                  JR     NoMoreLeftLoop       ; Keep looking                      ;
3296: F1E0 76                     HALT                        ;
3297: F1E1             NoMoreRight:                      ;
3298: F1E1 D9                     EXX                         ; Switch to Left                    ;
3299: F1E2             NoMoreRightLoop:                      ;
3300: F1E2 ED A9                  CPD                         ;
3301: F1E4 20 0A                  JR     NZ,FoundFreeOctet    ;  Then get out of search           ;
3302: F1E6 E2 EC F1               JP     PO,NoFreeBlocks      ; Exhausted Map to the right        ;
3303: F1E9 18 F7                  JR     NoMoreRightLoop      ; Keep looking                      ;
3304: F1EB 76                     HALT                        ;
3305: F1EC             NoFreeBlocks:                      ;
3306: F1EC 21 00 00               LD     HL,0000H             ; Return 0000 in HL                 ;
3307: F1EF C9                     RET                         ;
3308: F1F0         ;			----------------			                                    ;
3309: F1F0             FoundFreeOctet:                      ;
3310: F1F0 BB                     CP     E                    ; Left or Right                     ;
3311: F1F1 28 03                  JR     Z,FoundFreeOctet1    ;  it was left                      ;
3312: F1F3 2B                     DEC    HL                   ; Adjust for direction              ;
3313: F1F4 18 01                  JR     FoundFreeOctet2      ;
3314: F1F6         ;
3315: F1F6             FoundFreeOctet1:                      ;
3316: F1F6 23                     INC    HL                   ; Adjust for direction              ;
3317: F1F7             FoundFreeOctet2:                      ;
3318: F1F7 01 00 00               LD     BC,00                ; need to keep track of bit         ;
3319: F1FA             FoundFreeOctet3:                      ;
3320: F1FA CB 06                  RLC    (HL)                 ;
3321: F1FC 03                     INC    BC                   ;
3322: F1FD 38 FB                  JR     C,FoundFreeOctet3    ; Loop if Bit 7 set                 ;
3323: F1FF CB C6                  SET    0,(HL)               ; Make map bit set                  ;
3324: F201 41                     LD     B,C                  ; Put count in B                    ;
3325: F202             FoundFreeOctet4:                      ;
3326: F202 CB 0E                  RRC    (HL)                 ;
3327: F204 10 FC                  DJNZ   FoundFreeOctet4      ; Restore the Octet                 ;
3328: F206 0B                     DEC    BC                   ; adjust for Zero based value       ;
3329: F207 C5                     PUSH   BC                   ; Save the bit index                ;
3330: F208 ED 4B 9D F4               LD     BC,(caAllocVector)   ; Get Map start                     ;
3331: F20C AF                     XOR    A                    ; Clear CY                          ;
3332: F20D ED 42                  SBC    HL,BC                ; Get how far in the map            ;
3333: F20F CD 16 F3               CALL   MultiplyHLby8        ; Calculate the Octet           ;
3334: F212 C1                     POP    BC                   ; Restore index into Octet          ;
3335: F213 09                     ADD    HL,BC                ; This is the Block Number          ;
3336: F214 C9                     RET                         ;
3337: F215         ;--------------------------- Get Closest Disk Block ------------------------;
3338: F215         ;---------------------------- Copy Dir Entry To User's Buffer --------------;
3339: F215             CopyDirEntryToUserDMA:                      ;
3340: F215 2A 97 F4               LD     HL,(caDirectoryDMA)  ; Point at Directory buffer         ;
3341: F218 ED 5B 8F F4               LD     DE,(initDAMAddress)  ; Point at User's Buffer            ;
3342: F21C 01 80 00               LD     BC,cpmRecordSize     ; The entire record                 ;
3343: F21F ED B0                  LDIR                        ; Move it                           ;
3344: F221 C9                     RET                         ;
3345: F222         ;---------------------------- Copy Dir Entry To User's Buffer --------------;
3346: F222         ;--------------------- Return last Directory Index to Caller ---------------;
3347: F222             DirLocationToReturnLoc:                      ;
3348: F222 3A B3 F4               LD     A,(directoryIndex)   ; Get last directory Index          ;
3349: F225 32 B6 EA               LD     (exitParameterByte),A ; Save for return to Caller         ;
3350: F228 C9                     RET                         ;
3351: F229         ;--------------------- Return last Directory Index to Caller ---------------;
3352: F229         ;--------------------------- Check OK to Write to Disk ---------------------;
3353: F229             CheckWrite:                      ;
3354: F229 CD 35 EF               CALL   IsDiskWriteProtected ; Is this disk Write Protected?     ;
3355: F22C C8                     RET    Z                    ; OK to write                       ;
3356: F22D C3 1D F4               JP     Error_DiskReadOnly   ; Report read only disk error		;
3357: F230         ;--------------------------- Check OK to Write to Disk ---------------------;
3358: F230         ;--------------------------- Check File Write Protect Status ---------------;
3359: F230             CheckRODirectory:                      ;
3360: F230 CD 50 F1               CALL   GetCurrentDirectoryRecord ; Use Entry in Directory Buffer     ;
3361: F233         ; Use HL as the directory entry in Question                                 ;
3362: F233             CheckROFile:                      ;
3363: F233 11 09 00               LD     DE,fcbROfileIndex    ; Index into FC for RO              ;
3364: F236 19                     ADD    HL,DE                ; point at the byte                 ;
3365: F237 7E                     LD     A,(HL)               ;
3366: F238 17                     RLA                         ; Set CY if RO bit set              ;
3367: F239 D0                     RET    NC                   ; Return OK                         ;
3368: F23A C3 23 F4               JP     Error_FileReadOnly   ; Report to read only File          ;
3369: F23D         ;--------------------------- Check File Write Protect Status ---------------;
3370: F23D         ;------------------------- Copy FCB To Directory record --------------------;
3371: F23D         ; On Entry:                                                                 ;
3372: F23D         ;			C = Starting position                                           ;
3373: F23D         ;			E = length of copy                                              ;
3374: F23D         ;copy the whole file control block                                          ;
3375: F23D             CopyFCB:                        ;
3376: F23D 0E 00                  LD     C,0                  ;
3377: F23F 1E 20                  LD     E,fcbLength          ; Copy all of the FCB		    ;
3378: F241         ; On Entry:                                                                 ;
3379: F241         ;			C = Starting position                                           ;
3380: F241         ;			E = length of copy                                              ;
3381: F241             CopyDir:                        ;
3382: F241 16 00                  LD     D,0                  ; Make length a word value      ;
3383: F243 D5                     PUSH   DE                   ; Length                        ;
3384: F244 06 00                  LD     B,0                  ; Make index a word             ;
3385: F246 2A B4 EA               LD     HL,(paramDE)         ; HL = source for data          ;
3386: F249 09                     ADD    HL,BC                ;
3387: F24A EB                     EX     DE,HL                ;
3388: F24B CD 50 F1               CALL   GetCurrentDirectoryRecord ; HL pointer to Dir Record      ;
3389: F24E EB                     EX     DE,HL                ;
3390: F24F C1                     POP    BC                   ; Length                        ;
3391: F250 ED B0                  LDIR                        ;
3392: F252 CD 6B F3               CALL   SeekDir              ; Seek to the dir entry         ;
3393: F255 C3 69 F0               JP     WriteDir             ; Write the directory element   ;
3394: F258         ;------------------------- Copy FCB from Directory record ------------------;
3395: F258         ;-------------------------------- Get Block Number -------------------------;
3396: F258         ;compute disk block number from current FCB                                ;
3397: F258             GetBlockNumber:                      ;
3398: F258 CD 65 F2               CALL   GetDiskMapIndex      ;Return Alloc block index           ;
3399: F25B 4F                     LD     C,A                  ;
3400: F25C 06 00                  LD     B,0                  ;
3401: F25E CD 72 F2               CALL   GetDiskMapValue      ; Convert to Disk record            ;
3402: F261 22 C0 F4               LD     (absoluteCPMRecord),HL ; Save                              ;
3403: F264 C9                     RET                         ;
3404: F265         ;-------------------------------- Get Block Number -------------------------;
3405: F265         ;-------------------------------- Get Disk Map Index -----------------------;
3406: F265         ;Return the  disk map Index for current File Record in the ACC              ;
3407: F265             GetDiskMapIndex:                      ;
3408: F265 21 A1 F4               LD     HL,dpbBSH            ; Block# = Record# / (2***dpbBSH)   ;
3409: F268 46                     LD     B,(HL)               ; shift count                       ;
3410: F269 3A BE F4               LD     A,(currentFileRecord) ;
3411: F26C             GetDiskMapIndexLoop:                      ;
3412: F26C CB 3F                  SRL    A                    ;
3413: F26E 10 FC                  DJNZ   GetDiskMapIndexLoop  ; Loop till done                    ;
3414: F270 00                     NOP                         ;
3415: F271 C9                     RET                         ;
3416: F272         ;-------------------------------- Get Disk Map Index -----------------------;
3417: F272         ;-------------------------------- Get Disk Map Value -----------------------;
3418: F272         ; Enter with Disk Map Index in BC                                           ;
3419: F272         ; Return disk map value  in HL                                              ;
3420: F272             GetDiskMapValue:                      ;
3421: F272 2A B4 EA               LD     HL,(paramDE)         ; FCB                               ;
3422: F275 11 10 00               LD     DE,fcbDiskMapIndex   ; Index to Allocation Map           ;
3423: F278 19                     ADD    HL,DE                ; Address of Allocation Map Start   ;
3424: F279 09                     ADD    HL,BC                ; Point at the targeted map entry   ;
3425: F27A 3A B8 F4               LD     A,(byteAllocationFlag) ; Is this a byte or word            ;
3426: F27D B7                     OR     A                    ;
3427: F27E 28 04                  JR     Z,GetDiskMap16Bit    ; Skip if word value                ;
3428: F280 6E                     LD     L,(HL)               ;  else its a byte value            ;
3429: F281 26 00                  LD     H,0                  ;load the byte into HL              ;
3430: F283 C9                     RET                         ;
3431: F284         ;
3432: F284             GetDiskMap16Bit:                      ;
3433: F284 09                     ADD    HL,BC                ; make it double width              ;
3434: F285 56                     LD     D,(HL)               ;
3435: F286 23                     INC    HL                   ;
3436: F287 5E                     LD     E,(HL)               ; Load word value into DE           ;
3437: F288 EB                     EX     DE,HL                ; return value in HL                ;
3438: F289 C9                     RET                         ;
3439: F28A         ;-------------------------------- Get Disk Map Value -----------------------;
3440: F28A         ;-------------------------------- Allocate The Block -----------------------;
3441: F28A         ;is  block allocated                                                        ;
3442: F28A             WasBlockAllocated:                      ;
3443: F28A 2A C0 F4               LD     HL,(absoluteCPMRecord) ; Get the Block Number              ;
3444: F28D 7D                     LD     A,L                  ; ZFlag set if                      ;
3445: F28E B4                     OR     H                    ;  absoluteCPMRecord = 0            ;
3446: F28F C9                     RET                         ;
3447: F290         ;-------------------------------- Allocate The Block -----------------------;
3448: F290         ;----------------------------- Set Actual Record Add -----------------------;
3449: F290         ;
3450: F290         ;compute actual record address                                              ;
3451: F290         ; result = absolute CPMRecord * ( 2**BSH)                                  ;
3452: F290             SetActualRecordAdd:                      ;
3453: F290 3A A1 F4               LD     A,(dpbBSH)           ; Block Shift to loop control       ;
3454: F293 47                     LD     B,A                  ;
3455: F294 2A C0 F4               LD     HL,(absoluteCPMRecord) ;
3456: F297         ;
3457: F297             SetActualRecordAddLoop:                      ;
3458: F297 29                     ADD    HL,HL                ;
3459: F298 10 FD                  DJNZ   SetActualRecordAddLoop ;
3460: F29A         ; HL has Record number for start of the block;                              ;
3461: F29A 3A A2 F4               LD     A,(dpbBLM)           ; Get block mask to get current     ;
3462: F29D 4F                     LD     C,A                  ;  File Record mod Block            ;
3463: F29E 3A BE F4               LD     A,(currentFileRecord) ; Get index into block              ;
3464: F2A1 A1                     AND    C                    ; Record index in Block             ;
3465: F2A2 B5                     OR     L                    ;
3466: F2A3 6F                     LD     L,A                  ; to HL                             ;
3467: F2A4 22 C0 F4               LD     (absoluteCPMRecord),HL ; Absolute CPM Record=HL            ;
3468: F2A7         ; *** Absolute CPM Record now has current record number                     ;
3469: F2A7         ; - Starting record number + index into block                               ;
3470: F2A7 C9                     RET                         ;
3471: F2A8         ;----------------------------- Set Actual Record Add -----------------------;
3472: F2A8         ;-------------------------------- Open Next Extent -------------------------;
3473: F2A8         ;close the current extent  and open the next one if possible.              ;
3474: F2A8         ;readModeFlag is true if in read mode                                      ;
3475: F2A8             OpenNextExt:                      ;
3476: F2A8 AF                     XOR    A                    ; Set to 00                         ;
3477: F2A9 32 B1 F4               LD     (fcbCopiedFlag),A    ; Clear Flag                        ;
3478: F2AC CD 35 EE               CALL   CloseDirEntry        ; Close current extent.             ;
3479: F2AF CD 47 F1               CALL   AtEndOfDirectory     ; Is the directory full?            ;
3480: F2B2 C8                     RET    Z                    ;  exit it yes                      ;
3481: F2B3         ;
3482: F2B3 CD 90 EF               CALL   GetExtentAddress     ; HL at FCB's EXT                   ;
3483: F2B6 7E                     LD     A,(HL)               ; Get previous EXT value            ;
3484: F2B7 3C                     INC    A                    ; Add one to it                     ;
3485: F2B8 E6 1F                  AND    maxExtValue          ; Limit to max value                ;
3486: F2BA 77                     LD     (HL),A               ; Put it back into the FCB          ;
3487: F2BB 28 0D                  JR     Z,OpenNextModule     ;  if = 0, need to open new Module  ;
3488: F2BD         ;
3489: F2BD 47                     LD     B,A                  ; put Ext value in B                ;
3490: F2BE 3A A3 F4               LD     A,(dpbEXM)           ; Get the Extent Mask               ;
3491: F2C1 A0                     AND    B                    ; Mask out unwanted bits            ;
3492: F2C2         ; if result is zero, then not in the same group                             ;
3493: F2C2 21 B1 F4               LD     HL,fcbCopiedFlag     ; Point at Copied Flag              ;
3494: F2C5 A6                     AND    M                    ;  00 in Acc if not written         ;
3495: F2C6 28 0C                  JR     Z,OpenNextExt1       ;  go to next physical extent if 0  ;
3496: F2C8 18 24                  JR     UpdateFCB            ;  else continue                    ;
3497: F2CA         ;
3498: F2CA             OpenNextModule:                      ;
3499: F2CA 01 02 00               LD     BC,fcbS2Index-fcbExtIndex ; Index difference between EXT & S2 ;
3500: F2CD 09                     ADD    HL,BC                ; Add to HL( at EXT) gives S2       ;
3501: F2CE 34                     INC    M                    ; Increment the Module number       ;
3502: F2CF 7E                     LD     A,(HL)               ; get the new Module number         ;
3503: F2D0 E6 0F                  AND    moduleMask           ; Mask out unwanted bits            ;
3504: F2D2 28 25                  JR     Z,OpenNextExtError   ; If overflow to zero, error exit   ;
3505: F2D4         ;
3506: F2D4             OpenNextExt1:                      ;
3507: F2D4 0E 0F                  LD     C,nameLength         ; Set search/match size             ;
3508: F2D6 CD F6 EF               CALL   SearchForDirectoryRecord ; Find the file's directory record  ;
3509: F2D9 CD 47 F1               CALL   AtEndOfDirectory     ; At end of Directory ?             ;
3510: F2DC 20 10                  JR     NZ,UpdateFCB         ;  No, then keep going              ;
3511: F2DE         ;
3512: F2DE 3A B2 F4               LD     A,(readModeFlag)     ;  else at EOD                      ;
3513: F2E1 3C                     INC    A                    ; 0ffh becomes 00 if read           ;
3514: F2E2 28 15                  JR     Z,OpenNextExtError   ; All done if a read                ;
3515: F2E4         ;
3516: F2E4 CD B3 EE               CALL   MakeNewFile          ; With write we can extend file     ;
3517: F2E7 CD 47 F1               CALL   AtEndOfDirectory     ; Is there room in the directory ?  ;
3518: F2EA 28 0D                  JR     Z,OpenNextExtError   ;  no, exitParameterByte = 1        ;
3519: F2EC 18 03                  JR     OpenNextExt3         ;
3520: F2EE         ;
3521: F2EE             UpdateFCB:                      ;
3522: F2EE CD FD ED               CALL   CopyDirRecordToFCB   ; Update FCB                        ;
3523: F2F1             OpenNextExt3:                      ;
3524: F2F1 CD 6C EF               CALL   SetRecordVars        ; Set variables for current FCB     ;
3525: F2F4 AF                     XOR    A                    ;
3526: F2F5 32 B6 EA               LD     (exitParameterByte),A ; Set exitParameterByte = 0         ;
3527: F2F8 C9                     RET                         ;
3528: F2F9         ;
3529: F2F9             OpenNextExtError:                      ;
3530: F2F9 CD 2E F3               CALL   SetExitParamTo1      ; ExitParameterByte = 1             ;
3531: F2FC C3 CB EF               JP     SetFileWriteFlag     ; Ensure that it will not be closed ;
3532: F2FF         ;-------------------------------- Open Next Extent -------------------------;
3533: F2FF
3534: F2FF         ;=========================== Directory Utilities ===========================;
3535: F2FF         ; DU
3536: F2FF
3537: F2FF         ;=========================== General   Utilities ===========================;
3538: F2FF
3539: F2FF         ;--------------------------- Rotate HL right by value in C -----------------;
3540: F2FF         ;
3541: F2FF         ; HL = Value to be rotated Right                                            ;
3542: F2FF         ;  B = Amount to shift                                                      ;
3543: F2FF             RotateRightHLbyB:                      ;
3544: F2FF 37                     SCF                         ; Set carry flag, expect LSBit = 1  ;
3545: F300 CB 45                  BIT    0,L                  ; is LSB set?                       ;
3546: F302 20 01                  JR     NZ,RotateRightHLbyB1 ; Skip if LSB set               ;
3547: F304 3F                     CCF                         ; else Clear Carry flag             ;
3548: F305             RotateRightHLbyB1:                      ;
3549: F305 CB 1C                  RR     H                    ; Shift thru CY                     ;
3550: F307 CB 1D                  RR     L                    ; ditto                             ;
3551: F309 10 F4                  DJNZ   RotateRightHLbyB     ;
3552: F30B C9                     RET                         ;
3553: F30C         ;
3554: F30C         ;--------------------------- Rotate HL right by value in C -----------------;
3555: F30C         ;---------Divide HL by 8  &&  Shift HL right by value in C -----------------;
3556: F30C         ; HL = Value to be shifted Right                                            ;
3557: F30C             DivideHLby8:                      ;
3558: F30C 06 03                  LD     B,3                  ; 8 = 2**3						    ;
3559: F30E         ;  B = Amount to shift                                                      ;
3560: F30E             ShiftRightHLbyB:                      ;
3561: F30E AF                     XOR    A                    ; else Clear Carry flag             ;
3562: F30F CB 1C                  RR     H                    ; Shift thru CY                     ;
3563: F311 CB 1D                  RR     L                    ; ditto                             ;
3564: F313 10 F9                  DJNZ   ShiftRightHLbyB      ;
3565: F315 C9                     RET                         ;
3566: F316         ;---------Divide HL by 8  &&  Shift HL right by value in C -----------------;
3567: F316         ;---------Multiply HL by 8  &&  Shift HL left by value in C ----------------;
3568: F316         ; HL = Value to be shifted Left                                             ;
3569: F316             MultiplyHLby8:                      ;
3570: F316 06 03                  LD     B,3                  ; 8 = 2**3						    ;
3571: F318         ;  B = Amount to shift                                                      ;
3572: F318             ShiftLeftHLbyB:                      ;
3573: F318 AF                     XOR    A                    ; else Clear Carry flag             ;
3574: F319 CB 15                  RL     L                    ; Shift thru CY                     ;
3575: F31B CB 14                  RL     H                    ; ditto                             ;
3576: F31D 10 F9                  DJNZ   ShiftLeftHLbyB       ;
3577: F31F C9                     RET                         ;
3578: F320         ;---------Multiply HL by 8  &&  Shift HL left by value in C ----------------;
3579: F320         ;----------------------------- Merge ---------------------------------------;
3580: F320         ; Merge Map Block Numbers between FCB and directory record                  ;
3581: F320         ; HL has pointer to map for either dir record or FCB,                       ;
3582: F320         ; DE has the other pointer. If HL is pointing to a non empty block, then    ;
3583: F320         ; it just returns, Else it copies the block number to where DE is pointing  ;
3584: F320         ;
3585: F320             Merge:                          ;
3586: F320 7E                     LD     A,(HL)               ; Get the first byte                ;
3587: F321 23                     INC    HL                   ;
3588: F322 B6                     OR     M                    ; OR it with the second byte        ;
3589: F323 2B                     DEC    HL                   ; Restore HL to start               ;
3590: F324 C0                     RET    NZ                   ; Exit if both are 0s               ;
3591: F325         ; HL points to a non Zero value	                                            ;
3592: F325 1A                     LD     A,(DE)               ; Get the first byte                ;
3593: F326 77                     LD     (HL),A               ; Move it                           ;
3594: F327 13                     INC    DE                   ;
3595: F328 23                     INC    HL                   ; Increment both pointers           ;
3596: F329 1A                     LD     A,(DE)               ; Get the second byte               ;
3597: F32A 77                     LD     (HL),A               ; Move it                           ;
3598: F32B 1B                     DEC    DE                   ;
3599: F32C 2B                     DEC    HL                   ; Restore HL & DE to start          ;
3600: F32D C9                     RET                         ;
3601: F32E         ;----------------------------- Merge ---------------------------------------;
3602: F32E         ;------------------------- Set Exit Parameter To 1 -------------------------;
3603: F32E             SetExitParamTo1:                      ;
3604: F32E 3E 01                  LD     A,1                  ;
3605: F330 32 B6 EA               LD     (exitParameterByte),A ; Put a 1 in the exit parameter     ;
3606: F333 C9                     RET                         ;
3607: F334         ;------------------------- Set Exit Parameter To 1 -------------------------;
3608: F334
3609: F334         ; GU
3610: F334
3611: F334         ;=========================== General   Utilities ===========================;
3612: F334
3613: F334         ;--------------------------- Read Directory Record -------------------------;
3614: F334         ; read a directory entry into the directory buffer                          ;
3615: F334             ReadDirRecord:                      ;
3616: F334 CD 0C EF               CALL   SetDirDMA            ; System Assigned Buffer            ;
3617: F337 CD 15 EF               CALL   ReadBuffer           ; Go to BIOS for the read           ;
3618: F33A C3 07 EF               JP     SetDataDMA           ; Restore DMA                       ;
3619: F33D         ;--------------------------- Read Directory Record -------------------------;
3620: F33D
3621: F33D         ;--------------------------- Read Directory --------------------------------;
3622: F33D         ; Read next directory entry                                                 ;
3623: F33D         ; Enter :                                                                   ;
3624: F33D         ;		C =  TRUE initializing and setting CheckSum                         ;
3625: F33D         ;		  <> TRUE Checking existing CheckSum                                ;
3626: F33D             ReadDirectory:                      ;
3627: F33D ED 5B A6 F4               LD     DE,(dpbDRM)          ; Number of Dir Entries-1           ;
3628: F341 2A C3 F4               LD     HL,(dirEntryIndex)   ; Prior Directory Index             ;
3629: F344 23                     INC    HL                   ; Increment the Index               ;
3630: F345 22 C3 F4               LD     (dirEntryIndex),HL   ; Save current directory index      ;
3631: F348 AF                     XOR    A                    ; Clear the CY flag                 ;
3632: F349 ED 52                  SBC    HL,DE                ; Are we at end Of the directory    ;
3633: F34B 20 04                  JR     NZ,ReadDirectory0    ;  No the process                   ;
3634: F34D CD 40 F1               CALL   SetEndDirectory      ;  else we are done                 ;
3635: F350 C9                     RET                         ;
3636: F351         ;
3637: F351         ; Calculate the entry index Position in Buffer                              ;
3638: F351             ReadDirectory0:                      ;
3639: F351 3A C3 F4               LD     A,(dirEntryIndex)    ; Get the index                     ;
3640: F354 E6 03                  AND    dirEntryMask         ; Determine Entry number            ;
3641: F356 06 05                  LD     B,fcbShift           ; Shift value for Record Size       ;
3642: F358             ReadDirectory1:                      ;
3643: F358 87                     ADD    A,A                  ;
3644: F359 10 FD                  DJNZ   ReadDirectory1       ;
3645: F35B 32 C2 F4               LD     (dirBlockIndex),A    ; Now save the Index into to buffer ;
3646: F35E B7                     OR     A                    ; Is this the 1st entry?            ;
3647: F35F C0                     RET    NZ                   ;  return if not.                   ;
3648: F360         ;
3649: F360 C5                     PUSH   BC                   ; Save init Flag (CheckSum)         ;
3650: F361 CD 6B F3               CALL   SeekDir              ; Set up for Directory Read         ;
3651: F364 CD 34 F3               CALL   ReadDirRecord        ; Read the directory record         ;
3652: F367 C1                     POP    BC                   ; Recall initialization flag        ;
3653: F368 C3 BA F3               JP     CheckSumUtility      ; Checksum the directory            ;
3654: F36B         ;--------------------------- Read Directory --------------------------------;
3655: F36B         ;--------------------------- Seek Directory --------------------------------;
3656: F36B         ;seek the record containing the current directory entry					;
3657: F36B             SeekDir:                        ;
3658: F36B 2A C3 F4               LD     HL,(dirEntryIndex)   ; Directory Entry Index             ;
3659: F36E 06 02                  LD     B,dirEntryShift      ; 4 entries per record              ;
3660: F370 CD 0E F3               CALL   ShiftRightHLbyB      ;
3661: F373 22 C0 F4               LD     (absoluteCPMRecord),HL ;
3662: F376 22 C5 F4               LD     (dirRecord),HL       ; Save                              ;
3663: F379 C3 7C F3               JP     Seek                 ;
3664: F37C         ;--------------------------- Seek Directory --------------------------------;
3665: F37C         ;--------------------------- Seek ------------------------------------------;
3666: F37C             Seek:                           ;
3667: F37C 01 FF FF               LD     BC,0FFFFH            ; Initialize the track counter      ;
3668: F37F 2A C0 F4               LD     HL,(absoluteCPMRecord) ; Get the record in question        ;
3669: F382 ED 5B 9F F4               LD     DE,(dpbSPT)          ; Get Sectors Per track             ;
3670: F386         ;
3671: F386             Seek0:                          ;
3672: F386 03                     INC    BC                   ; Divide the record                 ;
3673: F387 AF                     XOR    A                    ;  by the sectors per track         ;
3674: F388 ED 52                  SBC    HL,DE                ;
3675: F38A 30 FA                  JR     NC,Seek0             ;  to get the gross track number    ;
3676: F38C         ;
3677: F38C         ;
3678: F38C 19                     ADD    HL,DE                ; Gets the sector in the track      ;
3679: F38D E5                     PUSH   HL                   ; Save Index Sector                 ;
3680: F38E         ;
3681: F38E DD E5                  PUSH   IX                   ; Save IX							;
3682: F390 DD 2A 93 F4               LD     IX,(caTrack)         ;
3683: F394 DD 71 00               LD     (IX+0),C             ;
3684: F397 DD 70 01               LD     (IX+1),B             ; Save the Gross Track              ;
3685: F39A         ;
3686: F39A EB                     EX     DE,HL                ; Take the index from the record    ;
3687: F39B 2A C0 F4               LD     HL,(absoluteCPMRecord) ;
3688: F39E AF                     XOR    A                    ;
3689: F39F ED 52                  SBC    HL,DE                ;  and you get the Block start      ;
3690: F3A1         ;
3691: F3A1 DD 2A 95 F4               LD     IX,(caSector)        ;
3692: F3A5 DD 75 00               LD     (IX+0),L             ;
3693: F3A8 DD 74 01               LD     (IX+1),H             ; Save the Block Start              ;
3694: F3AB DD E1                  POP    IX                   ; Restore IX							;
3695: F3AD         ;
3696: F3AD 2A AC F4               LD     HL,(dpbOFF)          ; Get directory Offset (tracks)		;
3697: F3B0 09                     ADD    HL,BC                ;  to add to the gross Track        ;
3698: F3B1 E5                     PUSH   HL                   ;  which yields the net or          ;
3699: F3B2 C1                     POP    BC                   ;  actual track for the record      ;
3700: F3B3 CD 1E F6               CALL   bcSettrk             ; Set the net (actual) track        ;
3701: F3B6         ;
3702: F3B6 C1                     POP    BC                   ; Get the sector within the track   ;
3703: F3B7 C3 21 F6               JP     bcSetsec             ;  and set it for the seek          ;
3704: F3BA         ;
3705: F3BA         ;--------------------------- Seek ------------------------------------------;
3706: F3BA         ;--------------------------- Check Sum Utility -----------------------------;
3707: F3BA         ; At entry                                                                  ;
3708: F3BA         ;			C  = TRUE	-  Set the Checksum values in Vector                ;
3709: F3BA         ;			C <> TRUE	-  Validate Checksum value in Vector                ;
3710: F3BA         ;
3711: F3BA             CheckSumUtility:                      ;
3712: F3BA 2A AA F4               LD     HL,(dpbCKS)          ;
3713: F3BD ED 5B C5 F4               LD     DE,(dirRecord)       ;
3714: F3C1 AF                     XOR    A                    ;
3715: F3C2 ED 52                  SBC    HL,DE                ; Skip if past the Directory    ;
3716: F3C4 D8                     RET    C                    ;  Entries                      ;
3717: F3C5         ;
3718: F3C5 C5                     PUSH   BC                   ; Save New/Validate Flag        ;
3719: F3C6         ;
3720: F3C6         ; CheckSum = MOD( SUM(all bytes in The Record), 0FFH)                       ;
3721: F3C6             ComputeCheckSum:                      ;
3722: F3C6 06 80                  LD     B,cpmRecordSize      ;
3723: F3C8 2A 97 F4               LD     HL,(caDirectoryDMA)  ;
3724: F3CB EE 00                  XOR                         ;
3725: F3CD             ComputeCheckSum1:                      ;
3726: F3CD 86                     ADD    A,(HL)               ;
3727: F3CE 23                     INC    HL                   ;
3728: F3CF 10 FC                  DJNZ   ComputeCheckSum1     ;
3729: F3D1         ; Checksum is in ACC	                                                    ;
3730: F3D1         ;
3731: F3D1 2A 9B F4               LD     HL,(caCheckSum)      ; Address of check sum vector       ;
3732: F3D4 ED 5B C5 F4               LD     DE,(dirRecord)       ; Index to this record              ;
3733: F3D8 19                     ADD    HL,DE                ; Address of this record in vector  ;
3734: F3D9 C1                     POP    BC                   ; Retrieve New/Validate Flag        ;
3735: F3DA 0C                     INC    C                    ;
3736: F3DB 28 0A                  JR     Z,SetNewCheckSum     ; Set the Value if Flag was TRUE    ;
3737: F3DD         ;
3738: F3DD BE                     CP     M                    ; Else we are checking the value    ;
3739: F3DE C8                     RET    Z                    ; Exit if OK                        ;
3740: F3DF         ; possible checksum error, are we beyond the end of the disk?               ;
3741: F3DF CD 67 F1               CALL   StillInDirectory     ;
3742: F3E2 D0                     RET    NC                   ; OK, if not in the directory       ;
3743: F3E3 CD 1D EF               CALL   SetDiskReadOnly      ;  else the checksums don't match   ;
3744: F3E6 C9                     RET                         ;  Set disk RO before returning     ;
3745: F3E7         ;
3746: F3E7         ;initializing the checksum                                                 ;
3747: F3E7             SetNewCheckSum:                      ;
3748: F3E7 77                     LD     (HL),A               ;
3749: F3E8 C9                     RET                         ;
3750: F3E9         ;--------------------------- Check Sum Utility -----------------------------;
3751: F3E9         ;---------------------------------- Is Bit Set -----------------------------;
3752: F3E9         ; Enter HL  contains the bit map                                            ;
3753: F3E9         ;       B   Has the bit number (0...F)                                      ;
3754: F3E9         ; Return ZFlag = 1 if bit is reset (0)                                      ;
3755: F3E9         ;              = 0 if bit is set (1)                                        ;
3756: F3E9             IsBitSet:                       ;
3757: F3E9 04                     INC    B                    ;
3758: F3EA             IsBitSetLoop:                      ;
3759: F3EA 37                     SCF                         ; Set carry flag, expect LSBit = 1  ;
3760: F3EB CB 45                  BIT    0,L                  ; is LSB set?                       ;
3761: F3ED 20 01                  JR     NZ,IsBitSet1         ; Skip if LSB set               ;
3762: F3EF 3F                     CCF                         ; else Clear Carry flag             ;
3763: F3F0             IsBitSet1:                      ;
3764: F3F0 CB 1C                  RR     H                    ; Shift thru CY                     ;
3765: F3F2 CB 1D                  RR     L                    ; ditto                             ;
3766: F3F4 10 F4                  DJNZ   IsBitSetLoop         ;
3767: F3F6 CB 7C                  BIT    7,H                  ; Bit moved from L LSBit to H MSBit	;
3768: F3F8 C9                     RET                         ;
3769: F3F9         ;---------------------------------- Is Bit Set -----------------------------;
3770: F3F9
3771: F3F9         ;============================ Set/Reset Vector Bit =========================;
3772: F3F9         ;---------------------------------- Set Vector Bit -------------------------;
3773: F3F9         ; Enter  HL  contains the bit map vector                                    ;
3774: F3F9         ;        B   Has the bit number (0...F)                                     ;
3775: F3F9         ; Return HL  Contains the modified bit map vector                           ;
3776: F3F9             SetVectorBit:                      ;
3777: F3F9 C5                     PUSH   BC                   ; Save the Bit Number               ;
3778: F3FA CD E9 F3               CALL   IsBitSet             ; Put the bit in the LSBit          ;
3779: F3FD         ;
3780: F3FD C1                     POP    BC                   ; Get the bit position              ;
3781: F3FE CB FC                  SET    7,H                  ;
3782: F400 18 07                  JR     ReAlignVector        ;
3783: F402         ;---------------------------------- Set Vector Bit -------------------------;
3784: F402         ;---------------------------------- Reset Vector Bit -----------------------;
3785: F402         ; Enter  HL  contains the bit map vector                                    ;
3786: F402         ;        B   Has the bit number (0...F)                                     ;
3787: F402         ; Return HL  Contains the modified bit map vector                           ;
3788: F402             ResetVectorBit:                      ;
3789: F402 C5                     PUSH   BC                   ; Save the Bit Number               ;
3790: F403 CD E9 F3               CALL   IsBitSet             ; Put the bit in the LSBit          ;
3791: F406         ;
3792: F406 C1                     POP    BC                   ; Get the bit position              ;
3793: F407 CB BC                  RES    7,H                  ;
3794: F409         ; Fall thru to ReAlignVector                                                ;
3795: F409         ;---------------------------------- Reset Vector Bit -----------------------;
3796: F409         ;---------------------------------- Set VectorBit --------------------------;
3797: F409         ; Adjusts the HL register to its Original Alignment after IsBitSet          ;
3798: F409         ;
3799: F409             ReAlignVector:                      ;
3800: F409 04                     INC    B                    ;
3801: F40A             ReAlignMapLoop:                      ;
3802: F40A 37                     SCF                         ; Set carry flag, expect LSBit = 1  ;
3803: F40B CB 7C                  BIT    7,H                  ; is LSB set?                       ;
3804: F40D 20 01                  JR     NZ,ReAlignMap1       ; Skip if LSB set               ;
3805: F40F 3F                     CCF                         ; else Clear Carry flag             ;
3806: F410             ReAlignMap1:                      ;
3807: F410 CB 15                  RL     L                    ; Shift thru CY                     ;
3808: F412 CB 14                  RL     H                    ; ditto                             ;
3809: F414 10 F4                  DJNZ   ReAlignMapLoop       ;
3810: F416 C9                     RET                         ;
3811: F417         ;============================ Set/Reset Vector Bit =========================;
3812: F417         ;============================= Error message World =========================;
3813: F417         ;																			;
3814: F417             Error_Select:                      ;
3815: F417 21 6F F4               LD     HL,ErrMsg_Selection  ; Error Message                     ;
3816: F41A C3 35 F4               JP     WaitBeforeBoot       ; Wait for console input before boot;
3817: F41D         ;
3818: F41D             Error_DiskReadOnly:                      ;
3819: F41D 21 7F F4               LD     HL,ErrMsg_ReadOnlyDisk ; Error Message                     ;
3820: F420 C3 35 F4               JP     WaitBeforeBoot       ; Wait for console input before boot;
3821: F423         ;
3822: F423             Error_FileReadOnly:                      ;
3823: F423 21 76 F4               LD     HL,ErrMsg_ReadOnlyFile ; Error Message                     ;
3824: F426 C3 35 F4               JP     WaitBeforeBoot       ; Wait for console input before boot;
3825: F429         ;
3826: F429             Error_BadSector:                      ;
3827: F429 21 64 F4               LD     HL,ErrMsg_BadSector  ; Error Message                     ;
3828: F42C CD 3B F4               CALL   DisplayErrorAndWait  ; Check input from console          ;
3829: F42F FE 03                  CP     CTRL_C               ;
3830: F431 CA 00 00               JP     Z,WarmBoot           ; Reboot if response is CTRL_C      ;
3831: F434 C9                     RET                         ;
3832: F435         ;---------------------------------------------------------------------------;
3833: F435             WaitBeforeBoot:                      ;
3834: F435 CD 3B F4               CALL   DisplayErrorAndWait  ;
3835: F438 C3 00 00               JP     WarmBoot             ;
3836: F43B         ;---------------------------------------------------------------------------;
3837: F43B         ;
3838: F43B             DisplayErrorAndWait:                      ;
3839: F43B E5                     PUSH   HL                   ; Save message pointer              ;
3840: F43C CD D6 E9               CALL   showCRLF             ; Line Feed and Carriage Return     ;
3841: F43F 3A 89 F4               LD     A,(currentDisk)      ; Disk in question                  ;
3842: F442 C6 41                  ADD    A,ASCII_A            ; Make ASCII out of it              ;
3843: F444 32 60 F4               LD     (ErrMsg_BDOS_DISK),A ; Put into the error message        ;
3844: F447 01 54 F4               LD     BC,ErrMsg_BDOS       ; Load the start of message         ;
3845: F44A CD 3B E9               CALL   Print                ; Display it                        ;
3846: F44D C1                     POP    BC                   ; Load the rest of message          ;
3847: F44E CD 3B E9               CALL   Print                ; Display it                        ;
3848: F451 C3 21 E9               JP     ConIn                ; Get the input character           ;
3849: F454         ;
3850: F454         ;***************************************************************************;
3851: F454         ;
3852: F454 42 44 4F 53 20 45 72 72 20 4F 6E 20     ErrMsg_BDOS: DB     'BDOS Err On '       ;
3853: F460 20 3A 20 24     ErrMsg_BDOS_DISK: DB     ' : $'               ;
3854: F464 42 61 64 20 53 65 63 74 6F 72 24     ErrMsg_BadSector: DB     'Bad Sector$'        ;
3855: F46F 53 65 6C 65 63 74 24     ErrMsg_Selection: DB     'Select$'            ;
3856: F476 52 2F 4F 20 46 69 6C 65 24     ErrMsg_ReadOnlyFile: DB     'R/O File$'          ;
3857: F47F 52 2F 4F 20 44 69 73 6B 24     ErrMsg_ReadOnlyDisk: DB     'R/O Disk$'          ;
3858: F488         ;
3859: F488         ;============================= Error message World =========================;
3860: F488
3861: F488         ;********* file control block (fcb) constants ********************
3862: F488             fcbLength  EQU    20H                  ;32				; fcblen file control block size
3863: F488             fcbROfileIndex EQU    09H                  ; high order of first type char
3864: F488             fcbHiddenfileIndex EQU    0AH                  ;10				; invisible file in dir command
3865: F488             fcbExtIndex EQU    0CH                  ;12				; extent number field index
3866: F488             fcbS1Index EQU    0DH                  ;13				; S1 index
3867: F488             fcbS2Index EQU    0EH                  ;14				; S2 data module number index
3868: F488             fcbRCIndex EQU    0FH                  ;15				; record count field index
3869: F488             fcbDiskMapIndex EQU    10H                  ;16				; dskmap disk map field
3870: F488
3871: F488             fcbCurrentRecord EQU    21H                  ;33
3872: F488
3873: F488             highestRecordNumber EQU    RecordsPerExtent - 1 ; last record# in extent
3874: F488
3875: F488             dirEntriesPerRecord EQU    cpmRecordSize/fcbLength ; directory elts / record
3876: F488             dirEntryShift EQU    2                    ; log2(dirEntriesPerRecord)
3877: F488             dirEntryMask EQU    dirEntriesPerRecord-1
3878: F488             fcbShift   EQU    5                    ; log2(fcbLength)
3879: F488         ;
3880: F488
3881: F488
3882: F488
3883: F488             maxExtValue EQU    31                   ; largest extent number
3884: F488             moduleMask EQU    15                   ; limits module number value
3885: F488             writeFlagMask EQU    80h                  ; file write flag is high order fcbS2Index
3886: F488             nameLength EQU    15                   ;  name length
3887: F488
3888: F488             emptyDir   EQU    0E5H                 ; empty empty directory entry
3889: F488             recordSeq  EQU    fcbLength            ; Next Sequential Record
3890: F488             recordRandom EQU    recordSeq + 1        ; Random record field (2 bytes)
3891: F488             recordRandomLSB EQU    recordRandom         ; LSB of Random Record
3892: F488             recordRandomMSB EQU    recordRandom + 1     ; MSB of Random Record
3893: F488             recordRandomOVF EQU    recordRandom + 2     ; Random Record Overflow
3894: F488         ;
3895: F488         ;	reserved file indicators
3896: F488         ;	equ	11				; reserved
3897: F488         ;*****************************************************************
3898: F488         ;*****************************************************************
3899: F488
3900: F488         ;***common values shared between bdosi and bdos******************
3901: F488 00          currentUserNumber: DB     0                    ; usrcode current user number
3902: F489         ; paramDE:			DS	2					; ParamsDE information address
3903: F489         ; exitParameterByte:
3904: F489         ; exitParameterWord:	DS	2					; address value to return
3905: F489 FF          currentDisk: DB     -1                   ; curdsk current disk number
3906: F48A         ; exitParameterByte		EQU	exitParameterWord	; lret low(exitParameterWord)
3907: F48A
3908: F48A         ;********************* Local Variables ***************************
3909: F48A         ;     ************************
3910: F48A         ;     *** Initialized Data ***
3911: F48A
3912: F48A E5          emptyFCB:  DB     emptyDir             ; efcb 0E5 = available dir entry
3913: F48B 00 00       readOnlyVector: DW     0                    ; rodsk read only disk vector
3914: F48D 00 00       loggedDisks: DW     0                    ; dlog	 logged-in disks
3915: F48F 80 00       initDAMAddress: DW     DMABuffer            ; dmaad tbuff initial dma address
3916: F491
3917: F491         ;     *** Current Disk attributes ****
3918: F491         ; These are set upon disk select
3919: F491         ; data must be adjacent, do not insert variables
3920: F491         ; address of translate vector, not used
3921: F491         ; ca - currentAddress
3922: F491
3923: F491 00 00       caDirMaxValue: DW     0000H                ; cdrmaxa pointer to cur dir max value
3924: F493 00 00       caTrack:   DW     0000H                ; curtrka current track address
3925: F495 00 00       caSector:  DW     0000H                ; current Sector
3926: F497             caListSizeStart:
3927: F497 00 00       caDirectoryDMA: DW     0000H                ; buffa pointer to directory dma address
3928: F499 00 00       caDiskParamBlock: DW     0000H                ; dpbaddr current disk parameter block address
3929: F49B 00 00       caCheckSum: DW     0000H                ; checka current checksum vector address
3930: F49D 00 00       caAllocVector: DW     0000H                ; alloca current allocation vector address
3931: F49F             caListSizeEnd:
3932: F49F             caListSize EQU    caListSizeEnd - caListSizeStart
3933: F49F
3934: F49F         ;     ***** Disk Parameter Block *******
3935: F49F         ; data must be adjacent, do not insert variables
3936: F49F         ; dpb - Disk Parameter Block
3937: F49F             dpbStart:
3938: F49F 00 00       dpbSPT:    DW     0000H                ; sectpt sectors per track
3939: F4A1 00          dpbBSH:    DB     0000H                ; blkshf block shift factor
3940: F4A2 00          dpbBLM:    DB     00H                  ; blkmsk block mask
3941: F4A3 00          dpbEXM:    DB     00H                  ; extmsk extent mask
3942: F4A4 00 00       dpbDSM:    DW     0000H                ; Maximum allocation number
3943: F4A6 00 00       dpbDRM:    DW     0000H                ; dirmax largest directory number
3944: F4A8 00 00       dpbDABM:   DW     0000H                ; dirblk reserved allocation bits for directory
3945: F4AA 00 00       dpbCKS:    DW     0000H                ; chksiz size of checksum vector
3946: F4AC 00 00       dpbOFF:    DW     0000H                ; offset offset tracks at beginning
3947: F4AE             dpbEnd:
3948: F4AE             dpbSize    EQU    dpbEnd - dpbStart
3949: F4AE         ;
3950: F4AE
3951: F4AE         ;     ************************
3952: F4AE             SEQ_ACCESS EQU    01H                  ; Indicates sequential access to file
3953: F4AE             RANDOM_ACCESS EQU    00H                  ; Indicates random access to file
3954: F4AE 00          diskAccessType: DB     00H                  ; Set to 1 if sequential disk operation
3955: F4AF
3956: F4AF 00 00       caSkewTable: DW     0000H                ; tranv address of translate vector
3957: F4B1 00          fcbCopiedFlag: DB     00H                  ; fcb$copied set true if CopyFCB called
3958: F4B2 00          readModeFlag: DB     00H                  ; rmf read mode flag for Open NextExt
3959: F4B3 00          directoryIndex: DB     00H                  ; dirloc directory flag in rename, etc.
3960: F4B4 00          diskMapIndex: DB     00H                  ; dminx  local for Disk_Write
3961: F4B5 00          searchLength: DB     00H                  ; searchl search length
3962: F4B6 00 00       searchAddress: DW     0000H                ; searcha search address
3963: F4B8         ;tinfo:	ds	word							; temp for info in "make"
3964: F4B8 00          byteAllocationFlag: DB     00H                  ; set true if single byte allocation map
3965: F4B9 00          fResel:    DB     00H                  ; resel reselection flag
3966: F4BA 00          entryDisk: DB     00H                  ; olddsk disk on entry to bdos
3967: F4BB 00          fcbDisk:   DB     00H                  ; fcbdsk disk named in fcb
3968: F4BC 00          fcbRecordCount: DB     00H                  ; record count from current FCB
3969: F4BD 00          extentValue: DB     00H                  ; extent number and dpbEXM from current fcb
3970: F4BE 00 00       currentFileRecord: DW     0000H                ; Current File Record - fcbCurrentRecord
3971: F4C0 00 00       absoluteCPMRecord: DW     0000H                ; Raw record ( 4 records / Sector)( 4 Sectors per block)
3972: F4C2         ;
3973: F4C2         ;	local variables for directory access
3974: F4C2 00          dirBlockIndex: DB     00H                  ; directory block Index 0,1,2,3
3975: F4C3 00 00       dirEntryIndex: DW     00H                  ; directory entry Index  0,1,...,dpbDRM
3976: F4C5 00 00       dirRecord: DW     00H                  ; drec:	ds	word	;directory record 0,1,...,dpbDRM/4
3977: F4C7
3978: F4C7         ;********************** data areas ******************************
3979: F4C7
3980: F4C7
3981: F4C7         ;---------------------------------- Stack Area--------------------------------;
3982: F4C7             stackBottom: DS     STACK_SIZE * 2       ; stack size                      ;
3983: F507             bdosStack:
3984: F507         ;
3985: F507         ;---------------------------------- Stack Area--------------------------------;
3986: F507         ;	end of Basic I/O System
3987: F507         ;-----------------------------------------------------------------;
3988: F507
3989: F507
3990: F507         ;
3991: F507             Z_HighestLocation:
3992: F507             Z_MemoryLeft EQU    (BIOSStart-1) - Z_HighestLocation
3993: F507
3994: F507
           ************************   Xref   ************************
0000: $               F507   0417 0447
3971: absoluteCPMRecord F4C0   1612 3402 3443 3455 3467 3661 3668 3687
1630: Allocate16Bit   EBDB   1625
1045: AreWeAtEndOfBuffer EA31   1041
0086: ASCII_A         0041   3842
0087: ASCII_C         0043
0088: ASCII_K         004B
0095: ASCII_LO_A      0061
0096: ASCII_LO_K      006B
0097: ASCII_LO_P      0070
0038: ASCII_MASK      007F   0988
0089: ASCII_N         004E
0090: ASCII_Q         0051
0091: ASCII_R         0052
0092: ASCII_W         0057
0093: ASCII_Y         0059
0073: ASCII_ZERO      0030
0067: ASTERISK        002A
3134: AtEndOfDirectory F147   1433 1760 1950 2130 2384 2415 2479 2571 2870 3479 3509 3517
1137: BackUp          EA90   1065 1133
1142: BackUp1         EA98   1138
0295: bcBoot          F600
0298: bcConin         F609   0617 0803 0914 0932
0299: bcConout        F60C   0609 0876 1140 1144 1150 1152
0297: bcConst         F606   0614 0910
0303: bcHome          F618   2600
0300: bcList          F60F   0582 0882
0310: bcListst        F62D
0301: bcPunch         F612   0567
0308: bcRead          F627   2638
0302: bcReader        F615   0548
0311: bcSectran       F630
0304: bcSeldsk        F61B   2287
0307: bcSetdma        F624   2633
0306: bcSetsec        F621   3703
0305: bcSettrk        F61E   2606 3700
0296: bcWboot         F603   0468
0309: bcWrite         F62A   2958
0153: BDOSBase        E800   0154 0156 0326
0122: BDOSE           0005   0123
0154: BDOSEntry       E800
0143: BDOSLength      0E00   0146 0156 0157
3983: bdosStack       F507   0342
0332: BdosStart       E800
0056: BELL            0007
0156: BIOSBase        F600
0144: BIOSLength      0A00   0146
0116: BIOSPAGE        0002
0157: BIOSStart       F600   0295 0296 0297 0298 0299 0300 0301 0302 0303 0304 0305 0306 0307 0308 0309 0310 0311 3992
0253: BlockSize       0800   0275
1060: BSspaceBS       EA3E   0999
0034: BYTE            0001   1173
3964: byteAllocationFlag F4B8   1623 2320 2492 3210 3425
3930: caAllocVector   F49D   1854 2340 2342 2367 2757 3263 3330
3929: caCheckSum      F49B   3731
3927: caDirectoryDMA  F497   2307 2627 3149 3340 3723
3923: caDirMaxValue   F491   2298 2374 2655 3183
3928: caDiskParamBlock F499   1971 2312
3932: caListSize      0008   2308
3931: caListSizeEnd   F49F   3932
3926: caListSizeStart F497   3932
0094: CARET           005E   0842
0836: CaretOut        E948   1034 1115
3925: caSector        F495   2304 2614 3691
3956: caSkewTable     F4AF   2296
3924: caTrack         F493   2301 2610 3682
0151: CCPEntry        E000   0153 0157
0142: CCPLength       0800   0146 0153 0157
0928: CheckCTL_S      E9AC   0917
2908: CheckExtents    F044   2902
3359: CheckRODirectory F230   1437 1763
3362: CheckROFile     F233   1574
3711: CheckSumUtility F3BA   2942 3653
3353: CheckWrite      F229   1428 1572 1748 2564
2460: CloseDirEntry   EE35   1287 3028 3478
2548: CloseDirEntryEnd EEA2   2538
2556: CloseDirEntryError EEAE   2508 2518 2523
0074: COLON           003A
1171: columnPosition  EAB2   0861 0886 0951 0971 1129
0069: COMMA           002C
2833: CompareExtents  EFE5   2909
3721: ComputeCheckSum F3C6
3725: ComputeCheckSum1 F3CD   3728
0128: ComTail         0080   0129
0130: ComTailChars    0082
0129: ComTailCount    0081   0130
0905: ConBreak        E98C   0729 0872
0938: ConBreak0       E9BA   0930
0940: ConBreak1       E9BD   0908
0796: ConIn           E921   0500 0987 3848
0869: ConsoleOut      E96B   0843 0855 0860 0948 0956 0963 0965 1057
3381: CopyDir         F241   1766 1955
3339: CopyDirEntryToUserDMA F215   1340 1405
2418: CopyDirRecordToFCB EDFD   3522
3375: CopyFCB         F23D   2590
0230: cpmRecordSize   0080   0232 0235 0237 3342 3722 3875
0059: CR              000D   0809 0962 0992 1056
0042: CTRL_C          0003   0933 1039 3829
0043: CTRL_E          0005   1004
0044: CTRL_H          0008   0815 0998 1143
0045: CTRL_K          000B
0046: CTRL_L          000C
0047: CTRL_P          0010   0916 1007
0048: CTRL_R          0012   1016
0049: CTRL_S          0013   0929
0050: CTRL_U          0015   1013
0051: CTRL_X          0018   1010
0052: CTRL_Z          001A
3905: currentDisk     F489   1208 1814 2256 2267 2273 2285 2648 2666 2685 3841
3970: currentFileRecord F4BE   1496 1506 1576 1654 1688 2711 2969 3410 3463
3901: currentUserNumber F488   0780 0786 2392 2694
0070: DASH            002D
0264: DataBlocks      02C7   0274
0263: DataSectors     0B1C   0264
1432: DeleteFileLoop  EB15   1444
1124: DeleteTheLine   EA7F   1011
1127: DeleteTheLine1  EA80   1134
3974: dirBlockIndex   F4C2   3150 3645
0235: DirBuffSize     0080
0250: DirectoryBlockCount 0002   0275
0237: DirectoryEntryPerRecord 0004   0278
3959: directoryIndex  F4B3   2859 2923 3348
3875: dirEntriesPerRecord 0004   3877
3975: dirEntryIndex   F4C3   2919 3125 3135 3181 3628 3630 3639 3658
3877: dirEntryMask    0003   2920 3640
3876: dirEntryShift   0002   3659
0234: DirEntrySize    0020   0237 0275
3347: DirLocationToReturnLoc F222   1434 1761 1951
3976: dirRecord       F4C5   3662 3713 3732
3954: diskAccessType  F4AE   1489 1566 1677 2967 2984
0222: DiskCommandBlock 0046
0221: DiskControlByte 0045
0224: DiskControlTable 0040
0417: diskf           000B
3960: diskMapIndex    F4B4   1590 1619
1491: DiskRead        EB39   2038
0226: DiskReadCode    0001
0231: diskSectorSize  0200   0232 0253 0261
0220: DiskStatusLocation 0043
1568: DiskWrite       EB7C   2081
1661: DiskWrite1      EC03   1657
1671: DiskWrite2      EC0C   1665
1692: DiskWriteCleanup EC29   1675 1679
1690: DiskWriteCleanup0 EC27   1686
0227: DiskWriteCode   0002
1564: DiskWriteSeq    EB77
3838: DisplayErrorAndWait F43B   3828 3834
3557: DivideHLby8     F30C   2335 3249 3252
0133: DMABuffer       0080   1210 3915
0063: DOLLAR          0024   0824 2398
0276: dpb3hdAL0       00C0
0277: dpb3hdAL1       0000
0272: dpb3hdBLM       000F
0271: dpb3hdBSH       0004
0278: dpb3hdCKS       0020
0275: dpb3hdDRM       007F   0278
0274: dpb3hdDSM       02C6
0273: dpb3hdEXM       0000
0280: dpb3hdNOH       0002
0279: dpb3hdOFF       0001
0270: dpb3hdSPT       0090
3940: dpbBLM          F4A2   3461
3939: dpbBSH          F4A1   3408 3453
3945: dpbCKS          F4AA   3712
3944: dpbDABM         F4A8   2365
3943: dpbDRM          F4A6   2653 3627
3942: dpbDSM          F4A4   2318 2334 2350 3248
3947: dpbEnd          F4AE   3948
3941: dpbEXM          F4A3   2716 2836 3490
3946: dpbOFF          F4AC   2602 3696
3948: dpbSize         000F   2314
3938: dpbSPT          F49F   3669
3937: dpbStart        F49F   2313 3948
0449: DUMMY           E8A9   0444 0445
3888: emptyDir        00E5   1439 2388 2876 3912
3912: emptyFCB        F48A   2567
0137: END_OF_FILE     001A
0040: EndOfMessage    0000
1050: EndRead         EA34   0993 0996
3966: entryDisk       F4BA   0390 2686
0292: EOD             FFFF   3124
0078: EQUAL_SIGN      003D
3854: ErrMsg_BadSector F464   3827
3852: ErrMsg_BDOS     F454   3844
3853: ErrMsg_BDOS_DISK F460   3843
3857: ErrMsg_ReadOnlyDisk F47F   3819
3856: ErrMsg_ReadOnlyFile F476   3823
3855: ErrMsg_Selection F46F   3815
3826: Error_BadSector F429   2640 2960
3818: Error_DiskReadOnly F41D   3356
3822: Error_FileReadOnly F423   3368
3814: Error_Select    F417   2266
0061: EXCLAIM_POINT   0021
1175: exitParameterByte EAB6   0509 0618 0730 0756 0781 1507 1608 1642 1683 1815 2402 2462 2557 2921 2935 3032 3039 3051 3058 3066 3349 3526 3605
1176: exitParameterWord EAB6   0346 0397 0549 0638 1791 1855 1901 1972
3969: extentValue     F4BD   2718
0029: FALSE           0000   0923 1095 1440 1569 2079 2324 2868
0125: FCB1            005C   0126
0126: FCB2            006C
3957: fcbCopiedFlag   F4B1   2550 3477 3493
3871: fcbCurrentRecord 0021
3967: fcbDisk         F4BB   0348 0385 2688
3869: fcbDiskMapIndex 0010   1615 1755 1764 2484 2489 3200 3202 3422
3865: fcbExtIndex     000C   1429 1749 1765 1946 1954 2116 2433 2532 2541 2737 2900 3016 3036 3080 3499
0015: fcbExtIndexLSB  000C
0016: fcbExtIndexMSB  000E
3864: fcbHiddenfileIndex 000A
3862: fcbLength       0020   2427 2489 2532 2582 3202 3377 3875 3889
3868: fcbRCIndex      000F   2134 2436 2454 2541 2726 2729
3968: fcbRecordCount  F4BC   1497 1655 2714 2973
3863: fcbROfileIndex  0009   3363
3866: fcbS1Index      000D   2586 2897
3867: fcbS2Index      000E   2469 2782 2807 2821 3020 3037 3062 3097 3499
3878: fcbShift        0005   3641
0170: fCloseFile      0010
0161: fConsoleIn      0001
0162: fConsoleOut     0002
0173: fDeleteFile     0013
0165: fGetConsoleStatus 000B
0179: fGetCurrentDisk 0019
0178: fGetLoginVector 0018
0181: fGetSetUserNumber 0020
0166: fGetVersion     000C
1601: FindAvailableBlock EBB3   1593
0176: fMakeFile       0016
0169: fOpenFile       000F
1611: FoundAvailableBlock EBC0   1605
3309: FoundFreeOctet  F1F0   3279 3284 3293 3301
3315: FoundFreeOctet1 F1F6   3311
3317: FoundFreeOctet2 F1F7   3313
3319: FoundFreeOctet3 F1FA   3322
3325: FoundFreeOctet4 F202   3327
0163: fPrintString    0009
0174: fReadSeq        0014
0164: fReadString     000A
0177: fRenameFile     0017
3965: fResel          F4B9   0349 0379 2676
0167: fResetSystem    000D
0171: fSearchFirst    0011
0172: fSearchNext     0012
0168: fSelectDisk     000E
0180: fSetDMA         001A
0447: functionCount   0028   0358
0404: functionTable   E857   0363 0417 0447
0175: fWriteSeq       0015
3397: GetBlockNumber  F258   1512 1580
3245: GetClosestBlock F19F   1602
3147: GetCurrentDirectoryRecord F150   1438 2133 2387 2423 2483 2886 3199 3360 3388
3432: GetDiskMap16Bit F284   3427
3407: GetDiskMapIndex F265   1589 3398
3411: GetDiskMapIndexLoop F26C   3413
3420: GetDiskMapValue F272   1597 3401
2735: GetExtentAddress EF90   2419 2715 3482
2724: GetFcbRecordDetails EF83   2708 2966
2129: GetFileSize1    ECD4   2158
2156: GetFileSize2    ECF4   2149
2159: GetFileSizeExit ECF9   2131
2867: GetNextDirectoryRecord F00B   1404 1443 1768 1956 2157 2905 2910
2885: GetNextDirectoryRecord1 F025   2877
3073: GetRandomRecordPosition F113   2135 2190
0079: GREATER_THAN    003E
0062: HASH_TAG        0023   0947
1641: HaveWriteBlock  EBE4   1583
3873: highestRecordNumber 007F   1577 1674
2599: Home            EEED   2373 2865
1147: IgnoreTheLine   EA9D   1014
3915: initDAMAddress  F48F   1211 1837 2623 3341
2333: InitDisk        ED84   2279
2380: InitDisk1       EDC9   2390 2408
2403: InitDisk2       EDEA   2394 2399
2779: InitializeExtentNumberMSB EFBE   1254 1334 1716
0117: IOBYTE          0003   0637 0657
3756: IsBitSet        F3E9   2270 2668 3778 3790
3763: IsBitSet1       F3F0   3761
3758: IsBitSetLoop    F3EA   3766
2664: IsDiskWriteProtected EF35   2463 3354
1012: IsItDeleteTheLineU EA12
1009: IsItDeleteTheLineX EA0E
1006: IsItPrintToggle EA0A
1096: IsItPrintToggle1 EA62   1094
1000: IsItRubout      EA02
1003: IsPhysicalEOL   EA06
0808: IsPrintableASCII E92C   0501 0838
1081: ItIsPhysicalEOL EA50   1005
1088: ItIsPrintToggle EA57   1008
1069: ItIsRubout      EA47   1002
1165: keyboardByte    EAAF   0797 0906 0939
0065: L_PAREN         0028
2764: Left            EFAF   2766
0082: LEFT_ARROW      005F
0098: LEFT_CURLY      007B
0146: LengthInBytes   2000   0147 0151 0261
0147: LengthInK       0009
0077: LESS_THAN       003C
0058: LF              000A   0811 0892 0964 0994
1110: LL1             EA6F   1118
0032: LO_NIBBLE_MASK  000F   0785 3093
3914: loggedDisks     F48D   1206 1790 2269 2275 2277
3277: LookRight       F1C4   3287
2563: MakeNewFile     EEB3   1718 3049 3516
2363: Mark4Directory  EDB1   2355
1635: MarkNewBlock    EBDF   1628
3883: maxExtValue     001F   2845 3485
0149: MemorySize      0040   0151
3585: Merge           F320   2512 2514
2491: MergeAllocationMaps EE61   2529
2506: MergeDirEntryNot0 EE72   2503
2501: MergeFCBisNot0  EE6D   2499
2525: MergeMapLoop    EE8A   2509
2511: MergeWordMaps   EE77   2494
3884: moduleMask      000F   3503
3569: MultiplyHLby8   F316   2349 3333
0262: myOffset        0001   0263 0279
3886: nameLength      000F   1336 2413 2477 2576 2582 3507
2932: NoDirRecordsMatch F060   2871 2883
3305: NoFreeBlocks    F1EC   3294 3302
3289: NoMoreLeft      F1D6   3285
3291: NoMoreLeftLoop  F1D7   3295
3297: NoMoreRight     F1E1   3280
3299: NoMoreRightLoop F1E2   3303
2693: NoSelect        EF63   2683
1522: NothingRead     EB71   1502 1509 1514
0935: NothingWaiting  E9B8   0926
0054: NULL            0000
0246: NumberOfHeads   0002   0257 0259 0270 0280
0243: NumberOfLogicalDisks 0004
0031: OFF             0000
0030: ON              FFFF
2412: OpenFile        EDF4   1256 3038
3475: OpenNextExt     F2A8   1504 1682
3506: OpenNextExt1    F2D4   3495
3523: OpenNextExt3    F2F1   3519
3529: OpenNextExtError F2F9   3504 3514 3518
3498: OpenNextModule  F2CA   3487
2452: OpenSetRecordCount EE2C   2448 2450
1174: paramDE         EAB4   0337 0383 0680 0973 1052 1107 1328 1402 1573 1614 1753 1836 2119 2188 2426 2453 2468 2487 2565 2568 2573 2585 2677 2695 2725 2736 2781 2806 2820 2862 2989 3385 3421
1173: paramE          EAB3   0339 0391 0777 2255 2681
0064: PERCENT         0025
0071: PERIOD          002E
0120: Pg0CurentDisk   0004
0119: Pg0CurentUser   0004   0120
0068: PLUS_SIGN       002B
0822: Print           E93B   0683 0831 3845 3847
1167: printEchoFlag   EAB0   0880 0919 1091
0080: QMARK           003F   1330 2893
1338: QMarkFind       EAF5   1331
0066: R_PAREN         0029
0113: RAM             0000   0115 0116 0117 0119 0122 0125 0128 0133 0135
3953: RANDOM_ACCESS   0000
2982: RandomSeek      F093   2037 2080
3025: RandomSeekClose F0D1   3018
3063: RandomSeekError F10B   3013
3061: RandomSeekErrorBadSeek F107   3034 3047 3053
3055: RandomSeekExit  F101   3023 3041
2637: ReadBuffer      EF15   1518 3617
3626: ReadDirectory   F33D   2383 2869
3638: ReadDirectory0  F351   3633
3642: ReadDirectory1  F358   3644
3615: ReadDirRecord   F334   3651
1030: ReadEchoRubOut  EA1E   1078
3958: readModeFlag    F4B2   1493 1570 3512
0983: ReadNext        E9ED   1047 1073 1099 1121
0986: ReadNext0       E9EF   1066 1085
3913: readOnlyVector  F48B   1205 1900 2646 2651 2665
0970: ReadString      E9E0   0714 1131 1153
3806: ReAlignMap1     F410   3804
3801: ReAlignMapLoop  F40A   3809
3799: ReAlignVector   F409   3782
1511: RecordOK        EB5C   1499
3890: recordRandom    0021   2120 2192 3891 3892 3893
3891: recordRandomLSB 0021   2990 2993
3892: recordRandomMSB 0022   2995
3893: recordRandomOVF 0023   3009
3889: recordSeq       0020   2189 2729 3015 3890
0255: RecordsPerBlock 0010
0239: RecordsPerExtent 0080   1501 2451 3873
0232: recordsPerSector 0004   0255 0270
1759: RenameLoop      EC49   1769
1102: RepeatLine      EA66   1017
2674: ReselectDisk    EF40   1255 1286 1335 1403 1427 1486 1559 1717 1747 1945 2034 2077 2114
2818: ResetFileWriteFlag EFD8   1636 1667
3788: ResetVectorBit  F402
0378: ReturnToCaller  E832   0352
0394: ReturnToCaller1 E84D   0381 0387 0616
2772: Right           EFB9   2770 2774
3543: RotateRightHLbyB F2FF   3551
3548: RotateRightHLbyB1 F305   3546
0083: RUBOUT          007F   1001
3197: ScanDiskMap     F174   1441 2406
3204: ScanDiskMap0    F17E   3236
3229: ScanDiskMap2    F195   3218
3220: ScanDiskMapWord F18F   3212
3962: searchAddress   F4B6   1401 2863 2873
2857: SearchForDirectoryRecord EFF6   1339 1430 1750 1947 2117 2414 2478 2570 3508
3961: searchLength    F4B5   2860 2887
0284: SectorMask      0003
0249: SectorsPerBlock 0004   0253 0255 0258 0264 0284
0259: SectorsPerCylinder 0024   0262 0263
0248: SectorsPerTrack 0012   0257 0259 0270
3666: Seek            F37C   1517 1648 3663
3671: Seek0           F386   3675
3657: SeekDir         F36B   2552 3392 3650
2264: Select          ED1D   1213 2260
2254: SelectCurrent   ED12   0392 1237 2691
2284: SelectDisk      ED3E   2265
2327: SelectDisk1     ED80   2323
0076: SEMICOLON       003B
3952: SEQ_ACCESS      0001   1488 1565
3452: SetActualRecordAdd F290   1516 1647
3457: SetActualRecordAddLoop F297   3459
1949: SetAttributesLoop EC8E   1957
2358: SetBitLoop      EDAC   2361
2622: SetDataDMA      EF07   1212 1838 2947 3618
2626: SetDirDMA       EF0C   2944 3616
3161: SetDirectoryEntry F15E   2407 2589
2645: SetDiskReadOnly EF1D   1882 3743
2629: SetDMA          EF0F   2624
3123: SetEndDirectory F140   2378 2864 2933 3634
3603: SetExitParamTo1 F32E   1523 1578 3530
2804: SetFileWriteFlag EFCB   2431 2592 3067 3531
3747: SetNewCheckSum  F3E7   3736
2912: SetNextPosition F049   2894 2898 2906
2707: SetRecordVars   EF6C   1495 1575 3524
2746: SetResetMapBit  EF98   3232
0784: SetUserNumber   E91B   0779
3776: SetVectorBit    F3F9   2276 2650
3572: ShiftLeftHLbyB  F318   3576
3560: ShiftRightHLbyB F30E   2756 3564 3660
0961: showCRLF        E9D6   0949 1084 3840
0946: showHashCRLF    E9C0   1105 1148
0950: showHashCRLF1   E9C8   0957
0072: SLASH           002F
0055: SOH             0001
0060: SPACE           0020   0817 0859 0889 0955 1139 1149 1151
0291: STACK_SIZE      0020   3982
3982: stackBottom     F4C7
1170: startingColumn  EAB1   0952 0972 1128
3180: StillInDirectory F167   2881 3162 3741
0261: SystemSectors   0011   0262
0057: TAB             0009   0813 0854
0852: TabOut          E958   0506 0528 0829 0839
0858: TabOut0         E95E   0863
2891: TestNextPosition F02E   2917
0924: ToggleFlag1     E9A9   0922
0123: TopRAM          0007
0258: TotalNumberOfBlocks 02D0
0257: TotalNumberOfSectors 0B40   0258 0263
0135: TPA             0100
0247: TracksPerHead   0050   0257
0028: TRUE            FFFF   0920 0941 1092 1492 2036 2321 2328 2382 2405 2549 2675 2941
0081: UNDER_SCORE     005F
3521: UpdateFCB       F2EE   3496 3510
2965: UpdateRecordVariables F081   1519 1681 1693
1163: usersStack      EAAD   0341 0395
1285: vCloseFile      EADD   0422
2113: vComputeFileSize ECBF   0441
0499: vConsoleIn      E8AD   0406
0527: vConsoleOut     E8BE   0407
1426: vDeleteFile     EB0A   0425
0604: vDirectConIO    E8D1   0411
0613: vDirectConIO1   E8D9   0607
0290: VERSION         0020   0755
1326: vFindFirst      EAE3   0423
1400: vFindNext       EAFB   0424
1853: vGetAllocAddr   EC75   0433
0728: vGetConsoleStatus E900   0416
1813: vGetCurrentDisk EC65   0431
1970: vGetDiskParamBlock ECA0   0437
0636: vGetIOBYTE      E8E7   0412
1789: vGetLoginVector EC5E   0430
1899: vGetReadOnlyMap EC7F   0435
0776: vGetSetUserNumber E90D   0438
0754: vGetVersion     E907   0418
0581: vListOut        E8CD   0410
1715: vMakeFile       EC2C   0428
1253: vOpenFile       EAD4   0421
0679: vPrintString    E8F3   0414
0566: vPunchOut       E8C9   0409
0547: vReaderIn       E8C2   0408
2033: vReadRandom     ECA7   0439
1485: vReadSeq        EB31   0426
0713: vReadString     E8FC   0415
1746: vRenameFile     EC35   0429
2222: vResetDrive     ED0E   0443
1203: vResetSystem    EAB8   0419
1236: vSelectDisk     EAD1   0420
1835: vSetDMA         EC6C   0432
1944: vSetFileAttributes EC86   0436
0656: vSetIOBYTE      E8EE   0413
2187: vSetRandomRecord ECFB   0442
0467: vSystemReset    E8AA   0405
1881: vWriteProtectDisk EC7C   0434
2076: vWriteRandom    ECB3   0440
2249: vWriteRandom0Fill ED11   0446
1558: vWriteSeq       EB74   0427
3833: WaitBeforeBoot  F435   3816 3820 3824
0115: WarmBoot        0000   0934 1043 3830 3835
3442: WasBlockAllocated F28A   1513 1581
0035: WORD            0002   1174 1176
0195: WriteAllocated  0000   1582
2957: WriteBuffer     F079   1651 2946
0197: WriteCleanBuffer 0002   1639 1660
2939: WriteDir        F069   1442 2553 3393
0196: WriteDirectory  0001   2945
3885: writeFlagMask   0080
3991: Z_HighestLocation F507   3992
3992: Z_MemoryLeft    00F8
0039: ZERO            0000
