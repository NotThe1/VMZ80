0001: E800         ;     File created by MakeZ80Source on Tue Sep 18 12:41:03 EDT 2018 from:
0002: E800         ;     C:\Users\admin\Dropbox\Resources\CPM\CurrentOS\8080\BDOSX.asm
0003: E800         ; BDOS.Z80
0004: E800         ;  in process Delete File (13H)
0005: E800
0006: E800         ; 2019-02-04 Fixed bdosStack problem
0007: E800         ; 2019-01-10	Last rev before remaking  FInd nearest Block
0008: E800         ; 2019-01-11 - BDOS 0.B  - Function 0-A Refactored to Z80 idiom
0009: E800         ; 2018-12-28 Started to refactor to Z80 idiom
0010: E800         ; 2018-03-31 added vector for BDOS Call 5 -ListOut
0011: E800         ; 2018-03-02 Refactored the CP/M Suite
0012: E800         ; 2018-02-12 fixed allocate 16 bit problem
0013: E800         ; 2014-01-16 extended from part of newOS (newBDOS)
0014: E800         ; 2014-03-14  :  Frank Martyn
0015: E800             fcbExtIndexLSB EQU    0CH                  ; 12
0016: E800             fcbExtIndexMSB EQU    0EH                  ; 14   Bit 7 = Write protected
0017: E800
0018: E800                        Include ./stdHeader.Z80
0019: E800         ;<<<<<<<<<<<<<<<<<<<<<<< Include >>>>>>>>>>>>>>>>
0020: E800         ;     File created by MakeZ80Source on Mon Sep 17 16:25:01 EDT 2018 from:
0021: E800         ;     C:\Users\admin\Dropbox\Resources\CPM\CurrentOS\8080\stdHeader.asm
0022: E800         ; stdHeader.asm
0023: E800         ; standard equates
0024: E800
0025: E800         ; 2017-03-02 Refactored the CP/M Suite
0026: E800
0027: E800
0028: E800             TRUE       EQU    -1                   ; not false
0029: E800             FALSE      EQU    0000H
0030: E800             ON         EQU    -1
0031: E800             OFF        EQU    0000H
0032: E800             LO_NIBBLE_MASK EQU    0FH                  ; mask used to obtain the bytes low four bits
0033: E800
0034: E800             BYTE       EQU    1                    ; number of bytes for "byte" type
0035: E800             WORD       EQU    2                    ; number of bytes for "word" type
0036: E800
0037: E800
0038: E800             ASCII_MASK EQU    7FH                  ; Ascii mask 7 bits
0039: E800             ZERO       EQU    00H                  ; Zero
0040: E800             EndOfMessage EQU    00H
0041: E800
0042: E800             CTRL_C     EQU    03H                  ; ETX
0043: E800             CTRL_E     EQU    05H                  ; physical eol
0044: E800             CTRL_H     EQU    08H                  ; backspace
0045: E800             CTRL_K     EQU    0BH                  ; VT - Vertical tab
0046: E800             CTRL_L     EQU    0CH                  ; FF - Form feed
0047: E800             CTRL_P     EQU    10H                  ; prnt toggle
0048: E800             CTRL_R     EQU    12H                  ; repeat line
0049: E800             CTRL_S     EQU    13H                  ; X-OFF stop/start screen
0050: E800             CTRL_U     EQU    15H                  ; line delete
0051: E800             CTRL_X     EQU    18H                  ; =ctl-u
0052: E800             CTRL_Z     EQU    1AH                  ; end of file
0053: E800
0054: E800             NULL       EQU    00H                  ; Null
0055: E800             SOH        EQU    01H                  ; Start of Heading
0056: E800             BELL       EQU    07H                  ; Bell
0057: E800             TAB        EQU    09H                  ; Tab
0058: E800             LF         EQU    0AH                  ; Line Feed
0059: E800             CR         EQU    0DH                  ; Carriage Return
0060: E800             SPACE      EQU    20H                  ; Space
0061: E800             EXCLAIM_POINT EQU    21H                  ; Exclamtion Point
0062: E800             HASH_TAG   EQU    23H                  ; Sharp sign #
0063: E800             DOLLAR     EQU    24H                  ; Dollar Sign
0064: E800             PERCENT    EQU    25H                  ; Percent Sign
0065: E800             L_PAREN    EQU    28H                  ; Left Paenthesis (
0066: E800             R_PAREN    EQU    29H                  ; Right Paenthesis )
0067: E800             ASTERISK   EQU    2AH                  ; Asterisk *
0068: E800             PLUS_SIGN  EQU    2BH                  ; Plus sign +
0069: E800             COMMA      EQU    2CH                  ; Comma
0070: E800             DASH       EQU    2DH                  ; Dash Hyphen -
0071: E800             PERIOD     EQU    2EH                  ; Period
0072: E800             SLASH      EQU    2FH                  ; /
0073: E800             ASCII_ZERO EQU    30H                  ; zero
0074: E800             COLON      EQU    3AH                  ; Colon
0075: E800
0076: E800             SEMICOLON  EQU    3BH                  ; Semi Colon
0077: E800             LESS_THAN  EQU    3CH                  ; Less Than <
0078: E800             EQUAL_SIGN EQU    3DH                  ; Equal Sign
0079: E800             GREATER_THAN EQU    3EH                  ; Greater Than >
0080: E800             QMARK      EQU    3FH                  ; Question Mark
0081: E800             UNDER_SCORE EQU    5FH                  ; under score _
0082: E800             LEFT_ARROW EQU    5FH                  ; Left Arrow ?
0083: E800             RUBOUT     EQU    7FH                  ; Delete Key
0084: E800
0085: E800
0086: E800             ASCII_A    EQU    'A'
0087: E800             ASCII_C    EQU    'C'
0088: E800             ASCII_K    EQU    'K'
0089: E800             ASCII_N    EQU    'N'
0090: E800             ASCII_Q    EQU    'Q'
0091: E800             ASCII_R    EQU    'R'
0092: E800             ASCII_W    EQU    'W'
0093: E800             ASCII_Y    EQU    'Y'
0094: E800             CARET      EQU    '^'
0095: E800             ASCII_LO_A EQU    'a'
0096: E800             ASCII_LO_K EQU    'k'
0097: E800             ASCII_LO_P EQU    'p'
0098: E800             LEFT_CURLY EQU    '{'                  ; Left curly Bracket
0099: E800
0100: E800         ;<<<<<<<<<<<<<<<<<<<<<<< Include >>>>>>>>>>>>>>>>
0101: E800                        Include ./osHeader.Z80
0102: E800         ;<<<<<<<<<<<<<<<<<<<<<<< Include >>>>>>>>>>>>>>>>
0103: E800         ;     File created by MakeZ80Source on Mon Sep 17 16:25:47 EDT 2018 from:
0104: E800         ;     C:\Users\admin\Dropbox\Resources\CPM\CurrentOS\8080\osHeader.asm
0105: E800         ; osHeader.Z80
0106: E800
0107: E800         ; 2018-12-28 Changed BDOSEntry to remove dead space in BDOS
0108: E800         ; 2017-03-02 Refactored the CP/M Suite
0109: E800
0110: E800         ; Contains the Equates used by the CP/M system
0111: E800
0112: E800         ;------------------------Page Zero Constants ---------------------------------
0113: E800             RAM        EQU    0                    ; Start of RAM ( and the Base page)
0114: E800
0115: E800             WarmBoot   EQU    RAM + 0              ; Contains a JMP instruction to warm boot in BIOS
0116: E800             BIOSPAGE   EQU    RAM + 2              ; BIOS Jump Vector Page
0117: E800             IOBYTE     EQU    RAM + 3              ; Input/Output redirection byte
0118: E800
0119: E800             Pg0CurentUser EQU    RAM + 4              ; Current user ( bits 7-4)
0120: E800             Pg0CurentDisk EQU    Pg0CurentUser        ; Default logical disk (bits 0-3)
0121: E800
0122: E800             BDOSE      EQU    RAM + 5              ; Contains a JMP to BDOS entry
0123: E800             TopRAM     EQU    BDOSE+2              ; Top page of usable RAM
0124: E800
0125: E800             FCB1       EQU    RAM + 05CH           ; File Control Block #1
0126: E800             FCB2       EQU    FCB1 + 16            ; File Control Block #2
0127: E800
0128: E800             ComTail    EQU    RAM + 080H           ; Complete command tail
0129: E800             ComTailCount EQU    ComTail + 1          ; Count of the number of char in tail
0130: E800             ComTailChars EQU    ComTailCount + 1     ; Complete Command tail up-cased, w/o trailing CR
0131: E800         ;-----------------------------------------------------------------------
0132: E800
0133: E800             DMABuffer  EQU    RAM + 080H           ; Default "DMA" address used as buffer
0134: E800         ;-----------------------------------------------------------------------
0135: E800             TPA        EQU    RAM + 0100H          ; Start of Transient program Area
0136: E800         ;-----------------------------------------------------------------------
0137: E800             END_OF_FILE EQU    1AH                  ; end of file
0138: E800         ;-----------------------------------------------------------------------
0139: E800
0140: E800         ;--------------- CP/M Constants -----------------------------------------
0141: E800
0142: E800             CCPLength  EQU    0800H                ; Constant
0143: E800             BDOSLength EQU    0E00H                ; Constant 0E00H
0144: E800             BIOSLength EQU    0A00H                ; Constant 0900H
0145: E800
0146: E800             LengthInBytes EQU    CCPLength + BDOSLength + BIOSLength
0147: E800             LengthInK  EQU    (LengthInBytes/1024) + 1
0148: E800
0149: E800             MemorySize EQU    64
0150: E800
0151: E800             CCPEntry   EQU    (MemorySize * 1024) - LengthInBytes
0152: E800
0153: E800             BDOSBase   EQU    CCPEntry + CCPLength
0154: E800             BDOSEntry  EQU    BDOSBase
0155: E800
0156: E800             BIOSBase   EQU    BDOSBase + BDOSLength
0157: E800             BIOSStart  EQU    CCPEntry + CCPLength + BDOSLength
0158: E800         ;-----------------------------------------------------------------------
0159: E800
0160: E800         ;------------------- BDOS System Call Equates --------------------------
0161: E800             fConsoleIn EQU    01H                  ; rcharf - Console Input
0162: E800             fConsoleOut EQU    02H                  ; pcharf - Console Output
0163: E800             fPrintString EQU    09H                  ; pbuff	- Print String
0164: E800             fReadString EQU    0AH                  ; rbuff	- Read Console String
0165: E800             fGetConsoleStatus EQU    0BH                  ; breakf - Get Console Status
0166: E800             fGetVersion EQU    0CH                  ; liftf	- Return Version Number
0167: E800             fResetSystem EQU    0DH                  ; initf	- Reset Disk System
0168: E800             fSelectDisk EQU    0EH                  ; self	- Select Disk
0169: E800             fOpenFile  EQU    0FH                  ; openf	- Open File
0170: E800             fCloseFile EQU    10H                  ; closef - Close File
0171: E800             fSearchFirst EQU    11H                  ; searf	- Search For First
0172: E800             fSearchNext EQU    12H                  ; searnf - Search for Next
0173: E800             fDeleteFile EQU    13H                  ; delf - Delete File
0174: E800             fReadSeq   EQU    14H                  ; dreadf - Read Sequential
0175: E800             fWriteSeq  EQU    15H                  ; dwritf - Write Sequential
0176: E800             fMakeFile  EQU    16H                  ; makef	- Make File
0177: E800             fRenameFile EQU    17H                  ; renf	- Rename File
0178: E800             fGetLoginVector EQU    18H                  ; logf	- Return Login Vector
0179: E800             fGetCurrentDisk EQU    19H                  ; cself	- Return Current Disk
0180: E800             fSetDMA    EQU    1AH                  ; dmaf	- Set DMA address
0181: E800             fGetSetUserNumber EQU    20H                  ; userf	- Set/Get User Code
0182: E800         ;-----------------------------------------------------------------------
0183: E800
0184: E800
0185: E800
0186: E800
0187: E800
0188: E800         ;*******************************************************************************
0189: E800         ; These are the values handed over by the BDOS when it calls the Writer operation
0190: E800         ; The allocated.unallocated indicates whether the BDOS is set to write to an
0191: E800         ; unallocated allocation block (it only indicates this for the first 128 byte
0192: E800         ; sector write) or to an allocation block that has already been allocated to a
0193: E800         ; file. The BDOS also indicates if it is set to write to the file directory
0194: E800         ;*******************************************************************************
0195: E800             WriteAllocated EQU    00H
0196: E800             WriteDirectory EQU    01H
0197: E800             WriteCleanBuffer EQU    02H
0198: E800
0199: E800
0200: E800         ;<<<<<<<<<<<<<<<<<<<<<<< Include >>>>>>>>>>>>>>>>
0201: E800                        Include ./diskHeader.Z80
0202: E800         ;<<<<<<<<<<<<<<<<<<<<<<< Include >>>>>>>>>>>>>>>>
0203: E800         ;     File created by MakeZ80Source on Mon Sep 17 16:26:22 EDT 2018 from:
0204: E800         ;     C:\Users\admin\Dropbox\Resources\CPM\CurrentOS\8080\diskHeader.asm
0205: E800         ; diskHeader.asm
0206: E800
0207: E800         ; 2017-03-02 Refactored the CP/M Suite
0208: E800
0209: E800         ; needs osHeader.asm declared before this is used !!!!!!!
0210: E800
0211: E800         ; Contains the Equates used by the CP/M system to handle disks
0212: E800
0213: E800
0214: E800         ;*******************************************************************************
0215: E800         ;
0216: E800         ;     Disk related values
0217: E800         ;
0218: E800         ;
0219: E800         ;*******************************************************************************
0220: E800             DiskStatusLocation EQU    043H                 ; status after disk I/O placed here
0221: E800             DiskControlByte EQU    045H                 ; control byte for disk I/O
0222: E800             DiskCommandBlock EQU    046H                 ; Control Table Pointer
0223: E800         ; for boot
0224: E800             DiskControlTable EQU    0040H
0225: E800
0226: E800             DiskReadCode EQU    01H                  ; Code for Read
0227: E800             DiskWriteCode EQU    02H                  ; Code for Write
0228: E800
0229: E800
0230: E800             cpmRecordSize EQU    080H                 ; (128) record size that CP/M uses
0231: E800             diskSectorSize EQU    200H                 ; (512) size of physical disk I/O
0232: E800             recordsPerSector EQU    diskSectorSize/cpmRecordSize
0233: E800
0234: E800             DirEntrySize EQU    20H                  ; (32)
0235: E800             DirBuffSize EQU    cpmRecordSize
0236: E800
0237: E800             DirectoryEntryPerRecord EQU    cpmRecordSize / DirEntrySize
0238: E800
0239: E800             RecordsPerExtent EQU    080H                 ; extent Record capacity
0240: E800
0241: E800
0242: E800         ;-------------------------------------------------------------------------------------
0243: E800             NumberOfLogicalDisks EQU    4                    ; max number of disk in this system
0244: E800
0245: E800         ;----------------------3.5 Double Density Disk Geometry----------------------------------------
0246: E800             NumberOfHeads EQU    02H                  ; number of heads
0247: E800             TracksPerHead EQU    50H                  ; 80
0248: E800             SectorsPerTrack EQU    12H                  ; 18 -  1 head only
0249: E800             SectorsPerBlock EQU    04H                  ; 2048 bytes
0250: E800             DirectoryBlockCount EQU    02H                  ;
0251: E800         ;-----------------------------------------------------------------------
0252: E800
0253: E800             BlockSize  EQU    SectorsPerBlock * 	diskSectorSize ; Size in Bytes
0254: E800
0255: E800             RecordsPerBlock EQU    recordsPerSector * SectorsPerBlock
0256: E800
0257: E800             TotalNumberOfSectors EQU    SectorsPerTrack * TracksPerHead * NumberOfHeads
0258: E800             TotalNumberOfBlocks EQU    TotalNumberOfSectors / SectorsPerBlock
0259: E800             SectorsPerCylinder EQU    SectorsPerTrack * NumberOfHeads
0260: E800
0261: E800             SystemSectors EQU    LengthInBytes / diskSectorSize + 1 ; need to account for boot sector
0262: E800             myOffset   EQU    (SystemSectors / SectorsPerCylinder) + 1 ;
0263: E800             DataSectors EQU    TotalNumberOfSectors - (SectorsPerCylinder * myOffset)
0264: E800             DataBlocks EQU    DataSectors / 	SectorsPerBlock
0265: E800
0266: E800         ;-----------------------------------------------------------------------
0267: E800         ;; Disk block parameters for F3HD - 3.5 HD   1.44 MB Diskette
0268: E800         ;-----------------------------------------------------------------------
0269: E800         ;dpb3hdSPT				EQU		0090H			; cpmRecords per track- (144)
0270: E800             dpb3hdSPT  EQU    recordsPerSector * SectorsPerTrack * NumberOfHeads ; SPT - records per Clynder
0271: E800             dpb3hdBSH  EQU    04H                  ; Block Shift Factor - BlockSize = 128 * (2**BSH)											; BSH = Log2(BlockSize/cpmRecordSize)
0272: E800             dpb3hdBLM  EQU    0FH                  ; BlockMask = (2**BSH) -1
0273: E800             dpb3hdEXM  EQU    00H                  ; Extent mask = (PhysicalExtents/LogicalExtents) - 1
0274: E800             dpb3hdDSM  EQU    DataBlocks -1        ; Maximum allocation block number (710)
0275: E800             dpb3hdDRM  EQU    ((BlockSize *  DirectoryBlockCount)	/	DirEntrySize) -1 ; DRM Number of directory entries - 1 (127)
0276: E800             dpb3hdAL0  EQU    0C0H                 ; Bit map for reserving 1 alloc. block
0277: E800             dpb3hdAL1  EQU    00H                  ;  for each file directory
0278: E800             dpb3hdCKS  EQU    (dpb3hdDRM +1)/ DirectoryEntryPerRecord ; Disk change work area size (32)
0279: E800             dpb3hdOFF  EQU    myOffset             ; Number of tracks before directory
0280: E800             dpb3hdNOH  EQU    NumberOfHeads
0281: E800
0282: E800         ;*******************************************************************************
0283: E800
0284: E800             SectorMask EQU    SectorsPerBlock - 1
0285: E800
0286: E800         ;***************************************************************************
0287: E800
0288: E800         ;<<<<<<<<<<<<<<<<<<<<<<< Include >>>>>>>>>>>>>>>>
0289: E800
0290: E800             VERSION    EQU    20H                  ; Version 2.0
0291: E800             STACK_SIZE EQU    20H                  ; Make stack big enough
0292: E800             EOD        EQU    -1                   ; End of Directory
0293: E800
0294: E800         ;************************ BIOS Function Constants ***************************;
0295: E800             bcBoot     EQU    BIOSStart+3*0        ; Cold Boot function	             ;
0296: E800             bcWboot    EQU    BIOSStart+3*1        ; Warm Boot function                 ;
0297: E800             bcConst    EQU    BIOSStart+3*2        ; Console Status function            ;
0298: E800             bcConin    EQU    BIOSStart+3*3        ; Console Input function             ;
0299: E800             bcConout   EQU    BIOSStart+3*4        ; Console Output function            ;
0300: E800             bcList     EQU    BIOSStart+3*5        ; List Output function               ;
0301: E800             bcPunch    EQU    BIOSStart+3*6        ; Punch Output function              ;
0302: E800             bcReader   EQU    BIOSStart+3*7        ; Reader Input function              ;
0303: E800             bcHome     EQU    BIOSStart+3*8        ; Disk Home function                 ;
0304: E800             bcSeldsk   EQU    BIOSStart+3*9        ; Select Disk function               ;
0305: E800             bcSettrk   EQU    BIOSStart+3*10       ; Set Track function                 ;
0306: E800             bcSetsec   EQU    BIOSStart+3*11       ; Set Sector function                ;
0307: E800             bcSetdma   EQU    BIOSStart+3*12       ; Set DMA function                   ;
0308: E800             bcRead     EQU    BIOSStart+3*13       ; Read Disk function                 ;
0309: E800             bcWrite    EQU    BIOSStart+3*14       ; Write Disk function                ;
0310: E800             bcListst   EQU    BIOSStart+3*15       ; List Status function               ;
0311: E800             bcSectran  EQU    BIOSStart+3*16       ; Sector Translate                   ;
0312: E800         ;************************ BIOS Function Constants ***************************;
0313: E800
0314: E800         ;============================================================================;
0315: E800         ;	BDOS                                                                     ;
0316: E800         ; Calling into   :                                                           ;
0317: E800         ;					Register  C - Contains BDOS Function Code                ;
0318: E800         ;					Register  A - Holds the Byte argument if any             ;
0319: E800         ;					Register DE - Holds the Word argument if any             ;
0320: E800         ; Returning from :                                                           ;
0321: E800         ;					Register  A - The Byte return value if any               ;
0322: E800         ;					Register HL - The Word return value if any               ;
0323: E800         ;                   ( Register A=L and B=H)                                  ;
0324: E800         ;============================================================================;
0325: E800
0326: E800
0327: E800                        ORG    BDOSBase
0328: E800
0329: E800         ;===========================BDOS Entry=======================================;
0330: E800         ;BDOSEntry:                                                                  ;
0331: E800         ;
0332: E800         ;
0333: E800             BdosStart:                      ;
0334: E800         ;	LD		A,C                                                              ;
0335: E800         ; 	LD		(FunctionValue),A			; Save the function number           ;
0336: E800         ;
0337: E800         ; Save Calling Arguments                                                     ;
0338: E800 ED 53 C3 EA               LD     (paramDE),DE         ; Save the Word Argument             ;
0339: E804 7B                     LD     A,E                  ;
0340: E805 32 C2 EA               LD     (paramE),A           ; Save the Byte argument             ;
0341: E808         ; Save users Stack pointer                                                   ;
0342: E808 ED 73 BC EA               LD     (usersStack),SP      ; Save the User's stack				 ;
0343: E80C 31 E4 F5               LD     SP,bdosStack         ; We will use our own stack			 ;
0344: E80F         ;
0345: E80F         ; initialize variables                                                       ;
0346: E80F 21 00 00               LD     HL,0000H             ;
0347: E812 22 C5 EA               LD     (exitParameterWord),HL ; Assume all is well for return      ;
0348: E815 AF                     XOR    A                    ;
0349: E816 32 98 F5               LD     (fcbDisk),A          ; Initialize to 00                   ;
0350: E819 32 96 F5               LD     (fResel),A           ; Clear re selection flag            ;
0351: E81C         ;
0352: E81C         ; Set up for return to caller when Function Completes                        ;
0353: E81C 21 32 E8               LD     HL,ReturnToCaller    ;
0354: E81F E5                     PUSH   HL                   ;Set up to ReturnToCaller            ;
0355: E820         ;
0356: E820         ; is it a valid function number ?	                                         ;
0357: E820         ;	LD		A,(FunctionValue)			; Get the Function Number            ;
0358: E820 79                     LD     A,C                  ;
0359: E821 FE 28                  CP     functionCount        ; make sure its a good number        ;
0360: E823 D0                     RET    NC                   ; exit if not a valid function       ;
0361: E824         ;
0362: E824         ; Calculate the index and get vector to go to	                             ;
0363: E824 4B                     LD     C,E                  ; Assume byte argument               ;
0364: E825 21 57 E8               LD     HL,functionTable     ; Get table base                     ;
0365: E828 5F                     LD     E,A                  ; Function number in E               ;
0366: E829 16 00                  LD     D,0                  ;
0367: E82B 19                     ADD    HL,DE                ; Have byte location                 ;
0368: E82C 19                     ADD    HL,DE                ;  but we want a Word offset         ;
0369: E82D 5E                     LD     E,(HL)               ; Get LSB of vector                  ;
0370: E82E 23                     INC    HL                   ;
0371: E82F 56                     LD     D,(HL)               ; Get MSB of vector                  ;
0372: E830 EB                     EX     DE,HL                ; Vector now in HL                   ;
0373: E831         ;
0374: E831         ; Vector to Function is in HL                                                ;
0375: E831 E9                     JP     (HL)                 ; Put it into the Program Counter    ;
0376: E832         ;===========================BDOS Entry=======================================;
0377: E832         ;===========================BDOS Exit =======================================;
0378: E832         ;arrive here at end of processing to return to user                          ;
0379: E832             ReturnToCaller:                      ;
0380: E832 3A 96 F5               LD     A,(fResel)           ; get re-selection flag              ;
0381: E835 B7                     OR     A                    ; is it set?                         ;
0382: E836 28 15                  JR     Z,ReturnToCaller1    ;
0383: E838         ;re-selection  may have taken place                                         ;
0384: E838 2A C3 EA               LD     HL,(paramDE)         ;
0385: E83B 36 00                  LD     (HL),0               ;
0386: E83D 3A 98 F5               LD     A,(fcbDisk)          ;
0387: E840 B7                     OR     A                    ; Disk = 0?                          ;
0388: E841 28 0A                  JR     Z,ReturnToCaller1    ; exit if yes                  		 ;
0389: E843         ;
0390: E843 77                     LD     (HL),A               ;
0391: E844 3A 97 F5               LD     A,(entryDisk)        ; get back original Disk             ;
0392: E847 32 C2 EA               LD     (paramE),A           ; and select it                      ;
0393: E84A CD B3 EC               CALL   SelectCurrent        ;
0394: E84D         ;
0395: E84D             ReturnToCaller1:                      ;
0396: E84D 2A BC EA               LD     HL,(usersStack)      ;
0397: E850 F9                     LD     SP,HL                ; restore callers stack              ;
0398: E851 2A C5 EA               LD     HL,(exitParameterWord) ;
0399: E854 7D                     LD     A,L                  ;
0400: E855 44                     LD     B,H                  ; BA = exitParameterWord             ;
0401: E856 C9                     RET                         ;
0402: E857         ;===========================BDOS Exit =======================================;
0403: E857
0404: E857         ;++++++++++++++++++++++++++++ Function Vector Table +++++++++++++++++++++++++;
0405: E857             functionTable:                      ;
0406: E857 AA E8                  DW     vSystemReset         ;   0 - System Reset                 ;
0407: E859 AD E8                  DW     vConsoleIn           ;   1 - Console Input                ;
0408: E85B BE E8                  DW     vConsoleOut          ;   2 - Console Output               ;
0409: E85D C2 E8                  DW     vReaderIn            ;   3 - Reader Input                 ;
0410: E85F C9 E8                  DW     vPunchOut            ;   4 - Punch Output                 ;
0411: E861 CD E8                  DW     vListOut             ;   5 - List Output                  ;
0412: E863 D1 E8                  DW     vDirectConIO         ;   6 - Direct Console I/O           ;
0413: E865 E7 E8                  DW     vGetIOBYTE           ;   7 - Get I/O Byte                 ;
0414: E867 EE E8                  DW     vSetIOBYTE           ;   8 - Set I/O Byte                 ;
0415: E869 F3 E8                  DW     vPrintString         ;   9 - Print String                 ;
0416: E86B FC E8                  DW     vReadString          ;   A - Read Console String          ;
0417: E86D 00 E9                  DW     vGetConsoleStatus    ;   B - Get Console Status           ;
0418: E86F             diskf      EQU    ($-functionTable)/2  ; disk functions                     ;
0419: E86F 07 E9                  DW     vGetVersion          ;   C - Return Version Number        ;
0420: E871 C7 EA                  DW     vResetSystem         ;   D - Reset Disk System            ;
0421: E873 E0 EA                  DW     vSelectDisk          ;   E - Select Disk                  ;
0422: E875 E3 EA                  DW     vOpenFile            ;   F - Open File                    ;
0423: E877 EC EA                  DW     vCloseFile           ;  10 - Close File                   ;
0424: E879 F2 EA                  DW     vFindFirst           ;  11 - Search For First             ;
0425: E87B 0B EB                  DW     vFindNext            ;  12 - Search for Next              ;
0426: E87D 1A EB                  DW     vDeleteFile          ;  13 - Delete File                  ;
0427: E87F 0D F2                  DW     vReadSeq             ;  14 - Read Sequential              ;
0428: E881 14 F2                  DW     vWriteSeq            ;  15 - Write Sequential             ;
0429: E883 1B F2                  DW     vMakeFile            ;  16 - Make File                    ;
0430: E885 24 F2                  DW     vRenameFile          ;  17 - Rename File                  ;
0431: E887 45 EB                  DW     vGetLoginVector      ;  18 - Return Login Vector          ;
0432: E889 4C EB                  DW     vGetCurrentDisk      ;  19 - Return Current Disk          ;
0433: E88B 53 EB                  DW     vSetDMA              ;  1A - Set DMA address              ;
0434: E88D 5C EB                  DW     vGetAllocAddr        ;  1B - Get ADDR (ALLOC)             ;
0435: E88F 63 EB                  DW     vWriteProtectDisk    ;  1C - Write Protect Disk           ;
0436: E891 66 EB                  DW     vGetReadOnlyMap      ;  1D - Get Read/Only MAP	         ;
0437: E893 AA EC                  DW     vSetFileAttributes   ;  1E - Set File Attributes ??       ;
0438: E895 6D EB                  DW     vGetDiskParamBlock   ;  1F - Get ADDR (Disk Parameters)   ;
0439: E897 0D E9                  DW     vGetSetUserNumber    ;  20 - Set/Get User Code            ;
0440: E899 75 EB                  DW     vReadRandom          ;  21 - Read Random                  ;
0441: E89B 7B EB                  DW     vWriteRandom         ;  22 - Write Random                 ;
0442: E89D 81 EB                  DW     vComputeFileSize     ;  23 - Compute File Size            ;
0443: E89F 87 EB                  DW     vSetRandomRecord     ;  24 - Set Random Record            ;
0444: E8A1 74 EB                  DW     vResetDrive          ;  25 - Reset Drive                  ;
0445: E8A3 A9 E8                  DW     DUMMY                ;  26 - Access Drive (not supported) ;
0446: E8A5 A9 E8                  DW     DUMMY                ;  27 - Free Drive (not supported)   ;
0447: E8A7 8A EB                  DW     vWriteRandom0Fill    ;  28 - Write random w/Fill          ;
0448: E8A9             functionCount EQU    ($-functionTable)/2  ; Number of  functions               ;
0449: E8A9         ;
0450: E8A9             DUMMY:                          ;
0451: E8A9 76                     HALT                        ;
0452: E8AA         ;++++++++++++++++++++++++++++ Function Vector Table +++++++++++++++++++++++++;
0453: E8AA
0454: E8AA         ;-------------------------- System Reset - 0 (0) ----------------------------;
0455: E8AA         ;  The system reset function makes CP/M do a complete reset, exactly the     ;
0456: E8AA         ; same as the warm boot function invoked when you transfer control to the    ;
0457: E8AA         ; WARMBOOT point. In addition to resetting the BDOS, this function reloads   ;
0458: E8AA         ; the CCP, rebuilds the allocation vectors for the currently logged disks,   ;
0459: E8AA         ; sets the DMA address (used byCP/M to address the disk read/write buffer)   ;
0460: E8AA         ; to 80H, marks all disks as being Read/Write status, and transfers control  ;
0461: E8AA         ; to the  CCP. The CCP then outputs its prompt to the console.               ;
0462: E8AA         ;																			 ;
0463: E8AA         ;			Function Code	 :	C = 00H                                      ;
0464: E8AA         ;			Entry Parameters:	None                                         ;
0465: E8AA         ;			Exit Parameters :	Does Not Return								 ;
0466: E8AA         ;																			 ;
0467: E8AA         ;-------------------------- System Reset - 0 (0) ----------------------------;
0468: E8AA             vSystemReset:
0469: E8AA C3 03 F6               JP     bcWboot              ; do a Warm Boot
0470: E8AD
0471: E8AD         ;****************************************************************************;
0472: E8AD         ;								IOByte device I/O							 ;
0473: E8AD         ;****************************************************************************;
0474: E8AD
0475: E8AD
0476: E8AD         ;-------------------------- Read Console Byte - 1 (1) -----------------------;
0477: E8AD         ;  This function reads the next byte of data from the console keyboard and   ;
0478: E8AD         ; puts it into register A. If the character input is a graphic character, it ;
0479: E8AD         ; will be echoed back to the console. The only control characters that are   ;
0480: E8AD         ; echoed are  CARRIAGE RETURN, LINE FEED, BACKSPACE, and TAB. In the case    ;
0481: E8AD         ; of a TAB character, the BDOS outputs as many spaces as are required to     ;
0482: E8AD         ; move the cursor to the next multiple of eight columns. All of the other    ;
0483: E8AD         ; control characters, including CONTROL-C, are input but are not echoed.     ;
0484: E8AD         ;  This function also checks for CONTROL-S (XOFF) to see if console output   ;
0485: E8AD         ; should be suspended, and for CONTROL-P (printer echo toggle) to see if     ;
0486: E8AD         ; console output should also be sent to the list device. If CONTROL-S is     ;
0487: E8AD         ; found, further output will be suspended until you type another character.  ;
0488: E8AD         ; CONTROL-P will enable the echoing of console output the first time it is   ;
0489: E8AD         ; pressed and disable it the second time. If there is no incoming data       ;
0490: E8AD         ; character, this function will wait until there is one.                     ;
0491: E8AD         ;                                                                            ;
0492: E8AD         ; This is a blocking function                                                ;
0493: E8AD         ;																			 ;
0494: E8AD         ;																			 ;
0495: E8AD         ;			Function Code	:	C = 01H                                      ;
0496: E8AD         ;			Entry Parameters:	None                                         ;
0497: E8AD         ;			Exit Parameters :	A = Data byte from console					 ;
0498: E8AD         ;																			 ;
0499: E8AD         ;-------------------------- Read Console Byte - 1 (1) -----------------------;
0500: E8AD             vConsoleIn:
0501: E8AD CD 21 E9               CALL   ConIn                ; Don't come back without input
0502: E8B0 CD 2C E9               CALL   IsPrintableASCII     ; CR,LF,TAB,BACK_SPACE or GE SPACE
0503: E8B3 D8                     RET    C                    ; return nothing to echo
0504: E8B4
0505: E8B4 F5                     PUSH   AF                   ; Save printable character
0506: E8B5 4F                     LD     C,A
0507: E8B6 CD 58 E9               CALL   TabOut               ; Send to console. if TAB expand
0508: E8B9 F1                     POP    AF                   ; retrieve exit value
0509: E8BA
0510: E8BA 32 C5 EA               LD     (exitParameterByte),A
0511: E8BD C9                     RET
0512: E8BE
0513: E8BE         ;------------------------- Write Console Byte - 2 (2) -----------------------;
0514: E8BE         ;  This function outputs the data byte in register E to the console. As with ;
0515: E8BE         ; function 1, if the data byte is a TAB character, it will be expanded by    ;
0516: E8BE         ; the BDOS to the next column that is a multiple of eight. The BDOS also     ;
0517: E8BE         ; checks to see if there is an incoming character, and if there is,          ;
0518: E8BE         ; checks to see if it is a CONTROL-S ,in which case console output is        ;
0519: E8BE         ; suspended or CONTROL-P, in which case echoing of console output to the     ;
0520: E8BE         ; printer is  toggled on or off                                              ;
0521: E8BE         ;																			 ;
0522: E8BE         ;			Function Code	:	C = 02H                                      ;
0523: E8BE         ;			Entry Parameters:	E = Data byte to be output					 ;
0524: E8BE         ;			Exit Parameters :	None										 ;
0525: E8BE         ;																			 ;
0526: E8BE         ;------------------------- Write Console Byte - 2 (2) -----------------------;
0527: E8BE         ;BDOS put parameter in C before entering this routine
0528: E8BE             vConsoleOut:
0529: E8BE CD 58 E9               CALL   TabOut
0530: E8C1 C9                     RET
0531: E8C2
0532: E8C2         ;--------------------------- Read Reader Byte - 3 (3) -----------------------;
0533: E8C2         ;   function reads the next character from the logical "reader" device into  ;
0534: E8C2         ; register A. In practice, the physical device that is accessed depends      ;
0535: E8C2         ; entirely on how your BIOS is configured. In some systems, there is no      ;
0536: E8C2         ; reader at all; this function will return some arbitrary value such as lAH  ;
0537: E8C2         ; (the ASCII CONTROL-Z character, used by CP/M to denote "End of File').     ;
0538: E8C2         ; Control is not returned to the calling program until a character has been  ;
0539: E8C2         ; read.                                                                      ;
0540: E8C2         ;                                                                            ;
0541: E8C2         ; This is a blocking function                                                ;
0542: E8C2         ;																			 ;
0543: E8C2         ;			Function Code	:	C = 03H                                      ;
0544: E8C2         ;			Entry Parameters:	None										 ;
0545: E8C2         ;			Exit Parameters :	A = Character Input							 ;
0546: E8C2         ;																			 ;
0547: E8C2         ;--------------------------- Read Reader Byte - 3 (3) -----------------------;
0548: E8C2             vReaderIn:
0549: E8C2 CD 15 F6               CALL   bcReader
0550: E8C5 32 C5 EA               LD     (exitParameterWord),A
0551: E8C8 C9                     RET
0552: E8C9
0553: E8C9         ;--------------------------- Write Punch Byte - 4 (4) -----------------------;
0554: E8C9         ;  This function is a counterpart to the Read "Reader" Byte It outputs the   ;
0555: E8C9         ; specified character from register E to the logical punch device. Again,    ;
0556: E8C9         ; the actual physical device used, if any, is determined by the BIOS.        ;
0557: E8C9         ; There is no set standard for this device; in some systems the punch        ;
0558: E8C9         ; device is a "bit bucket," so called because it absorbs all data that you   ;
0559: E8C9         ; output to it.                                                              ;
0560: E8C9         ;																			 ;
0561: E8C9         ;			Function Code	:	C = 04H                                      ;
0562: E8C9         ;			Entry Parameters:	E = Data byte to be output					 ;
0563: E8C9         ;			Exit Parameters :	None										 ;
0564: E8C9         ;																			 ;
0565: E8C9         ;--------------------------- Write Punch Byte - 4 (4) -----------------------;
0566: E8C9         ;BDOS put parameter in C before entering this routine
0567: E8C9             vPunchOut:
0568: E8C9 CD 12 F6               CALL   bcPunch
0569: E8CC C9                     RET
0570: E8CD
0571: E8CD         ;---------------------------- Write List Byte - 5 (5) -----------------------;
0572: E8CD         ;  This function outputs the specified byte in register E to the logical     ;
0573: E8CD         ; list device. As with the reader and the punch, the physical device used    ;
0574: E8CD         ; depends entirely on the BIOS.                                              ;
0575: E8CD         ;																			 ;
0576: E8CD         ;			Function Code	:	C = 05H                                      ;
0577: E8CD         ;			Entry Parameters:	E = Data byte to be output					 ;
0578: E8CD         ;			Exit Parameters :	None										 ;
0579: E8CD         ;																			 ;
0580: E8CD         ;---------------------------- Write List Byte - 5 (5) -----------------------;
0581: E8CD         ;BDOS put parameter in C before entering this routine
0582: E8CD             vListOut:                       ; func5 (05 - 05) List Output
0583: E8CD CD 0F F6               CALL   bcList               ; direct call to BIOS
0584: E8D0 C9                     RET
0585: E8D1
0586: E8D1         ;--------------------------- Direct Console I/O - 6 (6) ---------------------;
0587: E8D1         ;  This function serves double duty: it both inputs and outputs characters   ;
0588: E8D1         ; from the console. However, it bypasses the normal control characters and   ;
0589: E8D1         ; line editing features (such as CONTROL-P and CONTROL-S) normally           ;
0590: E8D1         ; associated with console I( O. Hence the name "direct" (or "unadorned" as   ;
0591: E8D1         ; Digital Research describes it). If the value in register E is not OFFH,    ;
0592: E8D1         ; then E contains a valid ASCII character that is output to the console.     ;
0593: E8D1         ;  This function works well provided you never have to send a value ofOFFH   ;
0594: E8D1         ; or expect to receive a value ofOOH. If you do need to send or receive pure ;
0595: E8D1         ; binary data, you cannot use this function, since these values are likely   ;
0596: E8D1         ; to be part of the data stream.                                             ;
0597: E8D1         ;                                                                            ;
0598: E8D1         ;			Function Code	:	C = 06H                                      ;
0599: E8D1         ;			Entry Parameters:	E = 0FFH for Input					  		 ;
0600: E8D1         ;								E = Other than 0FFH for Output				 ;
0601: E8D1         ;			Exit Parameters :	A = Input byte or status					 ;
0602: E8D1         ;																			 ;
0603: E8D1         ;--------------------------- Direct Console I/O - 6 (6) ---------------------;
0604: E8D1         ;BDOS put parameter in C before entering this routine
0605: E8D1             vDirectConIO:
0606: E8D1 79                     LD     A,C
0607: E8D2 3C                     INC    A
0608: E8D3 28 04                  JR     Z,vDirectConIO1      ; 0ffh => 00h, means input mode
0609: E8D5         ; send byte to console
0610: E8D5 CD 0C F6               CALL   bcConout             ; Send the byte to the console
0611: E8D8 C9                     RET
0612: E8D9
0613: E8D9         ;read byte/status from console
0614: E8D9             vDirectConIO1:
0615: E8D9 CD 06 F6               CALL   bcConst              ; Check Status
0616: E8DC B7                     OR     A                    ; 00 means not data ready
0617: E8DD CA 4D E8               JP     Z,ReturnToCaller1    ; If no data return  00 to caller
0618: E8E0 CD 09 F6               CALL   bcConin              ; Data is available, get it to A
0619: E8E3 32 C5 EA               LD     (exitParameterByte),A ; Save it
0620: E8E6 C9                     RET
0621: E8E7
0622: E8E7         ;--------------------------- Get IOBYTE Setting - 7 (7) ---------------------;
0623: E8E7         ; This function places the current value of the IOBYTE in register A.        ;
0624: E8E7         ;                                                                            ;
0625: E8E7         ; The IOBYTE structure:                                                      ;
0626: E8E7         ;								+-------+-------+-------+-------+            ;
0627: E8E7         ;						Bit No. | 7 : 6 | 5 : 4 | 3 : 2 | 1 : 0 |            ;
0628: E8E7         ;								+-------+-------+-------+-------+            ;
0629: E8E7         ;				Logical Device     List | Punch | Reader|Console             ;
0630: E8E7         ;                                                                            ;
0631: E8E7         ;                                                                            ;
0632: E8E7         ;			Function Code	:	C = 07H                                      ;
0633: E8E7         ;			Entry Parameters:	None					  		  			 ;
0634: E8E7         ;			Exit Parameters :	A = Current IOBYTE value					 ;
0635: E8E7         ;																			 ;
0636: E8E7         ;--------------------------- Get IOBYTE Setting - 7 (7) ---------------------;
0637: E8E7             vGetIOBYTE:
0638: E8E7 3A 03 00               LD     A,(IOBYTE)           ; Get the IOBYTE
0639: E8EA 32 C5 EA               LD     (exitParameterWord),A ; Return it to caller
0640: E8ED C9                     RET
0641: E8EE         ;--------------------------- Set IOBYTE Setting - 8 (8) ---------------------;
0642: E8EE         ; This function sets the IOBYTE         									 ;
0643: E8EE         ;                                                                            ;
0644: E8EE         ; The IOBYTE structure:                                                      ;
0645: E8EE         ;								+-------+-------+-------+-------+            ;
0646: E8EE         ;						Bit No. | 7 : 6 | 5 : 4 | 3 : 2 | 1 : 0 |            ;
0647: E8EE         ;								+-------+-------+-------+-------+            ;
0648: E8EE         ;				Logical Device     List | Punch | Reader|Console             ;
0649: E8EE         ;                                                                            ;
0650: E8EE         ;                                                                            ;
0651: E8EE         ;			Function Code	:	C = 08H                                      ;
0652: E8EE         ;			Entry Parameters:	E = New IOBYTE value	  		  			 ;
0653: E8EE         ;			Exit Parameters :	None                                         ;
0654: E8EE         ;																			 ;
0655: E8EE         ;--------------------------- Get IOBYTE Setting - 8 (8) ---------------------;
0656: E8EE         ;BDOS put parameter in C before entering this routine
0657: E8EE             vSetIOBYTE:
0658: E8EE 21 03 00               LD     HL,IOBYTE            ; point at The IOBYTE
0659: E8F1 71                     LD     (HL),C               ; Place new vale in it
0660: E8F2 C9                     RET
0661: E8F3
0662: E8F3         ;---------------------- Display $ terminated String - 9 (9) -----------------;
0663: E8F3         ;  This function outputs a string of characters to the console device. The   ;
0664: E8F3         ; address of this string is in registers DE. You must make sure that the last;
0665: E8F3         ; character of the string is "$"; the BDOS uses this character as a marker   ;
0666: E8F3         ; for the end of the string.                                                 ;
0667: E8F3         ;  The "$" itself does not get output to the console.                        ;
0668: E8F3         ;                                                                            ;
0669: E8F3         ; While the BDOS is outputting the string, it expands tabs as previously     ;
0670: E8F3         ; described, checks to see if there is an incoming character, and checks for ;
0671: E8F3         ; CONTROL-S (XOFF, which stops the output until another character is entered);
0672: E8F3         ; or CONTROL-P (which turns on or off echoing of console characters to       ;
0673: E8F3         ; the printer).                                                              ;
0674: E8F3         ;                                                                            ;
0675: E8F3         ;			Function Code	:	C = 09H                                      ;
0676: E8F3         ;			Entry Parameters:	DE = Address of the first byte of the string ;
0677: E8F3         ;			Exit Parameters :	None							             ;
0678: E8F3         ;																			 ;
0679: E8F3         ;---------------------- Display $ terminated String - 9 (9) -----------------;
0680: E8F3             vPrintString:
0681: E8F3 2A C3 EA               LD     HL,(paramDE)         ; Get address of the string
0682: E8F6 4D                     LD     C,L
0683: E8F7 44                     LD     B,H                  ; Put it into BC for call
0684: E8F8 CD 3B E9               CALL   Print                ; out to console
0685: E8FB C9                     RET
0686: E8FC
0687: E8FC         ;-------------------------- Read Console String - A (10) --------------------;
0688: E8FC         ;  This function reads a string of characters from the console device        ;
0689: E8FC         ; and stores them in a buffer (address in DE) that you define. Full line     ;
0690: E8FC         ; editing is possible: the operator can backspace, cancel the line and start ;
0691: E8FC         ; over, and use all the normal control functions. What you will ultimately   ;
0692: E8FC         ; see in the buffer is the final version of the character string entered,    ;
0693: E8FC         ; without any of the errors or control characters used to do the line editing;
0694: E8FC         ;                                                                            ;
0695: E8FC         ;  The buffer that you define has a special format. The first byte in the    ;
0696: E8FC         ; buffer tells the BDOS the maximum number of characters to be accepted.     ;
0697: E8FC         ; The second byte is reserved for the BDOS to tell you how many characters   ;
0698: E8FC         ; were actually placed in the buffer. The following bytes contain            ;
0699: E8FC         ; the characters of the string. Character input will cease either when a     ;
0700: E8FC         ; CARRIAGE RETURN is entered or when the maximum number of characters,       ;
0701: E8FC         ; as specified in the buffer, has been received. The CARRIAGE RETURN is not  ;
0702: E8FC         ; stored in the buffer as a character-it just serves as a terminator. If     ;
0703: E8FC         ; the first character entered is a CARRIAGE RETURN, then the BDOS sets       ;
0704: E8FC         ; the "characters input" byte to O. If you attempt to input more than the    ;
0705: E8FC         ; maximum number of characters, the "characters input" count will be the     ;
0706: E8FC         ; same as the maximum value allowed.                                         ;
0707: E8FC         ;                                                                            ;
0708: E8FC         ;			Function Code	:	C = 0AH                                      ;
0709: E8FC         ;			Entry Parameters:	DE = Address string buffer					 ;
0710: E8FC         ;			Exit Parameters :	String Buffer with console bytes in it       ;
0711: E8FC         ;																			 ;
0712: E8FC         ;-------------------------- Read Console String - A (10) --------------------;
0713: E8FC             vReadString:
0714: E8FC CD E0 E9               CALL   ReadString
0715: E8FF C9                     RET
0716: E900
0717: E900         ;------------------------- Read Console Status - B (11) ---------------------;
0718: E900         ; This function tells you whether a console input character is waiting to be ;
0719: E900         ;processed. Unlike the Console Input functions, which will wait until there  ;
0720: E900         ;is input,this function simply checks and returns immediately.               ;
0721: E900         ;                                                                            ;
0722: E900         ;			Function Code	:	C = 0BH                                      ;
0723: E900         ;			Entry Parameters:	None										 ;
0724: E900         ;			Exit Parameters :	A = 00H if no incoming Data					 ;
0725: E900         ;								A = FFH	if incoming Data					 ;
0726: E900         ;																			 ;
0727: E900         ;------------------------- Read Console Status - B (11) ---------------------;
0728: E900             vGetConsoleStatus:
0729: E900 CD 8C E9               CALL   ConBreak
0730: E903 32 C5 EA               LD     (exitParameterByte),A
0731: E906 C9                     RET
0732: E907
0733: E907         ;--------------------------- Get CP/M Version - C (12) ----------------------;
0734: E907         ;  This function tells you which version of CP/M you are currently running.  ;
0735: E907         ; A two-byte value is returned:                                              ;
0736: E907         ;	H = OOH for CP/M, H = OlH for MP/M                                       ;
0737: E907         ;	L = OOH for all releases before CP/M 2.0                                 ;
0738: E907         ;	L = 20H for CP/M 2.0,21 H for 2.1, 22H for 2.2,                          ;
0739: E907         ;		and so on for any subsequent releases.                               ;
0740: E907         ;                                                                            ;
0741: E907         ; This information is of interest only if your program has some version      ;
0742: E907         ; specific logic built into it. For example, CP/M version 1.4 does not       ;
0743: E907         ; support the same Random File Input/ Output operations that CP/M 2.2 does.  ;
0744: E907         ; Therefore, if your program uses Random I/O, put this check at the          ;
0745: E907         ; beginning to ensure that it is indeed running under the appropriate        ;
0746: E907         ; version of CP/M.                                                           ;
0747: E907         ;                                                                            ;
0748: E907         ;			Function Code	:	C = 0CH                                      ;
0749: E907         ;			Entry Parameters:	None										 ;
0750: E907         ;			Exit Parameters :	HL =Version Number Code						 ;
0751: E907         ;								A = FFH	if incoming Data					 ;
0752: E907         ;																			 ;
0753: E907         ;--------------------------- Get CP/M Version - C (12) ----------------------;
0754: E907             vGetVersion:                      ; func12 (12 - 0C)	 Get Version
0755: E907 3E 20                  LD     A,VERSION
0756: E909 32 C5 EA               LD     (exitParameterByte),A ;exitParameterByte = VERSION
0757: E90C C9                     RET
0758: E90D
0759: E90D         ;--------------------------- Get/Set User Number - 20 (32) ------------------;
0760: E90D         ;  This subroutine either sets or gets the current user number. The current  ;
0761: E90D         ; user number determines which file directory entries are matched during all ;
0762: E90D         ; disk file operations. When you call this function, the contents of the     ;
0763: E90D         ; E register specify what action is to be taken. IfE=OFFH, then the function ;
0764: E90D         ; will return the current user number in the A register. If you set E to a   ;
0765: E90D         ; number in the range 0 to 15 (that is, a valid user number), the function   ;
0766: E90D         ; will set the current user number to this value.                            ;
0767: E90D         ;                                                                            ;
0768: E90D         ;			Function Code	:	C = 0CH                                      ;
0769: E90D         ;			Entry Parameters:	E = 0FFH to get User Number  				 ;
0770: E90D         ;								  = 0 to 15 to set User Number				 ;
0771: E90D         ;			Exit Parameters :	A = Current user Number if E was set to 0FFH ;
0772: E90D         ;								A = FFH	if incoming Data					 ;
0773: E90D         ;																			 ;
0774: E90D         ;                                                                            ;
0775: E90D         ;--------------------------- Get/Set User Number - 20 (32) ------------------;
0776: E90D             vGetSetUserNumber:
0777: E90D 3A C2 EA               LD     A,(paramE)
0778: E910 FE FF                  CP     0FFH
0779: E912 20 07                  JR     NZ,SetUserNumber     ; interrogate user code instead
0780: E914 3A 65 F5               LD     A,(currentUserNumber)
0781: E917 32 C5 EA               LD     (exitParameterByte),A ; exitParameterByte=currentUserNumber
0782: E91A C9                     RET
0783: E91B
0784: E91B             SetUserNumber:
0785: E91B E6 0F                  AND    LO_NIBBLE_MASK
0786: E91D 32 65 F5               LD     (currentUserNumber),A
0787: E920 C9                     RET
0788: E921
0789: E921         ;****************************************************************************;
0790: E921         ;								Character Support Routines					 ;
0791: E921         ;****************************************************************************;
0792: E921
0793: E921
0794: E921         ;-------------------- Return a Character from the console -------------------;
0795: E921         ;return byte from buffer or read from the console                            ;
0796: E921             ConIn:                          ;
0797: E921 21 BE EA               LD     HL,keyboardByte      ; is there a Byte waiting?           ;
0798: E924 7E                     LD     A,(HL)               ;
0799: E925 36 00                  LD     (HL),0               ;
0800: E927 B7                     OR     A                    ;
0801: E928 C0                     RET    NZ                   ;
0802: E929         ;
0803: E929 C3 09 F6               JP     bcConin              ; Go get byte from Console           ;
0804: E92C         ;-------------------- Return a Character from the console -------------------;
0805: E92C
0806: E92C         ;----------- Is the Character ASCII printable, CR,LF,TAB,BACKSPACE ----------;
0807: E92C         ; Resets Carry Flag if ASCII Printable, CR,LF,TAB,BackSpace or GE SPACE      ;
0808: E92C             IsPrintableASCII:                      ;
0809: E92C FE 0D                  CP     CR                   ;
0810: E92E C8                     RET    Z                    ; carriage return?                                                  ;
0811: E92F FE 0A                  CP     LF                   ;
0812: E931 C8                     RET    Z                    ; line feed?                                                        ;
0813: E932 FE 09                  CP     TAB                  ;
0814: E934 C8                     RET    Z                    ; TAB?                                                              ;
0815: E935 FE 08                  CP     CTRL_H               ;
0816: E937 C8                     RET    Z                    ; backspace?                                                        ;
0817: E938 FE 20                  CP     SPACE                ; Reset Carry if ASCII printable         ;
0818: E93A C9                     RET                         ;
0819: E93B         ;----------- Is the Character ASCII printable, CR,LF,TAB,BACKSPACE ----------;
0820: E93B
0821: E93B         ;------------------ Print character from (BC) until  $ found ----------------;
0822: E93B             Print:                          ;
0823: E93B 0A                     LD     A,(BC)               ; Get the next character             ;
0824: E93C FE 24                  CP     DOLLAR               ; Is it the end ?                    ;
0825: E93E C8                     RET    Z                    ;  exit if yes                       ;
0826: E93F 03                     INC    BC                   ; Update the pointer                 ;
0827: E940 C5                     PUSH   BC                   ; Save it                            ;
0828: E941 4F                     LD     C,A                  ; Does Byte require                  ;
0829: E942 CD 58 E9               CALL   TabOut               ;  special attention - check         ;
0830: E945 C1                     POP    BC                   ; Retrieve the pointer				 ;
0831: E946 18 F3                  JR     Print                ; Loop back                          ;
0832: E948         ;------------------ Print character from (BC) until  $ found ----------------;
0833: E948
0834: E948         ;-- Send printable character to console. Precede with Caret if needed -------;
0835: E948         ; character is in Reg C                                                      ;
0836: E948             CaretOut:                       ;
0837: E948 79                     LD     A,C                  ;
0838: E949 CD 2C E9               CALL   IsPrintableASCII     ;
0839: E94C 30 0A                  JR     NC,TabOut            ; Skip if Caret not needed           ;
0840: E94E         ; send preceding up arrow                                                    ;
0841: E94E F5                     PUSH   AF                   ; Save the character                 ;
0842: E94F 0E 5E                  LD     C,CARET              ;
0843: E951 CD 6B E9               CALL   ConsoleOut           ; Send Caret to Console              ;
0844: E954 F1                     POP    AF                   ; Get the character                  ;
0845: E955 F6 40                  OR     40H                  ; Make the graphic a letter          ;
0846: E957 4F                     LD     C,A                  ; Set up to print                    ;
0847: E958         ; fall thru to TabbOut                                                       ;
0848: E958         ;-- Send printable character to console. Precede with Caret if needed -------;
0849: E958
0850: E958         ;------------- Send printable character to console. Expand if TAB -----------;
0851: E958         ; character is in Reg C                                                      ;
0852: E958             TabOut:                         ;
0853: E958 79                     LD     A,C                  ;
0854: E959 FE 09                  CP     TAB                  ; Is it a TAB                        ;
0855: E95B C2 6B E9               JP     NZ,ConsoleOut        ; Go directly to ConsoleOut if not   ;
0856: E95E         ;
0857: E95E         ; TAB encountered                                                           ;
0858: E95E             TabOut0:                        ;
0859: E95E 0E 20                  LD     C,SPACE              ; Expand TABs with SPACEs            ;
0860: E960 CD 6B E9               CALL   ConsoleOut           ; Send to Console                    ;
0861: E963 3A C1 EA               LD     A,(columnPosition)   ; Get Column position                ;
0862: E966 E6 07                  AND    111b                 ; (ColumnPosition mod 8) = 0 ?       ;
0863: E968 20 F4                  JR     NZ,TabOut0           ; Do again if not                    ;
0864: E96A C9                     RET                         ;
0865: E96B         ;------------- Send printable character to console. Expand if TAB -----------;
0866: E96B
0867: E96B         ;-------------------------- Send character to console -----------------------;
0868: E96B         ; C  = Character to be output                                                ;
0869: E96B             ConsoleOut:                      ;
0870: E96B         ; Look for CNTL_S from keyboard and save it in keyboardByte                  ;
0871: E96B C5                     PUSH   BC                   ; Save character and Count           ;
0872: E96C CD 8C E9               CALL   ConBreak             ; Check for screen stop key stroke   ;
0873: E96F C1                     POP    BC                   ;
0874: E970 C5                     PUSH   BC                   ; Get/save character                 ;
0875: E971         ; Send character to Console	                                                 ;
0876: E971 CD 0C F6               CALL   bcConout             ; Send character to the console      ;
0877: E974 C1                     POP    BC                   ;
0878: E975 C5                     PUSH   BC                   ; Get/save character                 ;
0879: E976         ; is the data to be output to print device?                                  ;
0880: E976 3A BF EA               LD     A,(printEchoFlag)    ;
0881: E979 B7                     OR     A                    ;
0882: E97A C4 0F F6               CALL   NZ,bcList            ; Send it to printer, if so          ;
0883: E97D C1                     POP    BC                   ; Get the character                  ;
0884: E97E         ;
0885: E97E 79                     LD     A,C                  ; Put character to ACC               ;
0886: E97F 21 C1 EA               LD     HL,columnPosition    ; A = char, HL = .columnPosition     ;
0887: E982 34                     INC    M                    ; increment the ColumnPosition       ;
0888: E983         ;
0889: E983 FE 20                  CP     SPACE                ;
0890: E985 D0                     RET    NC                   ; Exit if ASCII printable            ;
0891: E986         ;
0892: E986 FE 0A                  CP     LF                   ;
0893: E988 C0                     RET    NZ                   ; Exit if not a Line Feed            ;
0894: E989         ;
0895: E989 36 00                  LD     (HL),0               ;  else force columnPosition = 0     ;
0896: E98B C9                     RET                         ;
0897: E98C         ;-------------------------- Send character to console -----------------------;
0898: E98C
0899: E98C         ;--------------------  Check for Status and Control S or C ------------------;
0900: E98C         ;  Returns:																	 ;
0901: E98C         ;			ACC = 0FFH if Saved keyboard byte or CNTL_S entered from console ;
0902: E98C         ;			ACC = 00   No data Pending										 ;
0903: E98C         ;			DOES NOT RETURN if CTRL_C is entered from the keyboard           ;
0904: E98C         ;                                                                            ;
0905: E98C             ConBreak:                       ;
0906: E98C 3A BE EA               LD     A,(keyboardByte)     ;
0907: E98F B7                     OR     A                    ; If there is a char waiting         ;
0908: E990 20 2B                  JR     NZ,ConBreak1         ;  return with FF in ACC             ;
0909: E992         ;
0910: E992 CD 06 F6               CALL   bcConst              ; Get status                         ;
0911: E995 FE 00                  CP     00H                  ; If 00 => No data pending	         ;
0912: E997 C8                     RET    Z                    ; Return 00 No data pending          ;
0913: E998         ;
0914: E998 CD 09 F6               CALL   bcConin              ; Read the byte                      ;
0915: E99B         ;
0916: E99B FE 10                  CP     CTRL_P               ;
0917: E99D 20 0D                  JR     NZ,CheckCTL_S        ;
0918: E99F         ;<><><><><><><><><><><><><> Toggle Print Echo Flag<><><><><><><>             ;
0919: E99F 21 BF EA               LD     HL,printEchoFlag     ;
0920: E9A2 3E FF                  LD     A,TRUE               ;
0921: E9A4 BE                     CP     (HL)                 ;
0922: E9A5 20 02                  JR     NZ,ToggleFlag1       ;
0923: E9A7 3E 00                  LD     A,FALSE              ;
0924: E9A9             ToggleFlag1:                      ;
0925: E9A9 77                     LD     (HL),A               ;
0926: E9AA 18 0C                  JR     NothingWaiting       ;
0927: E9AC         ;<><><><><><><><><><><><><> Toggle Print Echo Flag<><><><><><><>             ;
0928: E9AC             CheckCTL_S:                      ;
0929: E9AC FE 13                  CP     CTRL_S               ; If it is not Stop Screen, save     ;
0930: E9AE 20 0A                  JR     NZ,ConBreak0         ;   and and return 0FFH              ;
0931: E9B0         ;
0932: E9B0 CD 09 F6               CALL   bcConin              ; Else Read next byte                ;
0933: E9B3 FE 03                  CP     CTRL_C               ;
0934: E9B5 CA 00 00               JP     Z,WarmBoot           ; do WarmBoot if  CTRL_C             ;
0935: E9B8             NothingWaiting:                      ;
0936: E9B8 AF                     XOR    A                    ;
0937: E9B9 C9                     RET                         ; Set ACC = 0 and return             ;
0938: E9BA             ConBreak0:                      ;
0939: E9BA 32 BE EA               LD     (keyboardByte),A     ; save the byte                      ;
0940: E9BD             ConBreak1:                      ;
0941: E9BD 3E FF                  LD     A,TRUE               ; return with true set in ACC        ;
0942: E9BF C9                     RET                         ;
0943: E9C0         ;--------------------  Check for Status and Control S or C ------------------;
0944: E9C0
0945: E9C0         ;------------------------  Console Output Utilities -------------------------;
0946: E9C0             showHashCRLF:                      ;
0947: E9C0 0E 23                  LD     C,HASH_TAG           ;
0948: E9C2 CD 6B E9               CALL   ConsoleOut           ; Send # to console                  ;
0949: E9C5 CD D6 E9               CALL   showCRLF             ;
0950: E9C8             showHashCRLF1:                      ;
0951: E9C8 3E C1                  LD     A,columnPosition     ;
0952: E9CA 21 C0 EA               LD     HL,startingColumn    ;
0953: E9CD BF                     CP     A,M                  ;
0954: E9CE D0                     RET    NC                   ;
0955: E9CF 0E 20                  LD     C,SPACE              ;
0956: E9D1 CD 6B E9               CALL   ConsoleOut           ;
0957: E9D4 18 F2                  JR     showHashCRLF1        ;
0958: E9D6         ;------------------------  Console Output Utilities -------------------------;
0959: E9D6
0960: E9D6         ;------------------------  Send Carriage Return and Line Feed ---------------;
0961: E9D6             showCRLF:                       ;
0962: E9D6 0E 0D                  LD     C,CR                 ;
0963: E9D8 CD 6B E9               CALL   ConsoleOut           ;
0964: E9DB 0E 0A                  LD     C,LF                 ;
0965: E9DD C3 6B E9               JP     ConsoleOut           ; exit via ConsoleOuts RET           ;
0966: E9E0         ;------------------------  Send Carriage Return and Line Feed ---------------;
0967: E9E0
0968: E9E0         ;------------------------- Read a $ terminated String -----------------------;
0969: E9E0         ;read to paramDE address (max length, current length, buffer)               ;
0970: E9E0             ReadString:                      ;
0971: E9E0 3A C1 EA               LD     A,(columnPosition)   ;
0972: E9E3 32 C0 EA               LD     (startingColumn),A   ; Save start for CTRL_X and CTRL_R   ;
0973: E9E6 2A C3 EA               LD     HL,(paramDE)         ; Get the start of the String        ;
0974: E9E9 4E                     LD     C,(HL)               ; Get Max Count  					 ;
0975: E9EA 23                     INC    HL                   ; Point at actual bytes read         ;
0976: E9EB 06 00                  LD     B,0                  ; Initialize Current Count           ;
0977: E9ED         ;
0978: E9ED         ; B = Current Count                                                      ;
0979: E9ED         ; C = Maximum characters                                                 ;
0980: E9ED         ; HL= Insertion Pointer                                                  ;
0981: E9ED         ;
0982: E9ED         ; read next character, BC, HL active                                        ;
0983: E9ED             ReadNext:                       ;
0984: E9ED C5                     PUSH   BC                   ; Save Current Index and Max Count   ;
0985: E9EE E5                     PUSH   HL                   ; Save pointer                       ;
0986: E9EF             ReadNext0:                      ;
0987: E9EF CD 21 E9               CALL   ConIn                ; Get the next Character             ;
0988: E9F2 E6 7F                  AND    ASCII_MASK           ; Mask parity bit                    ;
0989: E9F4 E1                     POP    HL                   ; Restore Pointer					 ;
0990: E9F5 C1                     POP    BC                   ; Restore Current Index and Max Count;
0991: E9F6         ;Is It Carriage Return                                                       ;
0992: E9F6 FE 0D                  CP     CR                   ;
0993: E9F8 CA 3E EA               JP     Z,EndRead            ; End the read if yes                ;
0994: E9FB FE 0A                  CP     LF                   ;
0995: E9FD         ;Is It Linefeed                                                              ;
0996: E9FD CA 3E EA               JP     Z,EndRead            ; End the read if yes                ;
0997: EA00         ;Is It BackSpace                                                             ;
0998: EA00 FE 08                  CP     CTRL_H               ;
0999: EA02 CA 48 EA               JP     Z,BSspaceBS          ;
1000: EA05             IsItRubout:                      ;
1001: EA05 FE 7F                  CP     RUBOUT               ; Non destructive delete             ;
1002: EA07 CA 52 EA               JP     Z,ItIsRubout         ;
1003: EA0A             IsPhysicalEOL:                      ;
1004: EA0A FE 05                  CP     CTRL_E               ;
1005: EA0C CA 5D EA               JP     Z,ItIsPhysicalEOL    ;
1006: EA0F             IsItPrintToggle:                      ;
1007: EA0F FE 10                  CP     CTRL_P               ;
1008: EA11 CA 65 EA               JP     Z,ItIsPrintToggle    ;
1009: EA14             IsItDeleteTheLineX:                      ;
1010: EA14 FE 18                  CP     CTRL_X               ;
1011: EA16 CA 8E EA               JP     Z,DeleteTheLine      ; If CTRL_X go delete the line       ;
1012: EA19             IsItDeleteTheLineU:                      ;
1013: EA19 FE 15                  CP     CTRL_U               ;
1014: EA1B CA AC EA               JP     Z,IgnoreTheLine      ; If CTRL_U ignore the line          ;
1015: EA1E         ;Retype the line                                                             ;
1016: EA1E FE 12                  CP     CTRL_R               ;
1017: EA20 CA 75 EA               JP     Z,RepeatLine         ;
1018: EA23
1019: EA23         ;....................... Echo input back to the Console  ....................;
1020: EA23         ; Full Duplex								                                 ;
1021: EA23         ; A = Character to display	                                                 ;
1022: EA23         ; B = current char count                                                     ;
1023: EA23         ; C = maximum buffer length                                                  ;
1024: EA23         ; HL= buffer pointer                                                         ;
1025: EA23         ;ReadEcho                                                                    ;
1026: EA23 04                     INC    B                    ; Increment byte count		         ;
1027: EA24 23                     INC    HL                   ; Advance the Pointer                ;
1028: EA25 77                     LD     (HL),A               ; Put char in buffer                 ;
1029: EA26         ;
1030: EA26             ReadEchoRubOut:                      ;
1031: EA26 C5                     PUSH   BC                   ; Save index and length              ;
1032: EA27 E5                     PUSH   HL                   ; Save the Pointer                   ;
1033: EA28 4F                     LD     C,A                  ; Get char                           ;
1034: EA29 CD 48 E9               CALL   CaretOut             ; Output to Console (^ if needed)    ;
1035: EA2C E1                     POP    HL                   ; Restore the Pointer                ;
1036: EA2D C1                     POP    BC                   ; Restore index and length           ;
1037: EA2E 7E                     LD     A,(HL)               ; Recall char                        ;
1038: EA2F         ; check for Warm Boot                                                        ;
1039: EA2F FE 03                  CP     CTRL_C               ;
1040: EA31 78                     LD     A,B                  ; Get Line position                  ;
1041: EA32 C2 3A EA               JP     NZ,AreWeAtEndOfBuffer ; Skip if not CTRL_C                 ;
1042: EA35 FE 01                  CP     1                    ; Beginning of the Line?             ;
1043: EA37 CA 00 00               JP     Z,WarmBoot           ;   if yes do the Boot               ;
1044: EA3A         ; Check to see if we are at the end of the buffer                            ;
1045: EA3A             AreWeAtEndOfBuffer:                      ;
1046: EA3A B9                     CP     C                    ; Over Max ?					     ;
1047: EA3B DA ED E9               JP     C,ReadNext           ;  no, Go for more				     ;
1048: EA3E         ;
1049: EA3E         ; At the end of read                                  					     ;
1050: EA3E             EndRead:                        ;
1051: EA3E         ; 	POP		HL                                                               ;
1052: EA3E 2A C3 EA               LD     HL,(paramDE)         ;
1053: EA41 23                     INC    HL                   ;
1054: EA42         ;
1055: EA42 70                     LD     (HL),B               ; Actual length at Pos 0 of Buffer   ;
1056: EA43 0E 0D                  LD     C,CR                 ;
1057: EA45 C3 6B E9               JP     ConsoleOut           ; Send CR to the Console			 ;
1058: EA48         ;....................... Echo input back to the Console  ....................;
1059: EA48         ;.......................... Backspace SPACE BackSpace .......................;
1060: EA48             BSspaceBS:                      ;
1061: EA48 05                     DEC    B                    ;
1062: EA49 2B                     DEC    HL                   ;
1063: EA4A C5                     PUSH   BC                   ;
1064: EA4B E5                     PUSH   HL                   ;
1065: EA4C CD 9F EA               CALL   BackUp               ;
1066: EA4F C3 EF E9               JP     ReadNext0            ;
1067: EA52         ;.......................... Backspace SPACE BackSpace .......................;
1068: EA52         ;.......................... It is RubOut ....................................;
1069: EA52             ItIsRubout:                      ;
1070: EA52         ; RUBOUT if possible                                                         ;
1071: EA52 78                     LD     A,B                  ; Are we at the start of the line    ;
1072: EA53 B7                     OR     A                    ;
1073: EA54 CA ED E9               JP     Z,ReadNext           ; then ignore and go for next char   ;
1074: EA57         ;adjust pointers back one                                                    ;
1075: EA57 7E                     LD     A,(HL)               ; ACC = current character            ;
1076: EA58 05                     DEC    B                    ; Adjust the index			    	 ;
1077: EA59 2B                     DEC    HL                   ; Adjust the pointer                 ;
1078: EA5A C3 26 EA               JP     ReadEchoRubOut       ; Echo back - Full Duplex            ;
1079: EA5D         ;.......................... It is RubOut ....................................;
1080: EA5D         ;.......................... It is PhysicalEOL ...............................;
1081: EA5D             ItIsPhysicalEOL:                      ;
1082: EA5D C5                     PUSH   BC                   ; Save Current Index and Max Count   ;
1083: EA5E E5                     PUSH   HL                   ; Save pointer                       ;
1084: EA5F CD D6 E9               CALL   showCRLF             ; Make new line                      ;
1085: EA62 C3 EF E9               JP     ReadNext0            ;   and go for next char   			 ;
1086: EA65         ;.......................... It is PhysicalEOL ...............................;
1087: EA65         ;.......................... It is PrintToggle ...............................;
1088: EA65             ItIsPrintToggle:                      ;
1089: EA65 E5                     PUSH   HL                   ; Save pointer                       ;
1090: EA66         ; Toggle the printEcho Flag                                                  ;
1091: EA66 21 BF EA               LD     HL,printEchoFlag     ; Point at the flag                  ;
1092: EA69 3E FF                  LD     A,TRUE               ; Load ACC with TRUE                 ;
1093: EA6B BE                     CP     (HL)                 ; Is the flag true?                  ;
1094: EA6C 20 02                  JR     NZ,IsItPrintToggle1  ; Skip if not                        ;
1095: EA6E 3E 00                  LD     A,FALSE              ;   else. load ACC with FALSE        ;
1096: EA70             IsItPrintToggle1:                      ;
1097: EA70 77                     LD     (HL),A               ; Set the Flags new Value	         ;
1098: EA71 E1                     POP    HL                   ; Restore pointer                    ;
1099: EA72 C3 ED E9               JP     ReadNext             ;   and for another char             ;
1100: EA75         ;.......................... It is PrintToggle ...............................;
1101: EA75         ;.......................... RepeatLine ......................................;
1102: EA75             RepeatLine:                      ;
1103: EA75 C5                     PUSH   BC                   ; Save Current Index and Max Count   ;
1104: EA76 E5                     PUSH   HL                   ;  for exit                          ;
1105: EA77 CD C0 E9               CALL   showHashCRLF         ; Display Hash, new Line			 ;
1106: EA7A         ;
1107: EA7A 2A C3 EA               LD     HL,(paramDE)         ; Get start of Buffer                ;
1108: EA7D 23                     INC    HL                   ; Skip past character count          ;
1109: EA7E         ;
1110: EA7E             LL1:                            ;
1111: EA7E 23                     INC    HL                   ; Point at next char to display      ;
1112: EA7F C5                     PUSH   BC                   ; Save counter, in B                 ;
1113: EA80 E5                     PUSH   HL                   ; Save buffer pointer                ;
1114: EA81 4E                     LD     C,M                  ; Get the next character             ;
1115: EA82 CD 48 E9               CALL   CaretOut             ; Display it                         ;
1116: EA85 E1                     POP    HL                   ; Restore                            ;
1117: EA86 C1                     POP    BC                   ;  the counter and pointer           ;
1118: EA87 10 F5                  DJNZ   LL1                  ; loop if still more to show         ;
1119: EA89 E1                     POP    HL                   ; Restore values                     ;
1120: EA8A C1                     POP    BC                   ;  from routine entry                ;
1121: EA8B C3 ED E9               JP     ReadNext             ; Done here !                        ;
1122: EA8E         ;.......................... RepeatLine ......................................;
1123: EA8E         ;.......................... Delete The Line .................................;
1124: EA8E             DeleteTheLine:                      ;
1125: EA8E E1                     POP    HL                   ; Adjust Stack                       ;
1126: EA8F         ;                                             ;
1127: EA8F             DeleteTheLine1:                      ;
1128: EA8F 3A C0 EA               LD     A,(startingColumn)   ;
1129: EA92 21 C1 EA               LD     HL,columnPosition    ;
1130: EA95 BE                     CP     M                    ; Start of line ?                    ;
1131: EA96 D2 E0 E9               JP     NC,ReadString        ;  If yes get out and go for more    ;
1132: EA99 35                     DEC    M                    ; Adjust the ColumnPosition          ;
1133: EA9A CD 9F EA               CALL   BackUp               ; Clear 1 column                     ;
1134: EA9D 18 F0                  JR     DeleteTheLine1       ; Loop for more                      ;
1135: EA9F         ;.......................... Delete The Line .................................;
1136: EA9F         ;------------------------ Back-up one screen position -----------------------;
1137: EA9F             BackUp:                         ;
1138: EA9F CD A7 EA               CALL   BackUp1              ; Send Backspace                     ;
1139: EAA2 0E 20                  LD     C,SPACE              ; Overwrite with SPACE               ;
1140: EAA4 CD 0C F6               CALL   bcConout             ; Overwrite with SPACE				 ;
1141: EAA7         ;does not affect column count                                                ;
1142: EAA7             BackUp1:                        ;
1143: EAA7 0E 08                  LD     C,CTRL_H             ;
1144: EAA9 C3 0C F6               JP     bcConout             ; Send Backspace                     ;
1145: EAAC         ;------------------------ Back-up one screen position -----------------------;
1146: EAAC         ;.......................... Ignore The Line .................................;
1147: EAAC             IgnoreTheLine:                      ;
1148: EAAC CD C0 E9               CALL   showHashCRLF         ; Display Hash, new Line			 ;
1149: EAAF 0E 20                  LD     C,SPACE              ; We want to add a few spaces        ;
1150: EAB1 CD 0C F6               CALL   bcConout             ;  to the console                    ;
1151: EAB4 0E 20                  LD     C,SPACE              ;
1152: EAB6 CD 0C F6               CALL   bcConout             ;
1153: EAB9 C3 E0 E9               JP     ReadString           ; Start all over                     ;
1154: EABC         ;.......................... Ignore The Line .................................;
1155: EABC
1156: EABC         ;------------------------- Read a $ terminated String -----------------------;
1157: EABC
1158: EABC         ;****************************************************************************
1159: EABC         ;                           DATA AREA                                       *
1160: EABC         ;****************************************************************************
1161: EABC
1162: EABC         ;------------------------------Non Disk Data Area ---------------------------;
1163: EABC             usersStack: DS     2                    ; entry stack pointer                ;
1164: EABE         ;
1165: EABE 00          keyboardByte: DB     00                   ; Saved keyboard character           ;
1166: EABF         ;
1167: EABF 00          printEchoFlag: DB     00                   ; Controlled by ^P                   ;
1168: EAC0         ;
1169: EAC0         ; FunctionValue:DB	00H					; Reg C on BDOS Entry                ;
1170: EAC0 00          startingColumn: DB     0                    ; Starting col pos after read        ;
1171: EAC1 00          columnPosition: DB     0                    ; Current Column position            ;
1172: EAC2         ;
1173: EAC2             paramE:    DS     BYTE                 ; Byte Argument for BDOS Call        ;
1174: EAC3             paramDE:   DS     WORD                 ; Word Argument for BDOS Call	     ;
1175: EAC5             exitParameterByte:                      ; Byte returned Value                ;
1176: EAC5             exitParameterWord: DS     WORD                 ; Word                           ;
1177: EAC7         ;
1178: EAC7         ;
1179: EAC7         ;------------------------------------ Data Area -----------------------------;
1180: EAC7
1181: EAC7
1182: EAC7
1183: EAC7         ;****************************************************************************;
1184: EAC7         ;								Disk I/O									 ;
1185: EAC7         ;****************************************************************************;
1186: EAC7
1187: EAC7         ;---------------------------- Reset Disk System - D (13) --------------------;
1188: EAC7         ;  This function requests CP/M to completely reset the disk file system.     ;
1189: EAC7         ; CP/M then resets its internal tables, selects logical disk A as the        ;
1190: EAC7         ; default disk, resets the DMAaddress back to 0080H (the address of the      ;
1191: EAC7         ; buffer used by the BDOS to read and write to the disk), and marks all      ;
1192: EAC7         ; logical disks as having Read/Write status. The BDOS will then have to log  ;
1193: EAC7         ; in each logical disk as each disk is accessed. This involves reading the   ;
1194: EAC7         ; entire file directory for the disk and rebuilding the allocation vectors   ;
1195: EAC7         ; which keep track of which allocation blocks are free and which             ;
1196: EAC7         ; are used for file storage.                                                 ;
1197: EAC7         ;                                                                            ;
1198: EAC7         ;			Function Code	:	C = 0DH                                      ;
1199: EAC7         ;			Entry Parameters:	None										 ;
1200: EAC7         ;			Exit Parameters :	None										 ;
1201: EAC7         ;																			 ;
1202: EAC7         ;---------------------------- Reset Disk System - D (13) --------------------;
1203: EAC7             vResetSystem:
1204: EAC7 21 00 00               LD     HL,0
1205: EACA 22 68 F5               LD     (readOnlyVector),HL  ; Clear the vectors for
1206: EACD 22 6A F5               LD     (loggedDisks),HL     ;   R/O and Logged Disks
1207: EAD0 AF                     XOR    A                    ; Clear the current disk
1208: EAD1 32 66 F5               LD     (currentDisk),A
1209: EAD4         ; note that currentUserNumber remains unchanged
1210: EAD4 21 80 00               LD     HL,DMABuffer
1211: EAD7 22 6C F5               LD     (initDAMAddress),HL  ; initDAMAddress = DMABuffer
1212: EADA CD 8D EE               CALL   SetDataDMA           ; to data DMA address
1213: EADD C3 BF EC               JP     Select
1214: EAE0         ;---------------------------- Select Disk - E (14) -------------------------;
1215: EAE0         ;  This function makes the logical disk named in register E the default disk;
1216: EAE0         ; All subsequent references to disk files that do not specify the disk will ;
1217: EAE0         ; use this default. When you reference a disk file that does have an        ;
1218: EAE0         ; explicit logical disk in its name you do not have to issue another        ;
1219: EAE0         ; Select Disk function; the BDOS will take care of that for you.            ;
1220: EAE0         ;                                                                           ;
1221: EAE0         ;  Notice the way in which the logical disk is specified in register E.     ;
1222: EAE0         ; It is not the same as the disk drive specification in the first byte of   ;
1223: EAE0         ; the file control block. In the FeB, a value ofOOH is used to mean         ;
1224: EAE0         ; "use the current default disk" (as specified in the last Select Disk      ;
1225: EAE0         ; call or by the operator on the console). With this function, a value      ;
1226: EAE0         ; of OOH in register A means that A is the selected drive, a value of       ;
1227: EAE0         ; 01H means drive B, and so on to OFR for drive P, allowing                 ;
1228: EAE0         ; 16 drives in the system.                                                  ;
1229: EAE0         ;                                                                           ;
1230: EAE0         ;			Function Code	:	C = 0EH                                     ;
1231: EAE0         ;			Entry Parameters:	E = Logical Disk Code (00H = A,01H = B ..)	;
1232: EAE0         ;			Exit Parameters :	None										;
1233: EAE0         ;																			;
1234: EAE0         ;---------------------------- Select Disk - E (14) -------------------------;
1235: EAE0
1236: EAE0             vSelectDisk:
1237: EAE0 C3 B3 EC               JP     SelectCurrent
1238: EAE3
1239: EAE3         ;---------------------------- Open File - F (15) ---------------------------;
1240: EAE3         ;  This function opens a specified file for reading or writing. The FCB,    ;
1241: EAE3         ; whose address must be in register DE, tells CP/M the user number,         ;
1242: EAE3         ; the logical disk, the file name, and the file type. All other bytes of    ;
1243: EAE3         ; the FCB will normally be set to O.                                        ;
1244: EAE3         ;  The code returned by the BDOS in register A indicates whether the file   ;
1245: EAE3         ; has been opened successfully. If A contains OFFH, then the BOOS was       ;
1246: EAE3         ; unable to find the correct entry in the directory. If A= 0,1,2, or 3,     ;
1247: EAE3         ; then the file has been opened.                                            ;
1248: EAE3         ;			Function Code	:	C  = 0FH                                    ;
1249: EAE3         ;			Entry Parameters:	DE = Address of File Control Block			;
1250: EAE3         ;			Exit Parameters :	A  = Directory Code							;
1251: EAE3         ;																			;
1252: EAE3         ;---------------------------- Open File - F (15) ---------------------------;
1253: EAE3             vOpenFile:
1254: EAE3 CD 45 EF               CALL   InitializeExtentNumberMSB ; Clear the Extent number
1255: EAE6 CD C6 EE               CALL   ReselectDisk         ; do we need to reselect disk?
1256: EAE9 C3 96 ED               JP     OpenFile
1257: EAEC
1258: EAEC         ;---------------------------- Close File - 10 (16) -------------------------;
1259: EAEC         ;  This function terminates the processing of a file to which you have      ;
1260: EAEC         ; written information. Under CP/M you do not need to close a file that you  ;
1261: EAEC         ; have been reading. However, if you ever intend for your program to        ;
1262: EAEC         ; function correctly under MP/M (the multi-user version of CP/M) you        ;
1263: EAEC         ; should close all files regardless of their use.                           ;
1264: EAEC         ;  The Close File function, like Open File, returns a directory code in     ;
1265: EAEC         ; the A register. Register A will contain OFFH if the BOOS could not        ;
1266: EAEC         ; close the file successfully. If A is 0, 1, 2, or 3, then the file has     ;
1267: EAEC         ; been closed.                                                              ;
1268: EAEC         ;                                                                           ;
1269: EAEC         ;  When the BDOS closes a file to which data has been written, it writes    ;
1270: EAEC         ; the current contents of the FCB out to the disk directory, updating       ;
1271: EAEC         ; an existing directory entry by matching the disk, name, type, and         ;
1272: EAEC         ; extent number in the same manner that the Open File function does.        ;
1273: EAEC         ; Note that the BDOS does not transfer the last record of the file to the   ;
1274: EAEC         ; disk during the close operation. It merely updates the file directory.    ;
1275: EAEC         ; You must arrange to flush any partly filled record to the disk. If the    ;
1276: EAEC         ; file that you have created is a standard CP/M ASCII text file, you must   ;
1277: EAEC         ; arrange to fill the unused portion of the record with the standard lAH    ;
1278: EAEC         ; end-of-file characters as CP/M expects.                                   ;
1279: EAEC         ;                                                                           ;
1280: EAEC         ;			Function Code	:	C  = 10FH                                   ;
1281: EAEC         ;			Entry Parameters:	DE = Address of File Control Block			;
1282: EAEC         ;			Exit Parameters :	A  = Directory Code							;
1283: EAEC         ;																			;
1284: EAEC         ;---------------------------- Close File - 10 (16) -------------------------;
1285: EAEC             vCloseFile:
1286: EAEC CD C6 EE               CALL   ReselectDisk
1287: EAEF C3 D9 ED               JP     CloseDirEntry
1288: EAF2         ;---------------------Search for First Name Match - 11 (17) ----------------;
1289: EAF2         ;  This function scans down the file directory for the first entry that     ;
1290: EAF2         ; matches the file name, type, and extent in the FCB addressed by DE.       ;
1291: EAF2         ; The file name, type, and extent may contain a "?" (ASCII 3FH) in one or   ;
1292: EAF2         ; more character positions. Where a "?" occurs, the BDOS will match any     ;
1293: EAF2         ; character in the corresponding position in the file directory. This is    ;
1294: EAF2         ; known as ambiguous file name matching.                                    ;
1295: EAF2         ;  The first byte of an FCB normally contains the logical disk number code. ;
1296: EAF2         ; A value of 0 indicates the default disk, while 1 means disk A, 2 is B,    ;
1297: EAF2         ; and so on up to a possible maximum of 16 for disk P. However, if this     ;
1298: EAF2         ; byte contains a "?", the BDOS will search the default logical disk and    ;
1299: EAF2         ; will match the file name and type regardless of the user number. This     ;
1300: EAF2         ; function is normally used in conjunction with the Search Next function.   ;
1301: EAF2         ; Search First, in the process of matching a file, leaves certain           ;
1302: EAF2         ; variables in the BDOS set, ready for a subsequent Search Next.            ;
1303: EAF2         ;  Both Search First and Search Next return a directory code in the         ;
1304: EAF2         ; A register. With Search First, A = OFFH when no files match the FCB,      ;
1305: EAF2         ; if a file match is found, A will have a value of 0, I, 2, or 3.           ;
1306: EAF2         ;                                                                           ;
1307: EAF2         ;  To locate the particular directory entry that either the Search First    ;
1308: EAF2         ; or Search Next function matched, multiply the directory code returned     ;
1309: EAF2         ; in A by the length of a directory entry (32 bytes). This is easily done   ;
1310: EAF2         ; by adding the A register to itself five times. Then add the DMA address   ;
1311: EAF2         ; to get the actual address where the matched directory entry is stored.    ;
1312: EAF2         ;  There are many occasions when you may need to write a program that will  ;
1313: EAF2         ; accept an ambiguous file name and operate on all of the file names that   ;
1314: EAF2         ; match it. (The DIR and ERA commands built into the CCP are examples that  ;
1315: EAF2         ; use ambiguous file names.) To do this, you must use several BDOS          ;
1316: EAF2         ; functions: the Set DMA Address function (code 26), this function          ;
1317: EAF2         ; (Search First), and Search Next (code 18). All of this is shown in the    ;
1318: EAF2         ; subroutine given in Figure 5-17.                                          ;
1319: EAF2         ;                                                                           ;
1320: EAF2         ;                                                                           ;
1321: EAF2         ;			Function Code	:	C  = 11FH                                   ;
1322: EAF2         ;			Entry Parameters:	DE = Address of File Control Block			;
1323: EAF2         ;			Exit Parameters :	A  = Directory Code							;
1324: EAF2         ;																			;
1325: EAF2         ;---------------------Search for First Name Match - 11 (17) ----------------;
1326: EAF2             vFindFirst:
1327: EAF2 0E 00                  LD     C,0                  ; Length assuming '?' true
1328: EAF4 2A C3 EA               LD     HL,(paramDE)         ; Get the FCB
1329: EAF7 7E                     LD     A,(HL)               ; DIsk/User No
1330: EAF8 FE 3F                  CP     QMARK                ; Does it contain '?' ?
1331: EAFA CA 05 EB               JP     Z,QMarkFind          ;  if Yes, skip disk reselect
1332: EAFD         ;  and reset of EXT
1333: EAFD
1334: EAFD CD 45 EF               CALL   InitializeExtentNumberMSB ; Set Ext to 0
1335: EB00 CD C6 EE               CALL   ReselectDisk         ; Use FCB to set currentDisk
1336: EB03 0E 0F                  LD     C,nameLength         ; Match name,type and extent
1337: EB05
1338: EB05             QMarkFind:
1339: EB05 CD 71 EF               CALL   SearchForDirectoryRecord ; Find the directory record
1340: EB08 C3 DC F0               JP     CopyDirEntryToUserDMA ; Move it to the User's buffer
1341: EB0B
1342: EB0B         ;---------------------Search for Next Name Match - 12 (18) -----------------;
1343: EB0B         ;	This function searches down the file directory for the next file name,  ;
1344: EB0B         ; type, and extent that match the FCB specified in a previous Search First  ;
1345: EB0B         ; function call. Search First and Search Next are the only BDOS functions   ;
1346: EB0B         ; that must be used together. As you can see, the Search Next function      ;
1347: EB0B         ; does not require an FCB address as an input parameter-all the necessary   ;
1348: EB0B         ; information will have been left in the BDOS on the Search First call.     ;
1349: EB0B         ; Like Search First, Search Next returns a directory code in the A register,;
1350: EB0B         ; in this case, if A = OFFH, it means that there are no more files that     ;
1351: EB0B         ; match the file control block. If A is not OFFH, it will be a value of     ;
1352: EB0B         ; 0, 1, 2, or 3, indicating the relative directory entry number.            ;
1353: EB0B         ;                                                                           ;
1354: EB0B         ;  There are two ways of using the Search First/ Next calls. Consider a     ;
1355: EB0B         ; simple file copying program that takes as input an ambiguous file name.   ;
1356: EB0B         ; You could scan the file directory, matching all of the possible file      ;
1357: EB0B         ; names, possibly displaying them on the console, and storing the names of  ;
1358: EB0B         ; the files to be copied in a table inside your program. This would have    ;
1359: EB0B         ; the advantage of enabling you to present the file names to the operator   ;
1360: EB0B         ; before any copying occurred. You could even arrange for the operator to   ;
1361: EB0B         ; select which files to copy on a file-by-file basis. One disadvantage      ;
1362: EB0B         ; would be that you could not accurately predict how many files might be    ;
1363: EB0B         ; selected. On some hard disk systems you might have to accommodate several ;
1364: EB0B         ; thousand file names.                                                      ;
1365: EB0B         ;  The alternative way of handling the problem would be to match one file   ;
1366: EB0B         ; name, copy it, then match the next file name, copy it, and so on. If you  ;
1367: EB0B         ; gave the operator the choice of selecting which files to copy, this person;
1368: EB0B         ; would have to wait at the terminal as each file was being copied, but the ;
1369: EB0B         ; program would not need to have large table areas set aside to hold file   ;
1370: EB0B         ; names. This solution to the problem is slightly more complicated, as you  ;
1371: EB0B         ; can see from the logic in Figure 5-17.                                    ;
1372: EB0B         ;  The subroutine in Figure 5-17, Get Next File (GNF), contains all of the  ;
1373: EB0B         ; necessary logic to search down a directory for both alternatives described;
1374: EB0B         ; It does require that you indicate on entry whether it should search for   ;
1375: EB0B         ; the first or next file match, by setting A to zero or some nonzero value  ;
1376: EB0B         ; respectively.                                                             ;
1377: EB0B         ;  You can see from Figure 5-17 that whenever the subroutine is called to   ;
1378: EB0B         ; get the next file, you must execute a Search First function to re-find    ;
1379: EB0B         ; the  previous file. Only then can a Search Next be issued. As with all    ;
1380: EB0B         ; functions that return a directory code in A, if this value is not OFFH, it;
1381: EB0B         ; will be the relative directory entry number in the directory record       ;
1382: EB0B         ; currently in memory. This directory record will have been read into memory;
1383: EB0B         ; at whatever address was specified at the last Set DMA Address function    ;
1384: EB0B         ; call. Notwithstanding its odd name, the DMA Address is simply the address ;
1385: EB0B         ; into which any record input from disk will be placed. If the Set DMA      ;
1386: EB0B         ; Address function has not been used to change the value, then the CP/M     ;
1387: EB0B         ; default DMA address, location 0080H, will be used to hold the directory   ;
1388: EB0B         ; record.                                                                   ;
1389: EB0B         ;  The actual code for locating the address of the particular directory     ;
1390: EB0B         ;  entry matched by the Search First/ Next functions is shown in Figure 5-17;
1391: EB0B         ;  near the label GNFC. The method involves multiplying the directory code  ;
1392: EB0B         ;  by 32 and then adding this product to the current DMA address.	        ;
1393: EB0B         ;                                                                           ;
1394: EB0B         ;                                                                           ;
1395: EB0B         ;			Function Code	:	C  = 12FH                                   ;
1396: EB0B         ;			Entry Parameters:	None , Assume previous Search First Call	;
1397: EB0B         ;			Exit Parameters :	A  = Directory Code							;
1398: EB0B         ;																			;
1399: EB0B         ;---------------------Search for Next Name Match - 12 (18) -----------------;
1400: EB0B             vFindNext:
1401: EB0B 2A 93 F5               LD     HL,(searchAddress)   ; Get Current Dir Entry
1402: EB0E 22 C3 EA               LD     (paramDE),HL         ; Get the user's FCB
1403: EB11 CD C6 EE               CALL   ReselectDisk         ; Reselect if needed
1404: EB14 CD 86 EF               CALL   GetNextDirectoryRecord ; Go find the next directory record
1405: EB17 C3 DC F0               JP     CopyDirEntryToUserDMA ; Copy directory entry to user
1406: EB1A
1407: EB1A         ;--------------------------------Delete File - 13 (19) ---------------------;
1408: EB1A         ; This function logically deletes from the file directory files that match  ;
1409: EB1A         ; the FCB addressed by DE. It does so by replacing the first byte of each   ;
1410: EB1A         ; relevant directory entry (remember, a single file can have several        ;
1411: EB1A         ; entries, one for each extent) by the value OE5H. This flags the directory ;
1412: EB1A         ; entry as being available for use.                                         ;
1413: EB1A         ;                                                                           ;
1414: EB1A         ;  Like the previous two functions, Search First and Search Next, this      ;
1415: EB1A         ; function can take an ambiguous file name and type as part of the          ;
1416: EB1A         ; File Control Block, but unlike those functions, the logical disk select   ;
1417: EB1A         ; code cannot be a"?". This function returns a directory code in A in the   ;
1418: EB1A         ; same way as the previous file operations.                                 ;
1419: EB1A         ;                                                                           ;
1420: EB1A         ;                                                                           ;
1421: EB1A         ;			Function Code	:	C  = 13FH                                   ;
1422: EB1A         ;			Entry Parameters:	DE = Address of File Control Block			;
1423: EB1A         ;			Exit Parameters :	A  = Directory Code							;
1424: EB1A         ;																			;
1425: EB1A         ;--------------------------------Delete File - 13 (19) ---------------------;
1426: EB1A             vDeleteFile:
1427: EB1A CD C6 EE               CALL   ReselectDisk         ; Reselect if needed
1428: EB1D CD 23 EB               CALL   DeleteFile
1429: EB20 C3 E9 F0               JP     DirLocationToReturnLoc ; Return directory Index to caller
1430: EB23
1431: EB23             DeleteFile:
1432: EB23 CD F0 F0               CALL   CheckWrite           ; Terminate with error if Disk R/O
1433: EB26 0E 0C                  LD     C,fcbExtIndex        ; Load the extent number field
1434: EB28 CD 71 EF               CALL   SearchForDirectoryRecord ; Look for directory entry
1435: EB2B
1436: EB2B             DeleteFileLoop:
1437: EB2B CD 0D F0               CALL   AtEndOfDirectory     ; Have we worked thru all entries
1438: EB2E C8                     RET    Z                    ;  exit if we have
1439: EB2F         ; set each non zero disk map entry to 0 in the allocation vector
1440: EB2F CD F7 F0               CALL   CheckRODirectory     ; Terminate with error if File R/O
1441: EB32 CD 16 F0               CALL   GetCurrentDirectoryRecord ; Point to Directory Entry
1442: EB35 36 E5                  LD     (HL),emptyDir        ; Mark as Empty
1443: EB37 0E 00                  LD     C,FALSE              ; Set flag for remove
1444: EB39 CD 3A F0               CALL   ScanDiskMap          ; Reclaim Bisk Blocks, set to 0
1445: EB3C CD EE EF               CALL   WriteDir             ; Update the directory
1446: EB3F CD 86 EF               CALL   GetNextDirectoryRecord ; Look for more
1447: EB42 C3 2B EB               JP     DeleteFileLoop       ; Loop
1448: EB45         ;-----------------------------------------------------------------
1449: EB45
1450: EB45         ;------
1451: EB45
1452: EB45         ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1453: EB45         ;---------------------------- Get Active Disks - 18 (24) --------------------;
1454: EB45         ; This function returns a bit map, called the login vector, in register pair ;
1455: EB45         ; HL, indicating which logical disk drives have been selected since the last ;
1456: EB45         ; warm boot or Reset Disk function (code 13, ODH). The least significant bit ;
1457: EB45         ; of L corresponds to disk A, while the highest order bit in H maps disk P.  ;
1458: EB45         ; The bit corresponding to the specific logical disk is set to 1 if the      ;
1459: EB45         ; disk has been selected or to 0 if the disk is not currently on-line.       ;
1460: EB45         ;  Logical disks can be selected programmatically through any file operation ;
1461: EB45         ; that sets the drive field to a nonzero value, through the Select Disk      ;
1462: EB45         ; function (code 14, OEH), or by the operator entering an "X:" command       ;
1463: EB45         ; where "X" is equal to A, B, ... , P.                                       ;
1464: EB45         ;                                                                            ;
1465: EB45         ;			Function Code	:	C = 018H                                     ;
1466: EB45         ;			Entry Parameters:	None										 ;
1467: EB45         ;			Exit Parameters :	HL = Active disk map (login vector)			 ;
1468: EB45         ;																			 ;
1469: EB45         ;---------------------------- Get Active Disks - 18 (24) --------------------;
1470: EB45             vGetLoginVector:
1471: EB45 2A 6A F5               LD     HL,(loggedDisks)
1472: EB48 22 C5 EA               LD     (exitParameterWord),HL
1473: EB4B C9                     RET
1474: EB4C         ;---------------------------- Get Current Disk- 19 (25) ---------------------;
1475: EB4C         ;   This function returns the current default disk set by the last Select    ;
1476: EB4C         ; Disk function call (code 14, OEH) or by the operator entering the          ;
1477: EB4C         ; "X:"command (where "X" is A, B, ..., P) to the CCP.                        ;
1478: EB4C         ;                                                                            ;
1479: EB4C         ;  This function returns the current default disk in coded form.             ;
1480: EB4C         ; Register A= 0 if drive A is the current drive, I if drive B, and so on.    ;
1481: EB4C         ; If you need to convert this to the corresponding ASCII character, simply   ;
1482: EB4C         ; add 41H to register A. Use this function when you convert a file name and  ;
1483: EB4C         ; type in an FCB to an ASCII string in order to display it. If the first     ;
1484: EB4C         ; byte of the FCB is OOH, the current default drive is to be used.           ;
1485: EB4C         ; You must therefore use this function to determine the logical disk letter  ;
1486: EB4C         ; for the default drive.                                                     ;
1487: EB4C         ;                                                                            ;
1488: EB4C         ;			Function Code	:	C = 019H                                     ;
1489: EB4C         ;			Entry Parameters:	None										 ;
1490: EB4C         ;			Exit Parameters :	A = Current Disk (0=A,1=B...,F=P)			 ;
1491: EB4C         ;																			 ;
1492: EB4C         ;---------------------------- Get Current Disk- 19 (25) ---------------------;
1493: EB4C             vGetCurrentDisk:
1494: EB4C 3A 66 F5               LD     A,(currentDisk)
1495: EB4F 32 C5 EA               LD     (exitParameterByte),A
1496: EB52 C9                     RET
1497: EB53         ;---------------------------- Set DMA Address - 1A (26) ---------------------;
1498: EB53         ;  This function sets the BDOS's direct memory access (DMA) address to a new ;
1499: EB53         ; value. The name is an historic relic dating back to the Intel Development  ;
1500: EB53         ; System on which CP/M was originally developed. This machine, by virtue of  ;
1501: EB53         ; its hardware, could read data from a diskette directly into memory or      ;
1502: EB53         ; write data to a diskette directly from memory. The name DMA address now    ;
1503: EB53         ; applies to the address of the buffer to and from which data is             ;
1504: EB53         ; transferred whenever a diskette Read, Write, or directory operation is     ;
1505: EB53         ; performed. Whenever CP/M first starts up (cold boot) m a warm boot or      ;
1506: EB53         ; Reset Disk operation occurs, the DMA address is reset to its default       ;
1507: EB53         ; value of 0080H.                                                            ;
1508: EB53         ;                                                                            ;
1509: EB53         ;			Function Code	:	C = 0A9H                                     ;
1510: EB53         ;			Entry Parameters:	DE = DMA Address							 ;
1511: EB53         ;			Exit Parameters :	None										 ;
1512: EB53         ;																			 ;
1513: EB53         ;---------------------------- Set DMA Address - 1A (26) ---------------------;
1514: EB53             vSetDMA:
1515: EB53 2A C3 EA               LD     HL,(paramDE)
1516: EB56 22 6C F5               LD     (initDAMAddress),HL
1517: EB59 C3 8D EE               JP     SetDataDMA
1518: EB5C
1519: EB5C         ;---------------------------- Get Allocation Vector - 1B (27) ---------------;
1520: EB5C         ;  This function returns the base, or starting, address of the allocation    ;
1521: EB5C         ; vector for the currently selected logical disk. This information,          ;
1522: EB5C         ; indicating which parts of the disk are assigned, is used by utility        ;
1523: EB5C         ; programs and the BDOS itself to determine how much unused space is on the  ;
1524: EB5C         ; logical disk, to locate an unused allocation block in order to extend      ;
1525: EB5C         ; a file, or to relinquish an allocation block when a file is deleted.       ;
1526: EB5C         ;                                                                            ;
1527: EB5C         ;			Function Code	:	C = 01BH                                     ;
1528: EB5C         ;			Entry Parameters:	None										 ;
1529: EB5C         ;			Exit Parameters :	HL = Address of allocation vector			 ;
1530: EB5C         ;																			 ;
1531: EB5C         ;---------------------------- Get Allocation Vector - 1B (27) ---------------;
1532: EB5C             vGetAllocAddr:
1533: EB5C 2A 7A F5               LD     HL,(caAllocVector)
1534: EB5F 22 C5 EA               LD     (exitParameterWord),HL
1535: EB62 C9                     RET
1536: EB63
1537: EB63         ;---------------------------- Write Protect Disk - 1C (28) ------------------;
1538: EB63         ;  This function logically sets the currently selected disk to a Read-Only   ;
1539: EB63         ; state. Any attempts to execute a Write Sequential or Write Random function ;
1540: EB63         ; to the selected disk will be intercepted by the BDOS, and the following    ;
1541: EB63         ; message will appear on the console:                                        ;
1542: EB63         ;	BDOS Err on X: R/O                                                       ;
1543: EB63         ;	where X: is the selected disk.                                           ;
1544: EB63         ;                                                                            ;
1545: EB63         ;  Once you have requested Read-Only status for the currently selected       ;
1546: EB63         ; logical disk, this status will persist even if you proceed to select       ;
1547: EB63         ; other logical disks. In fact, it will remain in force until the next warm  ;
1548: EB63         ; boot or Reset Disk System function call.                                   ;
1549: EB63         ;  Digital Research documentation refers to this function code as Disk Write ;
1550: EB63         ; Protect. The Read-Only description is used here because it corresponds     ;
1551: EB63         ; to the error message produced if your program attempts to write on         ;
1552: EB63         ; the disk.                                                                  ;
1553: EB63         ;                                                                            ;
1554: EB63         ;			Function Code	:	C = 01CH                                     ;
1555: EB63         ;			Entry Parameters:	None										 ;
1556: EB63         ;			Exit Parameters :	None										 ;
1557: EB63         ;																			 ;
1558: EB63         ;---------------------------- Write Protect Disk - 1C (28) ------------------;
1559: EB63         ;;write protect current disk
1560: EB63             vWriteProtectDisk:
1561: EB63 C3 A3 EE               JP     SetDiskReadOnly
1562: EB66
1563: EB66         ;---------------------------- Get Read-Only Map - 1D (29) -------------------;
1564: EB66         ;  This function returns a bit map in registers H and L showing which logical;
1565: EB66         ; disks in the system have been set to Read-Only status, either by the       ;
1566: EB66         ; Set Logical Disk to Read-Only function call (code 28, ICH), or by the      ;
1567: EB66         ; BDOS itself, because it detected that a diskette had been changed.         ;
1568: EB66         ;  The least significant bit of L corresponds to logical disk A, while the   ;
1569: EB66         ; most significant bit of H corresponds to disk P. The bit corresponding to  ;
1570: EB66         ; the specific logical disk is set to I if the disk has been set to          ;
1571: EB66         ; Read-Only status.                                                          ;
1572: EB66         ;                                                                            ;
1573: EB66         ;			Function Code	:	C = 01DH                                     ;
1574: EB66         ;			Entry Parameters:	None										 ;
1575: EB66         ;			Exit Parameters :	HL = Read-Only Vector						 ;
1576: EB66         ;																			 ;
1577: EB66         ;---------------------------- Get Read-Only Map - 1D (29) -------------------;
1578: EB66             vGetReadOnlyMap:
1579: EB66 2A 68 F5               LD     HL,(readOnlyVector)
1580: EB69 22 C5 EA               LD     (exitParameterWord),HL
1581: EB6C C9                     RET
1582: EB6D
1583: EB6D         ;------------------ Get Disk Parameter Block Address - 1F (31) --------------;
1584: EB6D         ;  This function returns the address of the disk parameter block (DPB) for   ;
1585: EB6D         ; the last selected logical disk. The DPB describes the physical             ;
1586: EB6D         ; characteristics of a specific logical disk-information mainly of interest  ;
1587: EB6D         ; for system utility programs.                                               ;
1588: EB6D         ;                                                                            ;
1589: EB6D         ;			Function Code	:	C = 1FH                                      ;
1590: EB6D         ;			Entry Parameters:	None										 ;
1591: EB6D         ;			Exit Parameters :	HL = Address of Disk Parameter Block		 ;
1592: EB6D         ;																			 ;
1593: EB6D         ;------------------ Get Disk Parameter Block Address - 1F (31) --------------;
1594: EB6D             vGetDiskParamBlock:                      ; func31 (31 - 1F)
1595: EB6D 2A 76 F5               LD     HL,(caDiskParamBlock)
1596: EB70 22 C5 EA               LD     (exitParameterWord),HL
1597: EB73 C9                     RET
1598: EB74
1599: EB74         ;---------------------------- XXXXX YYYY ZZZZZZ - x (nn) --------------------;
1600: EB74         ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1601: EB74         ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1602: EB74         ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1603: EB74
1604: EB74         ;------------------------ Reset Logical Disk Drive - 25 (37) ----------------;
1605: EB74         ;  This function resets individual disk drives. It is a more precise version ;
1606: EB74         ; of the Reset Disk System function (code 13,ODH), in that you can set       ;
1607: EB74         ; specific logical; disks rather than all of them.                           ;
1608: EB74         ;  The bit map in DE shows which disks are to be reset. The least significant;
1609: EB74         ; bit of; E represents disk A, and the most significant bit of D, disk P.    ;
1610: EB74         ; The bits set to I indicate the disks to be reset.                          ;
1611: EB74         ;  Note that this function returns a zero value in A in order to maintain    ;
1612: EB74         ; compatibility with MP/ M.                                                  ;
1613: EB74         ;                                                                            ;
1614: EB74         ;			Function Code	:	C = 25H                                      ;
1615: EB74         ;			Entry Parameters:	DE = Logical Drive Bit Vector					 ;
1616: EB74         ;			Exit Parameters :	A = 00H										 ;
1617: EB74         ;																			 ;
1618: EB74         ;------------------------ Reset Logical Disk Drive - 25 (37) ----------------;
1619: EB74         ;Reset Drive
1620: EB74         ;IN  - (DE) Drive Vector
1621: EB74         ;OUT - (A) 00
1622: EB74             vResetDrive:                      ; func37 (37 - 25) Reset Drive
1623: EB74         ; Not Yet Implemented   **************
1624: EB74 C9                     RET
1625: EB75         ;*****************************************************************
1626: EB75
1627: EB75         ;-----------------------------------------------------------------
1628: EB75
1629: EB75         ;*****************************************************************
1630: EB75         ;random disk read
1631: EB75         ;IN  - (DE) FCB address
1632: EB75         ;OUT - (A) 01 = Reading unwritten data
1633: EB75         ;	 02 = N/U
1634: EB75         ;	 03 = Cannot close current extent
1635: EB75         ;	 04 = Seek to unwriten Extent
1636: EB75         ;	 05 = N/U
1637: EB75         ;	 06 = Seek past Physical end of Disk
1638: EB75             vReadRandom:                      ; func33 (33 - 21) Read Random record
1639: EB75 CD C6 EE               CALL   ReselectDisk
1640: EB78 C3 8B EB               JP     RandomDiskRead       ; to perform the disk read
1641: EB7B         ;*****************************************************************
1642: EB7B         ;write random record
1643: EB7B         ;IN  - (DE) FCB address
1644: EB7B         ;OUT - (A) 01 = Reading unwritten data
1645: EB7B         ;	 02 = N/U
1646: EB7B         ;	 03 = Cannot close current extent
1647: EB7B         ;	 04 = Seek to unwriten Extent
1648: EB7B         ;	 05 = Cannot create new Extent because of directory overflow
1649: EB7B         ;	 06 = Seek past Physical end of Disk
1650: EB7B             vWriteRandom:                      ; func34 (34 - 22) Write Random record
1651: EB7B CD C6 EE               CALL   ReselectDisk
1652: EB7E C3 94 EB               JP     RandomDiskWrite      ; to perform the disk write
1653: EB81         ;ret ;jmp goback
1654: EB81         ;*****************************************************************
1655: EB81         ;return file size (0-65536)
1656: EB81         ;IN  - (DE) FCB address
1657: EB81             vComputeFileSize:                      ; func35 (35 - 23) Compute File Size
1658: EB81 CD C6 EE               CALL   ReselectDisk
1659: EB84 C3 41 EC               JP     GetFileSize
1660: EB87         ;*****************************************************************
1661: EB87         ;set random record
1662: EB87         ;IN  - (DE) FCB address
1663: EB87         ;OUT - Random Record Field is set
1664: EB87             vSetRandomRecord:                      ; func36 (36 - 24) Set random Record
1665: EB87 C3 2E EC               JP     SetRandomRecord
1666: EB8A         ;? ;*****************************************************************
1667: EB8A         ;? ;Reset Drive
1668: EB8A         ;? ;IN  - (DE) Drive Vector
1669: EB8A         ;? ;OUT - (A) 00
1670: EB8A         ;? vResetDrive:								; func37 (37 - 25) Reset Drive
1671: EB8A         ;? ; Not Yet Implemented   **************
1672: EB8A         ;?	RET
1673: EB8A         ;*****************************************************************
1674: EB8A         ;*****************************************************************
1675: EB8A         ;Write Random With Zero Fill
1676: EB8A         ;IN  - (DE) FCB address
1677: EB8A         ;OUT - (A) Return Code		see Function 34
1678: EB8A             vWriteRandom0Fill:                      ; func40 (40 - 28) Reset Drive
1679: EB8A         ; Not Yet Implemented   **************
1680: EB8A C9                     RET
1681: EB8B         ;*****************************************************************
1682: EB8B         ;******************< Random I/O Stuff ****************************
1683: EB8B         ;*****************************************************************
1684: EB8B         ;random disk read
1685: EB8B             RandomDiskRead:                      ; randiskread
1686: EB8B 0E FF                  LD     C,TRUE               ; marked as read operation
1687: EB8D CD 9D EB               CALL   RandomSeek
1688: EB90 CC 32 F2               CALL   Z,DiskRead           ; if seek successful
1689: EB93 C9                     RET
1690: EB94         ;*****************************************************************
1691: EB94         ;random disk write
1692: EB94             RandomDiskWrite:                      ; randiskwrite
1693: EB94 0E 00                  LD     C,FALSE              ; marked as read operation
1694: EB96 CD 9D EB               CALL   RandomSeek
1695: EB99 CC 75 F2               CALL   Z,DiskWrite          ; if seek successful
1696: EB9C C9                     RET
1697: EB9D         ;*****************************************************************
1698: EB9D         ;*****************************************************************
1699: EB9D         ;random access seek operation, C=0ffh if read mode
1700: EB9D         ;fcb is assumed to address an active file control block
1701: EB9D         ;(fcbS2Index has been set to 11000000b if previous bad seek)
1702: EB9D             RandomSeek:
1703: EB9D AF                     XOR    A
1704: EB9E 32 90 F5               LD     (seqReadFlag),A      ; marked as random access operation
1705: EBA1 C5                     PUSH   BC                   ; save r/w flag
1706: EBA2 2A C3 EA               LD     HL,(paramDE)
1707: EBA5 EB                     EX     DE,HL                ; DE will hold base of fcb
1708: EBA6 21 21 00               LD     HL,RANDOM_REC_FIELD
1709: EBA9 19                     ADD    HL,DE                ; HL=.fcb(RANDOM_REC_FIELD)
1710: EBAA 7E                     LD     A,(HL)
1711: EBAB E6 7F                  AND    7FH
1712: EBAD F5                     PUSH   AF                   ; record number
1713: EBAE 7E                     LD     A,(HL)
1714: EBAF 17                     RLA                         ; cy=lsb of extent#
1715: EBB0 23                     INC    HL
1716: EBB1 7E                     LD     A,(HL)
1717: EBB2 17                     RLA
1718: EBB3 E6 1F                  AND    11111B               ; A=ext#
1719: EBB5 4F                     LD     C,A                  ; C holds extent number, record stacked
1720: EBB6 7E                     LD     A,(HL)
1721: EBB7 1F                     RRA
1722: EBB8 1F                     RRA
1723: EBB9 1F                     RRA
1724: EBBA 1F                     RRA
1725: EBBB E6 0F                  AND    1111B                ; mod#
1726: EBBD 47                     LD     B,A                  ; B holds module#, C holds ext#
1727: EBBE F1                     POP    AF                   ; recall sought record #
1728: EBBF         ;check to insure that high byte of ran rec = 00
1729: EBBF 23                     INC    HL
1730: EBC0 6E                     LD     L,(HL)               ; l=high byte (must be 00)
1731: EBC1 2C                     INC    L
1732: EBC2 2D                     DEC    L
1733: EBC3 2E 06                  LD     L,06                 ; zero flag, l=6
1734: EBC5         ; produce error 6, seek past physical eod
1735: EBC5 C2 26 EC               JP     NZ,RandomSeekError
1736: EBC8         ; otherwise, high byte = 0, A = sought record
1737: EBC8 21 20 00               LD     HL,NEXT_RECORD
1738: EBCB 19                     ADD    HL,DE                ; HL = .fcb(NEXT_RECORD)
1739: EBCC 77                     LD     (HL),A               ; sought rec# stored away
1740: EBCD         ; arrive here with B=mod#, C=ext#, DE=.fcb, rec stored
1741: EBCD         ; the r/w flag is still stacked.  compare fcb values
1742: EBCD 21 0C 00               LD     HL,fcbExtIndex       ; extent number field
1743: EBD0 19                     ADD    HL,DE
1744: EBD1 79                     LD     A,C                  ; A=seek ext#
1745: EBD2 96                     SUB    M
1746: EBD3 C2 E1 EB               JP     NZ,RandomSeekClose   ; tests for = extents
1747: EBD6         ; extents match, check mod#
1748: EBD6 21 0E 00               LD     HL,fcbS2Index
1749: EBD9 19                     ADD    HL,DE
1750: EBDA 78                     LD     A,B                  ; B=seek mod#
1751: EBDB         ; could be overflow at eof, producing module#
1752: EBDB         ; of 90H or 10H, so compare all but fwf
1753: EBDB 96                     SUB    M
1754: EBDC E6 7F                  AND    7FH
1755: EBDE CA 19 EC               JP     Z,RandomSeekExit     ; same?
1756: EBE1             RandomSeekClose:
1757: EBE1 C5                     PUSH   BC
1758: EBE2 D5                     PUSH   DE                   ; save seek mod#,ext#, .fcb
1759: EBE3 CD D9 ED               CALL   CloseDirEntry        ; current extent closed
1760: EBE6 D1                     POP    DE
1761: EBE7 C1                     POP    BC                   ; recall parameters and fill
1762: EBE8 2E 03                  LD     L,03                 ; cannot close error #3
1763: EBEA 3A C5 EA               LD     A,(exitParameterByte)
1764: EBED 3C                     INC    A
1765: EBEE CA 1F EC               JP     Z,RandomSeekErrorBadSeek
1766: EBF1 21 0C 00               LD     HL,fcbExtIndex
1767: EBF4 19                     ADD    HL,DE
1768: EBF5 71                     LD     (HL),C               ; fcb(fcbExtIndex)=ext#
1769: EBF6 21 0E 00               LD     HL,fcbS2Index
1770: EBF9 19                     ADD    HL,DE
1771: EBFA 70                     LD     (HL),B               ; fcb(fcbS2Index)=mod#
1772: EBFB CD 96 ED               CALL   OpenFile             ; is the file present?
1773: EBFE 3A C5 EA               LD     A,(exitParameterByte)
1774: EC01 3C                     INC    A
1775: EC02 C2 19 EC               JP     NZ,RandomSeekExit    ; open successful?
1776: EC05         ; cannot open the file, read mode?
1777: EC05 C1                     POP    BC                   ; r/w flag to c (=0ffh if read)
1778: EC06 C5                     PUSH   BC                   ; everyone expects this item stacked
1779: EC07 2E 04                  LD     L,04                 ; seek to unwritten extent #4
1780: EC09 0C                     INC    C                    ; becomes 00 if read operation
1781: EC0A CA 1F EC               JP     Z,RandomSeekErrorBadSeek ; skip to error if read operation
1782: EC0D CD C0 F3               CALL   MakeNewFile          ; write operation, make new extent
1783: EC10 2E 05                  LD     L,05                 ; cannot create new extent #5
1784: EC12 3A C5 EA               LD     A,(exitParameterByte)
1785: EC15 3C                     INC    A
1786: EC16 CA 1F EC               JP     Z,RandomSeekErrorBadSeek ; no dir space
1787: EC19         ; file make operation successful
1788: EC19             RandomSeekExit:                      ; seekok:
1789: EC19 C1                     POP    BC                   ; discard r/w flag
1790: EC1A AF                     XOR    A
1791: EC1B 32 C5 EA               LD     (exitParameterByte),A
1792: EC1E C9                     RET                         ; with zero set
1793: EC1F
1794: EC1F             RandomSeekErrorBadSeek:
1795: EC1F         ; fcb no longer contains a valid fcb, mark with 11000000b in fcbS2Index field so that it
1796: EC1F         ; appears as overflow with file write flag set
1797: EC1F E5                     PUSH   HL                   ; save error flag
1798: EC20 CD 4B EF               CALL   GetExtentNumberMSB   ; HL = .fcbS2Index
1799: EC23 36 C0                  LD     (HL),11000000B
1800: EC25 E1                     POP    HL                   ; and drop through
1801: EC26             RandomSeekError:                      ; seekerr:
1802: EC26 C1                     POP    BC                   ; discard r/w flag
1803: EC27 7D                     LD     A,L
1804: EC28 32 C5 EA               LD     (exitParameterByte),A ; exitParameterByte=#, nonzero
1805: EC2B         ; SetFileWriteFlag returns non-zero accumulator for err
1806: EC2B C3 54 EF               JP     SetFileWriteFlag     ; flag set, so subsequent close ok
1807: EC2E         ;ret
1808: EC2E         ;
1809: EC2E         ;*****************************************************************
1810: EC2E             SetRandomRecord:                      ; setrandom
1811: EC2E 2A C3 EA               LD     HL,(paramDE)
1812: EC31 11 20 00               LD     DE,NEXT_RECORD       ; ready params for computesize
1813: EC34 CD 7D EC               CALL   GetRandomRecordPosition ; DE=paramDE, A=cy, BC=mmmm eeee errr rrrr
1814: EC37 21 21 00               LD     HL,RANDOM_REC_FIELD
1815: EC3A 19                     ADD    HL,DE                ; HL = .FCB(RANDOM_REC_FIELD)
1816: EC3B 71                     LD     (HL),C
1817: EC3C 23                     INC    HL
1818: EC3D 70                     LD     (HL),B
1819: EC3E 23                     INC    HL
1820: EC3F 77                     LD     (HL),A               ; to RANDOM_REC_FIELD
1821: EC40 C9                     RET
1822: EC41         ;*****************************************************************
1823: EC41         ;compute logical file size for current fcb
1824: EC41             GetFileSize:                      ; getfilesize
1825: EC41 0E 0C                  LD     C,fcbExtIndex
1826: EC43 CD 71 EF               CALL   SearchForDirectoryRecord
1827: EC46         ; zero the receiving Ramdom record field
1828: EC46 2A C3 EA               LD     HL,(paramDE)
1829: EC49 11 21 00               LD     DE,RANDOM_REC_FIELD
1830: EC4C 19                     ADD    HL,DE
1831: EC4D E5                     PUSH   HL                   ; save position
1832: EC4E 72                     LD     (HL),D
1833: EC4F 23                     INC    HL
1834: EC50 72                     LD     (HL),D
1835: EC51 23                     INC    HL
1836: EC52 72                     LD     (HL),D               ; =00 00 00
1837: EC53             GetFileSize1:                      ; getsize:
1838: EC53 CD 0D F0               CALL   AtEndOfDirectory
1839: EC56 CA 7B EC               JP     Z,GetFileSizeExit
1840: EC59         ; current fcb addressed by dptr
1841: EC59 CD 16 F0               CALL   GetCurrentDirectoryRecord
1842: EC5C 11 0F 00               LD     DE,fcbRCIndex        ; ready for compute size
1843: EC5F CD 7D EC               CALL   GetRandomRecordPosition
1844: EC62         ; A=0000 000? BC = mmmm eeee errr rrrr compare with memory, larger?
1845: EC62 E1                     POP    HL
1846: EC63 E5                     PUSH   HL                   ; recall, replace .fcb(Random record Field)
1847: EC64 5F                     LD     E,A                  ; save cy
1848: EC65 79                     LD     A,C
1849: EC66 96                     SUB    M
1850: EC67 23                     INC    HL                   ; ls byte
1851: EC68 78                     LD     A,B
1852: EC69 9E                     SBC    A,(HL)
1853: EC6A 23                     INC    HL                   ; middle byte
1854: EC6B 7B                     LD     A,E
1855: EC6C 9E                     SBC    A,(HL)               ; carry if .fcb(random record field) > directory
1856: EC6D DA 75 EC               JP     C,GetFileSize2       ; for another try
1857: EC70         ; fcb is less or equal, fill from directory
1858: EC70 73                     LD     (HL),E
1859: EC71 2B                     DEC    HL
1860: EC72 70                     LD     (HL),B
1861: EC73 2B                     DEC    HL
1862: EC74 71                     LD     (HL),C
1863: EC75             GetFileSize2:                      ; getnextsize:
1864: EC75 CD 86 EF               CALL   GetNextDirectoryRecord
1865: EC78 C3 53 EC               JP     GetFileSize1
1866: EC7B             GetFileSizeExit:                      ; setsize:
1867: EC7B E1                     POP    HL                   ; discard .fcb(random record field)
1868: EC7C C9                     RET
1869: EC7D         ;-----------------------------------------------------------------
1870: EC7D         ;compute random record position
1871: EC7D             GetRandomRecordPosition:                      ; compute$rr
1872: EC7D EB                     EX     DE,HL
1873: EC7E 19                     ADD    HL,DE
1874: EC7F         ; DE=.buf(dptr) or .fcb(0), HL = .f(NEXT_RECORD/fcbRCIndex)
1875: EC7F 4E                     LD     C,(HL)
1876: EC80 06 00                  LD     B,0                  ; BC = 0000 0000 ?rrr rrrr
1877: EC82 21 0C 00               LD     HL,fcbExtIndex
1878: EC85 19                     ADD    HL,DE
1879: EC86 7E                     LD     A,(HL)
1880: EC87 0F                     RRCA
1881: EC88 E6 80                  AND    80H                  ; A=e000 0000
1882: EC8A 81                     ADD    A,C
1883: EC8B 4F                     LD     C,A
1884: EC8C 3E 00                  LD     A,0
1885: EC8E 88                     ADC    A,B
1886: EC8F 47                     LD     B,A
1887: EC90         ; BC = 0000 000? errrr rrrr
1888: EC90 7E                     LD     A,(HL)
1889: EC91 0F                     RRCA
1890: EC92 E6 0F                  AND    LO_NIBBLE_MASK
1891: EC94 80                     ADD    A,B
1892: EC95 47                     LD     B,A
1893: EC96         ; BC = 000? eeee errrr rrrr
1894: EC96 21 0E 00               LD     HL,fcbS2Index
1895: EC99 19                     ADD    HL,DE
1896: EC9A 7E                     LD     A,(HL)               ; A=XXX? mmmm
1897: EC9B 87                     ADD    A,A
1898: EC9C 87                     ADD    A,A
1899: EC9D 87                     ADD    A,A
1900: EC9E 87                     ADD    A,A                  ; cy=? A=mmmm 0000
1901: EC9F F5                     PUSH   AF
1902: ECA0 80                     ADD    A,B
1903: ECA1 47                     LD     B,A
1904: ECA2         ; cy=?, BC = mmmm eeee errr rrrr
1905: ECA2 F5                     PUSH   AF                   ; possible second carry
1906: ECA3 E1                     POP    HL                   ; cy = lsb of L
1907: ECA4 7D                     LD     A,L                  ; cy = lsb of A
1908: ECA5 E1                     POP    HL                   ; cy = lsb of L
1909: ECA6 B5                     OR     L                    ; cy/cy = lsb of A
1910: ECA7 E6 01                  AND    1                    ; A = 0000 000? possible carry-out
1911: ECA9 C9                     RET
1912: ECAA         ;-----------------------------------------------------------------
1913: ECAA
1914: ECAA
1915: ECAA
1916: ECAA         ;*****************************************************************
1917: ECAA         ;********************** Disk  I/O ********************************
1918: ECAA         ;*****************************************************************
1919: ECAA         ;-----------------------------------------------------------------
1920: ECAA         ;;set file Attributes
1921: ECAA             vSetFileAttributes:                      ; func30 (30 - 1E) Set File Attributes
1922: ECAA CD C6 EE               CALL   ReselectDisk
1923: ECAD CD F7 F1               CALL   SetAttributes
1924: ECB0 C3 E9 F0               JP     DirLocationToReturnLoc ; exitParameterByte=dirloc
1925: ECB3         ;-----------------------------------------------------------------
1926: ECB3         ;--------------------------- Select  Drive ---------------------------------;
1927: ECB3         ; Establish the disk found in (paramE) as the current disk drive            ;
1928: ECB3             SelectCurrent:                      ;
1929: ECB3 3A C2 EA               LD     A,(paramE)           ; Get Disk (00H = A,01H = B ..)     ;
1930: ECB6 21 66 F5               LD     HL,currentDisk       ; Get the current disk              ;
1931: ECB9 BE                     CP     M                    ; Are the the same ?                ;
1932: ECBA C8                     RET    Z                    ; Exit if yes, nothing to do        ;
1933: ECBB 77                     LD     (HL),A               ;  else update curretDisk and       ;
1934: ECBC C3 BF EC               JP     Select               ;  select it                        ;
1935: ECBF         ;--------------------------- Select  Drive ---------------------------------;
1936: ECBF         ;--------------------------- Select Login Drive ----------------------------;
1937: ECBF         ; select Login Drive                                                       ;
1938: ECBF             Select:                         ;
1939: ECBF CD E0 EC               CALL   SelectDisk           ; Select the Disk                   ;
1940: ECC2 CC D5 F4               CALL   Z,errSelect          ;
1941: ECC5 21 66 F5               LD     HL,currentDisk       ;
1942: ECC8 46                     LD     B,(HL)               ; Get Current Disk                  ;
1943: ECC9 2A 6A F5               LD     HL,(loggedDisks)     ; Load Logged Disk MAP              ;
1944: ECCC CD A7 F4               CALL   IsBitSet             ;
1945: ECCF C0                     RET    NZ                   ; Exit if already logged in         ;
1946: ECD0         ;                                                                           ;
1947: ECD0 21 66 F5               LD     HL,currentDisk       ;
1948: ECD3 46                     LD     B,(HL)               ; Get Current Disk                  ;
1949: ECD4 2A 6A F5               LD     HL,(loggedDisks)     ; else log in a different disk	    ;
1950: ECD7 CD B7 F4               CALL   SetVectorBit         ;
1951: ECDA 22 6A F5               LD     (loggedDisks),HL     ; Update the Vector                 ;
1952: ECDD         ;
1953: ECDD C3 26 ED               JP     InitDisk             ;
1954: ECE0         ;--------------------------- Select Login Drive ----------------------------;
1955: ECE0         ;--------------------------- Select Disk ------------------------------------;
1956: ECE0         ;*****************************************************************          ;
1957: ECE0         ; select the disk drive given by currentDisk, and fill the base addresses   ;
1958: ECE0         ; caTrack - caAllocVector, then fill the values of the disk parameter block ;
1959: ECE0             SelectDisk:                      ;
1960: ECE0 3A 66 F5               LD     A,(currentDisk)      ; Get current disk (0=A,1=B...)      ;
1961: ECE3 4F                     LD     C,A                  ; Prepare for BIOS Call              ;
1962: ECE4 CD 1B F6               CALL   bcSeldsk             ; Select the disk                    ;
1963: ECE7 7C                     LD     A,H                  ; Return Pointer to                  ;
1964: ECE8 B5                     OR     L                    ;  Disk Parameter Header             ;
1965: ECE9 C8                     RET    Z                    ; exit if error, with HL = 0000      ;
1966: ECEA         ;
1967: ECEA 5E                     LD     E,(HL)               ;
1968: ECEB 23                     INC    HL                   ;
1969: ECEC 56                     LD     D,(HL)               ; Skew Table in DE                   ;
1970: ECED 23                     INC    HL                   ; HL = DPH + 2, Rel Pos for File     ;
1971: ECEE ED 53 8B F5               LD     (caSkewTable),DE     ; Move to Current Skew Table         ;
1972: ECF2         ;
1973: ECF2 22 6E F5               LD     (caDirMaxValue),HL   ; Move to Current Dir max            ;
1974: ECF5 23                     INC    HL                   ;
1975: ECF6 23                     INC    HL                   ; HL = Last Track #                  ;
1976: ECF7 22 70 F5               LD     (caTrack),HL         ; Move to Current Track #            ;
1977: ECFA 23                     INC    HL                   ;
1978: ECFB 23                     INC    HL                   ; HL = Last Sector #                 ;
1979: ECFC 22 72 F5               LD     (caSector),HL        ; Move to Current Sector #           ;
1980: ECFF 23                     INC    HL                   ;
1981: ED00 23                     INC    HL                   ;
1982: ED01 11 74 F5               LD     DE,caDirectoryDMA    ;
1983: ED04 01 08 00               LD     BC,caListSize        ;
1984: ED07 ED B0                  LDIR                        ;
1985: ED09         ;
1986: ED09         ; finish filling in address list                                             ;
1987: ED09 2A 76 F5               LD     HL,(caDiskParamBlock) ; Point Disk Parameter Block         ;
1988: ED0C 11 7C F5               LD     DE,dpbStart          ; Point at BIOS DPB                  ;
1989: ED0F 01 0F 00               LD     BC,dpbSize           ;
1990: ED12 ED B0                  LDIR                        ; Move DPB to current                ;
1991: ED14         ;
1992: ED14         ; Determine if Byte or Word Allocation Table	                             ;
1993: ED14 2A 81 F5               LD     HL,(dpbDSM)          ; Get max entry number               ;
1994: ED17 7C                     LD     A,H                  ; If  its 00 then < 255              ;
1995: ED18 21 95 F5               LD     HL,byteAllocationFlag ; Point at the  flag				 ;
1996: ED1B 36 FF                  LD     (HL),TRUE            ; Assume its less than 255           ;
1997: ED1D B7                     OR     A                    ;  is the assumption confirmed ?     ;
1998: ED1E 28 02                  JR     Z,SelectDisk1        ;  skip if yes                       ;
1999: ED20 36 00                  LD     (HL),FALSE           ; Fix assumption,set flag to false   ;
2000: ED22         ;
2001: ED22         ; Set Sign, reset Carry and Zero to indicate success                         ;
2002: ED22             SelectDisk1:                      ;
2003: ED22 3E FF                  LD     A,TRUE               ;
2004: ED24 B7                     OR     A                    ;
2005: ED25 C9                     RET                         ;
2006: ED26         ;--------------------------- Select Disk ------------------------------------;
2007: ED26         ;--------------------------- Initialize Disk --------------------------------;
2008: ED26             InitDisk:                       ;
2009: ED26 2A 81 F5               LD     HL,(dpbDSM)          ; Maximum allocation value           ;
2010: ED29 CD 11 F1               CALL   DivideHLby8          ; Length of Map                      ;
2011: ED2C E5                     PUSH   HL                   ; Save Length                        ;
2012: ED2D E5                     PUSH   HL                   ; Save for end of MAP                ;
2013: ED2E C1                     POP    BC                   ; BC = dpbDSM/8                      ;
2014: ED2F         ; Clear the Allocation Vector	                                             ;
2015: ED2F 2A 7A F5               LD     HL,(caAllocVector)   ; Allocation vector Start            ;
2016: ED32 36 00                  LD     (HL),0               ; Clear location                     ;
2017: ED34 ED 5B 7A F5               LD     DE,(caAllocVector)   ;
2018: ED38 13                     INC    DE                   ; Allocation vector Start + 1        ;
2019: ED39 ED B0                  LDIR                        ; Cascade 00 thru Map                ;
2020: ED3B         ; Force bits at End of Map                                                   ;
2021: ED3B EB                     EX     DE,HL                ; Put last Map byte into DE          ;
2022: ED3C E1                     POP    HL                   ;
2023: ED3D 23                     INC    HL                   ;
2024: ED3E CD 1B F1               CALL   MultiplyHLby8        ; Blocks if all bits used            ;
2025: ED41 ED 4B 81 F5               LD     BC,(dpbDSM)          ; Actual block max                   ;
2026: ED45 03                     INC    BC                   ; Now has size of the Map            ;
2027: ED46 AF                     XOR    A                    ; Clear CY                           ;
2028: ED47 ED 42                  SBC    HL,BC                ; Extra unused bits                  ;
2029: ED49 BD                     CP     L                    ;  are there any                     ;
2030: ED4A 28 07                  JR     Z,Mark4Directory     ;
2031: ED4C 45                     LD     B,L                  ; Number of bits to set              ;
2032: ED4D EB                     EX     DE,HL                ; Put last Map byte into HL          ;
2033: ED4E             SetBitLoop:                      ;
2034: ED4E 37                     SCF                         ;
2035: ED4F CB 16                  RL     (HL)                 ; Set LSB                            ;
2036: ED51 10 FB                  DJNZ   SetBitLoop           ; Loop thru the bits                 ;
2037: ED53         ;
2038: ED53             Mark4Directory:                      ;
2039: ED53         ; Mark the reserved space for the directory                                  ;
2040: ED53 2A 85 F5               LD     HL,(dpbDABM)         ; Directory block reserved bits      ;
2041: ED56 EB                     EX     DE,HL                ;
2042: ED57 2A 7A F5               LD     HL,(caAllocVector)   ; HL Start of Allocation Vector      ;
2043: ED5A 73                     LD     (HL),E               ;
2044: ED5B 23                     INC    HL                   ;
2045: ED5C 72                     LD     (HL),D               ; Put reserved blocks in Vector      ;
2046: ED5D         ; end of Map                                                                 ;
2047: ED5D         ; Home disk, and set current track and sector to 00                          ;
2048: ED5D CD 73 EE               CALL   Home                 ;
2049: ED60 2A 6E F5               LD     HL,(caDirMaxValue)   ;
2050: ED63 36 03                  LD     (HL),3               ;
2051: ED65 23                     INC    HL                   ;
2052: ED66 36 00                  LD     (HL),0               ; Current Max Dir Value = 0003       ;
2053: ED68 CD 06 F0               CALL   SetEndDirectory      ; dirEntryIndex = EOD (-1)           ;
2054: ED6B         ;
2055: ED6B             InitDisk1:                      ;
2056: ED6B         ; Process the directory                                                      ;
2057: ED6B 0E FF                  LD     C,TRUE               ; Set flag for setting CheckSum	     ;
2058: ED6D CD 3C F1               CALL   ReadDirectory        ; Get the directory Record           ;
2059: ED70 CD 0D F0               CALL   AtEndOfDirectory     ; Are we Done ?                      ;
2060: ED73 C8                     RET    Z                    ;  Exit if Yes                       ;
2061: ED74         ; Not end of directory, valid entry?                                         ;
2062: ED74 CD 16 F0               CALL   GetCurrentDirectoryRecord ; Calculate location of the element  ;
2063: ED77 3E E5                  LD     A,emptyDir           ;
2064: ED79 BE                     CP     M                    ; Is it an Empty Dir Entry           ;
2065: ED7A 28 EF                  JR     Z,InitDisk1          ;   Loop back if yes                 ;
2066: ED7C         ; Not emptyDir, user code the same?                                          ;
2067: ED7C 3A 65 F5               LD     A,(currentUserNumber) ;
2068: ED7F BE                     CP     M                    ;
2069: ED80 20 0A                  JR     NZ,InitDisk2         ; Skip if this entry not the users   ;
2070: ED82         ; Same user, check for '$' submit                                            ;
2071: ED82 23                     INC    HL                   ;
2072: ED83 7E                     LD     A,(HL)               ;
2073: ED84 D6 24                  SUB    DOLLAR               ; Is first Char a $                  ;
2074: ED86 20 04                  JR     NZ,InitDisk2         ;
2075: ED88         ; dollar file found, mark in exitParameterByte                               ;
2076: ED88 3D                     DEC    A                    ; Set A to FFH                       ;
2077: ED89 32 C5 EA               LD     (exitParameterByte),A ; Return it the exit parameter       ;
2078: ED8C             InitDisk2:                      ;
2079: ED8C         ; now scan the disk map for allocated blocks                                 ;
2080: ED8C 0E FF                  LD     C,TRUE               ; set to allocated                   ;
2081: ED8E CD 3A F0               CALL   ScanDiskMap          ;
2082: ED91 CD 24 F0               CALL   SetDirectoryEntry    ; Mark directory entry               ;
2083: ED94 18 D5                  JR     InitDisk1            ; Loop for another entry             ;
2084: ED96         ;--------------------------- Initialize Disk --------------------------------;
2085: ED96         ;----------------------------- Open File -----------------------------------;
2086: ED96         ;search for the directory entry matching FCB at paramDE						;
2087: ED96             OpenFile:                       ;
2088: ED96 0E 0F                  LD     C,nameLength         ;
2089: ED98 CD 71 EF               CALL   SearchForDirectoryRecord ;
2090: ED9B CD 0D F0               CALL   AtEndOfDirectory     ; Have we gone thru all the dir    	;
2091: ED9E C8                     RET    Z                    ; Exit exitParameterByte=255 if yes	;
2092: ED9F         ;
2093: ED9F             CopyDirRecordToFCB:                      ;
2094: ED9F CD 17 EF               CALL   GetExtentAddress     ; HL points to FCB's EXT           	;
2095: EDA2 7E                     LD     A,(HL)               ; Get the EXT                      	;
2096: EDA3 F5                     PUSH   AF                   ; Save the FCB's EXT value         	;
2097: EDA4 E5                     PUSH   HL                   ;  also save FCB's pointer         	;
2098: EDA5 CD 16 F0               CALL   GetCurrentDirectoryRecord ; Get pointer to Dir record in HL  	;
2099: EDA8 E5                     PUSH   HL                   ; Save Directory Record address    	;
2100: EDA9         ;
2101: EDA9 ED 5B C3 EA               LD     DE,(paramDE)         ;
2102: EDAD 01 20 00               LD     BC,fcbLength         ;
2103: EDB0 ED B0                  LDIR                        ; Move dir record to FCB           	;
2104: EDB2         ;
2105: EDB2         ; note that entire fcb is copied, including indicators                    	;
2106: EDB2 CD 54 EF               CALL   SetFileWriteFlag     ; Set clean file flag				;
2107: EDB5 D1                     POP    DE                   ; Get Directory Record address     	;
2108: EDB6 21 0C 00               LD     HL,fcbExtIndex       ; Extent Index                     	;
2109: EDB9 19                     ADD    HL,DE                ; Directory's EXT address          	;
2110: EDBA 4E                     LD     C,(HL)               ; Dir's EXT is in B		           	;
2111: EDBB 21 0F 00               LD     HL,fcbRCIndex        ; Get Record Count Index           	;
2112: EDBE 19                     ADD    HL,DE                ; Directory's RC address           	;
2113: EDBF 46                     LD     B,(HL)               ; B holds Dir's  record count      	;
2114: EDC0 E1                     POP    HL                   ; Get FCB's Extent Address         	;
2115: EDC1 F1                     POP    AF                   ; Get FCB's Extent Value           	;
2116: EDC2 77                     LD     (HL),A               ; Restore Extent Value             	;
2117: EDC3         ; if user ext < dir ext then user := 128 records                           	;
2118: EDC3         ; if user ext = dir ext then user := dir records                           	;
2119: EDC3         ; if user ext > dir ext then user := 0 records                             	;
2120: EDC3 79                     LD     A,C                  ; Get the Dir's EXT                	;
2121: EDC4 BE                     CP     M                    ; Does it match the FCB'd          	;
2122: EDC5 78                     LD     A,B                  ; Get the Dir's  record count      	;
2123: EDC6 CA D0 ED               JP     Z,OpenSetRecordCount ; If same EXT value, use it.       	;
2124: EDC9 3E 00                  LD     A,0                  ;   else prepare for RC = 0        	;
2125: EDCB DA D0 ED               JP     C,OpenSetRecordCount ; If FCB EXT > Dir EXTr            	;
2126: EDCE 3E 80                  LD     A,RecordsPerExtent   ;   else max record count out      	;
2127: EDD0             OpenSetRecordCount:                      ;
2128: EDD0 2A C3 EA               LD     HL,(paramDE)         ; Get FCB's address                	;
2129: EDD3 11 0F 00               LD     DE,fcbRCIndex        ; Get record count index           	;
2130: EDD6 19                     ADD    HL,DE                ; FCB's record count               	;
2131: EDD7 77                     LD     (HL),A               ; Set the value                    	;
2132: EDD8 C9                     RET                         ;
2133: EDD9         ;----------------------------- Open File -----------------------------------;
2134: EDD9         ;---------------------------- Close Directory Entry ------------------------;
2135: EDD9             CloseDirEntry:                      ;
2136: EDD9 AF                     XOR    A                    ;
2137: EDDA 32 C5 EA               LD     (exitParameterByte),A ; Clear exit parameter              ;
2138: EDDD CD BB EE               CALL   IsDiskWriteProtected ; Return Z set if writable          ;
2139: EDE0 C0                     RET    NZ                   ; Skip close if r/o disk            ;
2140: EDE1         ; check file write flag - 0 indicates written                               ;
2141: EDE1 CD 4B EF               CALL   GetWriteFileFlagValue ; Get file's WriteFileFlag          ;
2142: EDE4 CB 7F                  BIT    7,A                  ;  Has it changed ?					;
2143: EDE6         ;	AND		writeFlagMask				; Apply the RO Flag for S2          ;
2144: EDE6 C0                     RET    NZ                   ; Skip close if clean file          ;
2145: EDE7         ;
2146: EDE7 0E 0F                  LD     C,nameLength         ;
2147: EDE9 CD 71 EF               CALL   SearchForDirectoryRecord ; Find the file's directory record  ;
2148: EDEC CD 0D F0               CALL   AtEndOfDirectory     ; If EOD then there is no more      ;
2149: EDEF C8                     RET    Z                    ;  exit if at EOD                   ;
2150: EDF0         ;
2151: EDF0         ; merge the FCB's Disk Map with the Directory record Disk Map               ;
2152: EDF0 CD 16 F0               CALL   GetCurrentDirectoryRecord ; HL points to directory record     ;
2153: EDF3 01 10 00               LD     BC,fcbDiskMapIndex   ; Disk Alloc block map index        ;
2154: EDF6 09                     ADD    HL,BC                ;
2155: EDF7 EB                     EX     DE,HL                ; DE = Directory Entry Map pointer  ;
2156: EDF8 2A C3 EA               LD     HL,(paramDE)         ;
2157: EDFB 09                     ADD    HL,BC                ; HL = FCB Map Pointer              ;
2158: EDFC 0E 10                  LD     C,(fcbLength-fcbDiskMapIndex) ; Size Allocation Map              ;
2159: EDFE         ;
2160: EDFE             MergeAllocationMaps:                      ;
2161: EDFE 3A 95 F5               LD     A,(byteAllocationFlag) ;
2162: EE01 B7                     OR     A                    ;
2163: EE02 CA 19 EE               JP     Z,MergeWordMaps      ; Process Word size Block Numbers   ;
2164: EE05         ; process byte size Map	                                                    ;
2165: EE05 7E                     LD     A,(HL)               ; FCB Block number                  ;
2166: EE06 B7                     OR     A                    ; Is it 0 ?                         ;
2167: EE07 1A                     LD     A,(DE)               ;  anticipate yes                   ;
2168: EE08 C2 0C EE               JP     NZ,MergeFCBisNot0    ;  Skip if no	                    ;
2169: EE0B 77                     LD     (HL),A               ; Move Dir Entry Value to FCB		;
2170: EE0C             MergeFCBisNot0:                      ;
2171: EE0C B7                     OR     A                    ; Is Dir Entry Value = 0 ?          ;
2172: EE0D C2 12 EE               JP     NZ,MergeDirEntryNot0 ; Skip if no                        ;
2173: EE10 7E                     LD     A,(HL)               ;  else move FCB map value          ;
2174: EE11 12                     LD     (DE),A               ;  to Dir Entry Value 	            ;
2175: EE12             MergeDirEntryNot0:                      ;
2176: EE12 BE                     CP     M                    ; Do FCB and Dir match values       ;
2177: EE13 C2 54 EE               JP     NZ,CloseDirEntryError ;  If not then report error         ;
2178: EE16 C3 2E EE               JP     MergeMapLoop         ; Go see if there is more           ;
2179: EE19         ;
2180: EE19             MergeWordMaps:                      ;
2181: EE19 CD 25 F1               CALL   Merge                ; If FCB map value = 0 move Dir's   ;
2182: EE1C EB                     EX     DE,HL                ;
2183: EE1D CD 25 F1               CALL   Merge                ; IF Dir Map value = 0 move FCB's   ;
2184: EE20 EB                     EX     DE,HL                ; HL = FCB Map pointer, DE = Dir's  ;
2185: EE21 1A                     LD     A,(DE)               ; Does the FCB Map value            ;
2186: EE22 BE                     CP     M                    ;  = Dir record Map pointer ?       ;
2187: EE23 C2 54 EE               JP     NZ,CloseDirEntryError ;  If not then report error         ;
2188: EE26 13                     INC    DE                   ;
2189: EE27 23                     INC    HL                   ; move on to the MSB                ;
2190: EE28 1A                     LD     A,(DE)               ;
2191: EE29 BE                     CP     M                    ; do the check for equality         ;
2192: EE2A C2 54 EE               JP     NZ,CloseDirEntryError ;  If not then report error         ;
2193: EE2D 0D                     DEC    C                    ; Extra count for 2 bytes           ;
2194: EE2E             MergeMapLoop:                      ;
2195: EE2E 13                     INC    DE                   ; Advance to the next positions     ;
2196: EE2F 23                     INC    HL                   ; in The Maps                       ;
2197: EE30 0D                     DEC    C                    ; Are we done ?                     ;
2198: EE31 C2 FE ED               JP     NZ,MergeAllocationMaps ;  No, do it again                  ;
2199: EE34         ;
2200: EE34         ; Check the EXT                                                             ;
2201: EE34 01 EC FF               LD     BC,-(fcbLength-fcbExtIndex) ;Adjust to get Ext pointer          ;
2202: EE37 09                     ADD    HL,BC                ;
2203: EE38 EB                     EX     DE,HL                ; HL = Directory Entry EXT pointer  ;
2204: EE39 09                     ADD    HL,BC                ; DE = FCB EXT Pointer              ;
2205: EE3A 1A                     LD     A,(DE)               ; FCB's extent number               ;
2206: EE3B BE                     CP     M                    ; Is it < Dir Record EXT ?          ;
2207: EE3C DA 48 EE               JP     C,CloseDirEntryEnd   ;  we are done if yes               ;
2208: EE3F 77                     LD     (HL),A               ; Else replace the Dir Record EXT   ;
2209: EE40         ; Update directory record count field                                       ;
2210: EE40 01 03 00               LD     BC,fcbRCIndex-fcbExtIndex ; Need to adjust to the record Count;
2211: EE43 09                     ADD    HL,BC                ;
2212: EE44 EB                     EX     DE,HL                ; DE = = Directory Entry EXT pointer;
2213: EE45 09                     ADD    HL,BC                ; HL = FCB EXT Pointer              ;
2214: EE46 7E                     LD     A,(HL)               ; Copy the FCB RC to                ;
2215: EE47 12                     LD     (DE),A               ;  the Directory Record RC          ;
2216: EE48         ;
2217: EE48             CloseDirEntryEnd:                      ;
2218: EE48 3E FF                  LD     A,TRUE               ;
2219: EE4A 32 8D F5               LD     (fcbCopiedFlag),A    ;Set copied flag as true            ;
2220: EE4D         ;/	CALL	SeekCopy					; ok to "Write Dir" here            ;
2221: EE4D CD 6A F1               CALL   SeekDir              ; Set up parameters for a Disk I/O  ;
2222: EE50 C3 EE EF               JP     WriteDir             ; Write the directory element       ;
2223: EE53 C9                     RET                         ;
2224: EE54         ;
2225: EE54             CloseDirEntryError:                      ;
2226: EE54 21 C5 EA               LD     HL,exitParameterByte ;
2227: EE57 35                     DEC    M                    ; Set Exit value to 0FFH            ;
2228: EE58 C9                     RET                         ;
2229: EE59         ;---------------------------- Close Directory Entry ------------------------;
2230: EE59
2231: EE59         ;  +++++ ;
2232: EE59
2233: EE59         ;---------------
2234: EE59         ; set a "1" value in currentDisk position of BC
2235: EE59         ; return in HL
2236: EE59             SetCurrentDiskBit:
2237: EE59 C5                     PUSH   BC                   ; save input parameter
2238: EE5A 3A 66 F5               LD     A,(currentDisk)
2239: EE5D 4F                     LD     C,A                  ; ready parameter for shift
2240: EE5E 21 01 00               LD     HL,1                 ; number to shift
2241: EE61 CD 96 F4               CALL   ShiftLeftHLbyC       ; HL = mask to integrate
2242: EE64 C1                     POP    BC                   ; original mask
2243: EE65 79                     LD     A,C
2244: EE66 B5                     OR     L
2245: EE67 6F                     LD     L,A
2246: EE68 78                     LD     A,B
2247: EE69 B4                     OR     H
2248: EE6A 67                     LD     H,A                  ; HL = mask or rol(1,currentDisk)
2249: EE6B C9                     RET
2250: EE6C         ;--------------
2251: EE6C
2252: EE6C         ;--------------------------- Scan      Map ----------------------------------;
2253: EE6C         ;-----------------------------------
2254: EE6C         ; byte value from ALLOC is in register A, with shift count
2255: EE6C         ; in register C (to place bit back into position), and
2256: EE6C         ; target ALLOC position in registers HL, rotate and replace
2257: EE6C             RotateAndReplace:
2258: EE6C 0F                     RRCA
2259: EE6D 15                     DEC    D
2260: EE6E C2 6C EE               JP     NZ,RotateAndReplace  ; back into position
2261: EE71 77                     LD     (HL),A               ; back to ALLOC
2262: EE72 C9                     RET
2263: EE73         ;-----------------------------------
2264: EE73
2265: EE73         ;*****************************************************************
2266: EE73
2267: EE73         ;*****************************************************************
2268: EE73         ;=========================== Disk Utilities ================================;
2269: EE73         ;--------------------------- Home The Current Disk ------------------------;
2270: EE73         ;move to home position, then offset to start of dir                        ;
2271: EE73             Home:                           ;
2272: EE73 CD 18 F6               CALL   bcHome               ; Sets Track to 0, and checks      ;
2273: EE76         ; if Buffer needs to be written    ;
2274: EE76 21 89 F5               LD     HL,dpbOFF            ; Number of tracks before directory;
2275: EE79 4E                     LD     C,(HL)               ;
2276: EE7A 23                     INC    HL                   ;
2277: EE7B 46                     LD     B,(HL)               ;
2278: EE7C CD 1E F6               CALL   bcSettrk             ; Point at 1st directory position  ;
2279: EE7F         ;
2280: EE7F         ; Set Current Track and Sector to 00                                       ;
2281: EE7F AF                     XOR    A                    ; set ACC to 00                    ;
2282: EE80 2A 70 F5               LD     HL,(caTrack)         ;
2283: EE83 77                     LD     (HL),A               ;
2284: EE84 23                     INC    HL                   ;
2285: EE85 77                     LD     (HL),A               ;
2286: EE86 2A 72 F5               LD     HL,(caSector)        ;
2287: EE89 77                     LD     (HL),A               ;
2288: EE8A 23                     INC    HL                   ;
2289: EE8B 77                     LD     (HL),A               ;
2290: EE8C C9                     RET                         ;
2291: EE8D         ;
2292: EE8D         ;--------------------------- Home The Current Disk ------------------------;
2293: EE8D         ;--------------------------- Set DMAs -------------------------------------;
2294: EE8D             SetDataDMA:                      ;
2295: EE8D 21 6C F5               LD     HL,initDAMAddress    ;
2296: EE90 18 03                  JR     SetDMA               ; Skip to complete the call        ;
2297: EE92         ;	LD		BC,initDAMAddress                                              ;
2298: EE92         ;	JP		bcSetdma					; Call BIOS to set                 ;
2299: EE92         ;
2300: EE92             SetDirDMA:                      ;
2301: EE92 21 74 F5               LD     HL,caDirectoryDMA    ; Load current directory Buffer    ;
2302: EE95         ;	LD		BC,caDirectoryDMA			; Load current directory Buffer    ;
2303: EE95         ;	JP		bcSetdma					; Call BIOS to set                 ;
2304: EE95         ;
2305: EE95             SetDMA:                         ;
2306: EE95 4E                     LD     C,(HL)               ;
2307: EE96 23                     INC    HL                   ;
2308: EE97 46                     LD     B,(HL)               ; parameter ready              ;
2309: EE98 C3 24 F6               JP     bcSetdma             ; call bios to set             ;
2310: EE9B         ;--------------------------- Set DMAs -------------------------------------;
2311: EE9B         ;--------------------------- Read Buffer ----------------------------------;
2312: EE9B         ;reads into current DMA, using current Disk,Track and Sector               ;
2313: EE9B             ReadBuffer:                      ;
2314: EE9B CD 27 F6               CALL   bcRead               ; Do the read at the BIOS level    ;
2315: EE9E B7                     OR     A                    ; Check status                     ;
2316: EE9F C2 FA F4               JP     NZ,erPermanentNoWait ; Report if Status not OK          ;
2317: EEA2 C9                     RET                         ;
2318: EEA3         ;--------------------------- Read Buffer ----------------------------------;
2319: EEA3         ;--------------------------- Set Current Disk Read Only --------------------;
2320: EEA3         ;set current disk to read only                                              ;
2321: EEA3             SetDiskReadOnly:                      ;
2322: EEA3 2A 68 F5               LD     HL,(readOnlyVector)  ; Get the Vector                    ;
2323: EEA6         ;
2324: EEA6 3A 66 F5               LD     A,(currentDisk)      ; Get the current disk              ;
2325: EEA9 47                     LD     B,A                  ; Move into B                       ;
2326: EEAA CD B7 F4               CALL   SetVectorBit         ; Set the bit	                    ;
2327: EEAD 22 68 F5               LD     (readOnlyVector),HL  ; Update the Vector                 ;
2328: EEB0         ;
2329: EEB0 2A 83 F5               LD     HL,(dpbDRM)          ; Directory Max Value               ;
2330: EEB3 EB                     EX     DE,HL                ;
2331: EEB4 2A 6E F5               LD     HL,(caDirMaxValue)   ; HL = .Directory max value         ;
2332: EEB7 73                     LD     (HL),E               ;
2333: EEB8 23                     INC    HL                   ;
2334: EEB9 72                     LD     (HL),D               ;
2335: EEBA C9                     RET                         ;
2336: EEBB         ;--------------------------- Set disk Read Only ----------------------------;
2337: EEBB         ;--------------------------- Is Disk Write Protected -----------------------;
2338: EEBB         ;Returns:	Z flag	= Set if not Write Protected	(Z)                     ;
2339: EEBB         ;					= reset if Write Protected		(NZ)					;
2340: EEBB             IsDiskWriteProtected:                      ;
2341: EEBB 2A 68 F5               LD     HL,(readOnlyVector)  ; Get Read Only Vector              ;
2342: EEBE 3A 66 F5               LD     A,(currentDisk)      ; Get current disk                  ;
2343: EEC1 47                     LD     B,A                  ;
2344: EEC2 CD A7 F4               CALL   IsBitSet             ; Check the bit                     ;
2345: EEC5 C9                     RET                         ; NZ if Disk is RO                  ;
2346: EEC6         ;--------------------------- Is Disk Write Protected -----------------------;
2347: EEC6
2348: EEC6         ;------------------------- Reselect Disk if Necessary ----------------------;
2349: EEC6         ;check current fcb to see if reselection necessary                         ;
2350: EEC6             ReselectDisk:                      ;
2351: EEC6 3E FF                  LD     A,TRUE               ;
2352: EEC8 32 96 F5               LD     (fResel),A           ; Mark as possible reselect         ;
2353: EECB 2A C3 EA               LD     HL,(paramDE)         ; Point at current FCB              ;
2354: EECE 7E                     LD     A,(HL)               ; Load disk drive (0 = current)     ;
2355: EECF E6 1F                  AND    01FH                 ; Mask out user Number ??           ;
2356: EED1 3D                     DEC    A                    ; Normalized to 0..29, or 255       ;
2357: EED2 32 C2 EA               LD     (paramE),A           ; Save drive code                   ;
2358: EED5 FE 1E                  CP     30                   ;
2359: EED7 D2 EA EE               JP     NC,NoSelect          ; Skip drive >= 30                  ;
2360: EEDA         ;
2361: EEDA 3A 66 F5               LD     A,(currentDisk)      ; Determine the current drive       ;
2362: EEDD 32 97 F5               LD     (entryDisk),A        ; Save it                           ;
2363: EEE0 7E                     LD     A,(HL)               ;
2364: EEE1 32 98 F5               LD     (fcbDisk),A          ; Get calling disk                  ;
2365: EEE4 E6 E0                  AND    11100000B            ;
2366: EEE6 77                     LD     (HL),A               ; Preserve User Number              ;
2367: EEE7 CD B3 EC               CALL   SelectCurrent        ; Select the new disk               ;
2368: EEEA         ;
2369: EEEA             NoSelect:                       ;
2370: EEEA 3A 65 F5               LD     A,(currentUserNumber) ; Get user code 0...31              ;
2371: EEED 2A C3 EA               LD     HL,(paramDE)         ; Point at disk number              ;
2372: EEF0 B6                     OR     M                    ; Combine                           ;
2373: EEF1 77                     LD     (HL),A               ; FCB[0] = user number & disk       ;
2374: EEF2 C9                     RET                         ;
2375: EEF3         ;------------------------- Reselect Disk if Necessary ----------------------;
2376: EEF3
2377: EEF3
2378: EEF3         ;=========================== Disk Utilities ================================;
2379: EEF3
2380: EEF3         ;=========================== File Utilities ================================;
2381: EEF3         ;--------------------------- Set Record Variables -------------------------;
2382: EEF3         ;set variables from currently FCB - Current Record, RC, EXM                ;
2383: EEF3             SetRecordVars:                      ;
2384: EEF3 CD 0A EF               CALL   GetFcbRecordDetails  ; DE = .RecordCount                ;
2385: EEF6         ;  and HL => .CurrentRecord        ;
2386: EEF6 7E                     LD     A,(HL)               ;
2387: EEF7 32 9B F5               LD     (currentFileRecord),A ; Save current record              ;
2388: EEFA EB                     EX     DE,HL                ;
2389: EEFB 7E                     LD     A,(HL)               ;
2390: EEFC 32 99 F5               LD     (fcbRecordCount),A   ; Save the FCBs RC                 ;
2391: EEFF CD 17 EF               CALL   GetExtentAddress     ; HL=.FCB(fcbExtIndex)             ;
2392: EF02 3A 80 F5               LD     A,(dpbEXM)           ; Extent mask                      ;
2393: EF05 A6                     AND    M                    ; Remove unwanted bits             ;
2394: EF06 32 9A F5               LD     (extentValue),A      ; Store the value                  ;
2395: EF09 C9                     RET                         ;
2396: EF0A         ;--------------------------- Set Record Variables -------------------------;
2397: EF0A         ;----------------------Get File Record Count and Current Record------------;
2398: EF0A         ; returns with DE pointing at RC from FCB                                  ;
2399: EF0A         ;         with HL pointing at Current Record                               ;
2400: EF0A             GetFcbRecordDetails:                      ;
2401: EF0A 2A C3 EA               LD     HL,(paramDE)         ; Get FCB start                    ;
2402: EF0D 11 0F 00               LD     DE,fcbRCIndex        ; Offset to Record Count           ;
2403: EF10 19                     ADD    HL,DE                ;
2404: EF11 EB                     EX     DE,HL                ; DE Points to Record Count        ;
2405: EF12 21 11 00               LD     HL,NEXT_RECORD-fcbRCIndex ;
2406: EF15 19                     ADD    HL,DE                ; HL Points to Current Record      ;
2407: EF16 C9                     RET                         ;
2408: EF17         ;----------------------Get File Record Count and Current Record------------;
2409: EF17         ;----------------------Get FileExtent--------------------------------------;
2410: EF17         ;get current extent field address to (HL)                                 ;
2411: EF17             GetExtentAddress:                      ;
2412: EF17 2A C3 EA               LD     HL,(paramDE)         ; Get FCB                          ;
2413: EF1A 11 0C 00               LD     DE,fcbExtIndex       ; Get EXT offset                   ;
2414: EF1D 19                     ADD    HL,DE                ; HL=.fcb(fcbExtIndex)             ;
2415: EF1E C9                     RET                         ;
2416: EF1F         ;----------------------Get FileExtent--------------------------------------;
2417: EF1F         ;--------------------- Set/Reset Disk Map Allocation Bit ------------------;
2418: EF1F         ; At Entry:	BC Contains to the Block to be modified                        ;
2419: EF1F         ;			E  = TRUE if bit is to be set                                  ;
2420: EF1F         ;			E  <> TRUE if bit is to be reset                               ;
2421: EF1F         ; At Exit:  The target bit in the target Octet will be set/reset	       ;
2422: EF1F             SetResetMapBit:                      ;
2423: EF1F         ;
2424: EF1F 21 00 00               LD     HL,0000H             ; Move the block number from BC    ;
2425: EF22 09                     ADD    HL,BC                ;  to HL                           ;
2426: EF23 4B                     LD     C,E                  ; Move the flag to E               ;
2427: EF24         ;
2428: EF24 7D                     LD     A,L                  ; LSB of the Block Number          ;
2429: EF25 E6 07                  AND    07H                  ; Calculate Mod(Block,8)           ;
2430: EF27 F5                     PUSH   AF                   ; Save the OctetBit                ;
2431: EF28 06 03                  LD     B,3                  ;
2432: EF2A CD 13 F1               CALL   ShiftRightHLbyB      ; Calculate Block / 8              ;
2433: EF2D ED 5B 7A F5               LD     DE,(caAllocVector)   ; Start Of Map                     ;
2434: EF31 19                     ADD    HL,DE                ; Address of targeted Octet        ;
2435: EF32 F1                     POP    AF                   ;
2436: EF33 47                     LD     B,A                  ; Get the bit                      ;
2437: EF34         ;
2438: EF34 04                     INC    B                    ; Adjust for looping               ;
2439: EF35 C5                     PUSH   BC                   ; Will need this later             ;
2440: EF36             Left:                           ;
2441: EF36 CB 16                  RL     (HL)                 ; Rotate the Octet                 ;
2442: EF38 10 FC                  DJNZ   Left                 ;  to move target bit to bit 0     ;
2443: EF3A C1                     POP    BC                   ; Restore loop limit and           ;
2444: EF3B 37                     SCF                         ;  set/reset flag                  ;
2445: EF3C 0C                     INC    C                    ; was C = TRUE                     ;
2446: EF3D 28 01                  JR     Z,Right              ; Skip if Set                      ;
2447: EF3F 3F                     CCF                         ; Set for Reset                    ;
2448: EF40             Right:                          ;
2449: EF40 CB 1E                  RR     (HL)                 ; Move the Octet back              ;
2450: EF42 10 FC                  DJNZ   Right                ;  to its original alignment       ;
2451: EF44 C9                     RET                         ;
2452: EF45         ;--------------------- Set/Reset Disk Map Allocation Bit ------------------;
2453: EF45         ;--------------------- Initialize Extent Number MSB -----------------------;
2454: EF45         ;clear the Extent number field for user open/make (S2)                    ;
2455: EF45             InitializeExtentNumberMSB:                      ;
2456: EF45 CD 4B EF               CALL   GetExtentNumberMSB   ;
2457: EF48 36 00                  LD     (HL),0               ; Set it to = 0            ;
2458: EF4A C9                     RET                         ;
2459: EF4B         ;--------------------- Initialize Extent Number MSB -----------------------;
2460: EF4B         ;--------------------- Get Extent Number MSB| Write Protect ---------------;
2461: EF4B         ; Get S2 value                                                             ;
2462: EF4B         ;  Returns:	A = S2 Value (bit 7 write protect, bits 0-6 Ext MSB)           ;
2463: EF4B         ;			HL = Address of S2 for the FCB pointed to by paramDE           ;
2464: EF4B             GetWriteFileFlagValue:                      ; S2 bit 7                 ;
2465: EF4B             GetExtentNumberMSB:                      ; S2 bits 0-6              ;
2466: EF4B 2A C3 EA               LD     HL,(paramDE)         ; FCB address              ;
2467: EF4E 11 0E 00               LD     DE,fcbS2Index        ; Index to value           ;
2468: EF51 19                     ADD    HL,DE                ; Address of value         ;
2469: EF52 7E                     LD     A,(HL)               ; load into ACC            ;
2470: EF53 C9                     RET                         ;
2471: EF54         ;--------------------- Get Extent Number MSB| Write Protect ---------------;
2472: EF54         ;--------------------------- Set File Write Flag----------------------------;
2473: EF54         ;Set file write flag in FCB in (paramDE)									;
2474: EF54         ; Used to indicate the FCB is clean. No need to write on close				;
2475: EF54             SetFileWriteFlag:                      ;
2476: EF54 CD 4B EF               CALL   GetWriteFileFlagValue ; A= Value, HL = Address of fcbS2   ;
2477: EF57 CB FE                  SET    7,(HL)               ; Set the FileWriteFlag				;
2478: EF59 C9                     RET                         ;
2479: EF5A         ;?	OR		writeFlagMask				; Set the flag , bit 7 of S2        ;
2480: EF5A         ;?	LD		(HL),A						; Put into FCB                      ;
2481: EF5A         ;?	RET	                                                                    ;
2482: EF5A         ;--------------------------- Set File Write Flag----------------------------;
2483: EF5A         ;--------------------------- Reset File Write Flag--------------------------;
2484: EF5A         ;Reset file write flag in FCB in (paramDE)									;
2485: EF5A         ; Used to indicate the FCB is dirty. Need to write on close					;
2486: EF5A             ResetFileWriteFlag:                      ;
2487: EF5A CD 4B EF               CALL   GetWriteFileFlagValue ; A= Value, HL = Address of fcbS2   ;
2488: EF5D CB BE                  RES    7,(HL)               ; Reset the FileWriteFlag			;
2489: EF5F C9                     RET                         ;
2490: EF60         ;?	AND		0FFH-writeFlagMask			; Remove the flag bit		        ;
2491: EF60         ;?	LD		(HL),A						; Put into FCB                      ;
2492: EF60         ;?	RET	                                                                    ;
2493: EF60         ;--------------------------- Reset File Write Flag--------------------------;
2494: EF60         ;-------------------------- Compare FCB Extents ----------------------------;
2495: EF60         ; Enters:	A containing Target FCB EXT value								;
2496: EF60         ;			HL Points at Possible FCB EXT value								;
2497: EF60         ;compare extent# in A with that in C, return nonzero if they do not match	;
2498: EF60             CompareExtents:                      ;
2499: EF60 C5                     PUSH   BC                   ; Save Callers Registers			;
2500: EF61 F5                     PUSH   AF                   ; Save Target FCB EXT value    		;
2501: EF62 3A 80 F5               LD     A,(dpbEXM)           ; Load the Extent Mask         		;
2502: EF65 2F                     CPL                         ; Complement for And           		;
2503: EF66 47                     LD     B,A                  ; Put negated Mask into B      		;
2504: EF67 7E                     LD     A,(HL)               ; Get Possible FCBs EXT        		;
2505: EF68 A0                     AND    B                    ; Apply the Mask               		;
2506: EF69 4F                     LD     C,A                  ; Low bits removed from C      		;
2507: EF6A F1                     POP    AF                   ; Restore Target FCB EXT value 		;
2508: EF6B A0                     AND    B                    ; Apply the Mask               		;
2509: EF6C 91                     SUB    C                    ; Test if Equal ( Z Flag)      		;
2510: EF6D E6 1F                  AND    maxExtValue          ; Limit Size ?                 		;
2511: EF6F C1                     POP    BC                   ; Restore Callers Registers    		;
2512: EF70 C9                     RET                         ;
2513: EF71         ;-------------------------- Compare FCB Extents ----------------------------;
2514: EF71         ;---------------------Search for Directory Record --------------------------;
2515: EF71         ;  Search for directory record of length C.									;
2516: EF71         ; Target is pointed to by paramDE. The whole directory is searched.			;
2517: EF71         ; If not found then dirEntryIndex is set to -1, else it points to the		;
2518: EF71         ; matched directory record													;
2519: EF71         ; Entry:	C = Search Length                                               ;
2520: EF71         ; Exit		dirEntryIndex  =	Matched directory index, if found			;
2521: EF71         ;								-1 (EOD) if there is no match				;
2522: EF71             SearchForDirectoryRecord:                      ;
2523: EF71 3E FF                  LD     A,0FFH               ;
2524: EF73 32 8F F5               LD     (directoryIndex),A   ; Initialize directory Index        ;
2525: EF76 21 92 F5               LD     HL,searchLength      ;
2526: EF79 71                     LD     (HL),C               ; Save Search Length                ;
2527: EF7A 2A C3 EA               LD     HL,(paramDE)         ; Active FCB                        ;
2528: EF7D 22 93 F5               LD     (searchAddress),HL   ; Start of search                   ;
2529: EF80 CD 06 F0               CALL   SetEndDirectory      ; DirEntryIndex = -1                ;
2530: EF83 CD 73 EE               CALL   Home                 ; Reset Disk,Track, & Sector        ;
2531: EF86         ;
2532: EF86             GetNextDirectoryRecord:                      ;
2533: EF86 0E 00                  LD     C,FALSE              ;
2534: EF88 CD 3C F1               CALL   ReadDirectory        ; Read next Dir Record              ;
2535: EF8B CD 0D F0               CALL   AtEndOfDirectory     ;
2536: EF8E CA E5 EF               JP     Z,NoDirRecordsMatch  ; Done if at EOD                ;
2537: EF91         ;
2538: EF91 2A 93 F5               LD     HL,(searchAddress)   ; Get Current Dir Entry             ;
2539: EF94 EB                     EX     DE,HL                ; DE=beginning of Directory Entry   ;
2540: EF95 1A                     LD     A,(DE)               ; User Number                       ;
2541: EF96 FE E5                  CP     emptyDir             ; Is Dir entry is empty             ;
2542: EF98 CA A3 EF               JP     Z,GetNextDirectoryRecord1 ; Skip if empty                     ;
2543: EF9B         ;
2544: EF9B         ; Check to be sure we are sill in the Directory                             ;
2545: EF9B D5                     PUSH   DE                   ; Save search address               ;
2546: EF9C CD 2D F0               CALL   StillInDirectory     ; Still in the directorY            ;
2547: EF9F D1                     POP    DE                   ; Recall address                    ;
2548: EFA0 D2 E5 EF               JP     NC,NoDirRecordsMatch ; Get out if past directory			;
2549: EFA3         ;
2550: EFA3             GetNextDirectoryRecord1:                      ;
2551: EFA3 CD 16 F0               CALL   GetCurrentDirectoryRecord ; Point at next directory record    ;
2552: EFA6 3A 92 F5               LD     A,(searchLength)     ;
2553: EFA9 4F                     LD     C,A                  ; SearchLength to c (down)          ;
2554: EFAA 06 00                  LD     B,0                  ; Character Index (up)              ;
2555: EFAC         ;
2556: EFAC             TestNextPosition:                      ;
2557: EFAC 1A                     LD     A,(DE)               ;
2558: EFAD FE 3F                  CP     QMARK                ; ? is always a char match          ;
2559: EFAF CA CD EF               JP     Z,SetNextPosition    ; Done with this if it is ?		;
2560: EFB2         ;
2561: EFB2 78                     LD     A,B                  ;
2562: EFB3 FE 0D                  CP     fcbS1Index           ; At File S1 position ?             ;
2563: EFB5 CA CD EF               JP     Z,SetNextPosition    ; Done with this if it is ?		;
2564: EFB8         ; not the fcbS1Index field, extent field?                                  ;
2565: EFB8 FE 0C                  CP     fcbExtIndex          ; Past File Type position ?         ;
2566: EFBA 1A                     LD     A,(DE)               ; Get next character                ;
2567: EFBB CA C7 EF               JP     Z,CheckExtents       ; Skip to search extent             ;
2568: EFBE 96                     SUB    M                    ; Do they match ?                   ;
2569: EFBF E6 7F                  AND    07FH                 ; Strip MSBit                       ;
2570: EFC1 C2 86 EF               JP     NZ,GetNextDirectoryRecord ; Skip if not matched               ;
2571: EFC4 C3 CD EF               JP     SetNextPosition      ; Matched the character             ;
2572: EFC7         ;                                                                           ;
2573: EFC7             CheckExtents:                      ;
2574: EFC7 CD 60 EF               CALL   CompareExtents       ; Matching EXTs is work             ;
2575: EFCA C2 86 EF               JP     NZ,GetNextDirectoryRecord ; Get out if not matched            ;
2576: EFCD         ;
2577: EFCD             SetNextPosition:                      ;
2578: EFCD 13                     INC    DE                   ; Pointer to Looking FOR            ;
2579: EFCE 23                     INC    HL                   ; Pointer to Looking IN             ;
2580: EFCF 04                     INC    B                    ; Character Index in FCB            ;
2581: EFD0 0D                     DEC    C                    ; Length of search                  ;
2582: EFD1 C2 AC EF               JP     NZ,TestNextPosition  ;
2583: EFD4         ; Match Found, entire name matches                                          ;
2584: EFD4 3A A0 F5               LD     A,(dirEntryIndex)    ; Get current Directory Index       ;
2585: EFD7 E6 03                  AND    dirEntryMask         ; Apply the mask                    ;
2586: EFD9 32 C5 EA               LD     (exitParameterByte),A ; Put 0...3. Match FOund            ;
2587: EFDC         ;
2588: EFDC 21 8F F5               LD     HL,directoryIndex    ; Point at Directory Flag           ;
2589: EFDF 7E                     LD     A,(HL)               ; Get value                         ;
2590: EFE0 17                     RLA                         ; Set Carry if Flag = -1            ;
2591: EFE1 D0                     RET    NC                   ; Return with flag still -1         ;
2592: EFE2         ;
2593: EFE2 AF                     XOR    A                    ; Else Clear the flag               ;
2594: EFE3 77                     LD     (HL),A               ;
2595: EFE4 C9                     RET                         ;  and exit                         ;
2596: EFE5         ;------                                                                     ;
2597: EFE5             NoDirRecordsMatch:                      ;
2598: EFE5 CD 06 F0               CALL   SetEndDirectory      ; Set End of Directory -1           ;
2599: EFE8 3E FF                  LD     A,-1                 ; Put Failure Code                  ;
2600: EFEA 32 C5 EA               LD     (exitParameterByte),A ;  into return parameter            ;
2601: EFED C9                     RET                         ;
2602: EFEE         ;---------------------Search for Directory Record --------------------------;
2603: EFEE         ;---------------------------- Write Current Directory Entry ----------------;
2604: EFEE             WriteDir:                       ;
2605: EFEE         ;	CALL	NewCheckSum						; initialize entry              ;
2606: EFEE 0E FF                  LD     C,TRUE               ;
2607: EFF0 CD B5 F1               CALL   CheckSumUtility      ; Set New CheckSum              ;
2608: EFF3         ;
2609: EFF3 CD 92 EE               CALL   SetDirDMA            ; Directory DMA                 ;
2610: EFF6 0E 01                  LD     C,WriteDirectory     ; Write type                    ;
2611: EFF8 CD FE EF               CALL   WriteBuffer          ; Write the buffer              ;
2612: EFFB C3 8D EE               JP     SetDataDMA           ; Reset DMA to default			;
2613: EFFE         ;
2614: EFFE         ;---------------------------- Write Current Directory Entry ----------------;
2615: EFFE         ;----------------------------------- Write Buffer --------------------------;
2616: EFFE         ; Write buffer and check condition. Current drive,Track, Sector and DMA     ;
2617: EFFE         ; Are set up prior to calling this routine                                  ;
2618: EFFE         ;                                                                           ;
2619: EFFE         ; On Entry: C = 0 => normal write operation		WriteAllocated              ;
2620: EFFE         ;				1 => directory write operation	WriteDirectory              ;
2621: EFFE         ;				2 => start of new block			WriteCleanBuffer			;
2622: EFFE             WriteBuffer:                      ;
2623: EFFE CD 2A F6               CALL   bcWrite              ; Call into BIOS                    ;
2624: F001 B7                     OR     A                    ; Get return code                   ;
2625: F002 C2 FA F4               JP     NZ,erPermanentNoWait ; Error if not 00                   ;
2626: F005 C9                     RET                         ;
2627: F006         ;----------------------------------- Write Buffer --------------------------;
2628: F006
2629: F006         ;=========================== File Utilities ================================;
2630: F006
2631: F006         ;=========================== Directory Utilities ===========================;
2632: F006         ;--------------------------- Set End of Directory indicator ----------------;
2633: F006             SetEndDirectory:                      ;
2634: F006 21 FF FF               LD     HL,EOD               ; Put -1 (0FFFFH) in index          ;
2635: F009 22 A0 F5               LD     (dirEntryIndex),HL   ;
2636: F00C C9                     RET                         ;
2637: F00D         ;--------------------------- Set End of Directory indicator ----------------;
2638: F00D         ;--------------------------- Are we at End Of Directory --------------------;
2639: F00D         ; Tests to see if we are at the End Of the Directory                        ;
2640: F00D         ;                                                                           ;
2641: F00D         ; exits With Z Flag Set if at EOD (dirEntryIndex = -1)                      ;
2642: F00D         ;			 Z Flag reset if still in directory                             ;
2643: F00D         ;
2644: F00D             AtEndOfDirectory:                      ;
2645: F00D 21 A0 F5               LD     HL,dirEntryIndex     ; Point at LSB of Dir index         ;
2646: F010 7E                     LD     A,(HL)               ; Get it                            ;
2647: F011 23                     INC    HL                   ; Point at MSB	of Dir Index		;
2648: F012 BE                     CP     M                    ; LSB = MSB ?                       ;
2649: F013 C0                     RET    NZ                   ;  exit if not if different         ;
2650: F014         ; Same.  are they = 0ffh?           ;
2651: F014 3C                     INC    A                    ;  if yes, A= 0, set Z flag         ;
2652: F015 C9                     RET                         ;
2653: F016         ;--------------------------- Are we at End Of Directory --------------------;
2654: F016         ;--------------------------- Get Directory Element -------------------------;
2655: F016         ; compute the address of a directory element in Directory Buffer            ;
2656: F016         ; Returns:  HL = Address of the specific directory Record                   ;
2657: F016             GetCurrentDirectoryRecord:                      ;
2658: F016 C5                     PUSH   BC                   ; Save BC                           ;
2659: F017 2A 74 F5               LD     HL,(caDirectoryDMA)  ; Get the Directory Buffer base     ;
2660: F01A 3A 9F F5               LD     A,(dirBlockIndex)    ; Get the index value               ;
2661: F01D 4F                     LD     C,A                  ;
2662: F01E AF                     XOR    A                    ; Set to Zero and reset CY          ;
2663: F01F 47                     LD     B,A                  ;
2664: F020 ED 4A                  ADC    HL,BC                ; Compute the Entry Location        ;
2665: F022 C1                     POP    BC                   ; Restore	                        ;
2666: F023 C9                     RET                         ;
2667: F024         ;--------------------------- Get Directory Element -------------------------;
2668: F024         ;--------------------------- Set Directory Entry ---------------------------;
2669: F024         ; Will update directory if not in the directory                             ;
2670: F024         ;
2671: F024             SetDirectoryEntry:                      ;
2672: F024 CD 2D F0               CALL   StillInDirectory     ;
2673: F027 D8                     RET    C                    ; Exit if still in the Directory  	;
2674: F028         ;
2675: F028         ; StillInDirectory will return with:                                        ;
2676: F028         ;									DE = Directory entry number             ;
2677: F028         ;									HL = Address of entry number + 1        ;
2678: F028 13                     INC    DE                   ;
2679: F029 72                     LD     (HL),D               ;
2680: F02A 2B                     DEC    HL                   ;
2681: F02B 73                     LD     (HL),E               ;
2682: F02C C9                     RET                         ;
2683: F02D         ;--------------------------- Set Directory Entry ---------------------------;
2684: F02D         ;--------------------------- Are we sill in the Directory ------------------;
2685: F02D         ;Returns	:                                                               ;
2686: F02D         ;			CY Set   if dirEntryIndex <= Directory Max Value                ;
2687: F02D         ;			CY Reset if dirEntryIndex  > Directory Max Value                ;
2688: F02D         ;			HL = (address of Index Value) + 1                               ;
2689: F02D         ;			DE = Directory Index Value                                      ;
2690: F02D             StillInDirectory:                      ;
2691: F02D 2A A0 F5               LD     HL,(dirEntryIndex)   ;
2692: F030 EB                     EX     DE,HL                ; DE = directory counter            ;
2693: F031 2A 6E F5               LD     HL,(caDirMaxValue)   ; HL = caDirMaxValue              	;
2694: F034 7B                     LD     A,E                  ;
2695: F035 96                     SUB    M                    ;
2696: F036 23                     INC    HL                   ;
2697: F037 7A                     LD     A,D                  ;
2698: F038 9E                     SBC    A,(HL)               ; Set CY if dirEntryIndex           ;
2699: F039 C9                     RET                         ;  <= Directory Max Value       ;
2700: F03A         ;--------------------------- Are we sill in the Directory ------------------;
2701: F03A         ;--------------------------- Scan Disk Map ---------------------------------;
2702: F03A         ; Will Set/Reset the Allocation Map bit(s) for the current directory entry. ;
2703: F03A         ;                                                                           ;
2704: F03A         ; On Entry  C = TRUE	Set the Map bits for each block found in FCB        ;
2705: F03A         ;           C = FALSE	reset the Map bits for each block found in FCB      ;
2706: F03A         ;
2707: F03A             ScanDiskMap:                      ;
2708: F03A C5                     PUSH   BC                   ; Save the Set/Reset Info           ;
2709: F03B CD 16 F0               CALL   GetCurrentDirectoryRecord ; HL points at the directory record ;
2710: F03E 11 10 00               LD     DE,fcbDiskMapIndex   ; DE is the index to the FCBs Map   ;
2711: F041 19                     ADD    HL,DE                ; HL is now at start of the MAP     ;
2712: F042 0E 11                  LD     C,fcbLength-fcbDiskMapIndex+1 ; Size of Disk Allocation Map + 1  ;
2713: F044         ;
2714: F044             ScanDiskMap0:                      ;
2715: F044 D1                     POP    DE                   ; Recall the set/reset Info         ;
2716: F045 0D                     DEC    C                    ;
2717: F046 C8                     RET    Z                    ; Loop once for each disk map entry ;
2718: F047         ;
2719: F047 D5                     PUSH   DE                   ; Save the Set/Reset Info           ;
2720: F048 3A 95 F5               LD     A,(byteAllocationFlag) ; Is Map Byte or Word sized         ;
2721: F04B B7                     OR     A                    ;
2722: F04C 28 07                  JR     Z,ScanDiskMapWord    ; Skip if Word Sized                ;
2723: F04E         ;  Byte Allocation scan operation                                           ;
2724: F04E C5                     PUSH   BC                   ; Save counter                      ;
2725: F04F E5                     PUSH   HL                   ; Save map address                  ;
2726: F050 4E                     LD     C,(HL)               ;
2727: F051 06 00                  LD     B,0                  ; BC=block# for Byte                ;
2728: F053 18 06                  JR     ScanDiskMap2         ;
2729: F055         ; Word scan operation                                                       ;
2730: F055             ScanDiskMapWord:                      ;
2731: F055 0D                     DEC    C                    ; Adjust counter for 2 bytes        ;
2732: F056 C5                     PUSH   BC                   ; Save counter                      ;
2733: F057 46                     LD     B,(HL)               ;
2734: F058 23                     INC    HL                   ;
2735: F059 4E                     LD     C,(HL)               ; BC=block# for Word                ;
2736: F05A E5                     PUSH   HL                   ; Save map address                  ;
2737: F05B         ;
2738: F05B         ; Arrive here with BC=block#, E=0/1	                                        ;
2739: F05B             ScanDiskMap2:                      ;
2740: F05B 79                     LD     A,C                  ;
2741: F05C B0                     OR     B                    ; Skip if = 0000 (No Block)         ;
2742: F05D C4 1F EF               CALL   NZ,SetResetMapBit    ; bit set to 0/1 its in C           ;
2743: F060 E1                     POP    HL                   ;
2744: F061 23                     INC    HL                   ; to next bit position              ;
2745: F062 C1                     POP    BC                   ; recall counter                    ;
2746: F063 C3 44 F0               JP     ScanDiskMap0         ; for another item                  ;
2747: F066         ;
2748: F066         ;--------------------------- Scan Disk Map ---------------------------------;
2749: F066         ;--------------------------- Get Closest Disk Block ------------------------;
2750: F066         ; Find the closest available disk block, and mark in Map as allocated       ;
2751: F066         ; Enter	BC	= Block number to base the search on                            ;
2752: F066         ; Exit	HL	= 0000 if There are no available open blocks                    ;
2753: F066         ;			= block number of available and marked block                    ;
2754: F066         ;
2755: F066             GetClosestBlock:                      ;
2756: F066 C5                     PUSH   BC                   ; save the starting Block #         ;
2757: F067         ;
2758: F067 2A 81 F5               LD     HL,(dpbDSM)          ; Maximum allocation value          ;
2759: F06A CD 11 F1               CALL   DivideHLby8          ; Length of Map	                    ;
2760: F06D EB                     EX     DE,HL                ; put size into DE			        ;
2761: F06E E1                     POP    HL                   ; Block number into HL              ;
2762: F06F CD 11 F1               CALL   DivideHLby8          ; Length of Map                     ;
2763: F072 EB                     EX     DE,HL                ; Size in HL, Start in DE           ;
2764: F073 AF                     XOR    A                    ; Reset CY                          ;
2765: F074 ED 52                  SBC    HL,DE                ; Size for right                    ;
2766: F076         ; DE = Start Index                                                          ;
2767: F076         ; DE = Left Size                                                            ;
2768: F076         ; HL	= Right Size                                                        ;
2769: F076 E5                     PUSH   HL                   ; Save right size                   ;
2770: F077 D5                     PUSH   DE                   ; Save left size & Start Index      ;
2771: F078 3E FF                  LD     A,0FFH               ; Full Octet                        ;
2772: F07A         ;
2773: F07A 2A 7A F5               LD     HL,(caAllocVector)   ; Start of Map                      ;
2774: F07D 19                     ADD    HL,DE                ; Determine initial Octet			;
2775: F07E         ; Set up Left side                                                          ;
2776: F07E C1                     POP    BC                   ; Left size                         ;
2777: F07F 03                     INC    BC                   ; adjust                            ;
2778: F080 E5                     PUSH   HL                   ; Save initial Octet                ;
2779: F081 11 FF FF               LD     DE,-1                ; Flag as Left register set         ;
2780: F084         ; HL = Initial Octet                                                        ;
2781: F084         ; BC = Left Size                                                            ;
2782: F084 D9                     EXX                         ; Use alternate registers           ;
2783: F085 11 00 00               LD     DE,0000H             ; Flag as Right register set        ;
2784: F088 E1                     POP    HL                   ; Get Initial Octet                 ;
2785: F089 C1                     POP    BC                   ; Get Right Size                    ;
2786: F08A 03                     INC    BC                   ; adjust                            ;
2787: F08B             LookRight:                      ;
2788: F08B ED A1                  CPI                         ; UnSet Bit?                        ;
2789: F08D 20 28                  JR     NZ,FoundFreeOctet    ;  Then get out of search           ;
2790: F08F E2 A8 F0               JP     PO,NoMoreRight       ; Exhausted Map to the right        ;
2791: F092         ;
2792: F092 D9                     EXX                         ; Switch to the Left                ;
2793: F093 ED A9                  CPD                         ; UnSet Bit?                        ;
2794: F095 20 20                  JR     NZ,FoundFreeOctet    ;  Then get out of search           ;
2795: F097 E2 9D F0               JP     PO,NoMoreLeft        ; Exhausted Map to the right        ;
2796: F09A D9                     EXX                         ; switch to right                   ;
2797: F09B 18 EE                  JR     LookRight            ; Keep on looking                   ;
2798: F09D         ;			----------------			                                    ;
2799: F09D             NoMoreLeft:                      ;
2800: F09D D9                     EXX                         ; Switch to Right                   ;
2801: F09E             NoMoreLeftLoop:                      ;
2802: F09E ED A1                  CPI                         ;
2803: F0A0 20 15                  JR     NZ,FoundFreeOctet    ;  Then get out of search           ;
2804: F0A2 E2 B3 F0               JP     PO,NoFreeBlocks      ; Exhausted Map to the right		;
2805: F0A5 18 F7                  JR     NoMoreLeftLoop       ; Keep looking                      ;
2806: F0A7 76                     HALT                        ;
2807: F0A8             NoMoreRight:                      ;
2808: F0A8 D9                     EXX                         ; Switch to Left                    ;
2809: F0A9             NoMoreRightLoop:                      ;
2810: F0A9 ED A9                  CPD                         ;
2811: F0AB 20 0A                  JR     NZ,FoundFreeOctet    ;  Then get out of search           ;
2812: F0AD E2 B3 F0               JP     PO,NoFreeBlocks      ; Exhausted Map to the right        ;
2813: F0B0 18 F7                  JR     NoMoreRightLoop      ; Keep looking                      ;
2814: F0B2 76                     HALT                        ;
2815: F0B3             NoFreeBlocks:                      ;
2816: F0B3 21 00 00               LD     HL,0000H             ; Return 0000 in HL                 ;
2817: F0B6 C9                     RET                         ;
2818: F0B7         ;			----------------			                                    ;
2819: F0B7             FoundFreeOctet:                      ;
2820: F0B7 BB                     CP     E                    ; Left or Right                     ;
2821: F0B8 28 03                  JR     Z,FoundFreeOctet1    ;  it was left                      ;
2822: F0BA 2B                     DEC    HL                   ; Adjust for direction              ;
2823: F0BB 18 01                  JR     FoundFreeOctet2      ;
2824: F0BD         ;
2825: F0BD             FoundFreeOctet1:                      ;
2826: F0BD 23                     INC    HL                   ; Adjust for direction              ;
2827: F0BE             FoundFreeOctet2:                      ;
2828: F0BE 01 00 00               LD     BC,00                ; need to keep track of bit         ;
2829: F0C1             FoundFreeOctet3:                      ;
2830: F0C1 CB 06                  RLC    (HL)                 ;
2831: F0C3 03                     INC    BC                   ;
2832: F0C4 38 FB                  JR     C,FoundFreeOctet3    ; Loop if Bit 7 set                 ;
2833: F0C6 CB C6                  SET    0,(HL)               ; Make map bit set                  ;
2834: F0C8 41                     LD     B,C                  ; Put count in B                    ;
2835: F0C9             FoundFreeOctet4:                      ;
2836: F0C9 CB 0E                  RRC    (HL)                 ;
2837: F0CB 10 FC                  DJNZ   FoundFreeOctet4      ; Restore the Octet                 ;
2838: F0CD 0B                     DEC    BC                   ; adjust for Zero based value       ;
2839: F0CE C5                     PUSH   BC                   ; Save the bit index                ;
2840: F0CF ED 4B 7A F5               LD     BC,(caAllocVector)   ; Get Map start                     ;
2841: F0D3 AF                     XOR    A                    ; Clear CY                          ;
2842: F0D4 ED 42                  SBC    HL,BC                ; Get how far in the map            ;
2843: F0D6 CD 1B F1               CALL   MultiplyHLby8        ; Calculate the Octet           ;
2844: F0D9 C1                     POP    BC                   ; Restore index into Octet          ;
2845: F0DA 09                     ADD    HL,BC                ; This is the Block Number          ;
2846: F0DB C9                     RET                         ;
2847: F0DC         ;--------------------------- Get Closest Disk Block ------------------------;
2848: F0DC         ;---------------------------- Copy Dir Entry To User's Buffer --------------;
2849: F0DC             CopyDirEntryToUserDMA:                      ;
2850: F0DC 2A 74 F5               LD     HL,(caDirectoryDMA)  ; Point at Directory buffer         ;
2851: F0DF ED 5B 6C F5               LD     DE,(initDAMAddress)  ; Point at User's Buffer            ;
2852: F0E3 01 80 00               LD     BC,cpmRecordSize     ; The entire record                 ;
2853: F0E6 ED B0                  LDIR                        ; Move it                           ;
2854: F0E8 C9                     RET                         ;
2855: F0E9         ;---------------------------- Copy Dir Entry To User's Buffer --------------;
2856: F0E9         ;--------------------- Return last Directory Index to Caller ---------------;
2857: F0E9             DirLocationToReturnLoc:                      ;
2858: F0E9 3A 8F F5               LD     A,(directoryIndex)   ; Get last directory Index          ;
2859: F0EC 32 C5 EA               LD     (exitParameterByte),A ; Save for return to Caller         ;
2860: F0EF C9                     RET                         ;
2861: F0F0         ;--------------------- Return last Directory Index to Caller ---------------;
2862: F0F0         ;--------------------------- Check OK to Write to Disk ---------------------;
2863: F0F0             CheckWrite:                      ;
2864: F0F0 CD BB EE               CALL   IsDiskWriteProtected ; Is this disk Write Protected?     ;
2865: F0F3 C8                     RET    Z                    ; OK to write                       ;
2866: F0F4 C3 DB F4               JP     errReadOnlyDisk      ; Report read only disk error		;
2867: F0F7         ;--------------------------- Check OK to Write to Disk ---------------------;
2868: F0F7         ;--------------------------- Check File Write Protect Status ---------------;
2869: F0F7             CheckRODirectory:                      ;
2870: F0F7 CD 16 F0               CALL   GetCurrentDirectoryRecord ; Use Entry in Directory Buffer     ;
2871: F0FA         ; Use HL as the directory entry in Question                                 ;
2872: F0FA             CheckROFile:                      ;
2873: F0FA 11 09 00               LD     DE,fcbROfileIndex    ; Index into FC for RO              ;
2874: F0FD 19                     ADD    HL,DE                ; point at the byte                 ;
2875: F0FE 7E                     LD     A,(HL)               ;
2876: F0FF 17                     RLA                         ; Set CY if RO bit set              ;
2877: F100 D0                     RET    NC                   ; Return OK                         ;
2878: F101 C3 E1 F4               JP     errReadOnlyFile      ; Report to read only File          ;
2879: F104         ;--------------------------- Check File Write Protect Status ---------------;
2880: F104
2881: F104         ;=========================== Directory Utilities ===========================;
2882: F104
2883: F104         ; GU
2884: F104
2885: F104         ;=========================== General   Utilities ===========================;
2886: F104
2887: F104         ;--------------------------- Rotate HL right by value in C ----------------;
2888: F104         ;
2889: F104         ; HL = Value to be rotated Right                                           ;
2890: F104         ;  B = Amount to shift                                                     ;
2891: F104             RotateRightHLbyB:                      ;
2892: F104 37                     SCF                         ; Set carry flag, expect LSBit = 1 ;
2893: F105 CB 45                  BIT    0,L                  ; is LSB set?                      ;
2894: F107 20 01                  JR     NZ,RotateRightHLbyB1 ; Skip if LSB set              ;
2895: F109 3F                     CCF                         ; else Clear Carry flag            ;
2896: F10A             RotateRightHLbyB1:                      ;
2897: F10A CB 1C                  RR     H                    ; Shift thru CY                    ;
2898: F10C CB 1D                  RR     L                    ; ditto                            ;
2899: F10E 10 F4                  DJNZ   RotateRightHLbyB     ;
2900: F110 C9                     RET                         ;
2901: F111         ;
2902: F111         ;--------------------------- Rotate HL right by value in C ----------------;
2903: F111         ;---------Divide HL by 8  &&  Shift HL right by value in C ----------------;
2904: F111         ; HL = Value to be shifted Right                                           ;
2905: F111             DivideHLby8:                      ;
2906: F111 06 03                  LD     B,3                  ; 8 = 2**3						   ;
2907: F113         ;  B = Amount to shift                                                     ;
2908: F113             ShiftRightHLbyB:                      ;
2909: F113 AF                     XOR    A                    ; else Clear Carry flag            ;
2910: F114 CB 1C                  RR     H                    ; Shift thru CY                    ;
2911: F116 CB 1D                  RR     L                    ; ditto                            ;
2912: F118 10 F9                  DJNZ   ShiftRightHLbyB      ;
2913: F11A C9                     RET                         ;
2914: F11B         ;---------Divide HL by 8  &&  Shift HL right by value in C ----------------;
2915: F11B         ;---------Multiply HL by 8  &&  Shift HL left by value in C ---------------;
2916: F11B         ; HL = Value to be shifted Left                                            ;
2917: F11B             MultiplyHLby8:                      ;
2918: F11B 06 03                  LD     B,3                  ; 8 = 2**3						   ;
2919: F11D         ;  B = Amount to shift                                                     ;
2920: F11D             ShiftLeftHLbyB:                      ;
2921: F11D AF                     XOR    A                    ; else Clear Carry flag            ;
2922: F11E CB 15                  RL     L                    ; Shift thru CY                    ;
2923: F120 CB 14                  RL     H                    ; ditto                            ;
2924: F122 10 F9                  DJNZ   ShiftLeftHLbyB       ;
2925: F124 C9                     RET                         ;
2926: F125         ;---------Multiply HL by 8  &&  Shift HL left by value in C ---------------;
2927: F125         ;----------------------------- Merge ---------------------------------------;
2928: F125         ; Merge Map Block Numbers between FCB and directory record                  ;
2929: F125         ; HL has pointer to map for either dir record or FCB,                       ;
2930: F125         ; DE has the other pointer. If HL is pointing to a non empty block, then    ;
2931: F125         ; it just returns, Else it copies the block number to where DE is pointing  ;
2932: F125         ;
2933: F125             Merge:                          ;
2934: F125 7E                     LD     A,(HL)               ; Get the first byte                ;
2935: F126 23                     INC    HL                   ;
2936: F127 B6                     OR     M                    ; OR it with the second byte        ;
2937: F128 2B                     DEC    HL                   ; Restore HL to start               ;
2938: F129 C0                     RET    NZ                   ; Exit if both are 0s               ;
2939: F12A         ; HL points to a non Zero value	                                            ;
2940: F12A 1A                     LD     A,(DE)               ; Get the first byte                ;
2941: F12B 77                     LD     (HL),A               ; Move it                           ;
2942: F12C 13                     INC    DE                   ;
2943: F12D 23                     INC    HL                   ; Increment both pointers           ;
2944: F12E 1A                     LD     A,(DE)               ; Get the second byte               ;
2945: F12F 77                     LD     (HL),A               ; Move it                           ;
2946: F130 1B                     DEC    DE                   ;
2947: F131 2B                     DEC    HL                   ; Restore HL & DE to start          ;
2948: F132 C9                     RET                         ;
2949: F133         ;----------------------------- Merge ---------------------------------------;
2950: F133
2951: F133
2952: F133         ;=========================== General   Utilities ===========================;
2953: F133
2954: F133         ;--------------------------- Read Directory Record -------------------------;
2955: F133         ; read a directory entry into the directory buffer                          ;
2956: F133             ReadDirRecord:                      ;
2957: F133 CD 92 EE               CALL   SetDirDMA            ; System Assigned Buffer            ;
2958: F136 CD 9B EE               CALL   ReadBuffer           ; Go to BIOS for the read           ;
2959: F139 C3 8D EE               JP     SetDataDMA           ; Restore DMA                       ;
2960: F13C         ;--------------------------- Read Directory Record -------------------------;
2961: F13C
2962: F13C         ;--------------------------- Read Directory --------------------------------;
2963: F13C         ; Read next directory entry                                                 ;
2964: F13C         ; Enter :                                                                   ;
2965: F13C         ;		C =  TRUE initializing and setting CheckSum                         ;
2966: F13C         ;		  <> TRUE Checking existing CheckSum                                ;
2967: F13C             ReadDirectory:                      ;
2968: F13C ED 5B 83 F5               LD     DE,(dpbDRM)          ; Number of Dir Entries-1           ;
2969: F140 2A A0 F5               LD     HL,(dirEntryIndex)   ; Prior Directory Index             ;
2970: F143 23                     INC    HL                   ; Increment the Index               ;
2971: F144 22 A0 F5               LD     (dirEntryIndex),HL   ; Save current directory index      ;
2972: F147 AF                     XOR    A                    ; Clear the CY flag                 ;
2973: F148 ED 52                  SBC    HL,DE                ; Are we at end Of the directory    ;
2974: F14A 20 04                  JR     NZ,ReadDirectory0    ;  No the process                   ;
2975: F14C CD 06 F0               CALL   SetEndDirectory      ;  else we are done                 ;
2976: F14F C9                     RET                         ;
2977: F150         ;
2978: F150         ; Calculate the entry index Position in Buffer                              ;
2979: F150             ReadDirectory0:                      ;
2980: F150 3A A0 F5               LD     A,(dirEntryIndex)    ; Get the index                     ;
2981: F153 E6 03                  AND    dirEntryMask         ; Determine Entry number            ;
2982: F155 06 05                  LD     B,fcbShift           ; Shift value for Record Size       ;
2983: F157             ReadDirectory1:                      ;
2984: F157 87                     ADD    A,A                  ;
2985: F158 10 FD                  DJNZ   ReadDirectory1       ;
2986: F15A 32 9F F5               LD     (dirBlockIndex),A    ; Now save the Index into to buffer ;
2987: F15D B7                     OR     A                    ; Is this the 1st entry?            ;
2988: F15E C0                     RET    NZ                   ;  return if not.                   ;
2989: F15F         ;
2990: F15F C5                     PUSH   BC                   ; Save init Flag (CheckSum)         ;
2991: F160 CD 6A F1               CALL   SeekDir              ; Set up for Directory Read         ;
2992: F163 CD 33 F1               CALL   ReadDirRecord        ; Read the directory record         ;
2993: F166 C1                     POP    BC                   ; Recall initialization flag        ;
2994: F167 C3 B5 F1               JP     CheckSumUtility      ; Checksum the directory            ;
2995: F16A         ;--------------------------- Read Directory --------------------------------;
2996: F16A         ;--------------------------- Seek Directory --------------------------------;
2997: F16A         ;seek the record containing the current directory entry					;
2998: F16A             SeekDir:                        ;
2999: F16A 2A A0 F5               LD     HL,(dirEntryIndex)   ; Directory Entry Index             ;
3000: F16D 06 02                  LD     B,dirEntryShift      ; 4 entries per record              ;
3001: F16F CD 13 F1               CALL   ShiftRightHLbyB      ;
3002: F172 22 9D F5               LD     (absoluteCPMRecord),HL ;
3003: F175 22 A2 F5               LD     (dirRecord),HL       ; Save                              ;
3004: F178 C3 7B F1               JP     Seek                 ;
3005: F17B         ;--------------------------- Seek Directory --------------------------------;
3006: F17B         ;--------------------------- Seek ------------------------------------------;
3007: F17B             Seek:                           ;
3008: F17B 01 FF FF               LD     BC,0FFFFH            ; Initialize the track counter      ;
3009: F17E 2A 9D F5               LD     HL,(absoluteCPMRecord) ; Get the record in question        ;
3010: F181 ED 5B 7C F5               LD     DE,(dpbSPT)          ; Get Sectors Per track             ;
3011: F185         ;
3012: F185             Seek0:                          ;
3013: F185 03                     INC    BC                   ; Divide the record                 ;
3014: F186 AF                     XOR    A                    ;  by the sectors per track         ;
3015: F187 ED 52                  SBC    HL,DE                ;
3016: F189 30 FA                  JR     NC,Seek0             ;  to get the gross track number    ;
3017: F18B         ;
3018: F18B         ;
3019: F18B 19                     ADD    HL,DE                ; Gets the sector in the track      ;
3020: F18C E5                     PUSH   HL                   ; Save Index Sector                 ;
3021: F18D         ;
3022: F18D DD 2A 70 F5               LD     IX,(caTrack)         ;
3023: F191 DD 71 00               LD     (IX+0),C             ;
3024: F194 DD 70 01               LD     (IX+1),B             ; Save the Gross Track              ;
3025: F197         ;
3026: F197 EB                     EX     DE,HL                ; Take the index from the record    ;
3027: F198 2A 9D F5               LD     HL,(absoluteCPMRecord) ;
3028: F19B AF                     XOR    A                    ;
3029: F19C ED 52                  SBC    HL,DE                ;  and you get the Block start      ;
3030: F19E         ;
3031: F19E DD 2A 72 F5               LD     IX,(caSector)        ;
3032: F1A2 DD 75 00               LD     (IX+0),L             ;
3033: F1A5 DD 74 01               LD     (IX+1),H             ; Save the Block Start              ;
3034: F1A8         ;
3035: F1A8 2A 89 F5               LD     HL,(dpbOFF)          ; Get directory Offset (tracks)		;
3036: F1AB 09                     ADD    HL,BC                ;  to add to the gross Track        ;
3037: F1AC E5                     PUSH   HL                   ;  which yields the net or          ;
3038: F1AD C1                     POP    BC                   ;  actual track for the record      ;
3039: F1AE CD 1E F6               CALL   bcSettrk             ; Set the net (actual) track        ;
3040: F1B1         ;
3041: F1B1 C1                     POP    BC                   ; Get the sector within the track   ;
3042: F1B2 C3 21 F6               JP     bcSetsec             ;  and set it for the seek          ;
3043: F1B5         ;
3044: F1B5         ;--------------------------- Seek ------------------------------------------;
3045: F1B5         ;--------------------------- Check Sum Utility -----------------------------;
3046: F1B5         ; At entry                                                                  ;
3047: F1B5         ;			C  = TRUE	-  Set the Checksum values in Vector                ;
3048: F1B5         ;			C <> TRUE	-  Validate Checksum value in Vector                ;
3049: F1B5         ;
3050: F1B5             CheckSumUtility:                      ;
3051: F1B5 2A 87 F5               LD     HL,(dpbCKS)          ;
3052: F1B8 ED 5B A2 F5               LD     DE,(dirRecord)       ;
3053: F1BC AF                     XOR    A                    ;
3054: F1BD ED 52                  SBC    HL,DE                ; Skip if past the Directory    ;
3055: F1BF D8                     RET    C                    ;  Entries                      ;
3056: F1C0         ;
3057: F1C0 C5                     PUSH   BC                   ; Save New/Validate Flag        ;
3058: F1C1         ;
3059: F1C1         ; CheckSum = MOD( SUM(all bytes in The Record), 0FFH)                       ;
3060: F1C1             ComputeCheckSum:                      ;
3061: F1C1 06 80                  LD     B,cpmRecordSize      ;
3062: F1C3 2A 74 F5               LD     HL,(caDirectoryDMA)  ;
3063: F1C6 EE 00                  XOR                         ;
3064: F1C8             ComputeCheckSum1:                      ;
3065: F1C8 86                     ADD    A,(HL)               ;
3066: F1C9 23                     INC    HL                   ;
3067: F1CA 10 FC                  DJNZ   ComputeCheckSum1     ;
3068: F1CC         ; Checksum is in ACC	                                                    ;
3069: F1CC         ;
3070: F1CC 2A 78 F5               LD     HL,(caCheckSum)      ; Address of check sum vector       ;
3071: F1CF ED 5B A2 F5               LD     DE,(dirRecord)       ; Index to this record              ;
3072: F1D3 19                     ADD    HL,DE                ; Address of this record in vector  ;
3073: F1D4 C1                     POP    BC                   ; Retrieve New/Validate Flag        ;
3074: F1D5 0C                     INC    C                    ;
3075: F1D6 CA E3 F1               JP     Z,SetNewCheckSum     ; Set the Value if Flag was TRUE    ;
3076: F1D9         ;
3077: F1D9 BE                     CP     M                    ; Else we are checking the value    ;
3078: F1DA C8                     RET    Z                    ; Exit if OK                        ;
3079: F1DB         ; possible checksum error, are we beyond the end of the disk?               ;
3080: F1DB CD 2D F0               CALL   StillInDirectory     ;
3081: F1DE D0                     RET    NC                   ; OK, if not in the directory       ;
3082: F1DF CD A3 EE               CALL   SetDiskReadOnly      ;  else the checksums don't match   ;
3083: F1E2 C9                     RET                         ;  Set disk RO before returning     ;
3084: F1E3         ;
3085: F1E3         ;initializing the checksum                                                 ;
3086: F1E3             SetNewCheckSum:                      ;
3087: F1E3 77                     LD     (HL),A               ;
3088: F1E4 C9                     RET                         ;
3089: F1E5         ;--------------------------- Check Sum Utility -----------------------------;
3090: F1E5
3091: F1E5
3092: F1E5         ;---------------------
3093: F1E5         ;update variables from I/O in  fcb
3094: F1E5             UpdateRecordVars:
3095: F1E5 CD 0A EF               CALL   GetFcbRecordDetails  ; DE => fcbRCIndex(RC) , HL => NEXT_RECORD
3096: F1E8 3A 90 F5               LD     A,(seqReadFlag)
3097: F1EB 4F                     LD     C,A                  ; =1 if sequential i/o
3098: F1EC 3A 9B F5               LD     A,(currentFileRecord) ; get NEXT_RECORD
3099: F1EF 81                     ADD    A,C
3100: F1F0 77                     LD     (HL),A               ; fcb(NEXT_RECORD)=current File Record+seqReadFlag
3101: F1F1 EB                     EX     DE,HL
3102: F1F2 3A 99 F5               LD     A,(fcbRecordCount)
3103: F1F5 77                     LD     (HL),A               ; fcb(fcbRCIndex)=fcbRecordCount
3104: F1F6 C9                     RET
3105: F1F7         ;---------------------
3106: F1F7         ;set file Attributes for current fcb
3107: F1F7             SetAttributes:
3108: F1F7 0E 0C                  LD     C,fcbExtIndex
3109: F1F9 CD 71 EF               CALL   SearchForDirectoryRecord ; through file type
3110: F1FC             SetAttributes1:
3111: F1FC CD 0D F0               CALL   AtEndOfDirectory
3112: F1FF C8                     RET    Z                    ; exit at end of dir
3113: F200 0E 00                  LD     C,0
3114: F202 1E 0C                  LD     E,fcbExtIndex        ;copy name
3115: F204 CD 2F F4               CALL   CopyDir
3116: F207 CD 86 EF               CALL   GetNextDirectoryRecord
3117: F20A C3 FC F1               JP     SetAttributes1
3118: F20D         ;
3119: F20D         ;*****************************************************************
3120: F20D
3121: F20D         ;*****************************************************************
3122: F20D         ;********************** File  Routines ***************************
3123: F20D         ;-----------------------------------------------------------------
3124: F20D         ;-----------------------------------------------------------------
3125: F20D         ;read sequential
3126: F20D         ;IN  - (DE) FCB address
3127: F20D         ;OUT - (A) 00 = success and data available. else no read and no data
3128: F20D             vReadSeq:                       ; func20: (20 - 14) read sequential
3129: F20D CD C6 EE               CALL   ReselectDisk
3130: F210 CD 2D F2               CALL   ReadSeq
3131: F213 C9                     RET
3132: F214         ;-----------------------------------------------------------------
3133: F214         ;write sequential
3134: F214         ;IN  - (DE) FCB address
3135: F214         ;OUT - (A) 00 = success and data available. else no read and no data
3136: F214             vWriteSeq:                      ; func21 (21 - 15) write sequention
3137: F214 CD C6 EE               CALL   ReselectDisk
3138: F217 CD 70 F2               CALL   DiskWriteSeq
3139: F21A C9                     RET
3140: F21B         ;-----------------------------------------------------------------
3141: F21B         ; Make file
3142: F21B         ; In - (DE)	FCB Address
3143: F21B         ; OUT - (A)	Directory Code
3144: F21B         ;	0-3 = success ; 0FFH = File Not Found
3145: F21B             vMakeFile:                      ; func22 (22 - 16) Make file
3146: F21B CD 45 EF               CALL   InitializeExtentNumberMSB ; set S2 to Zero
3147: F21E CD C6 EE               CALL   ReselectDisk
3148: F221 C3 C0 F3               JP     MakeNewFile
3149: F224         ;-----------------------------------------------------------------
3150: F224         ; Rename file
3151: F224         ; In - (DE)	FCB Address
3152: F224         ; OUT - (A)	Directory Code
3153: F224         ;	0-3 = success ; 0FFH = File Not Found
3154: F224             vRenameFile:                      ; func23 (23 - 17) Rename File
3155: F224 CD C6 EE               CALL   ReselectDisk
3156: F227 CD 9B F3               CALL   Rename
3157: F22A C3 E9 F0               JP     DirLocationToReturnLoc
3158: F22D         ;-----------------------------------------------------------------
3159: F22D         ;-----------------------------------------------------------------
3160: F22D         ;*****************************************************************
3161: F22D
3162: F22D         ;-----------------------------------------------------------------
3163: F22D         ;sequential disk read operation
3164: F22D             ReadSeq:
3165: F22D 3E 01                  LD     A,1
3166: F22F 32 90 F5               LD     (seqReadFlag),A      ; set flag for seqential read
3167: F232         ;---
3168: F232         ; read the disk
3169: F232         ; read the next record from the current fcb
3170: F232             DiskRead:
3171: F232 3E FF                  LD     A,TRUE
3172: F234 32 8E F5               LD     (readModeFlag),A     ; read mode flag = true (OpenNextExt)
3173: F237
3174: F237 CD F3 EE               CALL   SetRecordVars        ; sets current File Record, fcbRecordCount and EXM
3175: F23A 3A 9B F5               LD     A,(currentFileRecord)
3176: F23D 21 99 F5               LD     HL,fcbRecordCount
3177: F240 BE                     CP     M                    ; current File Record-fcbRecordCount
3178: F241         ; skip if  current File Record < fcbRecordCount
3179: F241 DA 57 F2               JP     C,RecordOK
3180: F244         ; not enough records in the extent
3181: F244 FE 80                  CP     RecordsPerExtent     ; current File Record = 128?   *** Records in an Extent
3182: F246 C2 6D F2               JP     NZ,DiskEOF           ; skip if current File Record<>128
3183: F249 CD 38 F3               CALL   OpenNextExt          ; go to next extent if so
3184: F24C AF                     XOR    A
3185: F24D 32 9B F5               LD     (currentFileRecord),A ; current File Record=00
3186: F250         ; now check for open ok
3187: F250 3A C5 EA               LD     A,(exitParameterByte)
3188: F253 B7                     OR     A
3189: F254 C2 6D F2               JP     NZ,DiskEOF
3190: F257         ; stop at eof
3191: F257         ; arrive with fcb addressing a record to read
3192: F257             RecordOK:                       ; recordok:
3193: F257 CD F6 F3               CALL   GetBlockNumber       ; save it in Absolute CPM Record
3194: F25A CD 03 F4               CALL   IsAllocated          ; Absolute CPM Record=0000?
3195: F25D CA 6D F2               JP     Z,DiskEOF            ; get out if not allocated already
3196: F260
3197: F260 CD 09 F4               CALL   SetActualRecordAdd   ; Absolute CPM Record now a record value
3198: F263 CD 7B F1               CALL   Seek                 ; to proper track,sector
3199: F266 CD 9B EE               CALL   ReadBuffer           ; to dma address
3200: F269 CD E5 F1               CALL   UpdateRecordVars     ; update variables from I/O in  fcb
3201: F26C C9                     RET
3202: F26D             DiskEOF:                        ; diskeof:
3203: F26D C3 22 F4               JP     SetLowReturnTo1      ; exitParameterByte = 1
3204: F270         ;ret
3205: F270         ;-----------------------------------------------------------------
3206: F270         ;sequential disk write
3207: F270             DiskWriteSeq:
3208: F270 3E 01                  LD     A,1
3209: F272 32 90 F5               LD     (seqReadFlag),A
3210: F275         ;--------
3211: F275         ;disk write
3212: F275             DiskWrite:
3213: F275 3E 00                  LD     A,FALSE
3214: F277 32 8E F5               LD     (readModeFlag),A
3215: F27A         ; write record to currently selected file
3216: F27A CD F0 F0               CALL   CheckWrite           ; in case write protected
3217: F27D 2A C3 EA               LD     HL,(paramDE)         ; HL = .fcb(0)
3218: F280 CD FA F0               CALL   CheckROFile          ; may be a read-only file
3219: F283 CD F3 EE               CALL   SetRecordVars        ; set local Record parameters
3220: F286 3A 9B F5               LD     A,(currentFileRecord)
3221: F289 FE 80                  CP     highestRecordNumber+1 ; Still in the same extent?
3222: F28B DA 92 F2               JP     C,DiskWrite1         ; skip if in the same Extent
3223: F28E CD 22 F4               CALL   SetLowReturnTo1
3224: F291 C9                     RET                         ; Exit ???????????
3225: F292
3226: F292         ; can write the next record, so continue
3227: F292             DiskWrite1:
3228: F292 CD F6 F3               CALL   GetBlockNumber       ; sets up actual block number
3229: F295 CD 03 F4               CALL   IsAllocated
3230: F298 0E 00                  LD     C,WriteAllocated     ; assume a normal write operation for WriteBuffer
3231: F29A C2 E8 F2               JP     NZ,DiskWrite3
3232: F29D         ; not allocated -
3233: F29D         ; the argument to getblock is the starting position for the disk search
3234: F29D         ; and should be the last allocated block for this file,
3235: F29D         ; or the value 0 if no space has been allocated
3236: F29D
3237: F29D CD 44 F4               CALL   GetDiskMapIndex      ; return with Disk Map index in Acc
3238: F2A0 32 91 F5               LD     (diskMapIndex),A     ; save for later
3239: F2A3 01 00 00               LD     BC,0000h             ; may use block zero
3240: F2A6 B7                     OR     A
3241: F2A7 CA B1 F2               JP     Z,FirstBlock         ; skip if no previous block
3242: F2AA         ; previous block exists
3243: F2AA 4F                     LD     C,A
3244: F2AB 0B                     DEC    BC                   ; previous block # in BC
3245: F2AC CD 64 F4               CALL   GetDiskMapValue      ; previous block # to HL
3246: F2AF 44                     LD     B,H
3247: F2B0 4D                     LD     C,L                  ; BC=prev block#
3248: F2B1         ; BC = 0000, or previous block #
3249: F2B1             FirstBlock:
3250: F2B1         ;	CALL	GetClosestBlockXX					; block # to HL
3251: F2B1 CD 66 F0               CALL   GetClosestBlock
3252: F2B4         ; arrive here with block# or zero
3253: F2B4 7D                     LD     A,L
3254: F2B5 B4                     OR     H
3255: F2B6 C2 BF F2               JP     NZ,BlockOK
3256: F2B9         ; cannot find a block to allocate
3257: F2B9 3E 02                  LD     A,2
3258: F2BB 32 C5 EA               LD     (exitParameterByte),A
3259: F2BE C9                     RET                         ; exitParameterByte=2
3260: F2BF
3261: F2BF             BlockOK:
3262: F2BF 22 9D F5               LD     (absoluteCPMRecord),HL ; allocated block number is in HL
3263: F2C2 EB                     EX     DE,HL                ; block number to DE
3264: F2C3 2A C3 EA               LD     HL,(paramDE)
3265: F2C6 01 10 00               LD     BC,fcbDiskMapIndex
3266: F2C9 09                     ADD    HL,BC                ; HL=.fcb(fcbDiskMapIndex)
3267: F2CA 3A 95 F5               LD     A,(byteAllocationFlag)
3268: F2CD B7                     OR     A                    ; set flags for byteAllocationFlag byte dm
3269: F2CE 3A 91 F5               LD     A,(diskMapIndex)     ; recall dm index
3270: F2D1 CA DB F2               JP     Z,Allocate16Bit      ; skip if allocating word
3271: F2D4         ; else allocate using a byte value
3272: F2D4 CD 7D F4               CALL   AddAtoHL
3273: F2D7 73                     LD     (HL),E               ; byteAllocationFlag byte alloc
3274: F2D8 C3 E3 F2               JP     DiskWrite2           ; to continue
3275: F2DB
3276: F2DB             Allocate16Bit:                      ; allocate a word value
3277: F2DB
3278: F2DB 4F                     LD     C,A
3279: F2DC 06 00                  LD     B,0                  ; double(diskMapIndex)
3280: F2DE 09                     ADD    HL,BC
3281: F2DF 09                     ADD    HL,BC                ; HL=.fcb(diskMapIndex*2)
3282: F2E0 72                     LD     (HL),D
3283: F2E1 23                     INC    HL
3284: F2E2 73                     LD     (HL),E               ; double wd
3285: F2E3         ; disk write to previously unallocated block
3286: F2E3             DiskWrite2:
3287: F2E3 0E 02                  LD     C,WriteCleanBuffer   ; marked as unallocated write
3288: F2E5 CD 5A EF               CALL   ResetFileWriteFlag
3289: F2E8         ; continue the write operation of no allocation error
3290: F2E8         ; C = 0 if normal write, 1 if directory write, 2 if to prev unalloc block
3291: F2E8
3292: F2E8             DiskWrite3:
3293: F2E8 3A C5 EA               LD     A,(exitParameterByte)
3294: F2EB B7                     OR     A
3295: F2EC C0                     RET    NZ                   ; stop if non zero returned value
3296: F2ED
3297: F2ED C5                     PUSH   BC                   ; save write flag ( in C see above)
3298: F2EE CD 09 F4               CALL   SetActualRecordAdd   ; Absolute CPM Record set to actual record number
3299: F2F1 CD 7B F1               CALL   Seek                 ; to proper file position
3300: F2F4 C1                     POP    BC                   ; get write flag
3301: F2F5 C5                     PUSH   BC                   ; restore/save write flag (C=2 if new block)
3302: F2F6 CD FE EF               CALL   WriteBuffer          ; written to disk
3303: F2F9 C1                     POP    BC                   ; C = 2 if a new block was allocated, 0 if not
3304: F2FA         ; increment record count if fcbRecordCount<=current File Record
3305: F2FA 3A 9B F5               LD     A,(currentFileRecord)
3306: F2FD 21 99 F5               LD     HL,fcbRecordCount
3307: F300 BE                     CP     M                    ; current File Record-fcbRecordCount
3308: F301 DA 08 F3               JP     C,DiskWrite4
3309: F304         ; fcbRecordCount <= current File Record
3310: F304 77                     LD     (HL),A
3311: F305 34                     INC    M                    ; fcbRecordCount = current File Record+1
3312: F306 0E 02                  LD     C,2                  ; mark as record count incremented
3313: F308             DiskWrite4:
3314: F308         ; A has current File Record, C=2 if new block or new record#
3315: F308 0D                     DEC    C
3316: F309 0D                     DEC    C
3317: F30A C2 15 F3               JP     NZ,DiskWrite5
3318: F30D F5                     PUSH   AF                   ; save current File Record value
3319: F30E CD 4B EF               CALL   GetExtentNumberMSB   ; HL=.fcb(fcbS2Index), A=fcb(fcbS2Index)
3320: F311         ; reset the file write flag to mark as written fcb
3321: F311 E6 7F                  AND    7FH                  ; not writeFlagMask
3322: F313 77                     LD     (HL),A               ; fcb(fcbS2Index) = fcb(fcbS2Index) and 7fh
3323: F314 F1                     POP    AF                   ; restore current File Record
3324: F315             DiskWrite5:
3325: F315         ; check for end of extent, if found attempt to open next extent in preparation for next write
3326: F315 FE 7F                  CP     highestRecordNumber  ; current File Record=highestRecordNumber?
3327: F317 C2 35 F3               JP     NZ,DiskWrite7        ; skip if not
3328: F31A         ; may be random access write, if so we are done
3329: F31A 3A 90 F5               LD     A,(seqReadFlag)
3330: F31D B7                     OR     A
3331: F31E CA 35 F3               JP     Z,DiskWrite7         ; skip next extent open op
3332: F321         ; update current fcb before going to next extent
3333: F321 CD E5 F1               CALL   UpdateRecordVars     ;update variables from I/O in  fcb
3334: F324 CD 38 F3               CALL   OpenNextExt          ; readModeFlag=false
3335: F327         ; current File Record remains at highestRecordNumber causing eof if no more directory space is available
3336: F327 21 C5 EA               LD     HL,exitParameterByte
3337: F32A 7E                     LD     A,(HL)
3338: F32B B7                     OR     A
3339: F32C C2 33 F3               JP     NZ,DiskWrite6        ; no space
3340: F32F         ; space available, set current File Record=255
3341: F32F 3D                     DEC    A
3342: F330 32 9B F5               LD     (currentFileRecord),A ; goes to 00 next time
3343: F333             DiskWrite6:
3344: F333 36 00                  LD     (HL),0               ; exitParameterByte = 00 for returned value
3345: F335             DiskWrite7:
3346: F335 C3 E5 F1               JP     UpdateRecordVars     ; update variables from I/O in  fcb
3347: F338         ;ret
3348: F338         ;-----------------------------------------------------------------
3349: F338         ;close the current extent  and open the next one if possible.
3350: F338         ;readModeFlag is true if in read mode
3351: F338             OpenNextExt:                      ; open$reel
3352: F338 AF                     XOR    A
3353: F339 32 8D F5               LD     (fcbCopiedFlag),A    ; set true if actually copied
3354: F33C CD D9 ED               CALL   CloseDirEntry        ; close current extent
3355: F33F         ; exitParameterByte remains at enddir if we cannot open the next ext
3356: F33F CD 0D F0               CALL   AtEndOfDirectory
3357: F342 C8                     RET    Z                    ; return if end
3358: F343 2A C3 EA               LD     HL,(paramDE)         ; increment extent number
3359: F346 01 0C 00               LD     BC,fcbExtIndex
3360: F349 09                     ADD    HL,BC                ; HL=.fcb(fcbExtIndex)
3361: F34A 7E                     LD     A,(HL)
3362: F34B 3C                     INC    A
3363: F34C E6 1F                  AND    maxExtValue
3364: F34E 77                     LD     (HL),A               ; fcb(fcbExtIndex)=++1
3365: F34F CA 61 F3               JP     Z,OpenNextModule     ; move to next module if zero
3366: F352         ; may be in the same extent group
3367: F352 47                     LD     B,A
3368: F353 3A 80 F5               LD     A,(dpbEXM)
3369: F356 A0                     AND    B
3370: F357         ; if result is zero, then not in the same group
3371: F357 21 8D F5               LD     HL,fcbCopiedFlag     ; true if the fcb was copied to directory
3372: F35A A6                     AND    M                    ; produces a 00 in accumulator if not written
3373: F35B CA 6C F3               JP     Z,OpenNextExt1       ; go to next physical extent
3374: F35E         ; result is non zero, so we must be in same logical ext
3375: F35E C3 8A F3               JP     OpenNextExt2         ; to copy fcb information
3376: F361         ; extent number overflow, go to next module
3377: F361
3378: F361             OpenNextModule:
3379: F361 01 02 00               LD     BC,fcbS2Index-fcbExtIndex ;RATS
3380: F364 09                     ADD    HL,BC                ; HL=.fcb(fcbS2Index)
3381: F365 34                     INC    M                    ; fcb(fcbS2Index)=++1
3382: F366         ; module number incremented, check for overflow
3383: F366 7E                     LD     A,(HL)
3384: F367 E6 0F                  AND    moduleMask           ; mask high order bits
3385: F369 CA 95 F3               JP     Z,OpenNextExtError   ; cannot overflow to zero
3386: F36C         ; otherwise, ok to continue with new module
3387: F36C
3388: F36C             OpenNextExt1:
3389: F36C 0E 0F                  LD     C,nameLength
3390: F36E CD 71 EF               CALL   SearchForDirectoryRecord ; next extent found?
3391: F371 CD 0D F0               CALL   AtEndOfDirectory
3392: F374 C2 8A F3               JP     NZ,OpenNextExt2
3393: F377         ; end of file encountered
3394: F377 3A 8E F5               LD     A,(readModeFlag)
3395: F37A 3C                     INC    A                    ; 0ffh becomes 00 if read
3396: F37B CA 95 F3               JP     Z,OpenNextExtError   ; sets exitParameterByte = 1
3397: F37E         ; try to extend the current file
3398: F37E CD C0 F3               CALL   MakeNewFile
3399: F381         ; cannot be end of directory
3400: F381 CD 0D F0               CALL   AtEndOfDirectory
3401: F384 CA 95 F3               JP     Z,OpenNextExtError   ; with exitParameterByte = 1
3402: F387 C3 8D F3               JP     OpenNextExt3
3403: F38A
3404: F38A         ; not end of file, open
3405: F38A             OpenNextExt2:
3406: F38A CD 9F ED               CALL   CopyDirRecordToFCB
3407: F38D             OpenNextExt3:
3408: F38D CD F3 EE               CALL   SetRecordVars        ; Set Record parameters
3409: F390 AF                     XOR    A
3410: F391 32 C5 EA               LD     (exitParameterByte),A ; exitParameterByte = 0
3411: F394 C9                     RET                         ; with exitParameterByte = 0
3412: F395
3413: F395         ; cannot move to next extent of this file
3414: F395             OpenNextExtError:
3415: F395 CD 22 F4               CALL   SetLowReturnTo1      ; exitParameterByte = 1
3416: F398 C3 54 EF               JP     SetFileWriteFlag     ; ensure that it will not be closed
3417: F39B         ;-----------------------------------------------------------------
3418: F39B         ;rename the file described by the first half of the currently addressed FCB.
3419: F39B         ;the new name is contained in the last half of the FCB. The file name and type
3420: F39B         ;are changed, but the reel number is ignored.  the user number is identical
3421: F39B             Rename:
3422: F39B CD F0 F0               CALL   CheckWrite           ; may be write protected
3423: F39E         ; search up to the extent field
3424: F39E 0E 0C                  LD     C,fcbExtIndex        ; extent number field index
3425: F3A0 CD 71 EF               CALL   SearchForDirectoryRecord
3426: F3A3         ; copy position 0
3427: F3A3 2A C3 EA               LD     HL,(paramDE)
3428: F3A6 7E                     LD     A,(HL)               ; HL=.fcb(0), A=fcb(0)
3429: F3A7 11 10 00               LD     DE,fcbDiskMapIndex
3430: F3AA 19                     ADD    HL,DE                ; HL=.fcb(fcbDiskMapIndex)
3431: F3AB 77                     LD     (HL),A               ; fcb(fcbDiskMapIndex)=fcb(0)
3432: F3AC         ; assume the same disk drive for new named file
3433: F3AC             Rename1:
3434: F3AC CD 0D F0               CALL   AtEndOfDirectory
3435: F3AF C8                     RET    Z                    ; stop at end of dir
3436: F3B0         ; not end of directory, rename next element
3437: F3B0 CD F7 F0               CALL   CheckRODirectory     ; may be read-only file
3438: F3B3 0E 10                  LD     C,fcbDiskMapIndex
3439: F3B5 1E 0C                  LD     E,fcbExtIndex
3440: F3B7 CD 2F F4               CALL   CopyDir
3441: F3BA         ; element renamed, move to next
3442: F3BA CD 86 EF               CALL   GetNextDirectoryRecord
3443: F3BD C3 AC F3               JP     Rename1
3444: F3C0         ;-----------------------------------------------------------------
3445: F3C0         ;create a new file by creating a directory entry then opening the file
3446: F3C0             MakeNewFile:
3447: F3C0 CD F0 F0               CALL   CheckWrite           ; may be write protected
3448: F3C3 2A C3 EA               LD     HL,(paramDE)
3449: F3C6 E5                     PUSH   HL                   ; save fcb address, look for e5
3450: F3C7 21 67 F5               LD     HL,emptyFCB
3451: F3CA 22 C3 EA               LD     (paramDE),HL         ; paramDE = .empty
3452: F3CD 0E 01                  LD     C,1
3453: F3CF CD 71 EF               CALL   SearchForDirectoryRecord ; length 1 match on empty entry
3454: F3D2 CD 0D F0               CALL   AtEndOfDirectory     ; zero flag set if no space
3455: F3D5 E1                     POP    HL                   ; recall paramDE address
3456: F3D6 22 C3 EA               LD     (paramDE),HL         ; in case we return here
3457: F3D9 C8                     RET    Z                    ; return with error condition 255 if not found
3458: F3DA EB                     EX     DE,HL                ; DE = paramDE address
3459: F3DB         ; clear the remainder of the fcb
3460: F3DB 21 0F 00               LD     HL,nameLength
3461: F3DE 19                     ADD    HL,DE                ; HL=.fcb(nameLength)
3462: F3DF 0E 11                  LD     C,fcbLength-nameLength ; number of bytes to fill
3463: F3E1 AF                     XOR    A                    ; clear accumulator to 00 for fill
3464: F3E2             MakeNewFile1:
3465: F3E2 77                     LD     (HL),A
3466: F3E3 23                     INC    HL
3467: F3E4 0D                     DEC    C
3468: F3E5 C2 E2 F3               JP     NZ,MakeNewFile1
3469: F3E8 21 0D 00               LD     HL,fcbS1Index
3470: F3EB 19                     ADD    HL,DE                ; HL = .fcb(fcbS1Index)
3471: F3EC 77                     LD     (HL),A               ; fcb(fcbS1Index) = 0
3472: F3ED CD 24 F0               CALL   SetDirectoryEntry    ; may have extended the directory
3473: F3F0         ; now copy entry to the directory
3474: F3F0 CD 28 F4               CALL   CopyFCB
3475: F3F3         ; and set the file write flag to "1"
3476: F3F3 C3 54 EF               JP     SetFileWriteFlag
3477: F3F6         ;-----------------------------------------------------------------
3478: F3F6
3479: F3F6         ;-----------------------------------------------------------------
3480: F3F6         ;-----------------------------------------------------------------
3481: F3F6
3482: F3F6
3483: F3F6         ;-----------------------------------------------------------------
3484: F3F6         ;compute disk block number from current fcb
3485: F3F6             GetBlockNumber:
3486: F3F6 CD 44 F4               CALL   GetDiskMapIndex      ; 0...15 in register A
3487: F3F9 4F                     LD     C,A
3488: F3FA 06 00                  LD     B,0
3489: F3FC CD 64 F4               CALL   GetDiskMapValue      ; return value in HL
3490: F3FF 22 9D F5               LD     (absoluteCPMRecord),HL ; save for later
3491: F402 C9                     RET
3492: F403         ;-----------------------------------------------------------------
3493: F403         ;is  block allocated
3494: F403             IsAllocated:
3495: F403 2A 9D F5               LD     HL,(absoluteCPMRecord)
3496: F406 7D                     LD     A,L
3497: F407 B4                     OR     H
3498: F408 C9                     RET
3499: F409         ;-----------------------------------------------------------------
3500: F409         ;compute actual record address
3501: F409         ; result = absolute CPMRecord * ( 2**BSH)
3502: F409             SetActualRecordAdd:
3503: F409 3A 7E F5               LD     A,(dpbBSH)           ; Block Shift  to reg A
3504: F40C 2A 9D F5               LD     HL,(absoluteCPMRecord)
3505: F40F
3506: F40F             SetActualRecordAdd1:
3507: F40F 29                     ADD    HL,HL
3508: F410 3D                     DEC    A                    ; shl(absolute CPMRecord,dpbBSH)
3509: F411 C2 0F F4               JP     NZ,SetActualRecordAdd1
3510: F414         ; HL has Record number for start of the block;
3511: F414 3A 7F F5               LD     A,(dpbBLM)           ; get block mask
3512: F417 4F                     LD     C,A                  ; to get current File Record mod Block
3513: F418 3A 9B F5               LD     A,(currentFileRecord) ; get index into block
3514: F41B A1                     AND    C                    ; masked value in A
3515: F41C B5                     OR     L
3516: F41D 6F                     LD     L,A                  ; to HL
3517: F41E 22 9D F5               LD     (absoluteCPMRecord),HL ; Absolute CPM Record=HL or (current File Record and dpbBLM)
3518: F421         ; *** Absolute CPM Record now has current record number - Starting record number + index into block
3519: F421 C9                     RET
3520: F422         ;-----------------------------------------------------------------
3521: F422         ;---------------------------------- Is Bit Set ------------------------------;
3522: F422
3523: F422
3524: F422
3525: F422         ;---------------------
3526: F422         ;set exitParameterByte to 1
3527: F422             SetLowReturnTo1:
3528: F422 3E 01                  LD     A,1
3529: F424 32 C5 EA               LD     (exitParameterByte),A
3530: F427 C9                     RET
3531: F428         ;---------------------
3532: F428         ;---------------------
3533: F428         ;copy the whole file control block
3534: F428             CopyFCB:
3535: F428 0E 00                  LD     C,0
3536: F42A 1E 20                  LD     E,fcbLength          ; start at 0, to fcblen-1
3537: F42C C3 2F F4               JP     CopyDir
3538: F42F         ;---------------------
3539: F42F         ;copy fcb information starting at C for E bytes into the currently addressed directory entry
3540: F42F             CopyDir:
3541: F42F D5                     PUSH   DE                   ; save length for later
3542: F430 06 00                  LD     B,0                  ; double index to BC
3543: F432 2A C3 EA               LD     HL,(paramDE)         ; HL = source for data
3544: F435 09                     ADD    HL,BC
3545: F436 EB                     EX     DE,HL                ; DE=.fcb(C), source for copy
3546: F437 CD 16 F0               CALL   GetCurrentDirectoryRecord ; HL=.buff(dptr), destination
3547: F43A C1                     POP    BC                   ; DE=source, HL=dest, C=length
3548: F43B CD 9D F4               CALL   MoveX                ; data moved
3549: F43E         ;enter from close to seek and copy current element
3550: F43E             SeekAndCopy:                      ; seek$copy:
3551: F43E CD 6A F1               CALL   SeekDir              ; seek$dir ;to the directory element
3552: F441 C3 EE EF               JP     WriteDir             ; write the directory element
3553: F444         ;---------------------
3554: F444         ;Return the  disk map Index for current File Record in the ACC
3555: F444         ;  account for multiple extents in 1 physical Directory entry
3556: F444             GetDiskMapIndex:                      ; dm$position
3557: F444 21 7E F5               LD     HL,dpbBSH            ; get block shift value
3558: F447 4E                     LD     C,(HL)               ; shift count to C
3559: F448 3A 9B F5               LD     A,(currentFileRecord) ; current virtual record to A
3560: F44B             GetDiskMapIndex1:
3561: F44B B7                     OR     A                    ; reset the carry flag
3562: F44C 1F                     RRA
3563: F44D 0D                     DEC    C
3564: F44E C2 4B F4               JP     NZ,GetDiskMapIndex1
3565: F451         ; A = shr(current File Record,dpbBSH) = current File Record/2**(sect/block)
3566: F451         ; A has the relative position in the block.
3567: F451 47                     LD     B,A                  ; save it for later addition
3568: F452 3E 08                  LD     A,8
3569: F454 96                     SUB    M                    ; 8-dpbBSH to accumulator
3570: F455 4F                     LD     C,A                  ; extent shift count in register c
3571: F456 3A 9A F5               LD     A,(extentValue)      ; extent value ani extmsk
3572: F459             GetDiskMapIndex2:                      ; dmpos1:
3573: F459         ; dpbBSH = 3,4,5,6,7, C=5,4,3,2,1
3574: F459         ; shift is 4,3,2,1,0
3575: F459 0D                     DEC    C
3576: F45A CA 62 F4               JP     Z,GetDiskMapIndex3
3577: F45D B7                     OR     A                    ; clear the carry flag
3578: F45E 17                     RLA
3579: F45F C3 59 F4               JP     GetDiskMapIndex2
3580: F462
3581: F462         ; The ACC has the Block Number for this record
3582: F462             GetDiskMapIndex3:
3583: F462         ; arrive here with A = shl(ext and extmsk,7-dpbBSH)
3584: F462 80                     ADD    A,B                  ; add the previous shr(current File Record,dpbBSH) value
3585: F463         ; A is one of the following values, depending upon alloc
3586: F463         ; bks dpbBSH
3587: F463         ; 1k   3     v/8 + extentValue * 16
3588: F463         ; 2k   4     v/16+ extentValue * 8
3589: F463         ; 4k   5     v/32+ extentValue * 4
3590: F463         ; 8k   6     v/64+ extentValue * 2
3591: F463         ; 16k  7     v/128+extentValue * 1
3592: F463 C9                     RET                         ; with disk map position in A
3593: F464         ;---------------------
3594: F464         ; Enter with Disk Map Index in BG
3595: F464         ; Return disk map value  in HL
3596: F464             GetDiskMapValue:
3597: F464 2A C3 EA               LD     HL,(paramDE)         ; base address of file control block
3598: F467 11 10 00               LD     DE,fcbDiskMapIndex   ; offset to the disk map
3599: F46A 19                     ADD    HL,DE                ; HL =.diskmap
3600: F46B 09                     ADD    HL,BC                ; index by a  byte value
3601: F46C 3A 95 F5               LD     A,(byteAllocationFlag) ;  byte map entry?
3602: F46F B7                     OR     A
3603: F470 CA 77 F4               JP     Z,GetDiskMap16Bit    ; get disk map  byte
3604: F473 6E                     LD     L,(HL)
3605: F474 26 00                  LD     H,0
3606: F476 C9                     RET                         ; with HL=00bb
3607: F477             GetDiskMap16Bit:                      ; getdmd:
3608: F477 09                     ADD    HL,BC                ; HL=.fcb(dm+i*2)
3609: F478         ; double precision value returned
3610: F478 56                     LD     D,(HL)
3611: F479 23                     INC    HL
3612: F47A 5E                     LD     E,(HL)
3613: F47B EB                     EX     DE,HL
3614: F47C C9                     RET
3615: F47D         ;---------------------
3616: F47D         ;---------------------
3617: F47D         ;*****************************************************************
3618: F47D         ;************************ Utilities ******************************
3619: F47D         ;*****************************************************************
3620: F47D             AddAtoHL:
3621: F47D 85                     ADD    A,L
3622: F47E 6F                     LD     L,A
3623: F47F D0                     RET    NC
3624: F480 24                     INC    H
3625: F481 C9                     RET
3626: F482         ;----------
3627: F482             DEminusHL2HL:
3628: F482 7B                     LD     A,E
3629: F483 95                     SUB    L
3630: F484 6F                     LD     L,A
3631: F485 7A                     LD     A,D
3632: F486 9C                     SBC    A,H
3633: F487 67                     LD     H,A
3634: F488 C9                     RET
3635: F489         ;-------------
3636: F489             ShiftRightHLbyC:
3637: F489 0C                     INC    C
3638: F48A             ShiftRightHLbyC0:
3639: F48A 0D                     DEC    C
3640: F48B C8                     RET    Z
3641: F48C 7C                     LD     A,H
3642: F48D B7                     OR     A
3643: F48E 1F                     RRA
3644: F48F 67                     LD     H,A
3645: F490 7D                     LD     A,L
3646: F491 1F                     RRA
3647: F492 6F                     LD     L,A
3648: F493 C3 8A F4               JP     ShiftRightHLbyC0
3649: F496         ;-------
3650: F496             ShiftLeftHLbyC:
3651: F496 0C                     INC    C
3652: F497             ShiftLeftHLbyC0:
3653: F497 0D                     DEC    C
3654: F498 C8                     RET    Z                    ; exit when done
3655: F499 29                     ADD    HL,HL
3656: F49A C3 97 F4               JP     ShiftLeftHLbyC0
3657: F49D         ;*****************************************************************
3658: F49D         ;move data length of length C from source DE to HL
3659: F49D             MoveX:
3660: F49D 0C                     INC    C
3661: F49E             MoveX0:
3662: F49E 0D                     DEC    C
3663: F49F C8                     RET    Z
3664: F4A0 1A                     LD     A,(DE)
3665: F4A1 77                     LD     (HL),A
3666: F4A2 13                     INC    DE
3667: F4A3 23                     INC    HL
3668: F4A4 C3 9E F4               JP     MoveX0
3669: F4A7
3670: F4A7         ;********** Console OUT Routines*******************??????
3671: F4A7
3672: F4A7         ;---------------------------------- Is Bit Set ------------------------------;
3673: F4A7         ; Enter HL  contains the bit map                                             ;
3674: F4A7         ;       B   Has the bit number (0...F)                                       ;
3675: F4A7         ; Return ZFlag = 1 if bit is reset (0)                                       ;
3676: F4A7         ;              = 0 if bit is set (1)                                         ;
3677: F4A7             IsBitSet:                       ;
3678: F4A7 04                     INC    B                    ;
3679: F4A8             IsBitSetLoop:                      ;
3680: F4A8 37                     SCF                         ; Set carry flag, expect LSBit = 1   ;
3681: F4A9 CB 45                  BIT    0,L                  ; is LSB set?                        ;
3682: F4AB 20 01                  JR     NZ,IsBitSet1         ; Skip if LSB set                ;
3683: F4AD 3F                     CCF                         ; else Clear Carry flag              ;
3684: F4AE             IsBitSet1:                      ;
3685: F4AE CB 1C                  RR     H                    ; Shift thru CY                      ;
3686: F4B0 CB 1D                  RR     L                    ; ditto                              ;
3687: F4B2 10 F4                  DJNZ   IsBitSetLoop         ;
3688: F4B4 CB 7C                  BIT    7,H                  ; Bit moved from L LSBit to H MSBit	 ;
3689: F4B6 C9                     RET                         ;
3690: F4B7         ;---------------------------------- Is Bit Set ------------------------------;
3691: F4B7
3692: F4B7         ;============================ Set/Reset Vector Bit ==========================;
3693: F4B7         ;---------------------------------- Set Vector Bit -------------------------;;
3694: F4B7         ; Enter  HL  contains the bit map vector                                    ;;
3695: F4B7         ;        B   Has the bit number (0...F)                                     ;;
3696: F4B7         ; Return HL  Contains the modified bit map vector                           ;;
3697: F4B7             SetVectorBit:                      ;;
3698: F4B7 C5                     PUSH   BC                   ; Save the Bit Number               ;;
3699: F4B8 CD A7 F4               CALL   IsBitSet             ; Put the bit in the LSBit          ;;
3700: F4BB         ;;
3701: F4BB C1                     POP    BC                   ; Get the bit position              ;;
3702: F4BC CB FC                  SET    7,H                  ;;
3703: F4BE 18 07                  JR     ReAlignVector        ;                                    ;
3704: F4C0         ;---------------------------------- Set Vector Bit -------------------------;;
3705: F4C0         ;---------------------------------- Reset Vector Bit -----------------------;;
3706: F4C0         ; Enter  HL  contains the bit map vector                                    ;;
3707: F4C0         ;        B   Has the bit number (0...F)                                     ;;
3708: F4C0         ; Return HL  Contains the modified bit map vector                           ;;
3709: F4C0             ResetVectorBit:                      ;;
3710: F4C0 C5                     PUSH   BC                   ; Save the Bit Number               ;;
3711: F4C1 CD A7 F4               CALL   IsBitSet             ; Put the bit in the LSBit          ;;
3712: F4C4         ;;
3713: F4C4 C1                     POP    BC                   ; Get the bit position              ;;
3714: F4C5 CB BC                  RES    7,H                  ;;
3715: F4C7         ; Fall thru to ReAlignVector                                                 ;
3716: F4C7         ;---------------------------------- Reset Vector Bit -----------------------;;
3717: F4C7         ;---------------------------------- Set VectorBit --------------------------;;
3718: F4C7         ; Adjusts the HL register to its Original Alignment after IsBitSet           ;
3719: F4C7         ;
3720: F4C7             ReAlignVector:                      ;
3721: F4C7 04                     INC    B                    ;
3722: F4C8             ReAlignMapLoop:                      ;
3723: F4C8 37                     SCF                         ; Set carry flag, expect LSBit = 1   ;
3724: F4C9 CB 7C                  BIT    7,H                  ; is LSB set?                        ;
3725: F4CB 20 01                  JR     NZ,ReAlignMap1       ; Skip if LSB set                ;
3726: F4CD 3F                     CCF                         ; else Clear Carry flag              ;
3727: F4CE             ReAlignMap1:                      ;
3728: F4CE CB 15                  RL     L                    ; Shift thru CY                      ;
3729: F4D0 CB 14                  RL     H                    ; ditto                              ;
3730: F4D2 10 F4                  DJNZ   ReAlignMapLoop       ;
3731: F4D4 C9                     RET                         ;
3732: F4D5         ;============================ Set/Reset Vector Bit ==========================;
3733: F4D5         ;************Error message World*************************
3734: F4D5             errSelect:
3735: F4D5 21 F4 F4               LD     HL,evSelection
3736: F4D8 C3 ED F4               JP     GoToError
3737: F4DB             errReadOnlyDisk:
3738: F4DB 21 F6 F4               LD     HL,evReadOnlyDisk
3739: F4DE C3 ED F4               JP     GoToError
3740: F4E1             errReadOnlyFile:
3741: F4E1 21 F8 F4               LD     HL,evReadOnlyFile
3742: F4E4 C3 ED F4               JP     GoToError
3743: F4E7             errPermanent:
3744: F4E7 21 F2 F4               LD     HL,evPermanent
3745: F4EA C3 ED F4               JP     GoToError
3746: F4ED         ;************Error message handler **********************
3747: F4ED             GoToError:
3748: F4ED         ;HL = .errorhandler, call subroutine
3749: F4ED 5E                     LD     E,(HL)
3750: F4EE 23                     INC    HL
3751: F4EF 56                     LD     D,(HL)               ; address of routine in DE
3752: F4F0 EB                     EX     DE,HL
3753: F4F1 E9                     JP     (HL)                 ; vector to subroutine
3754: F4F2         ;************ Error Vectors *****************************
3755: F4F2 00 F5       evPermanent: DW     erPermanent          ; pererr permanent error subroutine
3756: F4F4 0C F5       evSelection: DW     erSelection          ; selerr select error subroutine
3757: F4F6 12 F5       evReadOnlyDisk: DW     erReadOnlyDisk       ; roderr ro disk error subroutine
3758: F4F8 18 F5       evReadOnlyFile: DW     erReadOnlyFile       ; roferr ro file error subroutine
3759: F4FA         ;************Error Routines ******************************
3760: F4FA             erPermanentNoWait:
3761: F4FA 21 4A F5               LD     HL,emPermanent
3762: F4FD C3 ED F4               JP     GoToError
3763: F500             erPermanent:
3764: F500 21 4A F5               LD     HL,emPermanent
3765: F503 CD 21 F5               CALL   displayAndWait       ; to report the error
3766: F506 FE 03                  CP     CTRL_C
3767: F508 CA 00 00               JP     Z,WarmBoot           ; reboot if response is CTRL_C
3768: F50B C9                     RET                         ; and ignore the error
3769: F50C         ;
3770: F50C             erSelection:
3771: F50C 21 55 F5               LD     HL,emSelection
3772: F50F C3 1B F5               JP     waitB4boot           ; wait console before boot
3773: F512         ;
3774: F512             erReadOnlyDisk:
3775: F512 21 61 F5               LD     HL,emReadOnlyDisk
3776: F515 C3 1B F5               JP     waitB4boot           ; wait console before boot
3777: F518         ;
3778: F518             erReadOnlyFile:
3779: F518 21 5C F5               LD     HL,emReadOnlyFile    ; drop through to wait for console
3780: F51B         ;
3781: F51B         ; wait for response before boot
3782: F51B             waitB4boot:
3783: F51B CD 21 F5               CALL   displayAndWait
3784: F51E C3 00 00               JP     WarmBoot
3785: F521
3786: F521         ;report error to console, message address in HL
3787: F521             displayAndWait:
3788: F521 E5                     PUSH   HL                   ; save message pointer
3789: F522 CD D6 E9               CALL   showCRLF             ; stack mssg address, new line
3790: F525 3A 66 F5               LD     A,(currentDisk)
3791: F528 C6 41                  ADD    A,ASCII_A
3792: F52A 32 46 F5               LD     (emDisk),A           ; Problem disk name
3793: F52D 01 3A F5               LD     BC,emDisk0
3794: F530 CD 3B E9               CALL   Print                ; the error message
3795: F533 C1                     POP    BC
3796: F534 CD 3B E9               CALL   Print                ; error mssage tail
3797: F537 C3 21 E9               JP     ConIn                ; to get the input character
3798: F53A         ;ret
3799: F53A         ;**************Error Messages*******************************
3800: F53A 42 64 6F 73 20 45 72 72 20 4F 6E 20     emDisk0:   DB     'Bdos Err On '
3801: F546 20 3A 20 24     emDisk:    DB     ' : $'
3802: F54A 42 61 64 20 53 65 63 74 6F 72 24     emPermanent: DB     'Bad Sector$'
3803: F555 53 65 6C 65 63 74 24     emSelection: DB     'Select$'
3804: F55C 46 69 6C 65 20     emReadOnlyFile: DB     'File '
3805: F561 52 2F 4F 24     emReadOnlyDisk: DB     'R/O$'
3806: F565         ;*****************************************************************
3807: F565
3808: F565         ;********* file control block (fcb) constants ********************
3809: F565             fcbLength  EQU    20H                  ;32				; fcblen file control block size
3810: F565             fcbROfileIndex EQU    09H                  ; high order of first type char
3811: F565             fcbHiddenfileIndex EQU    0AH                  ;10				; invisible file in dir command
3812: F565             fcbExtIndex EQU    0CH                  ;12				; extent number field index
3813: F565             fcbS1Index EQU    0DH                  ;13				; S1 index
3814: F565             fcbS2Index EQU    0EH                  ;14				; S2 data module number index
3815: F565             fcbRCIndex EQU    0FH                  ;15				; record count field index
3816: F565             fcbDiskMapIndex EQU    10H                  ;16				; dskmap disk map field
3817: F565
3818: F565             fcbCurrentRecord EQU    21H                  ;33
3819: F565
3820: F565             highestRecordNumber EQU    RecordsPerExtent - 1 ; last record# in extent
3821: F565
3822: F565             dirEntriesPerRecord EQU    cpmRecordSize/fcbLength ; directory elts / record
3823: F565             dirEntryShift EQU    2                    ; log2(dirEntriesPerRecord)
3824: F565             dirEntryMask EQU    dirEntriesPerRecord-1
3825: F565             fcbShift   EQU    5                    ; log2(fcbLength)
3826: F565         ;
3827: F565
3828: F565
3829: F565
3830: F565             maxExtValue EQU    31                   ; largest extent number
3831: F565             moduleMask EQU    15                   ; limits module number value
3832: F565             writeFlagMask EQU    80h                  ; file write flag is high order fcbS2Index
3833: F565             nameLength EQU    15                   ; namlen name length
3834: F565
3835: F565             emptyDir   EQU    0E5H                 ; empty empty directory entry
3836: F565             NEXT_RECORD EQU    fcbLength            ; nxtrec
3837: F565             RANDOM_REC_FIELD EQU    NEXT_RECORD + 1      ;ranrec random record field (2 bytes)
3838: F565         ;
3839: F565         ;	reserved file indicators
3840: F565         ;	equ	11				; reserved
3841: F565         ;*****************************************************************
3842: F565         ;*****************************************************************
3843: F565
3844: F565         ;***common values shared between bdosi and bdos******************
3845: F565 00          currentUserNumber: DB     0                    ; usrcode current user number
3846: F566         ; paramDE:			DS	2					; ParamsDE information address
3847: F566         ; exitParameterByte:
3848: F566         ; exitParameterWord:	DS	2					; address value to return
3849: F566 FF          currentDisk: DB     -1                   ; curdsk current disk number
3850: F567         ; exitParameterByte		EQU	exitParameterWord	; lret low(exitParameterWord)
3851: F567
3852: F567         ;********************* Local Variables ***************************
3853: F567         ;     ************************
3854: F567         ;     *** Initialized Data ***
3855: F567
3856: F567 E5          emptyFCB:  DB     emptyDir             ; efcb 0E5 = available dir entry
3857: F568 00 00       readOnlyVector: DW     0                    ; rodsk read only disk vector
3858: F56A 00 00       loggedDisks: DW     0                    ; dlog	 logged-in disks
3859: F56C 80 00       initDAMAddress: DW     DMABuffer            ; dmaad tbuff initial dma address
3860: F56E
3861: F56E         ;     *** Current Disk attributes ****
3862: F56E         ; These are set upon disk select
3863: F56E         ; data must be adjacent, do not insert variables
3864: F56E         ; address of translate vector, not used
3865: F56E         ; ca - currentAddress
3866: F56E
3867: F56E 00 00       caDirMaxValue: DW     0000H                ; cdrmaxa pointer to cur dir max value
3868: F570 00 00       caTrack:   DW     0000H                ; curtrka current track address
3869: F572 00 00       caSector:  DW     0000H                ; current Sector
3870: F574             caListSizeStart:
3871: F574 00 00       caDirectoryDMA: DW     0000H                ; buffa pointer to directory dma address
3872: F576 00 00       caDiskParamBlock: DW     0000H                ; dpbaddr current disk parameter block address
3873: F578 00 00       caCheckSum: DW     0000H                ; checka current checksum vector address
3874: F57A 00 00       caAllocVector: DW     0000H                ; alloca current allocation vector address
3875: F57C             caListSizeEnd:
3876: F57C             caListSize EQU    caListSizeEnd - caListSizeStart
3877: F57C
3878: F57C         ;     ***** Disk Parameter Block *******
3879: F57C         ; data must be adjacent, do not insert variables
3880: F57C         ; dpb - Disk Parameter Block
3881: F57C             dpbStart:
3882: F57C 00 00       dpbSPT:    DW     0000H                ; sectpt sectors per track
3883: F57E 00          dpbBSH:    DB     0000H                ; blkshf block shift factor
3884: F57F 00          dpbBLM:    DB     00H                  ; blkmsk block mask
3885: F580 00          dpbEXM:    DB     00H                  ; extmsk extent mask
3886: F581 00 00       dpbDSM:    DW     0000H                ; Maximum allocation number
3887: F583 00 00       dpbDRM:    DW     0000H                ; dirmax largest directory number
3888: F585 00 00       dpbDABM:   DW     0000H                ; dirblk reserved allocation bits for directory
3889: F587 00 00       dpbCKS:    DW     0000H                ; chksiz size of checksum vector
3890: F589 00 00       dpbOFF:    DW     0000H                ; offset offset tracks at beginning
3891: F58B             dpbEnd:
3892: F58B             dpbSize    EQU    dpbEnd - dpbStart
3893: F58B         ;
3894: F58B
3895: F58B         ;     ************************
3896: F58B
3897: F58B 00 00       caSkewTable: DW     0000H                ; tranv address of translate vector
3898: F58D 00          fcbCopiedFlag: DB     00H                  ; fcb$copied set true if CopyFCB called
3899: F58E 00          readModeFlag: DB     00H                  ; rmf read mode flag for OpenNextExt
3900: F58F 00          directoryIndex: DB     00H                  ; dirloc directory flag in rename, etc.
3901: F590 00          seqReadFlag: DB     00H                  ; seqio  1 if sequential i/o
3902: F591 00          diskMapIndex: DB     00H                  ; dminx  local for DiskWrite
3903: F592 00          searchLength: DB     00H                  ; searchl search length
3904: F593 00 00       searchAddress: DW     0000H                ; searcha search address
3905: F595         ;tinfo:	ds	word							; temp for info in "make"
3906: F595 00          byteAllocationFlag: DB     00H                  ; set true if single byte allocation map
3907: F596 00          fResel:    DB     00H                  ; resel reselection flag
3908: F597 00          entryDisk: DB     00H                  ; olddsk disk on entry to bdos
3909: F598 00          fcbDisk:   DB     00H                  ; fcbdsk disk named in fcb
3910: F599 00          fcbRecordCount: DB     00H                  ; record count from current FCB
3911: F59A 00          extentValue: DB     00H                  ; extent number and dpbEXM from current fcb
3912: F59B 00 00       currentFileRecord: DW     0000H                ; Current File Record - fcbCurrentRecord
3913: F59D 00 00       absoluteCPMRecord: DW     0000H                ; Raw record ( 4 records / Sector)( 4 Sectors per block)
3914: F59F         ;
3915: F59F         ;	local variables for directory access
3916: F59F 00          dirBlockIndex: DB     00H                  ; directory block Index 0,1,2,3
3917: F5A0 00 00       dirEntryIndex: DW     00H                  ; directory entry Index  0,1,...,dpbDRM
3918: F5A2 00 00       dirRecord: DW     00H                  ; drec:	ds	word	;directory record 0,1,...,dpbDRM/4
3919: F5A4
3920: F5A4         ;********************** data areas ******************************
3921: F5A4
3922: F5A4
3923: F5A4         ;---------------------------------- Stack Area--------------------------------;
3924: F5A4             stackBottom: DS     STACK_SIZE * 2       ; stack size                      ;
3925: F5E4             bdosStack:
3926: F5E4         ;
3927: F5E4         ;---------------------------------- Stack Area--------------------------------;
3928: F5E4         ;	end of Basic I/O System
3929: F5E4         ;-----------------------------------------------------------------;
3930: F5E4
3931: F5E4
3932: F5E4         ;
3933: F5E4             Z_HighestLocation:
3934: F5E4             Z_MemoryLeft EQU    (BIOSStart-1) - Z_HighestLocation
3935: F5E4
3936: F5E4
           ************************   Xref   ************************
0000: $               F5E4   0418 0448
3913: absoluteCPMRecord F59D   3002 3009 3027 3262 3490 3495 3504 3517
3620: AddAtoHL        F47D   3272
3276: Allocate16Bit   F2DB   3270
1045: AreWeAtEndOfBuffer EA3A   1041
0086: ASCII_A         0041   3791
0087: ASCII_C         0043
0088: ASCII_K         004B
0095: ASCII_LO_A      0061
0096: ASCII_LO_K      006B
0097: ASCII_LO_P      0070
0038: ASCII_MASK      007F   0988
0089: ASCII_N         004E
0090: ASCII_Q         0051
0091: ASCII_R         0052
0092: ASCII_W         0057
0093: ASCII_Y         0059
0073: ASCII_ZERO      0030
0067: ASTERISK        002A
2644: AtEndOfDirectory F00D   1437 1838 2059 2090 2148 2535 3111 3356 3391 3400 3434 3454
1137: BackUp          EA9F   1065 1133
1142: BackUp1         EAA7   1138
0295: bcBoot          F600
0298: bcConin         F609   0618 0803 0914 0932
0299: bcConout        F60C   0610 0876 1140 1144 1150 1152
0297: bcConst         F606   0615 0910
0303: bcHome          F618   2272
0300: bcList          F60F   0583 0882
0310: bcListst        F62D
0301: bcPunch         F612   0568
0308: bcRead          F627   2314
0302: bcReader        F615   0549
0311: bcSectran       F630
0304: bcSeldsk        F61B   1962
0307: bcSetdma        F624   2309
0306: bcSetsec        F621   3042
0305: bcSettrk        F61E   2278 3039
0296: bcWboot         F603   0469
0309: bcWrite         F62A   2623
0153: BDOSBase        E800   0154 0156 0327
0122: BDOSE           0005   0123
0154: BDOSEntry       E800
0143: BDOSLength      0E00   0146 0156 0157
3925: bdosStack       F5E4   0343
0333: BdosStart       E800
0056: BELL            0007
0156: BIOSBase        F600
0144: BIOSLength      0A00   0146
0116: BIOSPAGE        0002
0157: BIOSStart       F600   0295 0296 0297 0298 0299 0300 0301 0302 0303 0304 0305 0306 0307 0308 0309 0310 0311 3934
3261: BlockOK         F2BF   3255
0253: BlockSize       0800   0275
1060: BSspaceBS       EA48   0999
0034: BYTE            0001   1173
3906: byteAllocationFlag F595   1995 2161 2720 3267 3601
3874: caAllocVector   F57A   1533 2015 2017 2042 2433 2773 2840
3873: caCheckSum      F578   3070
3871: caDirectoryDMA  F574   1982 2301 2659 2850 3062
3867: caDirMaxValue   F56E   1973 2049 2331 2693
3872: caDiskParamBlock F576   1595 1987
3876: caListSize      0008   1983
3875: caListSizeEnd   F57C   3876
3870: caListSizeStart F574   3876
0094: CARET           005E   0842
0836: CaretOut        E948   1034 1115
3869: caSector        F572   1979 2286 3031
3897: caSkewTable     F58B   1971
3868: caTrack         F570   1976 2282 3022
0151: CCPEntry        E000   0153 0157
0142: CCPLength       0800   0146 0153 0157
0928: CheckCTL_S      E9AC   0917
2573: CheckExtents    EFC7   2567
2869: CheckRODirectory F0F7   1440 3437
2872: CheckROFile     F0FA   3218
3050: CheckSumUtility F1B5   2607 2994
2863: CheckWrite      F0F0   1432 3216 3422 3447
2135: CloseDirEntry   EDD9   1287 1759 3354
2217: CloseDirEntryEnd EE48   2207
2225: CloseDirEntryError EE54   2177 2187 2192
0074: COLON           003A
1171: columnPosition  EAC1   0861 0886 0951 0971 1129
0069: COMMA           002C
2498: CompareExtents  EF60   2574
3060: ComputeCheckSum F1C1
3064: ComputeCheckSum1 F1C8   3067
0128: ComTail         0080   0129
0130: ComTailChars    0082
0129: ComTailCount    0081   0130
0905: ConBreak        E98C   0729 0872
0938: ConBreak0       E9BA   0930
0940: ConBreak1       E9BD   0908
0796: ConIn           E921   0501 0987 3797
0869: ConsoleOut      E96B   0843 0855 0860 0948 0956 0963 0965 1057
3540: CopyDir         F42F   3115 3440 3537
2849: CopyDirEntryToUserDMA F0DC   1340 1405
2093: CopyDirRecordToFCB ED9F   3406
3534: CopyFCB         F428   3474
0230: cpmRecordSize   0080   0232 0235 0237 2852 3061 3822
0059: CR              000D   0809 0962 0992 1056
0042: CTRL_C          0003   0933 1039 3766
0043: CTRL_E          0005   1004
0044: CTRL_H          0008   0815 0998 1143
0045: CTRL_K          000B
0046: CTRL_L          000C
0047: CTRL_P          0010   0916 1007
0048: CTRL_R          0012   1016
0049: CTRL_S          0013   0929
0050: CTRL_U          0015   1013
0051: CTRL_X          0018   1010
0052: CTRL_Z          001A
3849: currentDisk     F566   1208 1494 1930 1941 1947 1960 2238 2324 2342 2361 3790
3912: currentFileRecord F59B   2387 3098 3175 3185 3220 3305 3342 3513 3559
3845: currentUserNumber F565   0780 0786 2067 2370
0070: DASH            002D
0264: DataBlocks      02C7   0274
0263: DataSectors     0B1C   0264
1431: DeleteFile      EB23   1428
1436: DeleteFileLoop  EB2B   1447
1124: DeleteTheLine   EA8E   1011
1127: DeleteTheLine1  EA8F   1134
3627: DEminusHL2HL    F482
3916: dirBlockIndex   F59F   2660 2986
0235: DirBuffSize     0080
0250: DirectoryBlockCount 0002   0275
0237: DirectoryEntryPerRecord 0004   0278
3900: directoryIndex  F58F   2524 2588 2858
3822: dirEntriesPerRecord 0004   3824
3917: dirEntryIndex   F5A0   2584 2635 2645 2691 2969 2971 2980 2999
3824: dirEntryMask    0003   2585 2981
3823: dirEntryShift   0002   3000
0234: DirEntrySize    0020   0237 0275
2857: DirLocationToReturnLoc F0E9   1429 1924 3157
3918: dirRecord       F5A2   3003 3052 3071
0222: DiskCommandBlock 0046
0221: DiskControlByte 0045
0224: DiskControlTable 0040
3202: DiskEOF         F26D   3182 3189 3195
0418: diskf           000B
3902: diskMapIndex    F591   3238 3269
3170: DiskRead        F232   1688
0226: DiskReadCode    0001
0231: diskSectorSize  0200   0232 0253 0261
0220: DiskStatusLocation 0043
3212: DiskWrite       F275   1695
3227: DiskWrite1      F292   3222
3286: DiskWrite2      F2E3   3274
3292: DiskWrite3      F2E8   3231
3313: DiskWrite4      F308   3308
3324: DiskWrite5      F315   3317
3343: DiskWrite6      F333   3339
3345: DiskWrite7      F335   3327 3331
0227: DiskWriteCode   0002
3207: DiskWriteSeq    F270   3138
3787: displayAndWait  F521   3765 3783
2905: DivideHLby8     F111   2010 2759 2762
0133: DMABuffer       0080   1210 3859
0063: DOLLAR          0024   0824 2073
0276: dpb3hdAL0       00C0
0277: dpb3hdAL1       0000
0272: dpb3hdBLM       000F
0271: dpb3hdBSH       0004
0278: dpb3hdCKS       0020
0275: dpb3hdDRM       007F   0278
0274: dpb3hdDSM       02C6
0273: dpb3hdEXM       0000
0280: dpb3hdNOH       0002
0279: dpb3hdOFF       0001
0270: dpb3hdSPT       0090
3884: dpbBLM          F57F   3511
3883: dpbBSH          F57E   3503 3557
3889: dpbCKS          F587   3051
3888: dpbDABM         F585   2040
3887: dpbDRM          F583   2329 2968
3886: dpbDSM          F581   1993 2009 2025 2758
3891: dpbEnd          F58B   3892
3885: dpbEXM          F580   2392 2501 3368
3890: dpbOFF          F589   2274 3035
3892: dpbSize         000F   1989
3882: dpbSPT          F57C   3010
3881: dpbStart        F57C   1988 3892
0450: DUMMY           E8A9   0445 0446
3801: emDisk          F546   3792
3800: emDisk0         F53A   3793
3802: emPermanent     F54A   3761 3764
3835: emptyDir        00E5   1442 2063 2541 3856
3856: emptyFCB        F567   3450
3805: emReadOnlyDisk  F561   3775
3804: emReadOnlyFile  F55C   3779
3803: emSelection     F555   3771
0137: END_OF_FILE     001A
0040: EndOfMessage    0000
1050: EndRead         EA3E   0993 0996
3908: entryDisk       F597   0391 2362
0292: EOD             FFFF   2634
0078: EQUAL_SIGN      003D
3763: erPermanent     F500   3755
3760: erPermanentNoWait F4FA   2316 2625
3774: erReadOnlyDisk  F512   3757
3778: erReadOnlyFile  F518   3758
3743: errPermanent    F4E7
3737: errReadOnlyDisk F4DB   2866
3740: errReadOnlyFile F4E1   2878
3734: errSelect       F4D5   1940
3770: erSelection     F50C   3756
3755: evPermanent     F4F2   3744
3757: evReadOnlyDisk  F4F6   3738
3758: evReadOnlyFile  F4F8   3741
3756: evSelection     F4F4   3735
0061: EXCLAIM_POINT   0021
1175: exitParameterByte EAC5   0510 0619 0730 0756 0781 1495 1763 1773 1784 1791 1804 2077 2137 2226 2586 2600 2859 3187 3258 3293 3336 3410 3529
1176: exitParameterWord EAC5   0347 0398 0550 0639 1472 1534 1580 1596
3911: extentValue     F59A   2394 3571
0029: FALSE           0000   0923 1095 1443 1693 1999 2533 3213
0125: FCB1            005C   0126
0126: FCB2            006C
3898: fcbCopiedFlag   F58D   2219 3353 3371
3818: fcbCurrentRecord 0021
3909: fcbDisk         F598   0349 0386 2364
3816: fcbDiskMapIndex 0010   2153 2158 2710 2712 3265 3429 3438 3598
3812: fcbExtIndex     000C   1433 1742 1766 1825 1877 2108 2201 2210 2413 2565 3108 3114 3359 3379 3424 3439
0015: fcbExtIndexLSB  000C
0016: fcbExtIndexMSB  000E
3811: fcbHiddenfileIndex 000A
3809: fcbLength       0020   2102 2158 2201 2712 3462 3536 3822 3836
3815: fcbRCIndex      000F   1842 2111 2129 2210 2402 2405
3910: fcbRecordCount  F599   2390 3102 3176 3306
3810: fcbROfileIndex  0009   2873
3813: fcbS1Index      000D   2562 3469
3814: fcbS2Index      000E   1748 1769 1894 2467 3379
3825: fcbShift        0005   2982
0170: fCloseFile      0010
0161: fConsoleIn      0001
0162: fConsoleOut     0002
0173: fDeleteFile     0013
0165: fGetConsoleStatus 000B
0179: fGetCurrentDisk 0019
0178: fGetLoginVector 0018
0181: fGetSetUserNumber 0020
0166: fGetVersion     000C
3249: FirstBlock      F2B1   3241
0176: fMakeFile       0016
0169: fOpenFile       000F
2819: FoundFreeOctet  F0B7   2789 2794 2803 2811
2825: FoundFreeOctet1 F0BD   2821
2827: FoundFreeOctet2 F0BE   2823
2829: FoundFreeOctet3 F0C1   2832
2835: FoundFreeOctet4 F0C9   2837
0163: fPrintString    0009
0174: fReadSeq        0014
0164: fReadString     000A
0177: fRenameFile     0017
3907: fResel          F596   0350 0380 2352
0167: fResetSystem    000D
0171: fSearchFirst    0011
0172: fSearchNext     0012
0168: fSelectDisk     000E
0180: fSetDMA         001A
0448: functionCount   0028   0359
0405: functionTable   E857   0364 0418 0448
0175: fWriteSeq       0015
3485: GetBlockNumber  F3F6   3193 3228
2755: GetClosestBlock F066   3251
2657: GetCurrentDirectoryRecord F016   1441 1841 2062 2098 2152 2551 2709 2870 3546
3607: GetDiskMap16Bit F477   3603
3556: GetDiskMapIndex F444   3237 3486
3560: GetDiskMapIndex1 F44B   3564
3572: GetDiskMapIndex2 F459   3579
3582: GetDiskMapIndex3 F462   3576
3596: GetDiskMapValue F464   3245 3489
2411: GetExtentAddress EF17   2094 2391
2465: GetExtentNumberMSB EF4B   1798 2456 3319
2400: GetFcbRecordDetails EF0A   2384 3095
1824: GetFileSize     EC41   1659
1837: GetFileSize1    EC53   1865
1863: GetFileSize2    EC75   1856
1866: GetFileSizeExit EC7B   1839
2532: GetNextDirectoryRecord EF86   1404 1446 1864 2570 2575 3116 3442
2550: GetNextDirectoryRecord1 EFA3   2542
1871: GetRandomRecordPosition EC7D   1813 1843
2464: GetWriteFileFlagValue EF4B   2141 2476 2487
3747: GoToError       F4ED   3736 3739 3742 3745 3762
0079: GREATER_THAN    003E
0062: HASH_TAG        0023   0947
3820: highestRecordNumber 007F   3221 3326
2271: Home            EE73   2048 2530
1147: IgnoreTheLine   EAAC   1014
3859: initDAMAddress  F56C   1211 1516 2295 2851
2008: InitDisk        ED26   1953
2055: InitDisk1       ED6B   2065 2083
2078: InitDisk2       ED8C   2069 2074
2455: InitializeExtentNumberMSB EF45   1254 1334 3146
0117: IOBYTE          0003   0638 0658
3494: IsAllocated     F403   3194 3229
3677: IsBitSet        F4A7   1944 2344 3699 3711
3684: IsBitSet1       F4AE   3682
3679: IsBitSetLoop    F4A8   3687
2340: IsDiskWriteProtected EEBB   2138 2864
1012: IsItDeleteTheLineU EA19
1009: IsItDeleteTheLineX EA14
1006: IsItPrintToggle EA0F
1096: IsItPrintToggle1 EA70   1094
1000: IsItRubout      EA05
1003: IsPhysicalEOL   EA0A
0808: IsPrintableASCII E92C   0502 0838
1081: ItIsPhysicalEOL EA5D   1005
1088: ItIsPrintToggle EA65   1008
1069: ItIsRubout      EA52   1002
1165: keyboardByte    EABE   0797 0906 0939
0065: L_PAREN         0028
2440: Left            EF36   2442
0082: LEFT_ARROW      005F
0098: LEFT_CURLY      007B
0146: LengthInBytes   2000   0147 0151 0261
0147: LengthInK       0009
0077: LESS_THAN       003C
0058: LF              000A   0811 0892 0964 0994
1110: LL1             EA7E   1118
0032: LO_NIBBLE_MASK  000F   0785 1890
3858: loggedDisks     F56A   1206 1471 1943 1949 1951
2787: LookRight       F08B   2797
3446: MakeNewFile     F3C0   1782 3148 3398
3464: MakeNewFile1    F3E2   3468
2038: Mark4Directory  ED53   2030
3830: maxExtValue     001F   2510 3363
0149: MemorySize      0040   0151
2933: Merge           F125   2181 2183
2160: MergeAllocationMaps EDFE   2198
2175: MergeDirEntryNot0 EE12   2172
2170: MergeFCBisNot0  EE0C   2168
2194: MergeMapLoop    EE2E   2178
2180: MergeWordMaps   EE19   2163
3831: moduleMask      000F   3384
3659: MoveX           F49D   3548
3661: MoveX0          F49E   3668
2917: MultiplyHLby8   F11B   2024 2843
0262: myOffset        0001   0263 0279
3833: nameLength      000F   1336 2088 2146 3389 3460 3462
3836: NEXT_RECORD     0020   1737 1812 2405 3837
2597: NoDirRecordsMatch EFE5   2536 2548
2815: NoFreeBlocks    F0B3   2804 2812
2799: NoMoreLeft      F09D   2795
2801: NoMoreLeftLoop  F09E   2805
2807: NoMoreRight     F0A8   2790
2809: NoMoreRightLoop F0A9   2813
2369: NoSelect        EEEA   2359
0935: NothingWaiting  E9B8   0926
0054: NULL            0000
0246: NumberOfHeads   0002   0257 0259 0270 0280
0243: NumberOfLogicalDisks 0004
0031: OFF             0000
0030: ON              FFFF
2087: OpenFile        ED96   1256 1772
3351: OpenNextExt     F338   3183 3334
3388: OpenNextExt1    F36C   3373
3405: OpenNextExt2    F38A   3375 3392
3407: OpenNextExt3    F38D   3402
3414: OpenNextExtError F395   3385 3396 3401
3378: OpenNextModule  F361   3365
2127: OpenSetRecordCount EDD0   2123 2125
1174: paramDE         EAC3   0338 0384 0681 0973 1052 1107 1328 1402 1515 1706 1811 1828 2101 2128 2156 2353 2371 2401 2412 2466 2527 3217 3264 3358 3427 3448 3451 3456 3543 3597
1173: paramE          EAC2   0340 0392 0777 1929 2357
0064: PERCENT         0025
0071: PERIOD          002E
0120: Pg0CurentDisk   0004
0119: Pg0CurentUser   0004   0120
0068: PLUS_SIGN       002B
0822: Print           E93B   0684 0831 3794 3796
1167: printEchoFlag   EABF   0880 0919 1091
0080: QMARK           003F   1330 2558
1338: QMarkFind       EB05   1331
0066: R_PAREN         0029
0113: RAM             0000   0115 0116 0117 0119 0122 0125 0128 0133 0135
3837: RANDOM_REC_FIELD 0021   1708 1814 1829
1685: RandomDiskRead  EB8B   1640
1692: RandomDiskWrite EB94   1652
1702: RandomSeek      EB9D   1687 1694
1756: RandomSeekClose EBE1   1746
1801: RandomSeekError EC26   1735
1794: RandomSeekErrorBadSeek EC1F   1765 1781 1786
1788: RandomSeekExit  EC19   1755 1775
2313: ReadBuffer      EE9B   2958 3199
2967: ReadDirectory   F13C   2058 2534
2979: ReadDirectory0  F150   2974
2983: ReadDirectory1  F157   2985
2956: ReadDirRecord   F133   2992
1030: ReadEchoRubOut  EA26   1078
3899: readModeFlag    F58E   3172 3214 3394
0983: ReadNext        E9ED   1047 1073 1099 1121
0986: ReadNext0       E9EF   1066 1085
3857: readOnlyVector  F568   1205 1579 2322 2327 2341
3164: ReadSeq         F22D   3130
0970: ReadString      E9E0   0714 1131 1153
3727: ReAlignMap1     F4CE   3725
3722: ReAlignMapLoop  F4C8   3730
3720: ReAlignVector   F4C7   3703
3192: RecordOK        F257   3179
0255: RecordsPerBlock 0010
0239: RecordsPerExtent 0080   2126 3181 3820
0232: recordsPerSector 0004   0255 0270
3421: Rename          F39B   3156
3433: Rename1         F3AC   3443
1102: RepeatLine      EA75   1017
2350: ReselectDisk    EEC6   1255 1286 1335 1403 1427 1639 1651 1658 1922 3129 3137 3147 3155
2486: ResetFileWriteFlag EF5A   3288
3709: ResetVectorBit  F4C0
0379: ReturnToCaller  E832   0353
0395: ReturnToCaller1 E84D   0382 0388 0617
2448: Right           EF40   2446 2450
2257: RotateAndReplace EE6C   2260
2891: RotateRightHLbyB F104   2899
2896: RotateRightHLbyB1 F10A   2894
0083: RUBOUT          007F   1001
2707: ScanDiskMap     F03A   1444 2081
2714: ScanDiskMap0    F044   2746
2739: ScanDiskMap2    F05B   2728
2730: ScanDiskMapWord F055   2722
3904: searchAddress   F593   1401 2528 2538
2522: SearchForDirectoryRecord EF71   1339 1434 1826 2089 2147 3109 3390 3425 3453
3903: searchLength    F592   2525 2552
0284: SectorMask      0003
0249: SectorsPerBlock 0004   0253 0255 0258 0264 0284
0259: SectorsPerCylinder 0024   0262 0263
0248: SectorsPerTrack 0012   0257 0259 0270
3007: Seek            F17B   3004 3198 3299
3012: Seek0           F185   3016
3550: SeekAndCopy     F43E
2998: SeekDir         F16A   2221 2991 3551
1938: Select          ECBF   1213 1934
1928: SelectCurrent   ECB3   0393 1237 2367
1959: SelectDisk      ECE0   1939
2002: SelectDisk1     ED22   1998
0076: SEMICOLON       003B
3901: seqReadFlag     F590   1704 3096 3166 3209 3329
3502: SetActualRecordAdd F409   3197 3298
3506: SetActualRecordAdd1 F40F   3509
3107: SetAttributes   F1F7   1923
3110: SetAttributes1  F1FC   3117
2033: SetBitLoop      ED4E   2036
2236: SetCurrentDiskBit EE59
2294: SetDataDMA      EE8D   1212 1517 2612 2959
2300: SetDirDMA       EE92   2609 2957
2671: SetDirectoryEntry F024   2082 3472
2321: SetDiskReadOnly EEA3   1561 3082
2305: SetDMA          EE95   2296
2633: SetEndDirectory F006   2053 2529 2598 2975
2475: SetFileWriteFlag EF54   1806 2106 3416 3476
3527: SetLowReturnTo1 F422   3203 3223 3415
3086: SetNewCheckSum  F1E3   3075
2577: SetNextPosition EFCD   2559 2563 2571
1810: SetRandomRecord EC2E   1665
2383: SetRecordVars   EEF3   3174 3219 3408
2422: SetResetMapBit  EF1F   2742
0784: SetUserNumber   E91B   0779
3697: SetVectorBit    F4B7   1950 2326
2920: ShiftLeftHLbyB  F11D   2924
3650: ShiftLeftHLbyC  F496   2241
3652: ShiftLeftHLbyC0 F497   3656
2908: ShiftRightHLbyB F113   2432 2912 3001
3636: ShiftRightHLbyC F489
3638: ShiftRightHLbyC0 F48A   3648
0961: showCRLF        E9D6   0949 1084 3789
0946: showHashCRLF    E9C0   1105 1148
0950: showHashCRLF1   E9C8   0957
0072: SLASH           002F
0055: SOH             0001
0060: SPACE           0020   0817 0859 0889 0955 1139 1149 1151
0291: STACK_SIZE      0020   3924
3924: stackBottom     F5A4
1170: startingColumn  EAC0   0952 0972 1128
2690: StillInDirectory F02D   2546 2672 3080
0261: SystemSectors   0011   0262
0057: TAB             0009   0813 0854
0852: TabOut          E958   0507 0529 0829 0839
0858: TabOut0         E95E   0863
2556: TestNextPosition EFAC   2582
0924: ToggleFlag1     E9A9   0922
0123: TopRAM          0007
0258: TotalNumberOfBlocks 02D0
0257: TotalNumberOfSectors 0B40   0258 0263
0135: TPA             0100
0247: TracksPerHead   0050   0257
0028: TRUE            FFFF   0920 0941 1092 1686 1996 2003 2057 2080 2218 2351 2606 3171
0081: UNDER_SCORE     005F
3094: UpdateRecordVars F1E5   3200 3333 3346
1163: usersStack      EABC   0342 0396
1285: vCloseFile      EAEC   0423
1657: vComputeFileSize EB81   0442
0500: vConsoleIn      E8AD   0407
0528: vConsoleOut     E8BE   0408
1426: vDeleteFile     EB1A   0426
0605: vDirectConIO    E8D1   0412
0614: vDirectConIO1   E8D9   0608
0290: VERSION         0020   0755
1326: vFindFirst      EAF2   0424
1400: vFindNext       EB0B   0425
1532: vGetAllocAddr   EB5C   0434
0728: vGetConsoleStatus E900   0417
1493: vGetCurrentDisk EB4C   0432
1594: vGetDiskParamBlock EB6D   0438
0637: vGetIOBYTE      E8E7   0413
1470: vGetLoginVector EB45   0431
1578: vGetReadOnlyMap EB66   0436
0776: vGetSetUserNumber E90D   0439
0754: vGetVersion     E907   0419
0582: vListOut        E8CD   0411
3145: vMakeFile       F21B   0429
1253: vOpenFile       EAE3   0422
0680: vPrintString    E8F3   0415
0567: vPunchOut       E8C9   0410
0548: vReaderIn       E8C2   0409
1638: vReadRandom     EB75   0440
3128: vReadSeq        F20D   0427
0713: vReadString     E8FC   0416
3154: vRenameFile     F224   0430
1622: vResetDrive     EB74   0444
1203: vResetSystem    EAC7   0420
1236: vSelectDisk     EAE0   0421
1514: vSetDMA         EB53   0433
1921: vSetFileAttributes ECAA   0437
0657: vSetIOBYTE      E8EE   0414
1664: vSetRandomRecord EB87   0443
0468: vSystemReset    E8AA   0406
1560: vWriteProtectDisk EB63   0435
1650: vWriteRandom    EB7B   0441
1678: vWriteRandom0Fill EB8A   0447
3136: vWriteSeq       F214   0428
3782: waitB4boot      F51B   3772 3776
0115: WarmBoot        0000   0934 1043 3767 3784
0035: WORD            0002   1174 1176
0195: WriteAllocated  0000   3230
2622: WriteBuffer     EFFE   2611 3302
0197: WriteCleanBuffer 0002   3287
2604: WriteDir        EFEE   1445 2222 3552
0196: WriteDirectory  0001   2610
3832: writeFlagMask   0080
3933: Z_HighestLocation F5E4   3934
3934: Z_MemoryLeft    001B
0039: ZERO            0000
