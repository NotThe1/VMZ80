0001: E000         ;     File created by MakeZ80Source on Tue Sep 18 14:13:13 EDT 2018 from:
0002: E000         ;     C:\Users\admin\Dropbox\Resources\CPM\CurrentOS\8080\CCP.asm
0003: E000
0004: E000         ; Intrinsic Commands
0005: E000         ;	DIR
0006: E000
0007: E000         ; CCP.Z80
0008: E000         ;
0009: E000         ; 2019-02-19 Started to refactor to Z80 idiom
0010: E000
0011: E000         ; 2017-03-02 Refactored the CP/M Suite
0012: E000         ; 2014-01-16
0013: E000         ; 2014-05-01  :  Frank Martyn
0014: E000
0015: E000         ; replace systemFile with fcbSystemFileIndex
0016: E000
0017: E000                        Include ./stdHeader.Z80
0018: E000         ;<<<<<<<<<<<<<<<<<<<<<<< Include >>>>>>>>>>>>>>>>
0019: E000         ;     File created by MakeZ80Source on Mon Sep 17 16:25:01 EDT 2018 from:
0020: E000         ;     C:\Users\admin\Dropbox\Resources\CPM\CurrentOS\8080\stdHeader.asm
0021: E000         ; stdHeader.asm
0022: E000         ; standard equates
0023: E000
0024: E000         ; 2017-03-02 Refactored the CP/M Suite
0025: E000
0026: E000
0027: E000             TRUE       EQU    -1                   ; not false
0028: E000             FALSE      EQU    0000H
0029: E000             ON         EQU    -1
0030: E000             OFF        EQU    0000H
0031: E000             LO_NIBBLE_MASK EQU    0FH                  ; mask used to obtain the bytes low four bits
0032: E000
0033: E000             BYTE       EQU    1                    ; number of bytes for "byte" type
0034: E000             WORD       EQU    2                    ; number of bytes for "word" type
0035: E000
0036: E000
0037: E000             ASCII_MASK EQU    7FH                  ; Ascii mask 7 bits
0038: E000             ZERO       EQU    00H                  ; Zero
0039: E000             EndOfMessage EQU    00H
0040: E000
0041: E000             CTRL_C     EQU    03H                  ; ETX
0042: E000             CTRL_E     EQU    05H                  ; physical eol
0043: E000             CTRL_H     EQU    08H                  ; backspace
0044: E000             CTRL_K     EQU    0BH                  ; VT - Vertical tab
0045: E000             CTRL_L     EQU    0CH                  ; FF - Form feed
0046: E000             CTRL_P     EQU    10H                  ; prnt toggle
0047: E000             CTRL_R     EQU    12H                  ; repeat line
0048: E000             CTRL_S     EQU    13H                  ; X-OFF stop/start screen
0049: E000             CTRL_U     EQU    15H                  ; line delete
0050: E000             CTRL_X     EQU    18H                  ; =ctl-u
0051: E000             CTRL_Z     EQU    1AH                  ; end of file
0052: E000
0053: E000             NULL       EQU    00H                  ; Null
0054: E000             SOH        EQU    01H                  ; Start of Heading
0055: E000             BELL       EQU    07H                  ; Bell
0056: E000             TAB        EQU    09H                  ; Tab
0057: E000             LF         EQU    0AH                  ; Line Feed
0058: E000             CR         EQU    0DH                  ; Carriage Return
0059: E000             SPACE      EQU    20H                  ; Space
0060: E000             EXCLAIM_POINT EQU    21H                  ; Exclamtion Point
0061: E000             HASH_TAG   EQU    23H                  ; Sharp sign #
0062: E000             DOLLAR     EQU    24H                  ; Dollar Sign
0063: E000             PERCENT    EQU    25H                  ; Percent Sign
0064: E000             L_PAREN    EQU    28H                  ; Left Paenthesis (
0065: E000             R_PAREN    EQU    29H                  ; Right Paenthesis )
0066: E000             ASTERISK   EQU    2AH                  ; Asterisk *
0067: E000             PLUS_SIGN  EQU    2BH                  ; Plus sign +
0068: E000             COMMA      EQU    2CH                  ; Comma
0069: E000             DASH       EQU    2DH                  ; Dash Hyphen -
0070: E000             PERIOD     EQU    2EH                  ; Period
0071: E000             SLASH      EQU    2FH                  ; /
0072: E000             ASCII_ZERO EQU    30H                  ; zero
0073: E000             COLON      EQU    3AH                  ; Colon
0074: E000
0075: E000             SEMICOLON  EQU    3BH                  ; Semi Colon
0076: E000             LESS_THAN  EQU    3CH                  ; Less Than <
0077: E000             EQUAL_SIGN EQU    3DH                  ; Equal Sign
0078: E000             GREATER_THAN EQU    3EH                  ; Greater Than >
0079: E000             QMARK      EQU    3FH                  ; Question Mark
0080: E000             UNDER_SCORE EQU    5FH                  ; under score _
0081: E000             LEFT_ARROW EQU    5FH                  ; Left Arrow ?
0082: E000             RUBOUT     EQU    7FH                  ; Delete Key
0083: E000
0084: E000
0085: E000             ASCII_A    EQU    'A'
0086: E000             ASCII_C    EQU    'C'
0087: E000             ASCII_K    EQU    'K'
0088: E000             ASCII_N    EQU    'N'
0089: E000             ASCII_Q    EQU    'Q'
0090: E000             ASCII_R    EQU    'R'
0091: E000             ASCII_W    EQU    'W'
0092: E000             ASCII_Y    EQU    'Y'
0093: E000             CARET      EQU    '^'
0094: E000             ASCII_LO_A EQU    'a'
0095: E000             ASCII_LO_K EQU    'k'
0096: E000             ASCII_LO_P EQU    'p'
0097: E000             LEFT_CURLY EQU    '{'                  ; Left curly Bracket
0098: E000
0099: E000         ;<<<<<<<<<<<<<<<<<<<<<<< Include >>>>>>>>>>>>>>>>
0100: E000                        Include ./osHeader.Z80
0101: E000         ;<<<<<<<<<<<<<<<<<<<<<<< Include >>>>>>>>>>>>>>>>
0102: E000         ;     File created by MakeZ80Source on Mon Sep 17 16:25:47 EDT 2018 from:
0103: E000         ;     C:\Users\admin\Dropbox\Resources\CPM\CurrentOS\8080\osHeader.asm
0104: E000         ; osHeader.Z80
0105: E000
0106: E000         ; 2018-12-28 Changed BDOSEntry to remove dead space in BDOS
0107: E000         ; 2017-03-02 Refactored the CP/M Suite
0108: E000
0109: E000         ; Contains the Equates used by the CP/M system
0110: E000
0111: E000         ;------------------------Page Zero Constants ---------------------------------
0112: E000             RAM        EQU    0                    ; Start of RAM ( and the Base page)
0113: E000
0114: E000             WarmBoot   EQU    RAM + 0              ; Contains a JMP instruction to warm boot in BIOS
0115: E000             BIOSPAGE   EQU    RAM + 2              ; BIOS Jump Vector Page
0116: E000             IOBYTE     EQU    RAM + 3              ; Input/Output redirection byte
0117: E000
0118: E000             Pg0CurentUser EQU    RAM + 4              ; Current user ( bits 7-4)
0119: E000             Pg0CurentDisk EQU    Pg0CurentUser        ; Default logical disk (bits 0-3)
0120: E000
0121: E000             BDOSE      EQU    RAM + 5              ; Contains a JMP to BDOS entry
0122: E000             TopRAM     EQU    BDOSE+2              ; Top page of usable RAM
0123: E000
0124: E000             FCB1       EQU    RAM + 05CH           ; File Control Block #1
0125: E000             FCB2       EQU    FCB1 + 16            ; File Control Block #2
0126: E000
0127: E000             ComTail    EQU    RAM + 080H           ; Complete command tail
0128: E000             ComTailCount EQU    ComTail + 1          ; Count of the number of char in tail
0129: E000             ComTailChars EQU    ComTailCount + 1     ; Complete Command tail up-cased, w/o trailing CR
0130: E000         ;-----------------------------------------------------------------------
0131: E000
0132: E000             DMABuffer  EQU    RAM + 080H           ; Default "DMA" address used as buffer
0133: E000         ;-----------------------------------------------------------------------
0134: E000             TPA        EQU    RAM + 0100H          ; Start of Transient program Area
0135: E000         ;-----------------------------------------------------------------------
0136: E000             END_OF_FILE EQU    1AH                  ; end of file
0137: E000         ;-----------------------------------------------------------------------
0138: E000
0139: E000         ;--------------- CP/M Constants -----------------------------------------
0140: E000
0141: E000             CCPLength  EQU    0800H                ; Constant
0142: E000             BDOSLength EQU    0E00H                ; Constant 0E00H
0143: E000             BIOSLength EQU    0A00H                ; Constant 0900H
0144: E000
0145: E000             LengthInBytes EQU    CCPLength + BDOSLength + BIOSLength
0146: E000             LengthInK  EQU    (LengthInBytes/1024) + 1
0147: E000
0148: E000             MemorySize EQU    64
0149: E000
0150: E000             CCPEntry   EQU    (MemorySize * 1024) - LengthInBytes
0151: E000
0152: E000             BDOSBase   EQU    CCPEntry + CCPLength
0153: E000             BDOSEntry  EQU    BDOSBase
0154: E000
0155: E000             BIOSBase   EQU    BDOSBase + BDOSLength
0156: E000             BIOSStart  EQU    CCPEntry + CCPLength + BDOSLength
0157: E000         ;-----------------------------------------------------------------------
0158: E000
0159: E000         ;------------------- BDOS System Call Equates --------------------------
0160: E000             fConsoleIn EQU    01H                  ; rcharf - Console Input
0161: E000             fConsoleOut EQU    02H                  ; pcharf - Console Output
0162: E000             fPrintString EQU    09H                  ; pbuff	- Print String
0163: E000             fReadString EQU    0AH                  ; rbuff	- Read Console String
0164: E000             fGetConsoleStatus EQU    0BH                  ; breakf - Get Console Status
0165: E000             fGetVersion EQU    0CH                  ; liftf	- Return Version Number
0166: E000             fResetSystem EQU    0DH                  ; initf	- Reset Disk System
0167: E000             fSelectDisk EQU    0EH                  ; self	- Select Disk
0168: E000             fOpenFile  EQU    0FH                  ; openf	- Open File
0169: E000             fCloseFile EQU    10H                  ; closef - Close File
0170: E000             fSearchFirst EQU    11H                  ; searf	- Search For First
0171: E000             fSearchNext EQU    12H                  ; searnf - Search for Next
0172: E000             fDeleteFile EQU    13H                  ; delf - Delete File
0173: E000             fReadSeq   EQU    14H                  ; dreadf - Read Sequential
0174: E000             fWriteSeq  EQU    15H                  ; dwritf - Write Sequential
0175: E000             fMakeFile  EQU    16H                  ; makef	- Make File
0176: E000             fRenameFile EQU    17H                  ; renf	- Rename File
0177: E000             fGetLoginVector EQU    18H                  ; logf	- Return Login Vector
0178: E000             fGetCurrentDisk EQU    19H                  ; cself	- Return Current Disk
0179: E000             fSetDMA    EQU    1AH                  ; dmaf	- Set DMA address
0180: E000             fGetSetUserNumber EQU    20H                  ; userf	- Set/Get User Code
0181: E000         ;-----------------------------------------------------------------------
0182: E000
0183: E000
0184: E000
0185: E000
0186: E000
0187: E000         ;*******************************************************************************
0188: E000         ; These are the values handed over by the BDOS when it calls the Writer operation
0189: E000         ; The allocated.unallocated indicates whether the BDOS is set to write to an
0190: E000         ; unallocated allocation block (it only indicates this for the first 128 byte
0191: E000         ; sector write) or to an allocation block that has already been allocated to a
0192: E000         ; file. The BDOS also indicates if it is set to write to the file directory
0193: E000         ;*******************************************************************************
0194: E000             WriteAllocated EQU    00H
0195: E000             WriteDirectory EQU    01H
0196: E000             WriteCleanBuffer EQU    02H
0197: E000
0198: E000
0199: E000         ;<<<<<<<<<<<<<<<<<<<<<<< Include >>>>>>>>>>>>>>>>
0200: E000                        Include ./diskHeader.Z80
0201: E000         ;<<<<<<<<<<<<<<<<<<<<<<< Include >>>>>>>>>>>>>>>>
0202: E000         ;     File created by MakeZ80Source on Mon Sep 17 16:26:22 EDT 2018 from:
0203: E000         ;     C:\Users\admin\Dropbox\Resources\CPM\CurrentOS\8080\diskHeader.asm
0204: E000         ; diskHeader.asm
0205: E000
0206: E000         ; 2017-03-02 Refactored the CP/M Suite
0207: E000
0208: E000         ; needs osHeader.asm declared before this is used !!!!!!!
0209: E000
0210: E000         ; Contains the Equates used by the CP/M system to handle disks
0211: E000
0212: E000
0213: E000         ;*******************************************************************************
0214: E000         ;
0215: E000         ;     Disk related values
0216: E000         ;
0217: E000         ;
0218: E000         ;*******************************************************************************
0219: E000             DiskStatusLocation EQU    043H                 ; status after disk I/O placed here
0220: E000             DiskControlByte EQU    045H                 ; control byte for disk I/O
0221: E000             DiskCommandBlock EQU    046H                 ; Control Table Pointer
0222: E000         ; for boot
0223: E000             DiskControlTable EQU    0040H
0224: E000
0225: E000             DiskReadCode EQU    01H                  ; Code for Read
0226: E000             DiskWriteCode EQU    02H                  ; Code for Write
0227: E000
0228: E000
0229: E000             cpmRecordSize EQU    080H                 ; (128) record size that CP/M uses
0230: E000             diskSectorSize EQU    200H                 ; (512) size of physical disk I/O
0231: E000             recordsPerSector EQU    diskSectorSize/cpmRecordSize
0232: E000
0233: E000             DirEntrySize EQU    20H                  ; (32)
0234: E000             DirBuffSize EQU    cpmRecordSize
0235: E000
0236: E000             DirectoryEntryPerRecord EQU    cpmRecordSize / DirEntrySize
0237: E000
0238: E000             RecordsPerExtent EQU    080H                 ; extent Record capacity
0239: E000
0240: E000
0241: E000         ;-------------------------------------------------------------------------------------
0242: E000             NumberOfLogicalDisks EQU    4                    ; max number of disk in this system
0243: E000
0244: E000         ;----------------------3.5 Double Density Disk Geometry----------------------------------------
0245: E000             NumberOfHeads EQU    02H                  ; number of heads
0246: E000             TracksPerHead EQU    50H                  ; 80
0247: E000             SectorsPerTrack EQU    12H                  ; 18 -  1 head only
0248: E000             SectorsPerBlock EQU    04H                  ; 2048 bytes
0249: E000             DirectoryBlockCount EQU    02H                  ;
0250: E000         ;-----------------------------------------------------------------------
0251: E000
0252: E000             BlockSize  EQU    SectorsPerBlock * 	diskSectorSize ; Size in Bytes
0253: E000
0254: E000             RecordsPerBlock EQU    recordsPerSector * SectorsPerBlock
0255: E000
0256: E000             TotalNumberOfSectors EQU    SectorsPerTrack * TracksPerHead * NumberOfHeads
0257: E000             TotalNumberOfBlocks EQU    TotalNumberOfSectors / SectorsPerBlock
0258: E000             SectorsPerCylinder EQU    SectorsPerTrack * NumberOfHeads
0259: E000
0260: E000             SystemSectors EQU    LengthInBytes / diskSectorSize + 1 ; need to account for boot sector
0261: E000             myOffset   EQU    (SystemSectors / SectorsPerCylinder) + 1 ;
0262: E000             DataSectors EQU    TotalNumberOfSectors - (SectorsPerCylinder * myOffset)
0263: E000             DataBlocks EQU    DataSectors / 	SectorsPerBlock
0264: E000
0265: E000         ;-----------------------------------------------------------------------
0266: E000         ;; Disk block parameters for F3HD - 3.5 HD   1.44 MB Diskette
0267: E000         ;-----------------------------------------------------------------------
0268: E000         ;dpb3hdSPT				EQU		0090H			; cpmRecords per track- (144)
0269: E000             dpb3hdSPT  EQU    recordsPerSector * SectorsPerTrack * NumberOfHeads ; SPT - records per Clynder
0270: E000             dpb3hdBSH  EQU    04H                  ; Block Shift Factor - BlockSize = 128 * (2**BSH)											; BSH = Log2(BlockSize/cpmRecordSize)
0271: E000             dpb3hdBLM  EQU    0FH                  ; BlockMask = (2**BSH) -1
0272: E000             dpb3hdEXM  EQU    00H                  ; Extent mask = (PhysicalExtents/LogicalExtents) - 1
0273: E000             dpb3hdDSM  EQU    DataBlocks -1        ; Maximum allocation block number (710)
0274: E000             dpb3hdDRM  EQU    ((BlockSize *  DirectoryBlockCount)	/	DirEntrySize) -1 ; DRM Number of directory entries - 1 (127)
0275: E000             dpb3hdAL0  EQU    0C0H                 ; Bit map for reserving 1 alloc. block
0276: E000             dpb3hdAL1  EQU    00H                  ;  for each file directory
0277: E000             dpb3hdCKS  EQU    (dpb3hdDRM +1)/ DirectoryEntryPerRecord ; Disk change work area size (32)
0278: E000             dpb3hdOFF  EQU    myOffset             ; Number of tracks before directory
0279: E000             dpb3hdNOH  EQU    NumberOfHeads
0280: E000
0281: E000         ;*******************************************************************************
0282: E000
0283: E000             SectorMask EQU    SectorsPerBlock - 1
0284: E000
0285: E000         ;***************************************************************************
0286: E000
0287: E000         ;<<<<<<<<<<<<<<<<<<<<<<< Include >>>>>>>>>>>>>>>>
0288: E000
0289: E000             BDOS       EQU    0005H                ; BDOS Vector in Page 00000
0290: E000
0291: E000             fcbSystemFileIndex EQU    0AH                  ; extent number field index
0292: E000             FILE_NAME_SIZE EQU    08H                  ; Max size of file Name
0293: E000             FILE_TYPE_SIZE EQU    03H                  ; Max size of file Type
0294: E000
0295: E000
0296: E000                        ORG    CCPEntry
0297: E000             CcpBoundary EQU    $
0298: E000         ;========================== CCP Entry ======================================;
0299: E000
0300: E000         ; 	JP		CcpStart						;start ccp with possible initial command
0301: E000         ;*****************************************************************
0302: E000         ;enter here from boot loader
0303: E000         ; On Entry	C(HiNibble) = User Number
0304: E000         ;			C(LoNibble) = Disk (0=A, 1=B...F=P)
0305: E000             CcpStart:
0306: E000 31 F0 E7               LD     SP,Stack             ; Set CCP's Stack
0307: E003 C5                     PUSH   BC                   ; Save Disk Number
0308: E004 59                     LD     E,C                  ; Get User Number
0309: E005 CB 3B                  SRL    E
0310: E007 CB 3B                  SRL    E                    ; Move user number
0311: E009 CB 3B                  SRL    E                    ;  to Lo Nibble
0312: E00B CB 3B                  SRL    E
0313: E00D CD 48 E5               CALL   SetUser              ; Set initial User
0314: E010         ; Initialize will completely reset the disk file system
0315: E010 CD 25 E5               CALL   Initialize           ; A = 0FFH if Submit file found
0316: E013 32 B0 E2               LD     (submitFlag),A       ; Save return value in Flag
0317: E016 C1                     POP    BC                   ; Recall disk number
0318: E017 79                     LD     A,C                  ; Put into Acc
0319: E018 E6 0F                  AND    LO_NIBBLE_MASK       ; Remove User Number
0320: E01A 32 04 00               LD     (Pg0CurentDisk),A    ; Puts disk number into Page 0
0321: E01D CD 2A E5               CALL   SelectDisk           ; Set default Disk From Acc											; check for initial command
0322: E020 3A 2D E2               LD     A,(commandLength)
0323: E023 B7                     OR     A                    ; See if there is a Command
0324: E024 20 16                  JR     NZ,CcpParseCommand   ;  Skip if yes
0325: E026
0326: E026             ccpMainEntry:
0327: E026 31 F0 E7               LD     SP,Stack             ; (re)Establish CCP's Stack
0328: E029 CD 84 E6               CALL   CrLf                 ; Send CRLF to the Console
0329: E02C CD 41 E5               CALL   GetSelectedDrive     ; Get current disk number
0330: E02F C6 41                  ADD    A,ASCII_A            ; Make ASCII form of Drive
0331: E031 CD 8D E6               CALL   PrintCharInA         ; Send Drive letter to console
0332: E034 3E 3E                  LD     A,GREATER_THAN       ; Load '>'
0333: E036 CD 8D E6               CALL   PrintCharInA         ; Send to Console
0334: E039 CD 65 E0               CALL   ReadCommand          ; Command Buffer filled, Pointer set
0335: E03C
0336: E03C             CcpParseCommand:
0337: E03C 11 80 00               LD     DE,DMABuffer         ; Default in page 0
0338: E03F CD 6E E5               CALL   SetDMA               ; Set the DMA address
0339: E042 CD 41 E5               CALL   GetSelectedDrive     ; Get current drive
0340: E045 32 6B E7               LD     (currentDisk),A      ; Save
0341: E048 CD 26 E1               CALL   ParseToken1          ; Get first token in command buffer
0342: E04B C4 06 E2               CALL   NZ,CommandError      ; The name must be unambiguous
0343: E04E 3A 67 E7               LD     A,(selectedDisk)     ; Get the Disk:
0344: E051 B7                     OR     A                    ; If not default,
0345: E052 C2 A8 E5               JP     NZ,ccpUserFunction   ;   must be user CMD
0346: E055
0347: E055 CD DC E1               CALL   IntrinsicFunction    ; Get CMD index into ACC
0348: E058 21 E9 E2               LD     HL,builtInCMDVector  ; Base of Vector
0349: E05B 5F                     LD     E,A
0350: E05C 16 00                  LD     D,0                  ; Index in DE
0351: E05E 19                     ADD    HL,DE
0352: E05F 19                     ADD    HL,DE                ; Vector is a word, need 2 ADDs
0353: E060 7E                     LD     A,(HL)               ; Pointing at Address
0354: E061 23                     INC    HL
0355: E062 66                     LD     H,(HL)
0356: E063 6F                     LD     L,A                  ; Get address to HL
0357: E064 E9                     JP     (HL)                 ;  Go to the Function
0358: E065
0359: E065
0360: E065         ;------------------------------ Read Command -------------------------------;
0361: E065         ;
0362: E065         ;read the next command into the command buffer                             ;
0363: E065         ;check for submit file                                                     ;
0364: E065             ReadCommand:                      ;
0365: E065 3A B0 E2               LD     A,(submitFlag)       ; Get the Submit File Flag          ;
0366: E068 B7                     OR     A                    ; Is it Set ?                       ;
0367: E069 CA C4 E0               JP     Z,NotSubmitFile      ;  skip if not                      ;
0368: E06C         ; scanning a submit file change drives to open and read the file            ;
0369: E06C 3A 6B E7               LD     A,(currentDisk)      ; Get current disk                  ;
0370: E06F B7                     OR     A                    ; Is it default ?                   ;
0371: E070 3E 00                  LD     A,0                  ; Prepare to set Disk A             ;
0372: E072 C4 2A E5               CALL   NZ,SelectDisk        ; Select it if needed               ;
0373: E075         ; have to open again in case xsub present                                   ;
0374: E075 11 B1 E2               LD     DE,submitFCB         ; Point at the Submits's FCB        ;
0375: E078 CD 30 E5               CALL   OpenFile             ; Open it                           ;
0376: E07B CA C4 E0               JP     Z,NotSubmitFile      ; Skip if no submit file present    ;
0377: E07E 3A BF E2               LD     A,(submitRC)         ; Get Number of records in file     ;
0378: E081 3D                     DEC    A                    ; read last record(s) first     ;
0379: E082 32 D0 E2               LD     (submitCR),A         ; current record to read            ;
0380: E085 11 B1 E2               LD     DE,submitFCB         ; Point at the Submits's FCB        ;
0381: E088 CD 3A E5               CALL   DiskRead             ; Read from back to front           ;
0382: E08B C2 C4 E0               JP     NZ,NotSubmitFile     ; Skip EOF ??                       ;
0383: E08E         ;
0384: E08E         ; disk read is OK, transfer to commandBuffer                                ;
0385: E08E 21 80 00               LD     HL,DMABuffer         ; From                              ;
0386: E091 11 2D E2               LD     DE,commandLength     ; TO	                            ;
0387: E094 01 80 00               LD     BC,cpmRecordSize     ; For this many bytes               ;
0388: E097 ED B0                  LDIR                        ; Move to command buffer            ;
0389: E099         ;	LD		B,cpmRecordSize					; number of bytes to Copy       ;
0390: E099         ;	CALL	CopyHL2DEforBXX                                                   ;
0391: E099         ;
0392: E099         ; line is transferred, close the file with a deleted record                 ;
0393: E099 21 BE E2               LD     HL,submitFWF         ; Point at the WriteFileFlag        ;
0394: E09C CB BE                  RES    7,(HL)               ; Clear the WriteFileFlag                   ;
0395: E09E         ;	LD		HL,submitFWF				; Bit 7 is FileWriteFlag            ;
0396: E09E         ;	LD		(HL),0						                                    ;
0397: E09E         ;	INC		HL                                                              ;
0398: E09E 21 BF E2               LD     HL,submitRC          ; Point at FCB record Count         ;
0399: E0A1 35                     DEC    M                    ; Make it one less record           ;
0400: E0A2 11 B1 E2               LD     DE,submitFCB         ; Point at the Submits's FCB        ;
0401: E0A5 CD 35 E5               CALL   CloseFile            ; Close it                          ;
0402: E0A8 CA C4 E0               JP     Z,NotSubmitFile      ; Skip if not clean close           ;
0403: E0AB         ; CloseFile went ok, return to original drive                               ;
0404: E0AB 3A 6B E7               LD     A,(currentDisk)      ; Get the current disk              ;
0405: E0AE B7                     OR     A                    ; Is it the default disk ?          ;
0406: E0AF C4 2A E5               CALL   NZ,SelectDisk        ;  no, then go select it            ;
0407: E0B2         ; print to the 00                                                           ;
0408: E0B2 21 2E E2               LD     HL,commandBuffer     ; Point at the command buffer       ;
0409: E0B5 CD 9D E6               CALL   PrintStringNull      ; Display it on the Console         ;
0410: E0B8 CD B7 E6               CALL   CheckForConsoleChar  ; User input a character ?          ;
0411: E0BB CA D5 E0               JP     Z,NoRead             ;  skip if not                      ;
0412: E0BE CD F3 E0               CALL   DeleteSubmitFile     ; Remove file and reset submit flag ;
0413: E0C1 C3 26 E0               JP     ccpMainEntry         ; Start a new CCP session           ;
0414: E0C4         ;   ---     ------------                ;-----------------------------------;
0415: E0C4             NotSubmitFile:                      ;
0416: E0C4 CD F3 E0               CALL   DeleteSubmitFile     ; Delete any submit file            ;
0417: E0C7 CD 0B E1               CALL   SaveUserAndDisk      ; Save User & Disk to page 0        ;
0418: E0CA 11 2C E2               LD     DE,commandMaxLength  ; Point to Start of Buffer          ;
0419: E0CD 0E 0A                  LD     C,fReadString        ; Load Function Number	            ;
0420: E0CF CD 05 00               CALL   BDOS                 ;  and let BDOS do its work	        ;
0421: E0D2 CD 1A E1               CALL   SetPage0CurDisk      ; No Cntl C, so restore Pg0CurentDis;
0422: E0D5         ;
0423: E0D5             NoRead:                         ;
0424: E0D5         ; set the last character to zero for later scans                            ;
0425: E0D5 21 2D E2               LD     HL,commandLength     ; Point to length of command        ;
0426: E0D8 46                     LD     B,(HL)               ; Put it into B                     ;
0427: E0D9             UpCaseLoop:                      ;
0428: E0D9 23                     INC    HL                   ; Point at next byte in buffer      ;
0429: E0DA 7E                     LD     A,(HL)               ; Get the Character                 ;
0430: E0DB CD EA E0               CALL   UpCase               ; If between a-z, up-case it        ;
0431: E0DE 77                     LD     (HL),A               ; Replace character                 ;
0432: E0DF 10 F8                  DJNZ   UpCaseLoop           ; go thru all of the CMD buffer     ;
0433: E0E1         ;end of scan, h,l address end of command                                    ;
0434: E0E1         ;ReadCommand2:                                                              ;
0435: E0E1 23                     INC    HL                   ; Point at last char + 1            ;
0436: E0E2 70                     LD     (HL),B               ; Stuff Zero to terminate the CMD   ;
0437: E0E3 21 2E E2               LD     HL,commandBuffer     ; go back to start of com           ;
0438: E0E6 22 AE E2               LD     (commandBufferPointer),HL ; Place in current CMD address      ;
0439: E0E9 C9                     RET                         ;
0440: E0EA         ;------------------------------ Read Command -------------------------------;
0441: E0EA
0442: E0EA         ;--------------------------------- UpCase ----------------------------------;
0443: E0EA         ;convert character in register A (a to z) to upper case                     ;
0444: E0EA             UpCase:                         ;
0445: E0EA FE 61                  CP     061H                 ;
0446: E0EC D8                     RET    C                    ; Return if below lower case 'a'    ;
0447: E0ED FE 7B                  CP     07BH                 ;
0448: E0EF D0                     RET    NC                   ; Return if above lower case 'z'    ;
0449: E0F0 E6 5F                  AND    05FH                 ; Drop bit 5/ makes q->Q etc        ;
0450: E0F2 C9                     RET                         ;
0451: E0F3         ;--------------------------------- UpCase ----------------------------------;
0452: E0F3         ;---------------------------- Delete SubmitFile ----------------------------;
0453: E0F3         ;delete the submit file, and set submit flag to false                       ;
0454: E0F3             DeleteSubmitFile:                      ;
0455: E0F3 21 B0 E2               LD     HL,submitFlag        ; Point at Submit flag              ;
0456: E0F6 7E                     LD     A,(HL)               ; Get the Flag                      ;
0457: E0F7 B7                     OR     A                    ; Is it Set ?                       ;
0458: E0F8 C8                     RET    Z                    ;  return if not set                ;
0459: E0F9 36 00                  LD     (HL),0               ; Clear Flag                        ;
0460: E0FB AF                     XOR    A                    ; Drive 0 = A:                      ;
0461: E0FC CD 2A E5               CALL   SelectDisk           ; Select drive                      ;
0462: E0FF 11 B1 E2               LD     DE,submitFCB         ; Load the submits FCB              ;
0463: E102 CD 55 E5               CALL   DeleteFile           ; Go delete it                      ;
0464: E105 3A 6B E7               LD     A,(currentDisk)      ; Determine the current disk        ;
0465: E108 C3 2A E5               JP     SelectDisk           ; Reselect back to original drive   ;
0466: E10B         ;---------------------------- Delete SubmitFile ----------------------------;
0467: E10B         ;-------------------------------- Save User --------------------------------;
0468: E10B         ;save user#/disk# before possible ^c or transient                           ;
0469: E10B             SaveUserAndDisk:                      ;
0470: E10B CD 46 E5               CALL   GetUser              ; Get the user number into Acc      ;
0471: E10E 87                     ADD    A,A                  ;
0472: E10F 87                     ADD    A,A                  ;
0473: E110 87                     ADD    A,A                  ;
0474: E111 87                     ADD    A,A                  ; Move user to Hi Nibble            ;
0475: E112 21 6B E7               LD     HL,currentDisk       ; Current disk (Lo Nibble)          ;
0476: E115 B6                     OR     M                    ; Acc -> User & Disk                ;
0477: E116 32 04 00               LD     (Pg0CurentDisk),A    ; Stored in Page0 for later         ;
0478: E119 C9                     RET                         ;
0479: E11A         ;-------------------------------- Save User --------------------------------;
0480: E11A         ;------------------------- Set Page 0 Current Disk -------------------------;
0481: E11A         ;set Pg0CurentDisk to current disk                                          ;
0482: E11A             SetPage0CurDisk:                      ;
0483: E11A 3A 6B E7               LD     A,(currentDisk)      ; Get CCP's current disk            ;
0484: E11D 32 04 00               LD     (Pg0CurentDisk),A    ; Put into Page 0	                ;
0485: E120 C9                     RET                         ;
0486: E121         ;------------------------- Set Page 0 Current Disk -------------------------;
0487: E121
0488: E121         ;--------------------------------- Parse Token -----------------------------;
0489: E121         ; Parse command buffer.                                                     ;
0490: E121         ; Used to isolate the command                                               ;
0491: E121         ;
0492: E121             ParseToken2:                      ;
0493: E121 21 56 E7               LD     HL,Token2            ; Point at Token2 start             ;
0494: E124 18 03                  JR     ParseToken           ;
0495: E126             ParseToken1:                      ;
0496: E126 21 46 E7               LD     HL,Token1            ; Point at Token1 start             ;
0497: E129             ParseToken:                      ;
0498: E129 E5                     PUSH   HL                   ; Start of Token's Pointer          ;
0499: E12A E5                     PUSH   HL                   ; Start of Token's Pointer          ;
0500: E12B AF                     XOR    A                    ; Set A to 0                        ;
0501: E12C 32 67 E7               LD     (selectedDisk),A     ; Assume default disk               ;
0502: E12F 2A AE E2               LD     HL,(commandBufferPointer) ; Buffer's Pointer                  ;
0503: E132 CD B3 E1               CALL   NextNonBlankChar     ; Get printable character			;
0504: E135 22 69 E7               LD     (tokenStart),HL      ; Save token's address              ;
0505: E138 EB                     EX     DE,HL                ; DE -> Buffer                      ;
0506: E139 E1                     POP    HL                   ; DE -> Buffer,                     ;
0507: E13A         ;  HL -> Start of Token's Pointer   ;
0508: E13A         ; Disk ?                                                                    ;
0509: E13A 1A                     LD     A,(DE)               ; Get 1st character from buffer     ;
0510: E13B B7                     OR     A                    ; Is it the default Disk ?          ;
0511: E13C CA 4A E1               JP     Z,UseCurrentDisk     ; Use current disk if empty         ;
0512: E13F DE 40                  SBC    A,040H               ; Convert to number                 ;
0513: E141 47                     LD     B,A                  ; Hold disk number in B             ;
0514: E142 13                     INC    DE                   ;
0515: E143 1A                     LD     A,(DE)               ; Look at next character            ;
0516: E144 FE 3A                  CP     COLON                ; Is it a ':' ?                     ;
0517: E146 CA 51 E1               JP     Z,UseTokensDisk      ;  if yes, set disk number          ;
0518: E149         ; No Disk                                                                   ;
0519: E149 1B                     DEC    DE                   ; Back to start of buffer           ;
0520: E14A         ;
0521: E14A             UseCurrentDisk:                      ;
0522: E14A 3A 6B E7               LD     A,(currentDisk)      ; Get current Disk                  ;
0523: E14D 77                     LD     (HL),A               ; Put into the Token                ;
0524: E14E C3 57 E1               JP     SetFileName          ;
0525: E151         ;
0526: E151             UseTokensDisk:                      ;
0527: E151 78                     LD     A,B                  ; Get disk from this parse          ;
0528: E152 32 67 E7               LD     (selectedDisk),A     ; Mark as disk selected             ;
0529: E155 70                     LD     (HL),B               ; Put it into the token             ;
0530: E156 13                     INC    DE                   ; Move past the ':'                 ;
0531: E157         ;
0532: E157             SetFileName:                      ;
0533: E157 06 08                  LD     B,FILE_NAME_SIZE     ; File name length (max)            ;
0534: E159 CD 7F E1               CALL   FormatElement        ; Format file name                  ;
0535: E15C         ;
0536: E15C             SetType:                        ;
0537: E15C 06 03                  LD     B,FILE_TYPE_SIZE     ; File type length (max)            ;
0538: E15E CD A0 E1               CALL   IsItDot              ; is it a '.' ?	                    ;
0539: E161 CC 7F E1               CALL   Z,FormatElement      ;  Yes,Format it                    ;
0540: E164         ;
0541: E164         ; Zero Rest of token                                                        ;
0542: E164 06 03                  LD     B,3                  ;
0543: E166 AF                     XOR    A                    ;
0544: E167 CD AE E1               CALL   FillWithAcc          ;
0545: E16A EB                     EX     DE,HL                ;
0546: E16B 22 AE E2               LD     (commandBufferPointer),HL ; Set new starting point	        ;
0547: E16E         ; Recover the start address of the fcb and count ?'s                        ;
0548: E16E E1                     POP    HL                   ; Restore start of Token            ;
0549: E16F 06 0B                  LD     B,FILE_NAME_SIZE+FILE_TYPE_SIZE ; Loop size                   ;
0550: E171 0E 00                  LD     C,00                 ; Counter                           ;
0551: E173 3E 3F                  LD     A,QMARK              ; We want to count '?'s             ;
0552: E175             QuestionMarkCount:                      ;
0553: E175 23                     INC    HL                   ; Adjust token pointer				;
0554: E176 BE                     CP     (HL)                 ; Is it a '?'                       ;
0555: E177 20 01                  JR     NZ,QuestionMarkCount1 ;  no, then skip                    ;
0556: E179 0C                     INC    C                    ;  else increment the count         ;
0557: E17A             QuestionMarkCount1:                      ;
0558: E17A 10 F9                  DJNZ   QuestionMarkCount    ; Manage the Loop	                ;
0559: E17C 79                     LD     A,C                  ;
0560: E17D B7                     OR     A                    ;
0561: E17E C9                     RET                         ;
0562: E17F         ;-------------------------------- Parse Token ------------------------------;
0563: E17F         ;------------------------------- Format Element ----------------------------;
0564: E17F         ; Put element in a Left Justified, Space Padded field.                      ;
0565: E17F         ; If it encounters an asterisk, it will pad the rest of the field with '?'s ;
0566: E17F         ; Enter With:	B  = Element size                                           ;
0567: E17F         ;				DE = Element source                                         ;
0568: E17F         ;				HL = Element destination                                    ;
0569: E17F             FormatElement:                      ;
0570: E17F CD BD E1               CALL   IsItADelimiter       ; Is character a delimiter ?        ;
0571: E182 CA 9C E1               JP     Z,PadTheElement      ;  yes, pad rest of Element         ;
0572: E185         ;
0573: E185 23                     INC    HL                   ;  else move the Token's pointer    ;
0574: E186 FE 2A                  CP     ASTERISK             ; Is it an '*'					    ;
0575: E188 C2 90 E1               JP     NZ,FormatElement1    ;  no, then just put in Token   ;
0576: E18B 36 3F                  LD     (HL),QMARK           ;  else Put a '?' in token          ;
0577: E18D C3 92 E1               JP     FormatElement2       ;  for rest of Element              ;
0578: E190         ;
0579: E190             FormatElement1:                      ;
0580: E190 77                     LD     (HL),A               ; Put character in token            ;
0581: E191 13                     INC    DE                   ; Increment the buffer pointer      ;
0582: E192             FormatElement2:                      ;
0583: E192 10 EB                  DJNZ   FormatElement        ; Loop if more                      ;
0584: E194         ;
0585: E194             TruncateElement:                      ;
0586: E194 CD BD E1               CALL   IsItADelimiter       ; We expect a delimiter             ;
0587: E197 C8                     RET    Z                    ; If we get one, we are done        ;
0588: E198 13                     INC    DE                   ;  skip forward in buffer           ;
0589: E199 C3 94 E1               JP     TruncateElement      ; Keep looking for delimiter        ;
0590: E19C         ;
0591: E19C             PadTheElement:                      ;
0592: E19C CD AC E1               CALL   FillWithSpace        ; Pad the rest of Element           ;
0593: E19F C9                     RET                         ;
0594: E1A0         ;------------------------------- Format Element ----------------------------;
0595: E1A0         ;-------------------------------- Is It a Dot ------------------------------;
0596: E1A0         ; Check to see if char is buffer is a period. If it is it returns with      ;
0597: E1A0         ; the Z-Flag set., and the DE pointer advanced beyond the '.'.  If it is    ;
0598: E1A0         ; not a period. It will fill the buffer with spaces and return with the     ;
0599: E1A0         ; Z-Flag reset.                                                             ;
0600: E1A0         ;                                                                           ;
0601: E1A0         ; Enter With:	DE = Pointer for buffer                                     ;
0602: E1A0         ;				 B = buffer size	                                        ;
0603: E1A0         ; Return With:	DE = Past the period                                        ;
0604: E1A0         ;			   	Z-Flag =  set if Period                                     ;
0605: E1A0         ;  				Z-Flag = reset if not Period                                ;
0606: E1A0             IsItDot:                        ;
0607: E1A0 1A                     LD     A,(DE)               ;
0608: E1A1 13                     INC    DE                   ; Assume it is a '.'                ;
0609: E1A2 FE 2E                  CP     PERIOD               ; Is it '.' ?                       ;
0610: E1A4 C8                     RET    Z                    ;  if yes exit with Z-Flag set      ;
0611: E1A5         ;
0612: E1A5 1B                     DEC    DE                   ; Adjust, wrong assumption          ;
0613: E1A6 CD AC E1               CALL   FillWithSpace        ;  else make all spaces             ;
0614: E1A9 AF                     XOR    A                    ;
0615: E1AA 3C                     INC    A                    ; Reset the Z-Flag                  ;
0616: E1AB C9                     RET                         ; Exit with Z-Flag reset            ;
0617: E1AC         ;-------------------------------- Is It a Dot ------------------------------;
0618: E1AC         ;-------------------------- Fill With Space/Acc ----------------------------;
0619: E1AC         ; fills buffer with SPACE or contents of Acc.                               ;
0620: E1AC         ; Enters with:	HL = less than start of fill area                           ;
0621: E1AC         ;				B  = fill Count                                             ;
0622: E1AC         ;				A  = fill character (FillWithAcc)                           ;
0623: E1AC             FillWithSpace:                      ;
0624: E1AC 3E 20                  LD     A,SPACE              ;
0625: E1AE             FillWithAcc:                      ;
0626: E1AE 23                     INC    HL                   ;
0627: E1AF 77                     LD     (HL),A               ;
0628: E1B0 10 FC                  DJNZ   FillWithAcc          ;
0629: E1B2 C9                     RET                         ;
0630: E1B3         ;-------------------------- Fill With Space/Acc ----------------------------;
0631: E1B3         ;------------------------ Next Non Blank Character -------------------------;
0632: E1B3         ;find the next non blank character in line pointed to by DE                 ;
0633: E1B3             NextNonBlankChar:                      ;
0634: E1B3 7E                     LD     A,(HL)               ; Get the character                 ;
0635: E1B4 B7                     OR     A                    ; Is it End of buffer ?             ;
0636: E1B5 C8                     RET    Z                    ;  if yes, return                   ;
0637: E1B6 FE 20                  CP     SPACE                ; is it a blank ?                   ;
0638: E1B8 C0                     RET    NZ                   ;  if not, return                   ;
0639: E1B9 23                     INC    HL                   ;  else increment pointer           ;
0640: E1BA C3 B3 E1               JP     NextNonBlankChar     ; Loop for next character           ;
0641: E1BD         ;------------------------ Next Non Blank Character -------------------------;
0642: E1BD         ;---------------------------- Is It A Delimiter ----------------------------;
0643: E1BD         ; Returns with Z-flag set if (DE) pointing at a delimiter                   ;
0644: E1BD         ; Does an error exit if not valid ASCII character                           ;
0645: E1BD             IsItADelimiter:                      ;
0646: E1BD 1A                     LD     A,(DE)               ; Get the character                 ;
0647: E1BE B7                     OR     A                    ;
0648: E1BF C8                     RET    Z                    ; End of Buffer is a delimiter      ;
0649: E1C0 FE 20                  CP     SPACE                ;
0650: E1C2 DA 06 E2               JP     C,CommandError       ; Error exit if not ASCII           ;
0651: E1C5 C8                     RET    Z                    ; SPACE is a delimiter              ;
0652: E1C6 FE 3D                  CP     EQUAL_SIGN           ;
0653: E1C8 C8                     RET    Z                    ; '=' is a delimiter                ;
0654: E1C9 FE 5F                  CP     UNDER_SCORE          ;
0655: E1CB C8                     RET    Z                    ; '_' is a delimiter                ;
0656: E1CC FE 2E                  CP     PERIOD               ;
0657: E1CE C8                     RET    Z                    ; '.' is a delimiter                ;
0658: E1CF FE 3A                  CP     COLON                ;
0659: E1D1 C8                     RET    Z                    ; ':' is a delimiter                ;
0660: E1D2 FE 3B                  CP     SEMICOLON            ;
0661: E1D4 C8                     RET    Z                    ; ';' is a delimiter                ;
0662: E1D5 FE 3C                  CP     LESS_THAN            ;
0663: E1D7 C8                     RET    Z                    ; '<' is a delimiter                ;
0664: E1D8 FE 3E                  CP     GREATER_THAN         ;
0665: E1DA C8                     RET    Z                    ; '>' is a delimiter                ;
0666: E1DB C9                     RET                         ; Not a delimiter                   ;
0667: E1DC         ;---------------------------- Is It A Delimiter ----------------------------;
0668: E1DC
0669: E1DC         ;---------------------------- Intrinsic Function ---------------------------;
0670: E1DC         ;look for intrinsic functions (Token1 has been filled)                 		;
0671: E1DC             IntrinsicFunction:                      ;
0672: E1DC 21 D1 E2               LD     HL,builtInCMDNames   ; Point at List of CMDs             ;
0673: E1DF 0E 00                  LD     C,0                  ; Initialize counter                ;
0674: E1E1             IntrinsicFunction1:                      ;
0675: E1E1 79                     LD     A,C                  ; Get Counter                       ;
0676: E1E2 FE 06                  CP     builtInCMDCount      ; Past number of commands ?         ;
0677: E1E4 D0                     RET    NC                   ;  exit if yes                      ;
0678: E1E5 11 47 E7               LD     DE,Token1+1          ; Beginning of name                 	;
0679: E1E8 06 04                  LD     B,builtInCMDNameSize ; Length of match                   ;
0680: E1EA             IntrinsicFunction2:                      ;
0681: E1EA 1A                     LD     A,(DE)               ;
0682: E1EB BE                     CP     M                    ; Is there a match ?                ;
0683: E1EC C2 FD E1               JP     NZ,IntrinsicFunction3 ;  skip if no match                 ;
0684: E1EF 13                     INC    DE                   ;
0685: E1F0 23                     INC    HL                   ; Point at next characters          ;
0686: E1F1 05                     DEC    B                    ; Decrement the counter             ;
0687: E1F2 C2 EA E1               JP     NZ,IntrinsicFunction2 ; Loop while matching               ;
0688: E1F5         ; complete match on name, check for blank in fcb                            ;
0689: E1F5 1A                     LD     A,(DE)               ;
0690: E1F6 FE 20                  CP     SPACE                ; Blank in CMD ?                    ;
0691: E1F8 C2 02 E2               JP     NZ,IntrinsicFunction4 ;  No ,then no match                ;
0692: E1FB 79                     LD     A,C                  ;  Else they match,                 ;
0693: E1FC C9                     RET                         ; Return with index in A            ;
0694: E1FD         ;
0695: E1FD             IntrinsicFunction3:                      ;
0696: E1FD 23                     INC    HL                   ; Move to next in list              ;
0697: E1FE 05                     DEC    B                    ;
0698: E1FF C2 FD E1               JP     NZ,IntrinsicFunction3 ; Loop thru this one                ;
0699: E202         ;
0700: E202             IntrinsicFunction4:                      ;
0701: E202 0C                     INC    C                    ; Update the index                  ;
0702: E203 C3 E1 E1               JP     IntrinsicFunction1   ;  loop for another round           ;
0703: E206         ;---------------------------- Intrinsic Function ---------------------------;
0704: E206
0705: E206         ; cmd
0706: E206         ;------------------------------ Command Error ------------------------------;
0707: E206         ;error in command string starting at position;'tokenStart' and ending    	;
0708: E206         ; with first delimiter                                                      ;
0709: E206         ;
0710: E206             CommandError:                      ;
0711: E206 CD 84 E6               CALL   CrLf                 ; Next Line                         ;
0712: E209 2A 69 E7               LD     HL,(tokenStart)      ; Start of error token             		;
0713: E20C             CommandErrorLoop:                      ;
0714: E20C 7E                     LD     A,(HL)               ; Get character                     ;
0715: E20D FE 20                  CP     SPACE                ; Past offending token ?            ;
0716: E20F CA 1E E2               JP     Z,CommandErrorExit   ;  done if yes                      ;
0717: E212 B7                     OR     A                    ; At end of command ?               ;
0718: E213 CA 1E E2               JP     Z,CommandErrorExit   ;  done if yes                      ;
0719: E216 E5                     PUSH   HL                   ; Save pointer                      ;
0720: E217 CD 8D E6               CALL   PrintCharInA         ; Display on console                ;
0721: E21A E1                     POP    HL                   ; Restore pointer                   ;
0722: E21B 23                     INC    HL                   ; Update it                         ;
0723: E21C 18 EE                  JR     CommandErrorLoop     ; Keep going                        ;
0724: E21E         ;
0725: E21E             CommandErrorExit:                      ;
0726: E21E 3E 3F                  LD     A,QMARK              ;
0727: E220 CD 8D E6               CALL   PrintCharInA         ; Send '?' to console               ;
0728: E223 CD 84 E6               CALL   CrLf                 ; Next Line                         ;
0729: E226 CD F3 E0               CALL   DeleteSubmitFile     ; Remove any submit file            ;
0730: E229 C3 26 E0               JP     ccpMainEntry         ; Go back for another command       ;
0731: E22C         ;------------------------------ Command Error ------------------------------;
0732: E22C
0733: E22C         ;------------------------------ Command Buffer -----------------------------;
0734: E22C             maximumBufferSize EQU    07FH                 ; Max Length of Buffer          ;
0735: E22C 7F          commandMaxLength: DB     maximumBufferSize    ;
0736: E22D 00          commandLength: DB     00H                  ; Actual size of input          ;
0737: E22E             commandBuffer: DS     maximumBufferSize + 1 ; The Command Buffer           ;
0738: E2AE         ;
0739: E2AE 2E E2       commandBufferPointer: DW     commandBuffer        ; Address of next to char       ;
0740: E2B0         ;------------------------------ Command Buffer -----------------------------;
0741: E2B0         ;------------------------- Submit File Control Block -----------------------;
0742: E2B0         ;	                                                                        ;
0743: E2B0 00          submitFlag: DB     00H                  ; 00 if no submit file,             ;
0744: E2B1         ;  0FFH if submitting               ;
0745: E2B1 24 24 24 20 20 20 20 20     submitFCB: DB     '$$$     '           ; File name is $$$                  ;
0746: E2B9 53 55 42     submitType: DB     'SUB'                ; Type is 'SUB'                     ;
0747: E2BC 00          submitExtent: DB     00H                  ; Extent                            ;
0748: E2BD 00          submitS1:  DB     00H                  ; S1                                ;
0749: E2BE             submitFWF:                      ; Bit7 = FileWriteFlag
0750: E2BE 00          submitS2:  DB     00H                  ; S2 (bit7 = FileWriteFlag)         ;
0751: E2BF 00          submitRC:  DB     00H                  ; RC                                ;
0752: E2C0             submitMap: DS     010H                 ; Allocation Map                    ;
0753: E2D0 00          submitCR:  DB     00H                  ; Current Record                    ;
0754: E2D1         ;------------------------- Submit File Control Block -----------------------;
0755: E2D1         ;--------------------------- Built In Command Data -------------------------;
0756: E2D1         ;intrinsic function names four characters each                              ;
0757: E2D1             builtInCMDNameSize EQU    04                   ; Size of intrinsic function names  ;
0758: E2D1         ;
0759: E2D1             builtInCMDNames:                      ;
0760: E2D1 44 49 52 20                DB     'DIR '               ;
0761: E2D5 45 52 41 20                DB     'ERA '               ;
0762: E2D9 54 59 50 45                DB     'TYPE'               ;
0763: E2DD 53 41 56 45                DB     'SAVE'               ;
0764: E2E1 52 45 4E 20                DB     'REN '               ;
0765: E2E5 55 53 45 52                DB     'USER'               ;
0766: E2E9             builtInCMDCount EQU    (($-builtInCMDNames)/builtInCMDNameSize) + 1 ;
0767: E2E9         ;
0768: E2E9             builtInCMDVector:                      ;
0769: E2E9 F7 E2                  DW     ccpDirectory         ; Directory List                    ;
0770: E2EB 91 E3                  DW     ccpErase             ; File erase                        ;
0771: E2ED CE E4                  DW     ccpType              ; Type file on Console              ;
0772: E2EF 4B E4                  DW     ccpSave              ; Save memory image                 ;
0773: E2F1 CF E3                  DW     ccpRename            ; File rename                       ;
0774: E2F3 0E E5                  DW     ccpUser              ; User number                       ;
0775: E2F5 A8 E5                  DW     ccpUserFunction      ; User-defined function             ;
0776: E2F7         ;
0777: E2F7         ;--------------------------- Built In Command Data -------------------------;
0778: E2F7
0779: E2F7         ;==============================              ===============================;
0780: E2F7         ;============================== CCP Commands ===============================;
0781: E2F7         ;==============================              ===============================;
0782: E2F7
0783: E2F7         ;----------------------------- Directory Listing ---------------------------;
0784: E2F7         ; SYNTAX: DIR afn                                                           ;
0785: E2F7         ;                                                                           ;
0786: E2F7         ;  The 'DIR' command causes the names of all the files that satisfy the     ;
0787: E2F7         ; ambiguous filename afn to be listed on the console device                 ;
0788: E2F7         ;                                                                           ;
0789: E2F7             ccpDirectory:                      ;
0790: E2F7 CD 26 E1               CALL   ParseToken1          ; Token1 gets file name             ;
0791: E2FA CD C5 E6               CALL   SetDiskForCmd        ; Change disk if needed             ;
0792: E2FD 21 47 E7               LD     HL,Token1+1          ; Point at 1st char of parameter    ;
0793: E300 7E                     LD     A,(HL)               ; Get the value                     ;
0794: E301 FE 20                  CP     SPACE                ; Is it Blank ?                     ;
0795: E303 C2 0D E3               JP     NZ,ccpDirQualified   ;  skip there is a parameter        ;
0796: E306         ;
0797: E306         ; set Token1 to all ??? for current disk                                    ;
0798: E306 06 0B                  LD     B,FILE_NAME_SIZE+FILE_TYPE_SIZE ; Set Limit	                ;
0799: E308             ccpDirAll:                      ;
0800: E308 36 3F                  LD     (HL),QMARK           ; Put '?' in Token                  ;
0801: E30A 23                     INC    HL                   ; Increment pointer                 ;
0802: E30B 10 FB                  DJNZ   ccpDirAll            ; Loop till done                    ;
0803: E30D         ;
0804: E30D             ccpDirQualified:                      ;
0805: E30D AF                     XOR    A                    ; Set Acc to 0                      ;
0806: E30E 32 8F E3               LD     (dirFileCount),A     ; Initialize File Count             ;
0807: E311         ;	LD		(dirCharCount),A			; Initialize char count             ;
0808: E311 CD 2C E7               CALL   FindFirstToken1File  ; Look for directory entry          ;
0809: E314 CC A9 E6               CALL   Z,PrintNoFile        ;  if not found send message        ;
0810: E317         ;
0811: E317             ccpDirLoopTop:                      ;
0812: E317 CA 8C E3               JP     Z,ccpDirEnd          ; Exit if directory exhausted       ;
0813: E31A         ; found, but may be system file                                             ;
0814: E31A 3A 6C E7               LD     A,(directoryEntryNumber) ; Get directory entry number        ;
0815: E31D 0F                     RRCA                        ;
0816: E31E 0F                     RRCA                        ;
0817: E31F 0F                     RRCA                        ; Multiply by 20H                   ;
0818: E320 4F                     LD     C,A                  ;
0819: E321 06 00                  LD     B,0                  ; BC has index into Dir Buffer      ;
0820: E323 DD 21 80 00               LD     IX,DMABuffer         ;
0821: E327 DD 09                  ADD    IX,BC                ; IX Points at the Dir Entry        ;
0822: E329 DD CB 0A 7E               BIT    7,(IX+fcbSystemFileIndex) ; Is this a System File             ;
0823: E32D C2 7E E3               JP     NZ,ccpDirLoopBottom  ;  if yes, Skip to next iteration   ;
0824: E330         ;
0825: E330 DD E5                  PUSH   IX                   ; IX Points at the Dir Entry        ;
0826: E332 AF                     XOR    A                    ;
0827: E333 32 90 E3               LD     (dirCharCount),A     ; Initialize char count             ;
0828: E336         ;
0829: E336 21 8F E3               LD     HL,dirFileCount      ; Point at dirFileCount             ;
0830: E339 7E                     LD     A,(HL)               ; Get the dirFileCount              ;
0831: E33A 34                     INC    (HL)                 ; Increment dirFileCount            ;
0832: E33B E6 03                  AND    11B                  ; Perform Mod(E,4)                  ;
0833: E33D C2 55 E3               JP     NZ,ccpDirDisplayFile0 ; Skip header if not 0              ;
0834: E340         ;
0835: E340         ; print the header: new Line followed by drive with Colon - A :             ;
0836: E340 CD 84 E6               CALL   CrLf                 ; New Line                          ;
0837: E343 C5                     PUSH   BC                   ;
0838: E344 CD 41 E5               CALL   GetSelectedDrive     ; Get Active drive number           ;
0839: E347 C1                     POP    BC                   ;
0840: E348 C6 41                  ADD    A,ASCII_A            ; Make it ASCII                     ;
0841: E34A CD 78 E5               CALL   PrintSaveBC          ; Send it to the console            ;
0842: E34D 3E 3A                  LD     A,COLON              ;
0843: E34F CD 78 E5               CALL   PrintSaveBC          ; Send ':' to the console           ;
0844: E352 C3 5D E3               JP     ccpDirDisplayFile    ; Skip ':' display                  ;
0845: E355         ;
0846: E355             ccpDirDisplayFile0:                      ;
0847: E355 CD 73 E5               CALL   PrintSpace           ; Send Space to console             ;
0848: E358 3E 3A                  LD     A,COLON              ;
0849: E35A CD 78 E5               CALL   PrintSaveBC          ; Send ':' to the console			;
0850: E35D             ccpDirDisplayFile:                      ;
0851: E35D CD 73 E5               CALL   PrintSpace           ; Send Space to console             ;
0852: E360         ;
0853: E360             ccpDirDisplayFileLoop:                      ;
0854: E360 DD E1                  POP    IX                   ; Get to Dir Entry Pointer          ;
0855: E362 DD 7E 00               LD     A,(IX+0)             ; Put char in ACC                   ;
0856: E365 DD 23                  INC    IX                   ; Adjust pointer for next iteration ;
0857: E367 DD E5                  PUSH   IX                   ; Save till then                    ;
0858: E369 E6 7F                  AND    ASCII_MASK           ; Make sure char is ASCII           ;
0859: E36B CD 8D E6               CALL   PrintCharInA         ; Send it to the console            ;
0860: E36E 21 90 E3               LD     HL,dirCharCount      ; Where are we in Token ?           ;
0861: E371 7E                     LD     A,(HL)               ; Get index                         ;
0862: E372 34                     INC    (HL)                 ; Update for next time              ;
0863: E373 47                     LD     B,A                  ; Save count                        ;
0864: E374 FE 08                  CP     8                    ; End of Name ?                     ;
0865: E376 CC 73 E5               CALL   Z,PrintSpace         ; Separate Name and Type            ;
0866: E379 78                     LD     A,B                  ; Retrieve count                    ;
0867: E37A FE 0B                  CP     11                   ; At the end of this dir entry ?    ;
0868: E37C 20 E2                  JR     NZ,ccpDirDisplayFileLoop ;  if no continue the iteration     ;
0869: E37E         ;
0870: E37E             ccpDirLoopBottom:                      ;
0871: E37E DD E1                  POP    IX                   ; Balance stack                     ;
0872: E380 CD B7 E6               CALL   CheckForConsoleChar  ; Interrupt at keyboard ?           ;
0873: E383 C2 8C E3               JP     NZ,ccpDirEnd         ;  yes, abort directory search      ;
0874: E386 CD 37 E7               CALL   SearchForNext        ; Look for more entries             ;
0875: E389 C3 17 E3               JP     ccpDirLoopTop        ;  and loop thru                    ;
0876: E38C             ccpDirEnd:                      ;
0877: E38C C3 D7 E6               JP     RestoreDiskAtCmdEnd  ; Wrap up and start over            ;
0878: E38F         ;
0879: E38F             dirFileCount:                      ;
0880: E38F 00                     DB     0                    ;
0881: E390             dirCharCount:                      ;
0882: E390 00                     DB     0                    ;
0883: E391         ;----------------------------- Directory Listing ---------------------------;
0884: E391
0885: E391         ;-------------------------------- Erase Files ------------------------------;
0886: E391         ; SYNTAX: ERA afn                                                           ;
0887: E391         ;                                                                           ;
0888: E391         ;  The 'ERA' command removes files from the currently logged-in disk. The   ;
0889: E391         ; files that are erased are those that satisfy the ambiguous filename       ;
0890: E391         ; reference afn.                                                            ;
0891: E391         ;                                                                           ;
0892: E391             ccpErase:                       ;
0893: E391 CD 26 E1               CALL   ParseToken1          ; Parse the command                 ;
0894: E394 FE 0B                  CP     FILE_NAME_SIZE+FILE_TYPE_SIZE ; All '?'s ?                    ;
0895: E396 C2 B4 E3               JP     NZ,ccpEraseFile      ;  skip if not                      ;
0896: E399         ; Want to be sure											                ;
0897: E399 01 C4 E3               LD     BC,msgEraseAll       ; Point at the message              ;
0898: E39C CD 98 E6               CALL   PrintCrLfStringNull  ; Display it on the console         ;
0899: E39F         ;
0900: E39F CD 65 E0               CALL   ReadCommand          ; Get the operator's response       ;
0901: E3A2 21 2D E2               LD     HL,commandLength     ; Point at size of response         ;
0902: E3A5 35                     DEC    M                    ; Test the size                     ;
0903: E3A6 C2 26 E0               JP     NZ,ccpMainEntry      ; Exit, wrong answer                ;
0904: E3A9 23                     INC    HL                   ; point at the 1 char response      ;
0905: E3AA 7E                     LD     A,(HL)               ; Get it into ACC                   ;
0906: E3AB FE 59                  CP     ASCII_Y              ; Is it 'Y'                         ;
0907: E3AD C2 26 E0               JP     NZ,ccpMainEntry      ;  exit if not                      ;
0908: E3B0         ;
0909: E3B0 23                     INC    HL                   ; Adjust the pointer                ;
0910: E3B1 22 AE E2               LD     (commandBufferPointer),HL ; Restore buffer pointer            ;
0911: E3B4             ccpEraseFile:                      ;
0912: E3B4 CD C5 E6               CALL   SetDiskForCmd        ; Change disks for this command     ;
0913: E3B7 11 46 E7               LD     DE,Token1            ; Point to target FCB               ;
0914: E3BA CD 55 E5               CALL   DeleteFile           ; Call BDOS to delete               ;
0915: E3BD 3C                     INC    A                    ; 255 returned if not found         ;
0916: E3BE CC A9 E6               CALL   Z,PrintNoFile        ; Report if file not found          ;
0917: E3C1 C3 D7 E6               JP     RestoreDiskAtCmdEnd  ; Wrap up and start over            ;
0918: E3C4         ;
0919: E3C4             msgEraseAll:                      ;
0920: E3C4 41 4C 4C 20 28 59 2F 4E 29 3F 00                DB     'ALL (Y/N)?',0       ;
0921: E3CF         ;-------------------------------- Erase Files ------------------------------;
0922: E3CF
0923: E3CF         ;-------------------------------- Rename Files -----------------------------;
0924: E3CF         ; SYNTAX: REN ufn1=ufn2                                                     ;
0925: E3CF         ;                                                                           ;
0926: E3CF         ;  The 'REN' command allows you to change the name of files on disk. The    ;
0927: E3CF         ; file satisfying ufn2 is changed to ufn1. The currently logged disk is     ;
0928: E3CF         ; assumed to contain the file to rename (ufn2).                             ;
0929: E3CF             ccpRename:                      ;
0930: E3CF CD 26 E1               CALL   ParseToken1          ; Get ufn1                          ;
0931: E3D2 C2 06 E2               JP     NZ,CommandError      ; Must be unambiguous. No '?'s      ;
0932: E3D5 3A 67 E7               LD     A,(selectedDisk)     ; Get saved disk                    ;
0933: E3D8 F5                     PUSH   AF                   ; Save for later compare            ;
0934: E3D9 CD C5 E6               CALL   SetDiskForCmd        ; Change disks for this command     ;
0935: E3DC CD 2C E7               CALL   FindFirstToken1File  ; Is ufn1 already there?            ;
0936: E3DF C2 36 E4               JP     NZ,ccpRenameError3   ;  if yes, report error             ;
0937: E3E2         ;
0938: E3E2             ccpRenameFCB1:                      ;
0939: E3E2         ; file doesn't exist, move to second half of fcb                            ;
0940: E3E2 21 46 E7               LD     HL,Token1            ; Point at FCB for ufn1             ;
0941: E3E5 11 56 E7               LD     DE,Token2            ; Point where to put it             ;
0942: E3E8 01 10 00               LD     BC,16                ; FCB F1...F8,T1...T3,EXT,S1,S2,RC  ;
0943: E3EB         ;	CALL	CopyHL2DEforBXX                                                 ;
0944: E3EB ED B0                  LDIR   ccpRenameFCB1        ; Move the FCB                      ;
0945: E3ED         ; check for = or left arrow                                                 ;
0946: E3ED 2A AE E2               LD     HL,(commandBufferPointer) ; Get pointer                       ;
0947: E3F0         ;	EX		DE,HL                                                           ;
0948: E3F0 CD B3 E1               CALL   NextNonBlankChar     ; Get a live character              ;
0949: E3F3 FE 3D                  CP     EQUAL_SIGN           ; is it '=' ?                       ;
0950: E3F5 CA FD E3               JP     Z,ccpRenameFCB2      ;  do FCB2 if yes                   ;
0951: E3F8 FE 5F                  CP     LEFT_ARROW           ; is it '<-' ?                      ;
0952: E3FA C2 30 E4               JP     NZ,ccpRenameError2   ;  error if no                      ;
0953: E3FD         ;
0954: E3FD             ccpRenameFCB2:                      ;
0955: E3FD         ;	EX		DE,HL                                                           ;
0956: E3FD 23                     INC    HL                   ; Move to start of ufn2             ;
0957: E3FE 22 AE E2               LD     (commandBufferPointer),HL ; Save for parser                   ;
0958: E401 CD 26 E1               CALL   ParseToken1          ; Get ufn2                          ;
0959: E404 C2 30 E4               JP     NZ,ccpRenameError2   ; Must be unambiguous. No '?'s      ;
0960: E407         ;
0961: E407 F1                     POP    AF                   ; Get saved disk                    ;
0962: E408 47                     LD     B,A                  ; Save a copy                       ;
0963: E409 21 67 E7               LD     HL,selectedDisk      ; Point at current selected disk    ;
0964: E40C 7E                     LD     A,(HL)               ; Get it                            ;
0965: E40D B7                     OR     A                    ; Was it the default disk ?         ;
0966: E40E CA 16 E4               JP     Z,ccpRename2         ;  skip if yes                      ;
0967: E411         ; drive name was specified.  same one?                                      ;
0968: E411 B8                     CP     B                    ; Are they the same ?               ;
0969: E412 70                     LD     (HL),B               ; Update to new selected disk       ;
0970: E413 C2 30 E4               JP     NZ,ccpRenameError2   ; Not the same, error exit			;
0971: E416             ccpRename2:                      ;
0972: E416 70                     LD     (HL),B               ; Update to new selected disk       ;
0973: E417 AF                     XOR    A                    ; Set ACC = 0                       ;
0974: E418 32 46 E7               LD     (Token1),A           ; FCB2's disk is default            ;
0975: E41B CD 2C E7               CALL   FindFirstToken1File  ; Get ufn2'ss directory Entry       ;
0976: E41E CA 2A E4               JP     Z,ccpRenameError1    ; Error exit if not there           ;
0977: E421         ;
0978: E421 11 46 E7               LD     DE,Token1            ; Point at both FCBs                ;
0979: E424 CD 66 E5               CALL   RenameFile           ; Let BDOS do the rename            ;
0980: E427 C3 D7 E6               JP     RestoreDiskAtCmdEnd  ; Exit gracefully                   ;
0981: E42A         ;
0982: E42A             ccpRenameError1:                      ;
0983: E42A CD A9 E6               CALL   PrintNoFile          ; Inform operator there is no file	;
0984: E42D C3 D7 E6               JP     RestoreDiskAtCmdEnd  ; Exit cleanly                      ;
0985: E430         ;
0986: E430             ccpRenameError2:                      ;
0987: E430 CD 1B E7               CALL   RestoreDisk          ; Restore Disk from before command  ;
0988: E433 C3 06 E2               JP     CommandError         ; Error exit                        ;
0989: E436         ;
0990: E436             ccpRenameError3:                      ;
0991: E436 01 3F E4               LD     BC,msgFileExists     ; Load message                      ;
0992: E439 CD 98 E6               CALL   PrintCrLfStringNull  ; Display message on console        ;
0993: E43C C3 D7 E6               JP     RestoreDiskAtCmdEnd  ; Exit cleanly                      ;
0994: E43F         ;
0995: E43F             msgFileExists:                      ;
0996: E43F 46 49 4C 45 20 45 58 49 53 54 53 00                DB     'FILE EXISTS',0      ;
0997: E44B         ;-------------------------------- Rename Files -----------------------------;
0998: E44B
0999: E44B         ;---------------------------------- Save File ------------------------------;
1000: E44B         ; SYNTAX: SAVE n ufn                                                    	;
1001: E44B         ;                                                                           ;
1002: E44B         ;  The 'SAVE' command places n pages(256-bytes) onto disk from the   		;
1003: E44B         ; TPA (Location 0100H) and names the file ufn.                              ;
1004: E44B         ;
1005: E44B             ccpSave:                        ;
1006: E44B CD EC E6               CALL   GetNumberFromCmdLine ; Value returned in Acc.            ;
1007: E44E F5                     PUSH   AF                   ; Save value                        ;
1008: E44F CD 26 E1               CALL   ParseToken1          ; Parse to get ufn                  ;
1009: E452 C2 06 E2               JP     NZ,CommandError      ; Must be unambiguous. No '?'s      ;
1010: E455 CD C5 E6               CALL   SetDiskForCmd        ; Change disks for this command     ;
1011: E458 11 46 E7               LD     DE,Token1            ; Get the FCB                       ;
1012: E45B D5                     PUSH   DE                   ; Save FCB                          ;
1013: E45C CD 55 E5               CALL   DeleteFile           ; Deleted file if it exists         ;
1014: E45F D1                     POP    DE                   ; Restore FCB                       ;
1015: E460 CD 5A E5               CALL   MakeFile             ; Create a new file on disk         ;
1016: E463 CA 99 E4               JP     Z,ccpSaveError1      ;  exit, no directory space         ;
1017: E466 AF                     XOR    A                    ; Set Acc = 0                       ;
1018: E467 32 66 E7               LD     (currentRecord),A    ; Clear next record field           ;
1019: E46A F1                     POP    AF                   ; # pages to write is in Acc        ;
1020: E46B 6F                     LD     L,A                  ;  	change to # sectors             ;
1021: E46C 26 00                  LD     H,0                  ; Sector size is 512				;
1022: E46E 29                     ADD    HL,HL                ; Sector Count	                    ;
1023: E46F 11 00 01               LD     DE,TPA               ; Initialize Memory pointer         ;
1024: E472         ;
1025: E472             ccpSaveWrite:                      ;
1026: E472 7C                     LD     A,H                  ;
1027: E473 B5                     OR     L                    ; If Sector count = 0               ;
1028: E474 CA 8F E4               JP     Z,ccpSaveClose       ;  we are finished writing          ;
1029: E477 2B                     DEC    HL                   ; Decrement Sector count            ;
1030: E478 E5                     PUSH   HL                   ; Sector count                      ;
1031: E479 21 80 00               LD     HL,cpmRecordSize     ; Get bytes to write                ;
1032: E47C 19                     ADD    HL,DE                ; Add to memory pointer             ;
1033: E47D E5                     PUSH   HL                   ; memory pointer                    ;
1034: E47E CD 6E E5               CALL   SetDMA               ; Set DMA                           ;
1035: E481 11 46 E7               LD     DE,Token1            ; Point at the FCB                  ;
1036: E484 CD 5F E5               CALL   DiskWrite            ; Write a sector from DMA           ;
1037: E487 D1                     POP    DE                   ; memory pointer                    ;
1038: E488 E1                     POP    HL                   ; Sector count                      ;
1039: E489 C2 A1 E4               JP     NZ,ccpSaveError2     ; If disk full, exit                ;
1040: E48C C3 72 E4               JP     ccpSaveWrite         ; Keep on writing                   ;
1041: E48F         ;
1042: E48F         ;
1043: E48F             ccpSaveClose:                      ;
1044: E48F 11 46 E7               LD     DE,Token1            ; Point at the FCB                  ;
1045: E492 CD 35 E5               CALL   CloseFile            ; Close the File                    ;
1046: E495 3C                     INC    A                    ; Check return code                 ;
1047: E496 C2 A7 E4               JP     NZ,ccpSaveExit       ; If OK, clean exit                 ;
1048: E499         ;
1049: E499             ccpSaveError1:                      ;
1050: E499 01 AD E4               LD     BC,msgNoDirSpace     ; Load Error Message                ;
1051: E49C CD 98 E6               CALL   PrintCrLfStringNull  ; Send it to the console            ;
1052: E49F 18 06                  JR     ccpSaveExit          ; Do a clean exit                   ;
1053: E4A1             ccpSaveError2:                      ;
1054: E4A1 01 C0 E4               LD     BC,msgNoDiskSpace    ; Load Error Message                ;
1055: E4A4 CD 98 E6               CALL   PrintCrLfStringNull  ; Send it to the console            ;
1056: E4A7         ;
1057: E4A7             ccpSaveExit:                      ;
1058: E4A7 CD 6B E5               CALL   SetDefaultDMA        ; Reset the DMA                     ;
1059: E4AA C3 D7 E6               JP     RestoreDiskAtCmdEnd  ; Perform a clean exit              ;
1060: E4AD         ;
1061: E4AD             msgNoDirSpace:                      ;
1062: E4AD 4E 4F 20 44 49 52 45 43 54 4F 52 59 20 53 50 41 43 45 00                DB     'NO DIRECTORY SPACE',0 ;
1063: E4C0             msgNoDiskSpace:                      ;
1064: E4C0 4E 4F 20 44 49 53 4B 20 53 50 41 43 45 00                DB     'NO DISK SPACE',0    ;
1065: E4CE         ;---------------------------------- Save File ------------------------------;
1066: E4CE
1067: E4CE         ;---------------------------------- Type File ------------------------------;
1068: E4CE         ; SYNTAX: TYPE ufn                                                    		;
1069: E4CE         ;                                                                           ;
1070: E4CE         ;  The 'TYPE' command displays the content of the ASCII source file ufn on  ;
1071: E4CE         ; the currently logged disk at the console device.                          ;
1072: E4CE         ;
1073: E4CE             ccpType:                        ;
1074: E4CE CD 26 E1               CALL   ParseToken1          ; Setup the ufn's FCB               ;
1075: E4D1 C2 06 E2               JP     NZ,CommandError      ; Must be unambiguous. No '?'s      ;
1076: E4D4 CD C5 E6               CALL   SetDiskForCmd        ; Change disks for this command     ;
1077: E4D7 CD 3C E7               CALL   OpenToken1File       ; Open the file at Token1           ;
1078: E4DA CA 08 E5               JP     Z,ccpTypeError       ;  error exit if not successful     ;
1079: E4DD         ;
1080: E4DD CD 84 E6               CALL   CrLf                 ; Send new  NewLine to console      ;
1081: E4E0         ;
1082: E4E0             ccpTypeRead:                      ;
1083: E4E0 11 46 E7               LD     DE,Token1            ; Point at Token1's FCB             ;
1084: E4E3 CD 3A E5               CALL   DiskRead             ; Read next Record                  ;
1085: E4E6 C2 01 E5               JP     NZ,ccpTypeEOF        ; Hard End Of File                  ;
1086: E4E9         ;
1087: E4E9 06 80                  LD     B,cpmRecordSize      ; Load Character count              ;
1088: E4EB 0E 02                  LD     C,fConsoleOut        ; Load Function Number              ;
1089: E4ED 21 80 00               LD     HL,DMABuffer         ; Point at the read buffer          ;
1090: E4F0 E5                     PUSH   HL                   ; Buffer Pointer                    ;
1091: E4F1             ccpTypeRecord:                      ;
1092: E4F1 E1                     POP    HL                   ; Buffer Pointer                    ;
1093: E4F2 7E                     LD     A,(HL)               ; Get the Character                 ;
1094: E4F3 FE 1A                  CP     END_OF_FILE          ; Are we at EOF ?                   ;
1095: E4F5 CA D7 E6               JP     Z,RestoreDiskAtCmdEnd ;  yes, exit                        ;
1096: E4F8         ;
1097: E4F8 23                     INC    HL                   ; Increment the Buffer Pointer      ;
1098: E4F9 E5                     PUSH   HL                   ; Buffer Pointer                    ;
1099: E4FA CD 8D E6               CALL   PrintCharInA         ; Preserve BC                       ;
1100: E4FD 10 F2                  DJNZ   ccpTypeRecord        ; Iterate over the record           ;
1101: E4FF 18 DF                  JR     ccpTypeRead          ; Iterate over the file             ;
1102: E501         ;
1103: E501             ccpTypeEOF:                      ;
1104: E501 3D                     DEC    A                    ; Error returned ?                  ;
1105: E502 CA D7 E6               JP     Z,RestoreDiskAtCmdEnd ;  no, Restore Disk and exit        ;
1106: E505 CD 97 E5               CALL   PrintReadError       ; Report Error                      ;
1107: E508             ccpTypeError:                      ;
1108: E508 CD 1B E7               CALL   RestoreDisk          ; Restore Disk                      ;
1109: E50B C3 06 E2               JP     CommandError         ; Report error and exit             ;
1110: E50E         ;
1111: E50E         ;---------------------------------- Type File ------------------------------;
1112: E50E
1113: E50E         ;------------------------------------ User ---------------------------------;
1114: E50E         ; SYNTAX: USER n		                                             		;
1115: E50E         ;                                                                           ;
1116: E50E         ;  The User command allows maintenance of separate files in the same        ;
1117: E50E         ; directory. In the syntax line, n is an integer value in the range of 0-15 ;
1118: E50E         ; On cold start, the operator is automatically logged into user area        ;
1119: E50E         ; number 0.                                                                 ;
1120: E50E         ;  The active user number is maintained until changed by a subsequent USER  ;
1121: E50E         ; command, or until a cold start when user 0 is again assumed               ;
1122: E50E         ;
1123: E50E             ccpUser:                        ;
1124: E50E CD EC E6               CALL   GetNumberFromCmdLine ; Value returned in Acc.            ;
1125: E511 FE 10                  CP     16                   ; Greater than 16 ?                 ;
1126: E513 D2 06 E2               JP     NC,CommandError      ;  if yes, Error exit               ;
1127: E516 5F                     LD     E,A                  ; Prepare for SetUser call          ;
1128: E517 3A 47 E7               LD     A,(Token1)+1         ; Look past the number              ;
1129: E51A FE 20                  CP     SPACE                ; Is it a Space ?                   ;
1130: E51C CA 06 E2               JP     Z,CommandError       ;  yes, error exit                  ;
1131: E51F CD 48 E5               CALL   SetUser              ; Call BDOS to set new user         ;
1132: E522 C3 DA E6               JP     EndCommand           ; Exit cleanly                      ;
1133: E525         ;------------------------------------ User ---------------------------------;
1134: E525
1135: E525
1136: E525         ;================================ BDOS API =================================;
1137: E525         ;------------------------------- Initialize --------------------------------;
1138: E525             Initialize:                      ;
1139: E525 0E 0D                  LD     C,fResetSystem       ; Load Function Number  - 0D        ;
1140: E527 C3 05 00               JP     BDOS                 ;  and let BDOS do its work         ;
1141: E52A         ;------------------------------- Initialize --------------------------------;
1142: E52A         ;------------------------------- Select Disk -------------------------------;
1143: E52A             SelectDisk:                      ;
1144: E52A 5F                     LD     E,A                  ; Load Target disk                  ;
1145: E52B 0E 0E                  LD     C,fSelectDisk        ; Load Function Number - 0EH        ;
1146: E52D C3 05 00               JP     BDOS                 ;  and let BDOS do its work         ;
1147: E530         ;------------------------------- Select Disk -------------------------------;
1148: E530         ;-------------------------------- Open File --------------------------------;
1149: E530         ;Open the file				                                                ;
1150: E530         ; On Entry DE = FCB to read 						                        ;
1151: E530         ; Exits with Z-Flag Set if file not found									;
1152: E530         ;					Reset if file found										;
1153: E530             OpenFile:                       ;
1154: E530 0E 0F                  LD     C,fOpenFile          ; Load Function Number - 0FH        ;
1155: E532 C3 4D E5               JP     BDOSandIncA          ; make BDOS call & set dir index    ;
1156: E535         ;-------------------------------- Open File --------------------------------;
1157: E535         ;------------------------------- Close File --------------------------------;
1158: E535         ;Close the file				                                                ;
1159: E535         ; On Entry DE = FCB to Close						                        ;
1160: E535         ; Exits with Z-Flag Set if file not found									;
1161: E535         ;					Reset if file found										;
1162: E535             CloseFile:                      ;
1163: E535 0E 10                  LD     C,fCloseFile         ; Load Function Number - 10H        ;
1164: E537 C3 4D E5               JP     BDOSandIncA          ; make BDOS call & set dir index    ;
1165: E53A         ;------------------------------- Close File --------------------------------;
1166: E53A         ;-------------------------------- Read File --------------------------------;
1167: E53A         ;Read the next record from the file.										;
1168: E53A         ; On Entry DE = FCB to read 						                        ;
1169: E53A             DiskRead:                       ;
1170: E53A 0E 14                  LD     C,fReadSeq           ; Load Function Number - 14H        ;
1171: E53C CD 05 00               CALL   BDOS                 ;  and let BDOS do its work         ;
1172: E53F B7                     OR     A                    ; set return code flags             ;
1173: E540 C9                     RET                         ;
1174: E541         ;-------------------------------- Read File --------------------------------;
1175: E541         ;----------------------------- Get Current Disk ----------------------------;
1176: E541         ;Exits with current drive number to A (0=A,1=B....F=P)                      ;
1177: E541             GetSelectedDrive:                      ;
1178: E541 0E 19                  LD     C,fGetCurrentDisk    ; Load Function Number - 19H    ;
1179: E543 C3 05 00               JP     BDOS                 ;  and let BDOS do its work         ;
1180: E546         ;----------------------------- Get Current Disk ----------------------------;
1181: E546         ;------------------------------ Get/Set User -------------------------------;
1182: E546         ;return current user code in A                                              ;
1183: E546             GetUser:                        ;
1184: E546 1E FF                  LD     E,0FFH               ; Set Entry Parameter for Get       ;
1185: E548         ; If E <> -1 then Set user number found in E                                ;
1186: E548             SetUser:                        ;
1187: E548 0E 20                  LD     C,fGetSetUserNumber  ; Load Function Number - 20H        ;
1188: E54A C3 05 00               JP     BDOS                 ;  and let BDOS do its work         ;
1189: E54D         ;------------------------------ Get/Set User -------------------------------;
1190: E54D         ;------------------------------ BDOS and Inc A -----------------------------;
1191: E54D         ; Call B DOS                                                                ;
1192: E54D         ;  Store returned directory index                                           ;
1193: E54D         ;  Increment result.                                                        ;
1194: E54D         ; Exits with 	A =  0 if File Not Found                                    ;
1195: E54D         ;				  <> 0 if file found                                        ;
1196: E54D             BDOSandIncA:                      ;
1197: E54D CD 05 00               CALL   BDOS                 ; Make call to BDOS                 ;
1198: E550 32 6C E7               LD     (directoryEntryNumber),A ; Save return value                 ;
1199: E553 3C                     INC    A                    ; Increment & (Re)Set Z-Flag        ;
1200: E554 C9                     RET                         ;
1201: E555         ;------------------------------ BDOS and Inc A -----------------------------;
1202: E555
1203: E555         ;-----------------------------
1204: E555         ;delete the file given by (DE)
1205: E555             DeleteFile:
1206: E555 0E 13                  LD     C,fDeleteFile
1207: E557 C3 05 00               JP     BDOS
1208: E55A         ;-----------------------------
1209: E55A         ;make the file given by (DE)
1210: E55A             MakeFile:
1211: E55A 0E 16                  LD     C,fMakeFile
1212: E55C C3 4D E5               JP     BDOSandIncA
1213: E55F         ;-----------
1214: E55F         ;/ ;read next record from Command FCB
1215: E55F         ;/ DiskReadCmdFCB:
1216: E55F         ;/ 	LD		DE,Token1
1217: E55F         ;/ 	JP		DiskRead
1218: E55F         ;-----------------------------
1219: E55F         ;write the next record to the file given by (DE)
1220: E55F             DiskWrite:
1221: E55F 0E 15                  LD     C,fWriteSeq
1222: E561 CD 05 00               CALL   BDOS                 ;  and let BDOS do its work         ;
1223: E564 B7                     OR     A                    ; set return code flags
1224: E565 C9                     RET
1225: E566         ; rename a file give bu (DE)
1226: E566             RenameFile:
1227: E566 0E 17                  LD     C,fRenameFile
1228: E568 C3 05 00               JP     BDOS
1229: E56B         ;-----------------------------
1230: E56B         ;set default buffer dma address
1231: E56B             SetDefaultDMA:
1232: E56B 11 80 00               LD     DE,DMABuffer
1233: E56E         ;---------
1234: E56E         ;set dma address to d,e
1235: E56E             SetDMA:
1236: E56E 0E 1A                  LD     C,fSetDMA
1237: E570 C3 05 00               JP     BDOS
1238: E573         ;-----------------------------
1239: E573         ;----------------------------------------------------------------
1240: E573         ;-----------------------------
1241: E573         ;-----------------------------
1242: E573         ;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
1243: E573
1244: E573
1245: E573         ;-----------------------------
1246: E573         ;*****************************************************************
1247: E573
1248: E573
1249: E573             PrintSpace:
1250: E573 3E 20                  LD     A,SPACE
1251: E575 C3 78 E5               JP     PrintSaveBC
1252: E578         ;-----------------------------
1253: E578         ;print character, but save b,c registers
1254: E578             PrintSaveBC:
1255: E578 C5                     PUSH   BC
1256: E579 CD 8D E6               CALL   PrintCharInA
1257: E57C C1                     POP    BC
1258: E57D C9                     RET
1259: E57E         ;-----------------------------
1260: E57E         ;move 3 characters from h,l to d,e addresses
1261: E57E             CopyHL2DE3:                      ;XXXXXXXXX
1262: E57E 06 03                  LD     B,3
1263: E580             CopyHL2DEforB:
1264: E580 7E                     LD     A,(HL)
1265: E581 12                     LD     (DE),AE
1266: E582 23                     INC    HL
1267: E583 13                     INC    DE
1268: E584 05                     DEC    B
1269: E585 C2 80 E5               JP     NZ,CopyHL2DEforB
1270: E588 C9                     RET
1271: E589         ;-----------------------------
1272: E589         ;return (HL) = (A) + (HL)
1273: E589             AddA2HL:
1274: E589 85                     ADD    A,L
1275: E58A 6F                     LD     L,A
1276: E58B D0                     RET    NC
1277: E58C 24                     INC    H
1278: E58D C9                     RET
1279: E58E         ;-----------------------------
1280: E58E         ;DMABuffer + a + c to h,l followed by fetch
1281: E58E             GetByteAtAandCandDMA:
1282: E58E 21 80 00               LD     HL,DMABuffer         ; 0080H
1283: E591 81                     ADD    A,C
1284: E592 CD 89 E5               CALL   AddA2HL
1285: E595 7E                     LD     A,(HL)
1286: E596 C9                     RET
1287: E597         ;-----------------------------
1288: E597         ;-----------------------------
1289: E597         ;*****************************************************************
1290: E597         ;************************ Error messages ******************************
1291: E597         ;*****************************************************************
1292: E597         ;print the read error message
1293: E597             PrintReadError:
1294: E597 01 9D E5               LD     BC,msgReadErr
1295: E59A C3 98 E6               JP     PrintCrLfStringNull
1296: E59D             msgReadErr:
1297: E59D 52 45 41 44 20 45 52 52 4F 52 00                DB     'READ ERROR',0
1298: E5A8         ;-----------------------------
1299: E5A8
1300: E5A8
1301: E5A8         ;*****************************************************************
1302: E5A8         ;*****************************************************************
1303: E5A8         ;*****************************************************************
1304: E5A8         ; save save memory image
1305: E5A8         ;*****************************************************************
1306: E5A8         ;*****************************************************************
1307: E5A8         ;User defined function
1308: E5A8         ;*****************************************************************
1309: E5A8             ccpUserFunction:
1310: E5A8
1311: E5A8 3A 47 E7               LD     A,(Token1)+1
1312: E5AB FE 20                  CP     SPACE
1313: E5AD C2 C4 E5               JP     NZ,ccpUserFunction1
1314: E5B0         ; no file name, but may be disk switch
1315: E5B0 3A 67 E7               LD     A,(selectedDisk)
1316: E5B3 B7                     OR     A
1317: E5B4 CA DA E6               JP     Z,EndCommand         ; no disk named if 0
1318: E5B7 3D                     DEC    A                    ; adjust so A=>0, B=>1, C=>2 ......
1319: E5B8 32 6B E7               LD     (currentDisk),A      ; update current Disk indicator
1320: E5BB CD 1A E1               CALL   SetPage0CurDisk      ; set user/disk
1321: E5BE CD 2A E5               CALL   SelectDisk
1322: E5C1 C3 DA E6               JP     EndCommand
1323: E5C4
1324: E5C4         ;  file name is present
1325: E5C4             ccpUserFunction1:
1326: E5C4 11 4F E7               LD     DE,Token1+9
1327: E5C7 1A                     LD     A,(DE)
1328: E5C8 FE 20                  CP     SPACE
1329: E5CA C2 06 E2               JP     NZ,CommandError      ; type SPACE
1330: E5CD D5                     PUSH   DE
1331: E5CE CD C5 E6               CALL   SetDiskForCmd
1332: E5D1 D1                     POP    DE
1333: E5D2 21 81 E6               LD     HL,comFileType       ; .com
1334: E5D5 CD 7E E5               CALL   CopyHL2DE3           ; file type is set to .com
1335: E5D8 CD 3C E7               CALL   OpenToken1File
1336: E5DB CA 69 E6               JP     Z,ccpUserFunctionError1
1337: E5DE         ; file opened properly, read it into memory
1338: E5DE 21 00 01               LD     HL,TPA               ; transient program base
1339: E5E1             ccpUserFunction2:
1340: E5E1 E5                     PUSH   HL                   ;save dma address
1341: E5E2 EB                     EX     DE,HL
1342: E5E3 CD 6E E5               CALL   SetDMA
1343: E5E6 11 46 E7               LD     DE,Token1
1344: E5E9 CD 3A E5               CALL   DiskRead
1345: E5EC C2 01 E6               JP     NZ,ccpUserFunction3
1346: E5EF         ; sector loaded, set new dma address and compare
1347: E5EF E1                     POP    HL
1348: E5F0 11 80 00               LD     DE,cpmRecordSize
1349: E5F3 19                     ADD    HL,DE
1350: E5F4 11 00 E0               LD     DE,CcpBoundary       ; has the load overflowed?
1351: E5F7 7D                     LD     A,L
1352: E5F8 93                     SUB    E
1353: E5F9 7C                     LD     A,H
1354: E5FA 9A                     SBC    A,D
1355: E5FB D2 6F E6               JP     NC,ccpUserFunctionError2
1356: E5FE C3 E1 E5               JP     ccpUserFunction2     ; for another sector
1357: E601
1358: E601             ccpUserFunction3:
1359: E601 E1                     POP    HL
1360: E602 3D                     DEC    A
1361: E603 C2 6F E6               JP     NZ,ccpUserFunctionError2 ; end file is 1
1362: E606 CD 1B E7               CALL   RestoreDisk          ; back to original disk
1363: E609 CD 26 E1               CALL   ParseToken1
1364: E60C 21 67 E7               LD     HL,selectedDisk
1365: E60F E5                     PUSH   HL
1366: E610 7E                     LD     A,(HL)
1367: E611 32 46 E7               LD     (Token1),A           ; drive number set
1368: E614         ; 	LD		A,16
1369: E614 CD 21 E1               CALL   ParseToken2          ; move entire fcb to memory
1370: E617 E1                     POP    HL
1371: E618 7E                     LD     A,(HL)
1372: E619 32 56 E7               LD     (Token2),A
1373: E61C AF                     XOR    A
1374: E61D 32 66 E7               LD     (currentRecord),A    ; record number set to zero
1375: E620 11 5C 00               LD     DE,FCB1              ; default FCB in page 0
1376: E623 21 46 E7               LD     HL,Token1
1377: E626 06 21                  LD     B,33
1378: E628 CD 80 E5               CALL   CopyHL2DEforB
1379: E62B         ; move command line to buff
1380: E62B 21 2E E2               LD     HL,commandBuffer
1381: E62E             ccpUserFunction4:
1382: E62E 7E                     LD     A,(HL)
1383: E62F B7                     OR     A
1384: E630 CA 3C E6               JP     Z,ccpUserFunction5
1385: E633 FE 20                  CP     SPACE
1386: E635 CA 3C E6               JP     Z,ccpUserFunction5
1387: E638 23                     INC    HL
1388: E639 C3 2E E6               JP     ccpUserFunction4     ; for another scan
1389: E63C         ; first blank position found
1390: E63C             ccpUserFunction5:
1391: E63C 06 00                  LD     B,0
1392: E63E 11 81 00               LD     DE,DMABuffer+1
1393: E641         ; ready for the move
1394: E641             ccpUserFunction6:
1395: E641 7E                     LD     A,(HL)
1396: E642 12                     LD     (DE),AE
1397: E643 B7                     OR     A
1398: E644 CA 4D E6               JP     Z,ccpUserFunction7
1399: E647         ;more to move
1400: E647 04                     INC    B
1401: E648 23                     INC    HL
1402: E649 13                     INC    DE
1403: E64A C3 41 E6               JP     ccpUserFunction6
1404: E64D             ccpUserFunction7:                      ; B has character count
1405: E64D 78                     LD     A,B
1406: E64E 32 80 00               LD     (DMABuffer),A
1407: E651 CD 84 E6               CALL   CrLf
1408: E654         ; now go to the loaded program
1409: E654 CD 6B E5               CALL   SetDefaultDMA        ; default dma
1410: E657 CD 0B E1               CALL   SaveUserAndDisk      ; user code saved
1411: E65A         ; low memory diska contains user code
1412: E65A CD 00 01               CALL   TPA                  ; gone to the loaded program
1413: E65D 31 F0 E7               LD     SP,Stack             ; may come back here
1414: E660 CD 1A E1               CALL   SetPage0CurDisk
1415: E663 CD 2A E5               CALL   SelectDisk
1416: E666 C3 26 E0               JP     ccpMainEntry
1417: E669
1418: E669             ccpUserFunctionError1:
1419: E669 CD 1B E7               CALL   RestoreDisk
1420: E66C C3 06 E2               JP     CommandError
1421: E66F
1422: E66F             ccpUserFunctionError2:                      ; cannot load the program
1423: E66F 01 78 E6               LD     BC,msgBadLoad
1424: E672 CD 98 E6               CALL   PrintCrLfStringNull
1425: E675 C3 D7 E6               JP     RestoreDiskAtCmdEnd
1426: E678
1427: E678             msgBadLoad:
1428: E678 42 41 44 20 4C 4F 41 44 00                DB     'BAD LOAD',0
1429: E681             comFileType:
1430: E681 43 4F 4D                DB     'COM'                ;for com files
1431: E684         ;
1432: E684
1433: E684         ;*****************************************************************
1434: E684         ;*****************************************************************
1435: E684         ;*****************************************************************
1436: E684         ;=============================== Utilities =================================;
1437: E684         ;-------------------------------- CR / LF ----------------------------------;
1438: E684         ;Sent Carriage Return Line Feed to Console                                  ;
1439: E684             CrLf:                           ;
1440: E684 1E 0D                  LD     E,CR                 ; Carriage Return                   ;
1441: E686 CD 90 E6               CALL   PrintCharInE         ;
1442: E689 1E 0A                  LD     E,LF                 ; Line Feed                         ;
1443: E68B 18 03                  JR     PrintCharInE         ;
1444: E68D         ;-------------------------------- CR / LF ----------------------------------;
1445: E68D         ;------------------------------- PrintCharInA ------------------------------;
1446: E68D         ; Print character                                                           ;
1447: E68D         ; On Entry A = Character to Send to Console                                 ;
1448: E68D             PrintCharInA:                      ;
1449: E68D 5F                     LD     E,A                  ; move char to E                    ;
1450: E68E 18 00                  JR     PrintCharInE         ;
1451: E690         ;------------------------------- PrintCharInA ------------------------------;
1452: E690         ;------------------------------- PrintCharInE ------------------------------;
1453: E690         ; Print character                                                           ;
1454: E690         ; On Entry E = Character to Send to Console                                 ;
1455: E690         ; Preserves BC                                ;                             ;
1456: E690             PrintCharInE:                      ;
1457: E690 C5                     PUSH   BC                   ; Preserve BC                       ;
1458: E691 0E 02                  LD     C,fConsoleOut        ; Load Function Number         		;
1459: E693 CD 05 00               CALL   BDOS                 ;  and let BDOS do its work         ;
1460: E696 C1                     POP    BC                   ; Restore BC                        ;
1461: E697 C9                     RET                         ;
1462: E698         ;------------------------------- PrintCharInE ------------------------------;
1463: E698         ;----------------- Print (CRLF then ) Null Terminated String ---------------;
1464: E698         ;print CRLF then null terminated string at (BC)                             ;
1465: E698             PrintCrLfStringNull:                      ;
1466: E698 C5                     PUSH   BC                   ; Save string pointer               ;
1467: E699 CD 84 E6               CALL   CrLf                 ; Send CR/LF                        ;
1468: E69C E1                     POP    HL                   ; Restore pointer & fall thru       ;
1469: E69D         ;print null terminated string from (HL)                                     ;
1470: E69D             PrintStringNull:                      ;
1471: E69D 7E                     LD     A,(HL)               ; Get the next character            ;
1472: E69E B7                     OR     A                    ; Is it the Null terminator ?       ;
1473: E69F C8                     RET    Z                    ;  exit if yes                      ;
1474: E6A0 23                     INC    HL                   ; Move string pointer               ;
1475: E6A1 E5                     PUSH   HL                   ; Save for next iteration           ;
1476: E6A2 CD 8D E6               CALL   PrintCharInA         ; Send the character to the console ;
1477: E6A5 E1                     POP    HL                   ; string pointer                    ;
1478: E6A6 C3 9D E6               JP     PrintStringNull      ; Loop for more                     ;
1479: E6A9         ;----------------- Print (CRLF then ) Null Terminated String ---------------;
1480: E6A9         ;-------------------------- Print 'No File' Message ------------------------;
1481: E6A9         ;print 'no file' message on console                                        ;
1482: E6A9             PrintNoFile:                      ;
1483: E6A9 01 AF E6               LD     BC,msgNoFile         ; Point to the message              ;
1484: E6AC C3 98 E6               JP     PrintCrLfStringNull  ; Go print it & return to caller    ;
1485: E6AF         ;
1486: E6AF 4E 4F 20 46 49 4C 45 00     msgNoFile: DB     'NO FILE',0          ;
1487: E6B7         ;-------------------------- Print 'No File' Message ------------------------;
1488: E6B7
1489: E6B7
1490: E6B7
1491: E6B7
1492: E6B7
1493: E6B7
1494: E6B7
1495: E6B7
1496: E6B7         ;------------------------- Check For Console Input -------------------------;
1497: E6B7         ;check for a character ready at the console                                 ;
1498: E6B7         ;Exits with	Z-Flag  set if there has been no character input                ;
1499: E6B7         ;					reset if there is a character waiting                   ;
1500: E6B7         ;			A = character input, if Z-Flag reset                            ;
1501: E6B7             CheckForConsoleChar:                      ;
1502: E6B7 0E 0B                  LD     C,fGetConsoleStatus  ; Load Function Number - 0BH        ;
1503: E6B9 CD 05 00               CALL   BDOS                 ;  and let BDOS do its work         ;
1504: E6BC B7                     OR     A                    ; Check return value                ;
1505: E6BD C8                     RET    Z                    ; Return if no char waiting         ;
1506: E6BE         ;
1507: E6BE 0E 01                  LD     C,fConsoleIn         ; Load Function Number - 01H        ;
1508: E6C0 CD 05 00               CALL   BDOS                 ; character cleared             ;
1509: E6C3 B7                     OR     A                    ; Resets the Z-Flag                 ;
1510: E6C4 C9                     RET                         ;
1511: E6C5         ;------------------------- Check For Console Input -------------------------;
1512: E6C5         ;--------------------------- Set Disk For Command --------------------------;
1513: E6C5         ;change disks for this command, if requested                                ;
1514: E6C5             SetDiskForCmd:                      ;
1515: E6C5 AF                     XOR    A                    ; Set to 0                          ;
1516: E6C6 32 46 E7               LD     (Token1),A           ; Set Token's disk to default       ;
1517: E6C9 3A 67 E7               LD     A,(selectedDisk)     ; Get the selected disk             ;
1518: E6CC B7                     OR     A                    ; Is it also set for default ?      ;
1519: E6CD C8                     RET    Z                    ;  exit if yes                      ;
1520: E6CE 3D                     DEC    A                    ; Adjust so A=0,B=2....             ;
1521: E6CF 21 6B E7               LD     HL,currentDisk       ; Point at the current disk         ;
1522: E6D2 BE                     CP     M                    ; Are they the same ?               ;
1523: E6D3 C8                     RET    Z                    ;  exit if yes                      ;
1524: E6D4 C3 2A E5               JP     SelectDisk           ;  else go select the disk          ;
1525: E6D7         ;
1526: E6D7         ;--------------------------- Set Disk For Command --------------------------;
1527: E6D7         ;------------------------ Restore Disk at Command End ----------------------;
1528: E6D7         ;Restore disk from before command, fall thru to end of command              ;
1529: E6D7             RestoreDiskAtCmdEnd:                      ;
1530: E6D7 CD 1B E7               CALL   RestoreDisk          ; Restore Disk from before command  ;
1531: E6DA         ;
1532: E6DA         ;End of intrinsic command                                                   ;
1533: E6DA             EndCommand:                      ;
1534: E6DA CD 26 E1               CALL   ParseToken1          ; Check for garbage at end of line  ;
1535: E6DD 3A 47 E7               LD     A,(Token1)+1         ; Point at 1st character            ;
1536: E6E0 D6 20                  SUB    SPACE                ; Get ??                            ;
1537: E6E2 21 67 E7               LD     HL,selectedDisk      ;
1538: E6E5 B6                     OR     M                    ; Are they equal ?                  ;
1539: E6E6         ; 0 in accumulator if no disk selected, and blank fcb                       ;
1540: E6E6 C2 06 E2               JP     NZ,CommandError      ;  no, report error                 ;
1541: E6E9 C3 26 E0               JP     ccpMainEntry         ;  else go back to the Start        ;
1542: E6EC         ;------------------------ Restore Disk at Command End ----------------------;
1543: E6EC
1544: E6EC         ;------------------------ Get Number From Command Line ---------------------;
1545: E6EC         ; Get number from the command line                                          ;
1546: E6EC         ; Exits with A = Value                                                      ;
1547: E6EC             GetNumberFromCmdLine:                      ;
1548: E6EC CD 26 E1               CALL   ParseToken1          ; Get token                         ;
1549: E6EF 3A 67 E7               LD     A,(selectedDisk)     ; Get currently selected disk       ;
1550: E6F2 B7                     OR     A                    ; Is it current default disk ?      ;
1551: E6F3 C2 06 E2               JP     NZ,CommandError      ;  no, then error exit              ;
1552: E6F6         ; convert the byte value in Token1 to binary                                ;
1553: E6F6         ;
1554: E6F6 21 00 00               LD     HL,0000              ;
1555: E6F9 01 00 00               LD     BC,0000              ; Clear the registers               ;
1556: E6FC         ;
1557: E6FC DD 21 47 E7               LD     IX,Token1+1          ;
1558: E700             Loop1:                          ;
1559: E700 DD 7E 00               LD     A,(IX+0)             ; Get Character                     ;
1560: E703 DD 23                  INC    IX                   ; Adjust for next time around       ;
1561: E705 FE 20                  CP     SPACE                ; Terminating character ?           ;
1562: E707 28 10                  JR     Z,GetNumericValue1   ;  get out if yes                   ;
1563: E709 D6 30                  SUB    ASCII_ZERO           ; Make binary                       ;
1564: E70B FE 0A                  CP     0AH                  ; Is it a digit ?                   ;
1565: E70D 30 0A                  JR     NC,GetNumericValue1  ;  get out if no                    ;
1566: E70F 29                     ADD    HL,HL                ; Prior value * 2                   ;
1567: E710 E5                     PUSH   HL                   ; Move *2                           ;
1568: E711 D1                     POP    DE                   ;  to DE                            ;
1569: E712 29                     ADD    HL,HL                ; Prior value * 4                   ;
1570: E713 29                     ADD    HL,HL                ; Prior value * 8                   ;
1571: E714 19                     ADD    HL,DE                ; Add * 2 gives Prior value * 10    ;
1572: E715 4F                     LD     C,A                  ; Get this digit                    ;
1573: E716 09                     ADD    HL,BC                ; and add it                        ;
1574: E717 18 E7                  JR     Loop1                ;
1575: E719         ;
1576: E719             GetNumericValue1:                      ;
1577: E719 7D                     LD     A,L                  ; Put result in Acc                 ;
1578: E71A C9                     RET                         ;
1579: E71B         ;
1580: E71B         ;------------------------ Get Number From Command Line ---------------------;
1581: E71B         ;-------------------------------- Restore Disk -----------------------------;
1582: E71B         ; Restore Disk from before command                                          ;
1583: E71B             RestoreDisk:                      ;
1584: E71B 3A 67 E7               LD     A,(selectedDisk)     ; Get disk selected by command      ;
1585: E71E B7                     OR     A                    ; Is it the Default ?               ;
1586: E71F C8                     RET    Z                    ;  yes, the nothing to do           ;
1587: E720 3D                     DEC    A                    ; Change to 0=A, 1=B....            ;
1588: E721 21 6B E7               LD     HL,currentDisk       ;
1589: E724 BE                     CP     M                    ; Is it the current disk ?          ;
1590: E725 C8                     RET    Z                    ;  yes, the nothing to do           ;
1591: E726 3A 6B E7               LD     A,(currentDisk)      ;  else get current disk            ;
1592: E729 C3 2A E5               JP     SelectDisk           ; Select it                         ;
1593: E72C         ;-------------------------------- Restore Disk -----------------------------;
1594: E72C         ;-------------------------- Find First Token1 Entry ------------------------;
1595: E72C         ;Search for Token1 file                                                     ;
1596: E72C             FindFirstToken1File:                      ;
1597: E72C 11 46 E7               LD     DE,Token1            ; Point at Token1                   ;
1598: E72F C3 32 E7               JP     SearchForFirst       ; Go look for it                    ;
1599: E732         ;-------------------------- Find First Token1 Entry ------------------------;
1600: E732         ;----------------------------- Find First Entry ----------------------------;
1601: E732         ;Search for the first directory entry given by DE                           ;
1602: E732         ;Upon entry  DE = FCB                                                       ;
1603: E732             SearchForFirst:                      ;
1604: E732 0E 11                  LD     C,fSearchFirst       ; Load Function Number - 11H        ;
1605: E734 C3 4D E5               JP     BDOSandIncA          ; make BDOS call & set dir index   	;
1606: E737         ;----------------------------- Find First Entry ----------------------------;
1607: E737         ;----------------------------- Find  Next Entry ----------------------------;
1608: E737         ;Search for the next occurrence of the file given DE                        ;
1609: E737         ;Upon entry  DE = FCB                                                       ;
1610: E737             SearchForNext:                      ;
1611: E737 0E 12                  LD     C,fSearchNext        ; Load Function Number - 12H        ;
1612: E739 C3 4D E5               JP     BDOSandIncA          ; make BDOS call & set dir index    ;
1613: E73C         ;----------------------------- Find  Next Entry ----------------------------;
1614: E73C         ;----------------------------- Open Token1 File ----------------------------;
1615: E73C             OpenToken1File:                      ;
1616: E73C AF                     XOR    A                    ; Clear Acc                         ;
1617: E73D 32 66 E7               LD     (currentRecord),A    ; Initialize  next record for I/O   ;
1618: E740 11 46 E7               LD     DE,Token1            ; Point at the FCB                  ;
1619: E743 C3 30 E5               JP     OpenFile             ; Let BDOS open the file            ;
1620: E746         ;----------------------------- Open Token1 File ----------------------------;
1621: E746
1622: E746
1623: E746
1624: E746
1625: E746
1626: E746         ; UT
1627: E746         ;*****************************************************************
1628: E746         ;************************ Data Area ******************************
1629: E746         ;*****************************************************************
1630: E746         ;------------------------------ Command Buffer -----------------------------;
1631: E746         ;;
1632: E746         ;;
1633: E746             Token1:    DS     16                   ; Command Token
1634: E756             Token2:    DS     16                   ; Command Token
1635: E766
1636: E766
1637: E766
1638: E766 00          currentRecord: DB     00H                  ; current record to read/write
1639: E767 00          selectedDisk: DB     00H                  ; selected disk for current operation none=0, a=1, b=2 ...
1640: E768         ;
1641: E768 00          bufferPointer: DB     00H                  ; buffer pointer
1642: E769         ;------------------------------------
1643: E769 00 00       tokenStart: DW     0000H                ; staddr starting address of current Fill FCB request
1644: E76B         ;----------------------------
1645: E76B         ; (command executed initially if commandLength non zero)
1646: E76B         ;--------------------------------- Variables -------------------------------;
1647: E76B 00          currentDisk: DB     00H                  ; Current disk
1648: E76C 00          directoryEntryNumber: DB     00H                  ; Index into Directory Buffer
1649: E76D         ;--------------------------------- Variables -------------------------------;
1650: E76D
1651: E76D             endOfCode:
1652: E76D                        ORG    BDOSBase-10H
1653: E7F0             Stack:                          ; Top Of Stack
1654: E7F0
1655: E7F0         ;Z_HighestLocation:
1656: E7F0             ZZ_MemoryLeft EQU    (BDOSBase-1) - endOfCode
1657: E7F0
1658: E7F0
1659: E7F0
1660: E7F0
1661: E7F0
           ************************   Xref   ************************
0000: $               E7F0   0766
1273: AddA2HL         E589   1284
0085: ASCII_A         0041   0330 0840
0086: ASCII_C         0043
0087: ASCII_K         004B
0094: ASCII_LO_A      0061
0095: ASCII_LO_K      006B
0096: ASCII_LO_P      0070
0037: ASCII_MASK      007F   0858
0088: ASCII_N         004E
0089: ASCII_Q         0051
0090: ASCII_R         0052
0091: ASCII_W         0057
0092: ASCII_Y         0059   0906
0072: ASCII_ZERO      0030   1563
0066: ASTERISK        002A   0574
0289: BDOS            0005   0420 1140 1146 1171 1179 1188 1197 1207 1222 1228 1237 1459 1503 1508
1196: BDOSandIncA     E54D   1155 1164 1212 1605 1612
0152: BDOSBase        E800   0153 0155 1652 1656
0121: BDOSE           0005   0122
0153: BDOSEntry       E800
0142: BDOSLength      0E00   0145 0155 0156
0055: BELL            0007
0155: BIOSBase        F600
0143: BIOSLength      0A00   0145
0115: BIOSPAGE        0002
0156: BIOSStart       F600
0252: BlockSize       0800   0274
1641: bufferPointer   E768
0766: builtInCMDCount 0006   0676
0759: builtInCMDNames E2D1   0672 0766
0757: builtInCMDNameSize 0004   0679 0766
0768: builtInCMDVector E2E9   0348
0033: BYTE            0001
0093: CARET           005E
0297: CcpBoundary     E000   1350
0799: ccpDirAll       E308   0802
0850: ccpDirDisplayFile E35D   0844
0846: ccpDirDisplayFile0 E355   0833
0853: ccpDirDisplayFileLoop E360   0868
0789: ccpDirectory    E2F7   0769
0876: ccpDirEnd       E38C   0812 0873
0870: ccpDirLoopBottom E37E   0823
0811: ccpDirLoopTop   E317   0875
0804: ccpDirQualified E30D   0795
0150: CCPEntry        E000   0152 0156 0296
0892: ccpErase        E391   0770
0911: ccpEraseFile    E3B4   0895
0141: CCPLength       0800   0145 0152 0156
0326: ccpMainEntry    E026   0413 0730 0903 0907 1416 1541
0336: CcpParseCommand E03C   0324
0929: ccpRename       E3CF   0773
0971: ccpRename2      E416   0966
0982: ccpRenameError1 E42A   0976
0986: ccpRenameError2 E430   0952 0959 0970
0990: ccpRenameError3 E436   0936
0938: ccpRenameFCB1   E3E2
0954: ccpRenameFCB2   E3FD   0950
1005: ccpSave         E44B   0772
1043: ccpSaveClose    E48F   1028
1049: ccpSaveError1   E499   1016
1053: ccpSaveError2   E4A1   1039
1057: ccpSaveExit     E4A7   1047 1052
1025: ccpSaveWrite    E472   1040
0305: CcpStart        E000
1073: ccpType         E4CE   0771
1103: ccpTypeEOF      E501   1085
1107: ccpTypeError    E508   1078
1082: ccpTypeRead     E4E0   1101
1091: ccpTypeRecord   E4F1   1100
1123: ccpUser         E50E   0774
1309: ccpUserFunction E5A8   0345 0775
1325: ccpUserFunction1 E5C4   1313
1339: ccpUserFunction2 E5E1   1356
1358: ccpUserFunction3 E601   1345
1381: ccpUserFunction4 E62E   1388
1390: ccpUserFunction5 E63C   1384 1386
1394: ccpUserFunction6 E641   1403
1404: ccpUserFunction7 E64D   1398
1418: ccpUserFunctionError1 E669   1336
1422: ccpUserFunctionError2 E66F   1355 1361
1501: CheckForConsoleChar E6B7   0410 0872
1162: CloseFile       E535   0401 1045
0073: COLON           003A   0516 0658 0842 0848
1429: comFileType     E681   1333
0068: COMMA           002C
0737: commandBuffer   E22E   0408 0437 0739 1380
0739: commandBufferPointer E2AE   0438 0502 0546 0910 0946 0957
0710: CommandError    E206   0342 0650 0931 0988 1009 1075 1109 1126 1130 1329 1420 1540 1551
0725: CommandErrorExit E21E   0716 0718
0713: CommandErrorLoop E20C   0723
0736: commandLength   E22D   0322 0386 0425 0901
0735: commandMaxLength E22C   0418
0127: ComTail         0080   0128
0129: ComTailChars    0082
0128: ComTailCount    0081   0129
1261: CopyHL2DE3      E57E   1334
1263: CopyHL2DEforB   E580   1269 1378
0229: cpmRecordSize   0080   0231 0234 0236 0387 1031 1087 1348
0058: CR              000D   1440
1439: CrLf            E684   0328 0711 0728 0836 1080 1407 1467
0041: CTRL_C          0003
0042: CTRL_E          0005
0043: CTRL_H          0008
0044: CTRL_K          000B
0045: CTRL_L          000C
0046: CTRL_P          0010
0047: CTRL_R          0012
0048: CTRL_S          0013
0049: CTRL_U          0015
0050: CTRL_X          0018
0051: CTRL_Z          001A
1647: currentDisk     E76B   0340 0369 0404 0464 0475 0483 0522 1319 1521 1588 1591
1638: currentRecord   E766   1018 1374 1617
0069: DASH            002D
0263: DataBlocks      02C7   0273
0262: DataSectors     0B1C   0263
1205: DeleteFile      E555   0463 0914 1013
0454: DeleteSubmitFile E0F3   0412 0416 0729
0234: DirBuffSize     0080
0881: dirCharCount    E390   0827 0860
0249: DirectoryBlockCount 0002   0274
1648: directoryEntryNumber E76C   0814 1198
0236: DirectoryEntryPerRecord 0004   0277
0233: DirEntrySize    0020   0236 0274
0879: dirFileCount    E38F   0806 0829
0221: DiskCommandBlock 0046
0220: DiskControlByte 0045
0223: DiskControlTable 0040
1169: DiskRead        E53A   0381 1084 1344
0225: DiskReadCode    0001
0230: diskSectorSize  0200   0231 0252 0260
0219: DiskStatusLocation 0043
1220: DiskWrite       E55F   1036
0226: DiskWriteCode   0002
0132: DMABuffer       0080   0337 0385 0820 1089 1232 1282 1392 1406
0062: DOLLAR          0024
0275: dpb3hdAL0       00C0
0276: dpb3hdAL1       0000
0271: dpb3hdBLM       000F
0270: dpb3hdBSH       0004
0277: dpb3hdCKS       0020
0274: dpb3hdDRM       007F   0277
0273: dpb3hdDSM       02C6
0272: dpb3hdEXM       0000
0279: dpb3hdNOH       0002
0278: dpb3hdOFF       0001
0269: dpb3hdSPT       0090
0136: END_OF_FILE     001A   1094
1533: EndCommand      E6DA   1132 1317 1322
1651: endOfCode       E76D   1656
0039: EndOfMessage    0000
0077: EQUAL_SIGN      003D   0652 0949
0060: EXCLAIM_POINT   0021
0028: FALSE           0000
0124: FCB1            005C   0125 1375
0125: FCB2            006C
0291: fcbSystemFileIndex 000A   0822
0169: fCloseFile      0010   1163
0160: fConsoleIn      0001   1507
0161: fConsoleOut     0002   1088 1458
0172: fDeleteFile     0013   1206
0164: fGetConsoleStatus 000B   1502
0178: fGetCurrentDisk 0019   1178
0177: fGetLoginVector 0018
0180: fGetSetUserNumber 0020   1187
0165: fGetVersion     000C
0292: FILE_NAME_SIZE  0008   0533 0549 0798 0894
0293: FILE_TYPE_SIZE  0003   0537 0549 0798 0894
0625: FillWithAcc     E1AE   0544 0628
0623: FillWithSpace   E1AC   0592 0613
1596: FindFirstToken1File E72C   0808 0935 0975
0175: fMakeFile       0016   1211
0168: fOpenFile       000F   1154
0569: FormatElement   E17F   0534 0539 0583
0579: FormatElement1  E190   0575
0582: FormatElement2  E192   0577
0162: fPrintString    0009
0173: fReadSeq        0014   1170
0163: fReadString     000A   0419
0176: fRenameFile     0017   1227
0166: fResetSystem    000D   1139
0170: fSearchFirst    0011   1604
0171: fSearchNext     0012   1611
0167: fSelectDisk     000E   1145
0179: fSetDMA         001A   1236
0174: fWriteSeq       0015   1221
1281: GetByteAtAandCandDMA E58E
1547: GetNumberFromCmdLine E6EC   1006 1124
1576: GetNumericValue1 E719   1562 1565
1177: GetSelectedDrive E541   0329 0339 0838
1183: GetUser         E546   0470
0078: GREATER_THAN    003E   0332 0664
0061: HASH_TAG        0023
1138: Initialize      E525   0315
0671: IntrinsicFunction E1DC   0347
0674: IntrinsicFunction1 E1E1   0702
0680: IntrinsicFunction2 E1EA   0687
0695: IntrinsicFunction3 E1FD   0683 0698
0700: IntrinsicFunction4 E202   0691
0116: IOBYTE          0003
0645: IsItADelimiter  E1BD   0570 0586
0606: IsItDot         E1A0   0538
0064: L_PAREN         0028
0081: LEFT_ARROW      005F   0951
0097: LEFT_CURLY      007B
0145: LengthInBytes   2000   0146 0150 0260
0146: LengthInK       0009
0076: LESS_THAN       003C   0662
0057: LF              000A   1442
0031: LO_NIBBLE_MASK  000F   0319
1558: Loop1           E700   1574
1210: MakeFile        E55A   1015
0734: maximumBufferSize 007F   0735 0737
0148: MemorySize      0040   0150
1427: msgBadLoad      E678   1423
0919: msgEraseAll     E3C4   0897
0995: msgFileExists   E43F   0991
1061: msgNoDirSpace   E4AD   1050
1063: msgNoDiskSpace  E4C0   1054
1486: msgNoFile       E6AF   1483
1296: msgReadErr      E59D   1294
0261: myOffset        0001   0262 0278
0633: NextNonBlankChar E1B3   0503 0640 0948
0423: NoRead          E0D5   0411
0415: NotSubmitFile   E0C4   0367 0376 0382 0402
0053: NULL            0000
0245: NumberOfHeads   0002   0256 0258 0269 0279
0242: NumberOfLogicalDisks 0004
0030: OFF             0000
0029: ON              FFFF
1153: OpenFile        E530   0375 1619
1615: OpenToken1File  E73C   1077 1335
0591: PadTheElement   E19C   0571
0497: ParseToken      E129   0494
0495: ParseToken1     E126   0341 0790 0893 0930 0958 1008 1074 1363 1534 1548
0492: ParseToken2     E121   1369
0063: PERCENT         0025
0070: PERIOD          002E   0609 0656
0119: Pg0CurentDisk   0004   0320 0477 0484
0118: Pg0CurentUser   0004   0119
0067: PLUS_SIGN       002B
1448: PrintCharInA    E68D   0331 0333 0720 0727 0859 1099 1256 1476
1456: PrintCharInE    E690   1441 1443 1450
1465: PrintCrLfStringNull E698   0898 0992 1051 1055 1295 1424 1484
1482: PrintNoFile     E6A9   0809 0916 0983
1293: PrintReadError  E597   1106
1254: PrintSaveBC     E578   0841 0843 0849 1251
1249: PrintSpace      E573   0847 0851 0865
1470: PrintStringNull E69D   0409 1478
0079: QMARK           003F   0551 0576 0726 0800
0552: QuestionMarkCount E175   0558
0557: QuestionMarkCount1 E17A   0555
0065: R_PAREN         0029
0112: RAM             0000   0114 0115 0116 0118 0121 0124 0127 0132 0134
0364: ReadCommand     E065   0334 0900
0254: RecordsPerBlock 0010
0238: RecordsPerExtent 0080
0231: recordsPerSector 0004   0254 0269
1226: RenameFile      E566   0979
1583: RestoreDisk     E71B   0987 1108 1362 1419 1530
1529: RestoreDiskAtCmdEnd E6D7   0877 0917 0980 0984 0993 1059 1095 1105 1425
0082: RUBOUT          007F
0469: SaveUserAndDisk E10B   0417 1410
1603: SearchForFirst  E732   1598
1610: SearchForNext   E737   0874
0283: SectorMask      0003
0248: SectorsPerBlock 0004   0252 0254 0257 0263 0283
0258: SectorsPerCylinder 0024   0261 0262
0247: SectorsPerTrack 0012   0256 0258 0269
1143: SelectDisk      E52A   0321 0372 0406 0461 0465 1321 1415 1524 1592
1639: selectedDisk    E767   0343 0501 0528 0932 0963 1315 1364 1517 1537 1549 1584
0075: SEMICOLON       003B   0660
1231: SetDefaultDMA   E56B   1058 1409
1514: SetDiskForCmd   E6C5   0791 0912 0934 1010 1076 1331
1235: SetDMA          E56E   0338 1034 1342
0532: SetFileName     E157   0524
0482: SetPage0CurDisk E11A   0421 1320 1414
0536: SetType         E15C
1186: SetUser         E548   0313 1131
0071: SLASH           002F
0054: SOH             0001
0059: SPACE           0020   0624 0637 0649 0690 0715 0794 1129 1250 1312 1328 1385 1536 1561
1653: Stack           E7F0   0306 0327 1413
0753: submitCR        E2D0   0379
0747: submitExtent    E2BC
0745: submitFCB       E2B1   0374 0380 0400 0462
0743: submitFlag      E2B0   0316 0365 0455
0749: submitFWF       E2BE   0393
0752: submitMap       E2C0
0751: submitRC        E2BF   0377 0398
0748: submitS1        E2BD
0750: submitS2        E2BE
0746: submitType      E2B9
0260: SystemSectors   0011   0261
0056: TAB             0009
1633: Token1          E746   0496 0678 0792 0913 0940 0974 0978 1011 1035 1044 1083 1128 1311 1326 1343 1367 1376 1516 1535 1557 1597 1618
1634: Token2          E756   0493 0941 1372
1643: tokenStart      E769   0504 0712
0122: TopRAM          0007
0257: TotalNumberOfBlocks 02D0
0256: TotalNumberOfSectors 0B40   0257 0262
0134: TPA             0100   1023 1338 1412
0246: TracksPerHead   0050   0256
0027: TRUE            FFFF
0585: TruncateElement E194   0589
0080: UNDER_SCORE     005F   0654
0444: UpCase          E0EA   0430
0427: UpCaseLoop      E0D9   0432
0521: UseCurrentDisk  E14A   0511
0526: UseTokensDisk   E151   0517
0114: WarmBoot        0000
0034: WORD            0002
0194: WriteAllocated  0000
0196: WriteCleanBuffer 0002
0195: WriteDirectory  0001
0038: ZERO            0000
1656: ZZ_MemoryLeft   0092
