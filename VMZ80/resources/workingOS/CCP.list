0001: E000         ;		File created by MakeZ80Source on Tue Sep 18 14:13:13 EDT 2018 from:
0002: E000         ;		C:\Users\admin\Dropbox\Resources\CPM\CurrentOS\8080\CCP.asm
0003: E000
0004: E000         ; CCP.Z80
0005: E000         ;
0006: E000         ; 2019-03-02 Version 1.0
0007: E000         ; 2019-03-02 Refactored constants and removed header files
0008: E000         ; 2019-03-01 Finished refactor to Z80 idiom
0009: E000         ; 2019-02-19 Started to refactor to Z80 idiom
0010: E000
0011: E000         ; 2017-03-02 Refactored the CP/M Suite
0012: E000         ; 2014-01-16
0013: E000         ; 2014-05-01  :  Frank Martyn
0014: E000
0015: E000         ; replace systemFile with fcbSystemFileIndex
0016: E000
0017: E000                        Include ./stdHeader.Z80
0018: E000         ;<<<<<<<<<<<<<<<<<<<<<<< Include >>>>>>>>>>>>>>>>
0019: E000         ;     File created by MakeZ80Source on Mon Sep 17 16:25:01 EDT 2018 from:
0020: E000         ;     C:\Users\admin\Dropbox\Resources\CPM\CurrentOS\8080\stdHeader.asm
0021: E000         ; stdHeader.Z80
0022: E000         ; standard equates for use by CP/M
0023: E000
0024: E000         ; 2019-03-02 Removed any unused constants
0025: E000         ; 2017-03-02 Refactored the CP/M Suite
0026: E000
0027: E000
0028: E000             TRUE       EQU    -1                   ; Not false
0029: E000             FALSE      EQU    0000H
0030: E000             LO_NIBBLE_MASK EQU    0FH                  ; Mask used to obtain the bytes low four bits
0031: E000
0032: E000             BYTE       EQU    1                    ; Number of bytes for "byte" type
0033: E000             WORD       EQU    2                    ; Number of bytes for "word" type
0034: E000
0035: E000
0036: E000             ASCII_MASK EQU    7FH                  ; ASCII mask 7 bits
0037: E000             EndOfMessage EQU    00H
0038: E000
0039: E000             CTRL_C     EQU    03H                  ; ETX
0040: E000             CTRL_E     EQU    05H                  ; Physical EOL
0041: E000             CTRL_H     EQU    08H                  ; Backspace
0042: E000             CTRL_L     EQU    0CH                  ; FF - Form feed
0043: E000             CTRL_P     EQU    10H                  ; Print toggle
0044: E000             CTRL_R     EQU    12H                  ; Repeat line
0045: E000             CTRL_S     EQU    13H                  ; X-OFF stop/start screen
0046: E000             CTRL_U     EQU    15H                  ; Line delete
0047: E000             CTRL_X     EQU    18H                  ; Logical line delete
0048: E000             CTRL_Z     EQU    1AH                  ; End of file
0049: E000
0050: E000             TAB        EQU    09H                  ; Tab
0051: E000             LF         EQU    0AH                  ; Line Feed
0052: E000             CR         EQU    0DH                  ; Carriage Return
0053: E000             SPACE      EQU    20H                  ; Space
0054: E000             HASH_TAG   EQU    23H                  ; Sharp sign #
0055: E000             DOLLAR     EQU    24H                  ; Dollar Sign
0056: E000             PERCENT    EQU    25H                  ; Percent Sign
0057: E000             ASTERISK   EQU    2AH                  ; Asterisk *
0058: E000             PERIOD     EQU    2EH                  ; Period
0059: E000             ASCII_ZERO EQU    30H                  ; zero
0060: E000             COLON      EQU    3AH                  ; Colon
0061: E000
0062: E000             SEMICOLON  EQU    3BH                  ; Semi Colon
0063: E000             LESS_THAN  EQU    3CH                  ; Less Than <
0064: E000             EQUAL_SIGN EQU    3DH                  ; Equal Sign
0065: E000             GREATER_THAN EQU    3EH                  ; Greater Than >
0066: E000             QMARK      EQU    3FH                  ; Question Mark
0067: E000             UNDER_SCORE EQU    5FH                  ; under score _
0068: E000             LEFT_ARROW EQU    5FH                  ; Left Arrow ?
0069: E000             RUBOUT     EQU    7FH                  ; Delete Key
0070: E000
0071: E000
0072: E000             ASCII_A    EQU    'A'
0073: E000             ASCII_C    EQU    'C'
0074: E000             ASCII_M    EQU    'M'
0075: E000             ASCII_O    EQU    'O'
0076: E000             ASCII_Y    EQU    'Y'
0077: E000             CARET      EQU    '^'
0078: E000
0079: E000         ;<<<<<<<<<<<<<<<<<<<<<<< Include >>>>>>>>>>>>>>>>
0080: E000                        Include ./osHeader.Z80
0081: E000         ;<<<<<<<<<<<<<<<<<<<<<<< Include >>>>>>>>>>>>>>>>
0082: E000         ;     File created by MakeZ80Source on Mon Sep 17 16:25:47 EDT 2018 from:
0083: E000         ;     C:\Users\admin\Dropbox\Resources\CPM\CurrentOS\8080\osHeader.asm
0084: E000         ; osHeader.Z80
0085: E000
0086: E000         ; 2018-12-28 Changed BDOSEntry to remove dead space in BDOS
0087: E000         ; 2017-03-02 Refactored the CP/M Suite
0088: E000
0089: E000         ; Contains the Equates used by the CP/M system
0090: E000
0091: E000         ;------------------------Page Zero Constants ---------------------------------
0092: E000             RAM        EQU    0                    ; Start of RAM ( and the Base page)
0093: E000
0094: E000             WarmBoot   EQU    RAM + 0              ; Contains a JMP instruction to warm boot in BIOS
0095: E000             BIOSPAGE   EQU    RAM + 2              ; BIOS Jump Vector Page
0096: E000             IOBYTE     EQU    RAM + 3              ; Input/Output redirection byte
0097: E000
0098: E000             Pg0CurentUser EQU    RAM + 4              ; Current user ( bits 7-4)
0099: E000             Pg0CurentDisk EQU    Pg0CurentUser        ; Default logical disk (bits 0-3)
0100: E000
0101: E000             BDOSE      EQU    RAM + 5              ; Contains a JMP to BDOS entry
0102: E000             TopRAM     EQU    BDOSE+2              ; Top page of usable RAM
0103: E000
0104: E000             FCB1       EQU    RAM + 05CH           ; File Control Block #1
0105: E000             FCB2       EQU    FCB1 + 16            ; File Control Block #2
0106: E000
0107: E000             ComTail    EQU    RAM + 080H           ; Complete command tail
0108: E000             ComTailCount EQU    ComTail              ; Count of the number of char in tail
0109: E000             ComTailChars EQU    ComTailCount + 1     ; Complete Command tail up-cased, w/o trailing CR
0110: E000         ;-----------------------------------------------------------------------
0111: E000
0112: E000             DMABuffer  EQU    RAM + 080H           ; Default "DMA" address used as buffer
0113: E000         ;-----------------------------------------------------------------------
0114: E000             TPA        EQU    RAM + 0100H          ; Start of Transient program Area
0115: E000         ;-----------------------------------------------------------------------
0116: E000             END_OF_FILE EQU    1AH                  ; end of file
0117: E000         ;-----------------------------------------------------------------------
0118: E000
0119: E000         ;--------------- CP/M Constants -----------------------------------------
0120: E000
0121: E000             CCPLength  EQU    0800H                ; Constant
0122: E000             BDOSLength EQU    0E00H                ; Constant 0E00H
0123: E000             BIOSLength EQU    0A00H                ; Constant 0900H
0124: E000
0125: E000             LengthInBytes EQU    CCPLength + BDOSLength + BIOSLength
0126: E000             LengthInK  EQU    (LengthInBytes/1024) + 1
0127: E000
0128: E000             MemorySize EQU    64
0129: E000
0130: E000             CCPEntry   EQU    (MemorySize * 1024) - LengthInBytes
0131: E000
0132: E000             BDOSBase   EQU    CCPEntry + CCPLength
0133: E000             BDOSEntry  EQU    BDOSBase
0134: E000
0135: E000             BIOSBase   EQU    BDOSBase + BDOSLength
0136: E000             BIOSStart  EQU    CCPEntry + CCPLength + BDOSLength
0137: E000         ;-----------------------------------------------------------------------
0138: E000
0139: E000         ;? ;------------------- BDOS System Call Equates --------------------------
0140: E000         ;? fConsoleIn			EQU		01H			; rcharf - Console Input
0141: E000         ;? fConsoleOut			EQU		02H			; pcharf - Console Output
0142: E000         ;? fPrintString		EQU		09H			; pbuff	- Print String
0143: E000         ;? fReadString			EQU		0AH			; rbuff	- Read Console String
0144: E000         ;? fGetConsoleStatus	EQU		0BH			; breakf - Get Console Status
0145: E000         ;? fGetVersion			EQU		0CH			; liftf	- Return Version Number
0146: E000         ;? fResetSystem		EQU		0DH			; initf	- Reset Disk System
0147: E000         ;? fSelectDisk			EQU		0EH			; self	- Select Disk
0148: E000         ;? fOpenFile			EQU		0FH			; openf	- Open File
0149: E000         ;? fCloseFile			EQU		10H			; closef - Close File
0150: E000         ;? fSearchFirst		EQU		11H			; searf	- Search For First
0151: E000         ;? fSearchNext			EQU		12H			; searnf - Search for Next
0152: E000         ;? fDeleteFile			EQU		13H			; delf - Delete File
0153: E000         ;? fReadSeq			EQU		14H			; dreadf - Read Sequential
0154: E000         ;? fWriteSeq			EQU		15H			; dwritf - Write Sequential
0155: E000         ;? fMakeFile			EQU		16H			; makef	- Make File
0156: E000         ;? fRenameFile			EQU		17H			; renf	- Rename File
0157: E000         ;? fGetLoginVector		EQU		18H			; logf	- Return Login Vector
0158: E000         ;? fGetCurrentDisk		EQU		19H			; cself	- Return Current Disk
0159: E000         ;? fSetDMA				EQU		1AH			; dmaf	- Set DMA address
0160: E000         ;? fGetSetUserNumber	EQU		20H			; userf	- Set/Get User Code
0161: E000         ;? ;-----------------------------------------------------------------------
0162: E000         ;?
0163: E000         ;?
0164: E000         ;?
0165: E000         ;?
0166: E000         ;?
0167: E000         ;? ;*******************************************************************************
0168: E000         ;? ; These are the values handed over by the BDOS when it calls the Writer operation
0169: E000         ;? ; The allocated.unallocated indicates whether the BDOS is set to write to an
0170: E000         ;? ; unallocated allocation block (it only indicates this for the first 128 byte
0171: E000         ;? ; sector write) or to an allocation block that has already been allocated to a
0172: E000         ;? ; file. The BDOS also indicates if it is set to write to the file directory
0173: E000         ;? ;*******************************************************************************
0174: E000         ;? WriteAllocated		EQU	00H
0175: E000         ;? WriteDirectory		EQU	01H
0176: E000         ;? WriteCleanBuffer	EQU	02H
0177: E000
0178: E000
0179: E000         ;<<<<<<<<<<<<<<<<<<<<<<< Include >>>>>>>>>>>>>>>>
0180: E000
0181: E000
0182: E000             BDOS       EQU    0005H                ; BDOS Vector in Page 00000
0183: E000
0184: E000             cpmRecordSize EQU    080H                 ; (128) record size that CP/M uses
0185: E000             fcbSystemFileIndex EQU    0AH                  ; extent number field index
0186: E000             FILE_NAME_SIZE EQU    08H                  ; Max size of file Name
0187: E000             FILE_TYPE_SIZE EQU    03H                  ; Max size of file Type
0188: E000
0189: E000         ;------------------- BDOS System Call Equates --------------------------
0190: E000             fConsoleIn EQU    01H                  ; Console Input
0191: E000             fConsoleOut EQU    02H                  ; Console Output
0192: E000             fPrintString EQU    09H                  ; Print String
0193: E000             fReadString EQU    0AH                  ; Read Console String
0194: E000             fGetConsoleStatus EQU    0BH                  ; Get Console Status
0195: E000             fGetVersion EQU    0CH                  ; Return Version Number
0196: E000             fResetSystem EQU    0DH                  ; Reset Disk System
0197: E000             fSelectDisk EQU    0EH                  ; Select Disk
0198: E000             fOpenFile  EQU    0FH                  ; Open File
0199: E000             fCloseFile EQU    10H                  ; Close File
0200: E000             fSearchFirst EQU    11H                  ; Search For First
0201: E000             fSearchNext EQU    12H                  ; Search for Next
0202: E000             fDeleteFile EQU    13H                  ; Delete File
0203: E000             fReadSeq   EQU    14H                  ; Read Sequential
0204: E000             fWriteSeq  EQU    15H                  ; Write Sequential
0205: E000             fMakeFile  EQU    16H                  ; Make File
0206: E000             fRenameFile EQU    17H                  ; Rename File
0207: E000             fGetLoginVector EQU    18H                  ; Return Login Vector
0208: E000             fGetCurrentDisk EQU    19H                  ; Return Current Disk
0209: E000             fSetDMA    EQU    1AH                  ; Set DMA address
0210: E000             fGetSetUserNumber EQU    20H                  ; Set/Get User Code
0211: E000         ;-----------------------------------------------------------------------
0212: E000
0213: E000
0214: E000                        ORG    CCPEntry
0215: E000             CcpBoundary EQU    $
0216: E000         ;========================== CCP Entry ======================================;
0217: E000
0218: E000         ;	JP		CcpStart						;start CCP with possible initial command
0219: E000         ;*****************************************************************
0220: E000         ;enter here from boot loader
0221: E000         ; On Entry	C(HiNibble) = User Number
0222: E000         ;			C(LoNibble) = Disk (0=A, 1=B...F=P)
0223: E000             CcpStart:
0224: E000 31 F0 E7               LD     SP,Stack             ; Set CCP's Stack
0225: E003 C5                     PUSH   BC                   ; Save Disk Number
0226: E004 59                     LD     E,C                  ; Get User Number
0227: E005 CB 3B                  SRL    E
0228: E007 CB 3B                  SRL    E                    ; Move user number
0229: E009 CB 3B                  SRL    E                    ;  to Lo Nibble
0230: E00B CB 3B                  SRL    E
0231: E00D CD 26 E6               CALL   SetUser              ; Set initial User
0232: E010         ; Initialize will completely reset the disk file system
0233: E010 CD E5 E5               CALL   Initialize           ; A = 0FFH if Submit file found
0234: E013 32 9D E2               LD     (submitFlag),A       ; Save return value in Flag
0235: E016 C1                     POP    BC                   ; Recall disk number
0236: E017 79                     LD     A,C                  ; Put into Acc
0237: E018 E6 0F                  AND    LO_NIBBLE_MASK       ; Remove User Number
0238: E01A 32 04 00               LD     (Pg0CurentDisk),A    ; Puts disk number into Page 0
0239: E01D CD EA E5               CALL   SelectDisk           ; Set default Disk From Acc
0240: E020 3A 1A E2               LD     A,(commandLength)    ; check for initial command
0241: E023 B7                     OR     A                    ; See if there is a Command
0242: E024 20 16                  JR     NZ,CcpParseCommand   ;  Skip if yes
0243: E026
0244: E026             ccpMainEntry:
0245: E026 31 F0 E7               LD     SP,Stack             ; (re)Establish CCP's Stack
0246: E029 CD 42 E6               CALL   PrintCrLf            ; Send CRLF to the Console
0247: E02C CD 1F E6               CALL   GetSelectedDrive     ; Get current disk number
0248: E02F C6 41                  ADD    A,ASCII_A            ; Make ASCII form of Drive
0249: E031 CD 37 E6               CALL   PrintCharInA         ; Send Drive letter to console
0250: E034 3E 3E                  LD     A,GREATER_THAN       ; Load '>'
0251: E036 CD 37 E6               CALL   PrintCharInA         ; Send to Console
0252: E039 CD 65 E0               CALL   ReadCommand          ; Command Buffer filled, Pointer set
0253: E03C
0254: E03C             CcpParseCommand:
0255: E03C 11 80 00               LD     DE,DMABuffer         ; Default in page 0
0256: E03F CD 1A E6               CALL   SetDMA               ; Set the DMA address
0257: E042 CD 1F E6               CALL   GetSelectedDrive     ; Get current drive
0258: E045 32 23 E7               LD     (currentDisk),A      ; Save
0259: E048 CD 21 E1               CALL   ParseToken1          ; Get first token in command buffer
0260: E04B C4 F5 E1               CALL   NZ,CommandError      ; The name must be unambiguous
0261: E04E 3A 20 E7               LD     A,(selectedDisk)     ; Get the Disk:
0262: E051 B7                     OR     A                    ; If not default,
0263: E052 C2 0C E5               JP     NZ,ccpUserCommand    ;   must be user CMD
0264: E055
0265: E055 CD D0 E1               CALL   IntrinsicFunction    ; Get CMD index into ACC
0266: E058 21 D8 E2               LD     HL,builtInCMDVector  ; Base of Vector
0267: E05B 5F                     LD     E,A
0268: E05C 16 00                  LD     D,0                  ; Index in DE
0269: E05E 19                     ADD    HL,DE
0270: E05F 19                     ADD    HL,DE                ; Vector is a word, need 2 ADDs
0271: E060 7E                     LD     A,(HL)               ; Pointing at Address
0272: E061 23                     INC    HL
0273: E062 66                     LD     H,(HL)
0274: E063 6F                     LD     L,A                  ; Get address to HL
0275: E064 E9                     JP     (HL)                 ;  Go to the Function
0276: E065
0277: E065
0278: E065         ;------------------------------ Read Command -------------------------------;
0279: E065         ;
0280: E065         ;read the next command into the command buffer								;
0281: E065         ;check for submit file														;
0282: E065             ReadCommand:                      ;
0283: E065 3A 9D E2               LD     A,(submitFlag)       ; Get the Submit File Flag			;
0284: E068 B7                     OR     A                    ; Is it Set ?						;
0285: E069 28 54                  JR     Z,NotSubmitFile      ;  skip if not						;
0286: E06B         ; scanning a submit file change drives to open and read the file			;
0287: E06B 3A 23 E7               LD     A,(currentDisk)      ; Get current disk					;
0288: E06E B7                     OR     A                    ; Is it default ?					;
0289: E06F 3E 00                  LD     A,0                  ; Prepare to set Disk A				;
0290: E071 C4 EA E5               CALL   NZ,SelectDisk        ; Select it if needed				;
0291: E074         ; have to open again in case xsub present									;
0292: E074 11 9E E2               LD     DE,submitFCB         ; Point at the Submits's FCB		;
0293: E077 CD F0 E5               CALL   OpenFile             ; Open it							;
0294: E07A 28 43                  JR     Z,NotSubmitFile      ; Skip if no submit file present	;
0295: E07C 3A AE E2               LD     A,(submitRC)         ; Get Number of records in file		;
0296: E07F 3D                     DEC    A                    ; read last record(s) first		;
0297: E080 32 BF E2               LD     (submitCR),A         ; current record to read			;
0298: E083 11 9E E2               LD     DE,submitFCB         ; Point at the Submits's FCB		;
0299: E086 CD FA E5               CALL   DiskRead             ; Read from back to front			;
0300: E089 20 34                  JR     NZ,NotSubmitFile     ; Skip EOF ??						;
0301: E08B         ;
0302: E08B         ; disk read is OK, transfer to commandBuffer								;
0303: E08B 21 80 00               LD     HL,DMABuffer         ; From								;
0304: E08E 11 1A E2               LD     DE,commandLength     ; TO								;
0305: E091 01 80 00               LD     BC,cpmRecordSize     ; For this many bytes				;
0306: E094 ED B0                  LDIR                        ; Move to command buffer			;
0307: E096         ;
0308: E096         ; line is transferred, close the file with a deleted record					;
0309: E096 21 AD E2               LD     HL,submitFWF         ; Point at the WriteFileFlag		;
0310: E099 CB BE                  RES    7,(HL)               ; Clear the WriteFileFlag					;
0311: E09B         ;	LD		HL,submitFWF				; Bit 7 is FileWriteFlag			;
0312: E09B         ;	LD		(HL),0															;
0313: E09B         ;	INC		HL																;
0314: E09B 21 AE E2               LD     HL,submitRC          ; Point at FCB record Count			;
0315: E09E 35                     DEC    M                    ; Make it one less record			;
0316: E09F 11 9E E2               LD     DE,submitFCB         ; Point at the Submits's FCB		;
0317: E0A2 CD F5 E5               CALL   CloseFile            ; Close it							;
0318: E0A5 28 18                  JR     Z,NotSubmitFile      ; Skip if not clean close			;
0319: E0A7         ; CloseFile went ok, return to original drive								;
0320: E0A7 3A 23 E7               LD     A,(currentDisk)      ; Get the current disk				;
0321: E0AA B7                     OR     A                    ; Is it the default disk ?			;
0322: E0AB C4 EA E5               CALL   NZ,SelectDisk        ;  no, then go select it			;
0323: E0AE         ; print to the 00															;
0324: E0AE 21 1B E2               LD     HL,commandBuffer     ; Point at the command buffer		;
0325: E0B1 CD 58 E6               CALL   PrintStringNull      ; Display it on the Console			;
0326: E0B4 CD 70 E6               CALL   CheckForConsoleChar  ; User input a character ?			;
0327: E0B7 28 17                  JR     Z,NoRead             ;  skip if not						;
0328: E0B9 CD EE E0               CALL   DeleteSubmitFile     ; Remove file and reset submit flag ;
0329: E0BC C3 26 E0               JP     ccpMainEntry         ; Start a new CCP session			;
0330: E0BF         ;   ---		------------				;-----------------------------------;
0331: E0BF             NotSubmitFile:                      ;
0332: E0BF CD EE E0               CALL   DeleteSubmitFile     ; Delete any submit file			;
0333: E0C2 CD 06 E1               CALL   SaveUserAndDisk      ; Save User & Disk to page 0		;
0334: E0C5 11 19 E2               LD     DE,commandMaxLength  ; Point to Start of Buffer			;
0335: E0C8 0E 0A                  LD     C,fReadString        ; Load Function Number				;
0336: E0CA CD 05 00               CALL   BDOS                 ;  and let BDOS do its work			;
0337: E0CD CD 15 E1               CALL   SetPage0CurDisk      ; No Cntl C, so restore Pg0CurentDis;
0338: E0D0         ;
0339: E0D0             NoRead:                         ;
0340: E0D0         ; set the last character to zero for later scans							;
0341: E0D0 21 1A E2               LD     HL,commandLength     ; Point to length of command		;
0342: E0D3 46                     LD     B,(HL)               ; Put it into B						;
0343: E0D4             UpCaseLoop:                      ;
0344: E0D4 23                     INC    HL                   ; Point at next byte in buffer		;
0345: E0D5 7E                     LD     A,(HL)               ; Get the Character					;
0346: E0D6 CD E5 E0               CALL   UpCase               ; If between a-z, up-case it		;
0347: E0D9 77                     LD     (HL),A               ; Replace character					;
0348: E0DA 10 F8                  DJNZ   UpCaseLoop           ; go thru all of the CMD buffer		;
0349: E0DC         ;end of scan, h,l address end of command									;
0350: E0DC         ;ReadCommand2:																;
0351: E0DC 23                     INC    HL                   ; Point at last char + 1			;
0352: E0DD 70                     LD     (HL),B               ; Stuff Zero to terminate the CMD   ;
0353: E0DE 21 1B E2               LD     HL,commandBuffer     ; go back to start of com			;
0354: E0E1 22 9B E2               LD     (commandBufferPointer),HL ; Place in current CMD address		;
0355: E0E4 C9                     RET                         ;
0356: E0E5         ;------------------------------ Read Command -------------------------------;
0357: E0E5
0358: E0E5         ;--------------------------------- UpCase ----------------------------------;
0359: E0E5         ;convert character in register A (a to z) to upper case						;
0360: E0E5             UpCase:                         ;
0361: E0E5 FE 61                  CP     061H                 ;
0362: E0E7 D8                     RET    C                    ; Return if below lower case 'a'	;
0363: E0E8 FE 7B                  CP     07BH                 ;
0364: E0EA D0                     RET    NC                   ; Return if above lower case 'z'	;
0365: E0EB E6 5F                  AND    05FH                 ; Drop bit 5/ makes q->Q etc		;
0366: E0ED C9                     RET                         ;
0367: E0EE         ;--------------------------------- UpCase ----------------------------------;
0368: E0EE         ;---------------------------- Delete SubmitFile ----------------------------;
0369: E0EE         ;delete the submit file, and set submit flag to false						;
0370: E0EE             DeleteSubmitFile:                      ;
0371: E0EE 21 9D E2               LD     HL,submitFlag        ; Point at Submit flag				;
0372: E0F1 7E                     LD     A,(HL)               ; Get the Flag						;
0373: E0F2 B7                     OR     A                    ; Is it Set ?						;
0374: E0F3 C8                     RET    Z                    ;  return if not set				;
0375: E0F4 36 00                  LD     (HL),0               ; Clear Flag						;
0376: E0F6 AF                     XOR    A                    ; Drive 0 = A:						;
0377: E0F7 CD EA E5               CALL   SelectDisk           ; Select drive						;
0378: E0FA 11 9E E2               LD     DE,submitFCB         ; Load the submits FCB				;
0379: E0FD CD 01 E6               CALL   DeleteFile           ; Go delete it						;
0380: E100 3A 23 E7               LD     A,(currentDisk)      ; Determine the current disk		;
0381: E103 C3 EA E5               JP     SelectDisk           ; Reselect back to original drive   ;
0382: E106         ;---------------------------- Delete SubmitFile ----------------------------;
0383: E106         ;-------------------------------- Save User --------------------------------;
0384: E106         ;save user#/disk# before possible ^c or transient							;
0385: E106             SaveUserAndDisk:                      ;
0386: E106 CD 24 E6               CALL   GetUser              ; Get the user number into Acc		;
0387: E109 87                     ADD    A,A                  ;
0388: E10A 87                     ADD    A,A                  ;
0389: E10B 87                     ADD    A,A                  ;
0390: E10C 87                     ADD    A,A                  ; Move user to Hi Nibble			;
0391: E10D 21 23 E7               LD     HL,currentDisk       ; Current disk (Lo Nibble)			;
0392: E110 B6                     OR     M                    ; Acc -> User & Disk				;
0393: E111 32 04 00               LD     (Pg0CurentDisk),A    ; Stored in Page0 for later			;
0394: E114 C9                     RET                         ;
0395: E115         ;-------------------------------- Save User --------------------------------;
0396: E115         ;------------------------- Set Page 0 Current Disk -------------------------;
0397: E115         ;set Pg0CurentDisk to current disk											;
0398: E115             SetPage0CurDisk:                      ;
0399: E115 3A 23 E7               LD     A,(currentDisk)      ; Get CCP's current disk			;
0400: E118 32 04 00               LD     (Pg0CurentDisk),A    ; Put into Page 0					;
0401: E11B C9                     RET                         ;
0402: E11C         ;------------------------- Set Page 0 Current Disk -------------------------;
0403: E11C
0404: E11C         ;--------------------------------- Parse Token -----------------------------;
0405: E11C         ; Parse command buffer.														;
0406: E11C         ; Used to isolate the command												;
0407: E11C         ;
0408: E11C             ParseToken2:                      ;
0409: E11C 21 0F E7               LD     HL,Token2            ; Point at Token2 start				;
0410: E11F 18 03                  JR     ParseToken           ;
0411: E121             ParseToken1:                      ;
0412: E121 21 FF E6               LD     HL,Token1            ; Point at Token1 start				;
0413: E124             ParseToken:                      ;
0414: E124 E5                     PUSH   HL                   ; Start of Token's Pointer			;
0415: E125 E5                     PUSH   HL                   ; Start of Token's Pointer			;
0416: E126 AF                     XOR    A                    ; Set A to 0						;
0417: E127 32 20 E7               LD     (selectedDisk),A     ; Assume default disk				;
0418: E12A 2A 9B E2               LD     HL,(commandBufferPointer) ; Buffer's Pointer					;
0419: E12D CD A8 E1               CALL   NextNonBlankChar     ; Get printable character			;
0420: E130 22 21 E7               LD     (tokenStart),HL      ; Save token's address				;
0421: E133 EB                     EX     DE,HL                ; DE -> Buffer						;
0422: E134 E1                     POP    HL                   ; DE -> Buffer,						;
0423: E135         ;  HL -> Start of Token's Pointer   ;
0424: E135         ; Disk ?																	;
0425: E135 1A                     LD     A,(DE)               ; Get 1st character from buffer		;
0426: E136 B7                     OR     A                    ; Is it the default Disk ?			;
0427: E137 28 0A                  JR     Z,UseCurrentDisk     ; Use current disk if empty			;
0428: E139 DE 40                  SBC    A,040H               ; Convert to number					;
0429: E13B 47                     LD     B,A                  ; Hold disk number in B				;
0430: E13C 13                     INC    DE                   ;
0431: E13D 1A                     LD     A,(DE)               ; Look at next character			;
0432: E13E FE 3A                  CP     COLON                ; Is it a ':' ?						;
0433: E140 28 08                  JR     Z,UseTokensDisk      ;  if yes, set disk number			;
0434: E142         ; No Disk																	;
0435: E142 1B                     DEC    DE                   ; Back to start of buffer			;
0436: E143         ;
0437: E143             UseCurrentDisk:                      ;
0438: E143 3A 23 E7               LD     A,(currentDisk)      ; Get current Disk					;
0439: E146 77                     LD     (HL),A               ; Put into the Token				;
0440: E147 C3 50 E1               JP     SetFileName          ;
0441: E14A         ;
0442: E14A             UseTokensDisk:                      ;
0443: E14A 78                     LD     A,B                  ; Get disk from this parse			;
0444: E14B 32 20 E7               LD     (selectedDisk),A     ; Mark as disk selected				;
0445: E14E 70                     LD     (HL),B               ; Put it into the token				;
0446: E14F 13                     INC    DE                   ; Move past the ':'					;
0447: E150         ;
0448: E150             SetFileName:                      ;
0449: E150 06 08                  LD     B,FILE_NAME_SIZE     ; File name length (max)			;
0450: E152 CD 78 E1               CALL   FormatElement        ; Format file name					;
0451: E155         ;
0452: E155             SetType:                        ;
0453: E155 06 03                  LD     B,FILE_TYPE_SIZE     ; File type length (max)			;
0454: E157 CD 95 E1               CALL   IsItDot              ; is it a '.' ?						;
0455: E15A CC 78 E1               CALL   Z,FormatElement      ;  Yes,Format it					;
0456: E15D         ;
0457: E15D         ; Zero Rest of token														;
0458: E15D 06 03                  LD     B,3                  ;
0459: E15F AF                     XOR    A                    ;
0460: E160 CD A3 E1               CALL   FillWithAcc          ;
0461: E163 EB                     EX     DE,HL                ;
0462: E164 22 9B E2               LD     (commandBufferPointer),HL ; Set new starting point			;
0463: E167         ; Recover the start address of the FCB and count ?'s						;
0464: E167 E1                     POP    HL                   ; Restore start of Token			;
0465: E168 06 0B                  LD     B,FILE_NAME_SIZE+FILE_TYPE_SIZE ; Loop size					;
0466: E16A 0E 00                  LD     C,00                 ; Counter							;
0467: E16C 3E 3F                  LD     A,QMARK              ; We want to count '?'s				;
0468: E16E             QuestionMarkCount:                      ;
0469: E16E 23                     INC    HL                   ; Adjust token pointer				;
0470: E16F BE                     CP     (HL)                 ; Is it a '?'						;
0471: E170 20 01                  JR     NZ,QuestionMarkCount1 ;  no, then skip					;
0472: E172 0C                     INC    C                    ;  else increment the count			;
0473: E173             QuestionMarkCount1:                      ;
0474: E173 10 F9                  DJNZ   QuestionMarkCount    ; Manage the Loop					;
0475: E175 79                     LD     A,C                  ;
0476: E176 B7                     OR     A                    ;
0477: E177 C9                     RET                         ;
0478: E178         ;-------------------------------- Parse Token ------------------------------;
0479: E178         ;------------------------------- Format Element ----------------------------;
0480: E178         ; Put element in a Left Justified, Space Padded field.						;
0481: E178         ; If it encounters an asterisk, it will pad the rest of the field with '?'s ;
0482: E178         ; Enter With:	B  = Element size											;
0483: E178         ;				DE = Element source											;
0484: E178         ;				HL = Element destination									;
0485: E178             FormatElement:                      ;
0486: E178 CD B1 E1               CALL   IsItADelimiter       ; Is character a delimiter ?		;
0487: E17B 28 14                  JR     Z,PadTheElement      ;  yes, pad rest of Element			;
0488: E17D         ;
0489: E17D 23                     INC    HL                   ;  else move the Token's pointer	;
0490: E17E FE 2A                  CP     ASTERISK             ; Is it an '*'						;
0491: E180 20 04                  JR     NZ,FormatElement1    ;  no, then just put in Token   ;
0492: E182 36 3F                  LD     (HL),QMARK           ;  else Put a '?' in token			;
0493: E184 18 02                  JR     FormatElement2       ;  for rest of Element				;
0494: E186         ;
0495: E186             FormatElement1:                      ;
0496: E186 77                     LD     (HL),A               ; Put character in token			;
0497: E187 13                     INC    DE                   ; Increment the buffer pointer		;
0498: E188             FormatElement2:                      ;
0499: E188 10 EE                  DJNZ   FormatElement        ; Loop if more						;
0500: E18A         ;
0501: E18A             TruncateElement:                      ;
0502: E18A CD B1 E1               CALL   IsItADelimiter       ; We expect a delimiter				;
0503: E18D C8                     RET    Z                    ; If we get one, we are done		;
0504: E18E 13                     INC    DE                   ;  skip forward in buffer			;
0505: E18F 18 F9                  JR     TruncateElement      ; Keep looking for delimiter		;
0506: E191         ;
0507: E191             PadTheElement:                      ;
0508: E191 CD A1 E1               CALL   FillWithSpace        ; Pad the rest of Element			;
0509: E194 C9                     RET                         ;
0510: E195         ;------------------------------- Format Element ----------------------------;
0511: E195         ;-------------------------------- Is It a Dot ------------------------------;
0512: E195         ; Check to see if char is buffer is a period. If it is it returns with		;
0513: E195         ; the Z-Flag set., and the DE pointer advanced beyond the '.'.  If it is	;
0514: E195         ; not a period. It will fill the buffer with spaces and return with the		;
0515: E195         ; Z-Flag reset.																;
0516: E195         ;																			;
0517: E195         ; Enter With:	DE = Pointer for buffer										;
0518: E195         ;					B = buffer size											;
0519: E195         ; Return With:	DE = Past the period										;
0520: E195         ;				Z-Flag =  set if Period										;
0521: E195         ; 				Z-Flag = reset if not Period								;
0522: E195             IsItDot:                        ;
0523: E195 1A                     LD     A,(DE)               ;
0524: E196 13                     INC    DE                   ; Assume it is a '.'				;
0525: E197 FE 2E                  CP     PERIOD               ; Is it '.' ?						;
0526: E199 C8                     RET    Z                    ;  if yes exit with Z-Flag set		;
0527: E19A         ;
0528: E19A 1B                     DEC    DE                   ; Adjust, wrong assumption			;
0529: E19B CD A1 E1               CALL   FillWithSpace        ;  else make all spaces				;
0530: E19E AF                     XOR    A                    ;
0531: E19F 3C                     INC    A                    ; Reset the Z-Flag					;
0532: E1A0 C9                     RET                         ; Exit with Z-Flag reset			;
0533: E1A1         ;-------------------------------- Is It a Dot ------------------------------;
0534: E1A1         ;-------------------------- Fill With Space/Acc ----------------------------;
0535: E1A1         ; fills buffer with SPACE or contents of Acc.								;
0536: E1A1         ; Enters with:	HL = less than start of fill area							;
0537: E1A1         ;				B  = fill Count												;
0538: E1A1         ;				A  = fill character (FillWithAcc)							;
0539: E1A1             FillWithSpace:                      ;
0540: E1A1 3E 20                  LD     A,SPACE              ;
0541: E1A3             FillWithAcc:                      ;
0542: E1A3 23                     INC    HL                   ;
0543: E1A4 77                     LD     (HL),A               ;
0544: E1A5 10 FC                  DJNZ   FillWithAcc          ;
0545: E1A7 C9                     RET                         ;
0546: E1A8         ;-------------------------- Fill With Space/Acc ----------------------------;
0547: E1A8         ;------------------------ Next Non Blank Character -------------------------;
0548: E1A8         ;find the next non blank character in line pointed to by DE					;
0549: E1A8             NextNonBlankChar:                      ;
0550: E1A8 7E                     LD     A,(HL)               ; Get the character					;
0551: E1A9 B7                     OR     A                    ; Is it End of buffer ?				;
0552: E1AA C8                     RET    Z                    ;  if yes, return					;
0553: E1AB FE 20                  CP     SPACE                ; is it a blank ?					;
0554: E1AD C0                     RET    NZ                   ;  if not, return					;
0555: E1AE 23                     INC    HL                   ;  else increment pointer			;
0556: E1AF 18 F7                  JR     NextNonBlankChar     ; Loop for next character			;
0557: E1B1         ;------------------------ Next Non Blank Character -------------------------;
0558: E1B1         ;---------------------------- Is It A Delimiter ----------------------------;
0559: E1B1         ; Returns with Z-flag set if (DE) pointing at a delimiter					;
0560: E1B1         ; Does an error exit if not valid ASCII character							;
0561: E1B1             IsItADelimiter:                      ;
0562: E1B1 1A                     LD     A,(DE)               ; Get the character					;
0563: E1B2 B7                     OR     A                    ;
0564: E1B3 C8                     RET    Z                    ; End of Buffer is a delimiter		;
0565: E1B4 FE 20                  CP     SPACE                ;
0566: E1B6 DA F5 E1               JP     C,CommandError       ; Error exit if not ASCII			;
0567: E1B9 C8                     RET    Z                    ; SPACE is a delimiter				;
0568: E1BA FE 3D                  CP     EQUAL_SIGN           ;
0569: E1BC C8                     RET    Z                    ; '=' is a delimiter				;
0570: E1BD FE 5F                  CP     UNDER_SCORE          ;
0571: E1BF C8                     RET    Z                    ; '_' is a delimiter				;
0572: E1C0 FE 2E                  CP     PERIOD               ;
0573: E1C2 C8                     RET    Z                    ; '.' is a delimiter				;
0574: E1C3 FE 3A                  CP     COLON                ;
0575: E1C5 C8                     RET    Z                    ; ':' is a delimiter				;
0576: E1C6 FE 3B                  CP     SEMICOLON            ;
0577: E1C8 C8                     RET    Z                    ; ';' is a delimiter				;
0578: E1C9 FE 3C                  CP     LESS_THAN            ;
0579: E1CB C8                     RET    Z                    ; '<' is a delimiter				;
0580: E1CC FE 3E                  CP     GREATER_THAN         ;
0581: E1CE C8                     RET    Z                    ; '>' is a delimiter				;
0582: E1CF C9                     RET                         ; Not a delimiter					;
0583: E1D0         ;---------------------------- Is It A Delimiter ----------------------------;
0584: E1D0
0585: E1D0         ;---------------------------- Intrinsic Function ---------------------------;
0586: E1D0         ;look for intrinsic functions (Token1 has been filled)						;
0587: E1D0             IntrinsicFunction:                      ;
0588: E1D0 21 C0 E2               LD     HL,builtInCMDNames   ; Point at List of CMDs				;
0589: E1D3 0E 00                  LD     C,0                  ; Initialize counter				;
0590: E1D5             IntrinsicFunction1:                      ;
0591: E1D5 79                     LD     A,C                  ; Get Counter						;
0592: E1D6 FE 06                  CP     builtInCMDCount      ; Past number of commands ?			;
0593: E1D8 D0                     RET    NC                   ;  exit if yes						;
0594: E1D9 11 00 E7               LD     DE,Token1+1          ; Beginning of name						;
0595: E1DC 06 04                  LD     B,builtInCMDNameSize ; Length of match					;
0596: E1DE             IntrinsicFunction2:                      ;
0597: E1DE 1A                     LD     A,(DE)               ;
0598: E1DF BE                     CP     M                    ; Is there a match ?				;
0599: E1E0 20 0C                  JR     NZ,IntrinsicFunction3 ;  skip if no match					;
0600: E1E2 13                     INC    DE                   ;
0601: E1E3 23                     INC    HL                   ; Point at next characters			;
0602: E1E4 05                     DEC    B                    ; Decrement the counter				;
0603: E1E5 20 F7                  JR     NZ,IntrinsicFunction2 ; Loop while matching				;
0604: E1E7         ; complete match on name, check for blank in FCB							;
0605: E1E7 1A                     LD     A,(DE)               ;
0606: E1E8 FE 20                  CP     SPACE                ; Blank in CMD ?					;
0607: E1EA 20 06                  JR     NZ,IntrinsicFunction4 ;  No ,then no match				;
0608: E1EC 79                     LD     A,C                  ;  Else they match,					;
0609: E1ED C9                     RET                         ; Return with index in A			;
0610: E1EE         ;
0611: E1EE             IntrinsicFunction3:                      ;
0612: E1EE 23                     INC    HL                   ; Move to next in list				;
0613: E1EF 05                     DEC    B                    ;
0614: E1F0 20 FC                  JR     NZ,IntrinsicFunction3 ; Loop thru this one				;
0615: E1F2         ;
0616: E1F2             IntrinsicFunction4:                      ;
0617: E1F2 0C                     INC    C                    ; Update the index					;
0618: E1F3 18 E0                  JR     IntrinsicFunction1   ;  loop for another round			;
0619: E1F5         ;---------------------------- Intrinsic Function ---------------------------;
0620: E1F5
0621: E1F5         ; cmd
0622: E1F5         ;------------------------------ Command Error ------------------------------;
0623: E1F5         ;error in command string starting at position;'tokenStart' and ending 		;
0624: E1F5         ; with first delimiter														;
0625: E1F5         ;
0626: E1F5             CommandError:                      ;
0627: E1F5 CD 42 E6               CALL   PrintCrLf            ; Next Line						;
0628: E1F8 2A 21 E7               LD     HL,(tokenStart)      ; Start of error token					;
0629: E1FB             CommandErrorLoop:                      ;
0630: E1FB 7E                     LD     A,(HL)               ; Get character						;
0631: E1FC FE 20                  CP     SPACE                ; Past offending token ?			;
0632: E1FE 28 0B                  JR     Z,CommandErrorExit   ;  done if yes						;
0633: E200 B7                     OR     A                    ; At end of command ?				;
0634: E201 28 08                  JR     Z,CommandErrorExit   ;  done if yes						;
0635: E203 E5                     PUSH   HL                   ; Save pointer						;
0636: E204 CD 37 E6               CALL   PrintCharInA         ; Display on console				;
0637: E207 E1                     POP    HL                   ; Restore pointer					;
0638: E208 23                     INC    HL                   ; Update it							;
0639: E209 18 F0                  JR     CommandErrorLoop     ; Keep going						;
0640: E20B         ;
0641: E20B             CommandErrorExit:                      ;
0642: E20B 3E 3F                  LD     A,QMARK              ;
0643: E20D CD 37 E6               CALL   PrintCharInA         ; Send '?' to console				;
0644: E210 CD 42 E6               CALL   PrintCrLf            ; Next Line						;
0645: E213 CD EE E0               CALL   DeleteSubmitFile     ; Remove any submit file			;
0646: E216 C3 26 E0               JP     ccpMainEntry         ; Go back for another command		;
0647: E219         ;------------------------------ Command Error ------------------------------;
0648: E219
0649: E219         ;------------------------------ Command Buffer -----------------------------;
0650: E219             maximumBufferSize EQU    07FH                 ; Max Length of Buffer			;
0651: E219 7F          commandMaxLength: DB     maximumBufferSize    ;
0652: E21A 00          commandLength: DB     00H                  ; Actual size of input			;
0653: E21B             commandBuffer: DS     maximumBufferSize + 1 ; The Command Buffer			;
0654: E29B         ;
0655: E29B 1B E2       commandBufferPointer: DW     commandBuffer        ; Address of next to char		;
0656: E29D         ;------------------------------ Command Buffer -----------------------------;
0657: E29D         ;------------------------- Submit File Control Block -----------------------;
0658: E29D         ;																			;
0659: E29D 00          submitFlag: DB     00H                  ; 00 if no submit file,				;
0660: E29E         ;  0FFH if submitting				;
0661: E29E 24 24 24 09 09     submitFCB: DB     '$$$		'              ; File name is $$$				;
0662: E2A3 53 55 42 20 20 20 20 20     submitType: DB     'SUB     '           ; Type is 'SUB'						;
0663: E2AB 00          submitExtent: DB     00H                  ; Extent							;
0664: E2AC 00          submitS1:  DB     00H                  ; S1								;
0665: E2AD             submitFWF:                      ; Bit7 = FileWriteFlag				;
0666: E2AD 00          submitS2:  DB     00H                  ; S2 (bit7 = FileWriteFlag)			;
0667: E2AE 00          submitRC:  DB     00H                  ; RC								;
0668: E2AF             submitMap: DS     010H                 ; Allocation Map					;
0669: E2BF 00          submitCR:  DB     00H                  ; Current Record					;
0670: E2C0         ;------------------------- Submit File Control Block -----------------------;
0671: E2C0         ;--------------------------- Built In Command Data -------------------------;
0672: E2C0         ;intrinsic function names four characters each								;
0673: E2C0             builtInCMDNameSize EQU    04                   ; Size of intrinsic function names  ;
0674: E2C0         ;
0675: E2C0             builtInCMDNames:                      ;
0676: E2C0 44 49 52 20                DB     'DIR '               ;
0677: E2C4 45 52 41 20                DB     'ERA '               ;
0678: E2C8 54 59 50 45                DB     'TYPE'               ;
0679: E2CC 53 41 56 45                DB     'SAVE'               ;
0680: E2D0 52 45 4E 20                DB     'REN '               ;
0681: E2D4 55 53 45 52                DB     'USER'               ;
0682: E2D8             builtInCMDCount EQU    (($-builtInCMDNames)/builtInCMDNameSize) + 1 ;
0683: E2D8         ;
0684: E2D8             builtInCMDVector:                      ;
0685: E2D8 E6 E2                  DW     ccpDirectory         ; Directory List					;
0686: E2DA 79 E3                  DW     ccpErase             ; File erase						;
0687: E2DC A9 E4                  DW     ccpType              ; Type file on Console				;
0688: E2DE 2B E4                  DW     ccpSave              ; Save memory image					;
0689: E2E0 B6 E3                  DW     ccpRename            ; File rename						;
0690: E2E2 F5 E4                  DW     ccpUser              ; User number						;
0691: E2E4 0C E5                  DW     ccpUserCommand       ; User-defined function				;
0692: E2E6         ;
0693: E2E6         ;--------------------------- Built In Command Data -------------------------;
0694: E2E6
0695: E2E6         ;===========================================================================;
0696: E2E6         ;============================== CCP Commands ===============================;
0697: E2E6         ;===========================================================================;
0698: E2E6
0699: E2E6         ;----------------------------- Directory Listing ---------------------------;
0700: E2E6         ; SYNTAX: DIR afn															;
0701: E2E6         ;																			;
0702: E2E6         ;  The 'DIR' command causes the names of all the files that satisfy the		;
0703: E2E6         ; ambiguous filename afn to be listed on the console device					;
0704: E2E6         ;																			;
0705: E2E6             ccpDirectory:                      ;
0706: E2E6 CD 21 E1               CALL   ParseToken1          ; Token1 gets file name				;
0707: E2E9 CD 7E E6               CALL   SetDiskForCmd        ; Change disk if needed				;
0708: E2EC 21 00 E7               LD     HL,Token1+1          ; Point at 1st char of parameter	;
0709: E2EF 7E                     LD     A,(HL)               ; Get the value						;
0710: E2F0 FE 20                  CP     SPACE                ; Is it Blank ?						;
0711: E2F2 20 07                  JR     NZ,ccpDirQualified   ;  skip there is a parameter		;
0712: E2F4         ;
0713: E2F4         ; set Token1 to all ??? for current disk									;
0714: E2F4 06 0B                  LD     B,FILE_NAME_SIZE+FILE_TYPE_SIZE ; Set Limit					;
0715: E2F6             ccpDirAll:                      ;
0716: E2F6 36 3F                  LD     (HL),QMARK           ; Put '?' in Token					;
0717: E2F8 23                     INC    HL                   ; Increment pointer					;
0718: E2F9 10 FB                  DJNZ   ccpDirAll            ; Loop till done					;
0719: E2FB         ;
0720: E2FB             ccpDirQualified:                      ;
0721: E2FB AF                     XOR    A                    ; Set Acc to 0						;
0722: E2FC 32 77 E3               LD     (dirFileCount),A     ; Initialize File Count				;
0723: E2FF         ;	LD		(dirCharCount),A			; Initialize char count				;
0724: E2FF CD E5 E6               CALL   FindFirstToken1File  ; Look for directory entry			;
0725: E302 CC 63 E6               CALL   Z,PrintNoFile        ;  if not found send message		;
0726: E305         ;
0727: E305             ccpDirLoopTop:                      ;
0728: E305 28 6D                  JR     Z,ccpDirEnd          ; Exit if directory exhausted		;
0729: E307         ; found, but may be system file												;
0730: E307 3A 24 E7               LD     A,(directoryEntryNumber) ; Get directory entry number		;
0731: E30A 0F                     RRCA                        ;
0732: E30B 0F                     RRCA                        ;
0733: E30C 0F                     RRCA                        ; Multiply by 20H					;
0734: E30D 4F                     LD     C,A                  ;
0735: E30E 06 00                  LD     B,0                  ; BC has index into Dir Buffer		;
0736: E310 DD 21 80 00               LD     IX,DMABuffer         ;
0737: E314 DD 09                  ADD    IX,BC                ; IX Points at the Dir Entry		;
0738: E316 DD CB 0A 7E               BIT    7,(IX+fcbSystemFileIndex) ; Is this a System File				;
0739: E31A 20 4C                  JR     NZ,ccpDirLoopBottom  ;  if yes, Skip to next iteration   ;
0740: E31C         ;
0741: E31C DD E5                  PUSH   IX                   ; IX Points at the Dir Entry		;
0742: E31E AF                     XOR    A                    ;
0743: E31F 32 78 E3               LD     (dirCharCount),A     ; Initialize char count				;
0744: E322         ;
0745: E322 21 77 E3               LD     HL,dirFileCount      ; Point at dirFileCount				;
0746: E325 7E                     LD     A,(HL)               ; Get the dirFileCount				;
0747: E326 34                     INC    (HL)                 ; Increment dirFileCount			;
0748: E327 E6 03                  AND    11B                  ; Perform Mod(E,4)					;
0749: E329 20 14                  JR     NZ,ccpDirDisplayFile0 ; Skip header if not 0				;
0750: E32B         ;
0751: E32B         ; print the header: new Line followed by drive with Colon - A :				;
0752: E32B CD 42 E6               CALL   PrintCrLf            ; New Line						;
0753: E32E C5                     PUSH   BC                   ;
0754: E32F CD 1F E6               CALL   GetSelectedDrive     ; Get Active drive number			;
0755: E332 C1                     POP    BC                   ;
0756: E333 C6 41                  ADD    A,ASCII_A            ; Make it ASCII						;
0757: E335 CD 37 E6               CALL   PrintCharInA         ; Send it to the console		;
0758: E338 3E 3A                  LD     A,COLON              ;
0759: E33A CD 37 E6               CALL   PrintCharInA         ; Send ':' to the console		;
0760: E33D 18 08                  JR     ccpDirDisplayFile    ; Skip ':' display					;
0761: E33F         ;
0762: E33F             ccpDirDisplayFile0:                      ;
0763: E33F CD 33 E6               CALL   PrintSpace           ; Send Space to console				;
0764: E342 3E 3A                  LD     A,COLON              ;
0765: E344 CD 37 E6               CALL   PrintCharInA         ; Send ':' to the console		;
0766: E347             ccpDirDisplayFile:                      ;
0767: E347 CD 33 E6               CALL   PrintSpace           ; Send Space to console				;
0768: E34A         ;
0769: E34A             ccpDirDisplayFileLoop:                      ;
0770: E34A DD E1                  POP    IX                   ; Get to Dir Entry Pointer			;
0771: E34C DD 7E 00               LD     A,(IX+0)             ; Put char in ACC					;
0772: E34F DD 23                  INC    IX                   ; Adjust pointer for next iteration ;
0773: E351 DD E5                  PUSH   IX                   ; Save till then					;
0774: E353 E6 7F                  AND    ASCII_MASK           ; Make sure char is ASCII			;
0775: E355 CD 37 E6               CALL   PrintCharInA         ; Send it to the console			;
0776: E358 21 78 E3               LD     HL,dirCharCount      ; Where are we in Token ?			;
0777: E35B 7E                     LD     A,(HL)               ; Get index							;
0778: E35C 34                     INC    (HL)                 ; Update for next time				;
0779: E35D 47                     LD     B,A                  ; Save count						;
0780: E35E FE 08                  CP     8                    ; End of Name ?						;
0781: E360 CC 33 E6               CALL   Z,PrintSpace         ; Separate Name and Type			;
0782: E363 78                     LD     A,B                  ; Retrieve count					;
0783: E364 FE 0B                  CP     11                   ; At the end of this dir entry ?	;
0784: E366 20 E2                  JR     NZ,ccpDirDisplayFileLoop ;  if no continue the iteration		;
0785: E368         ;
0786: E368             ccpDirLoopBottom:                      ;
0787: E368 DD E1                  POP    IX                   ; Balance stack						;
0788: E36A CD 70 E6               CALL   CheckForConsoleChar  ; Interrupt at keyboard ?			;
0789: E36D 20 05                  JR     NZ,ccpDirEnd         ;  yes, abort directory search		;
0790: E36F CD F0 E6               CALL   SearchForNext        ; Look for more entries				;
0791: E372 18 91                  JR     ccpDirLoopTop        ;  and loop thru					;
0792: E374             ccpDirEnd:                      ;
0793: E374 C3 90 E6               JP     RestoreDiskAtCmdEnd  ; Wrap up and start over			;
0794: E377         ;
0795: E377             dirFileCount:                      ;
0796: E377 00                     DB     0                    ;
0797: E378             dirCharCount:                      ;
0798: E378 00                     DB     0                    ;
0799: E379         ;----------------------------- Directory Listing ---------------------------;
0800: E379
0801: E379         ;-------------------------------- Erase Files ------------------------------;
0802: E379         ; SYNTAX: ERA afn															;
0803: E379         ;																			;
0804: E379         ;  The 'ERA' command removes files from the currently logged-in disk. The   ;
0805: E379         ; files that are erased are those that satisfy the ambiguous filename		;
0806: E379         ; reference afn.															;
0807: E379         ;																			;
0808: E379             ccpErase:                       ;
0809: E379 CD 21 E1               CALL   ParseToken1          ; Parse the command					;
0810: E37C FE 0B                  CP     FILE_NAME_SIZE+FILE_TYPE_SIZE ; All '?'s ?					;
0811: E37E 20 1B                  JR     NZ,ccpEraseFile      ;  skip if not						;
0812: E380         ; Want to be sure															;
0813: E380 01 AB E3               LD     BC,msgEraseAll       ; Point at the message				;
0814: E383 CD 53 E6               CALL   PrintCrLfStringNull  ; Display it on the console			;
0815: E386         ;
0816: E386 CD 65 E0               CALL   ReadCommand          ; Get the operator's response		;
0817: E389 21 1A E2               LD     HL,commandLength     ; Point at size of response			;
0818: E38C 35                     DEC    M                    ; Test the size						;
0819: E38D C2 26 E0               JP     NZ,ccpMainEntry      ; Exit, wrong answer					;
0820: E390 23                     INC    HL                   ; point at the 1 char response		;
0821: E391 7E                     LD     A,(HL)               ; Get it into ACC					;
0822: E392 FE 59                  CP     ASCII_Y              ; Is it 'Y'							;
0823: E394 C2 26 E0               JP     NZ,ccpMainEntry      ;  exit if not						;
0824: E397         ;
0825: E397 23                     INC    HL                   ; Adjust the pointer				;
0826: E398 22 9B E2               LD     (commandBufferPointer),HL ; Restore buffer pointer			;
0827: E39B             ccpEraseFile:                      ;
0828: E39B CD 7E E6               CALL   SetDiskForCmd        ; Change disks for this command		;
0829: E39E 11 FF E6               LD     DE,Token1            ; Point to target FCB				;
0830: E3A1 CD 01 E6               CALL   DeleteFile           ; Call BDOS to delete				;
0831: E3A4 3C                     INC    A                    ; 255 returned if not found			;
0832: E3A5 CC 63 E6               CALL   Z,PrintNoFile        ; Report if file not found			;
0833: E3A8 C3 90 E6               JP     RestoreDiskAtCmdEnd  ; Wrap up and start over			;
0834: E3AB         ;
0835: E3AB             msgEraseAll:                      ;
0836: E3AB 41 4C 4C 20 28 59 2F 4E 29 3F 00                DB     'ALL (Y/N)?',0       ;
0837: E3B6         ;-------------------------------- Erase Files ------------------------------;
0838: E3B6
0839: E3B6         ;-------------------------------- Rename Files -----------------------------;
0840: E3B6         ; SYNTAX: REN ufn1=ufn2														;
0841: E3B6         ;																			;
0842: E3B6         ;  The 'REN' command allows you to change the name of files on disk. The	;
0843: E3B6         ; file satisfying ufn2 is changed to ufn1. The currently logged disk is		;
0844: E3B6         ; assumed to contain the file to rename (ufn2).								;
0845: E3B6             ccpRename:                      ;
0846: E3B6 CD 21 E1               CALL   ParseToken1          ; Get ufn1							;
0847: E3B9 C2 F5 E1               JP     NZ,CommandError      ; Must be unambiguous. No '?'s		;
0848: E3BC 3A 20 E7               LD     A,(selectedDisk)     ; Get saved disk					;
0849: E3BF F5                     PUSH   AF                   ; Save for later compare			;
0850: E3C0 CD 7E E6               CALL   SetDiskForCmd        ; Change disks for this command		;
0851: E3C3 CD E5 E6               CALL   FindFirstToken1File  ; Is ufn1 already there?			;
0852: E3C6 20 4E                  JR     NZ,ccpRenameError3   ;  if yes, report error				;
0853: E3C8         ;
0854: E3C8             ccpRenameFCB1:                      ;
0855: E3C8         ; file doesn't exist, move to second half of FCB							;
0856: E3C8 21 FF E6               LD     HL,Token1            ; Point at FCB for ufn1				;
0857: E3CB 11 0F E7               LD     DE,Token2            ; Point where to put it				;
0858: E3CE 01 10 00               LD     BC,16                ; FCB F1...F8,T1...T3,EXT,S1,S2,RC  ;
0859: E3D1 ED B0                  LDIR   ccpRenameFCB1        ; Move the FCB						;
0860: E3D3         ; check for = or left arrow													;
0861: E3D3 2A 9B E2               LD     HL,(commandBufferPointer) ; Get pointer						;
0862: E3D6         ;	EX		DE,HL															;
0863: E3D6 CD A8 E1               CALL   NextNonBlankChar     ; Get a live character				;
0864: E3D9 FE 3D                  CP     EQUAL_SIGN           ; is it '=' ?						;
0865: E3DB 28 04                  JR     Z,ccpRenameFCB2      ;  do FCB2 if yes					;
0866: E3DD FE 5F                  CP     LEFT_ARROW           ; is it '<-' ?						;
0867: E3DF 20 2F                  JR     NZ,ccpRenameError2   ;  error if no						;
0868: E3E1         ;
0869: E3E1             ccpRenameFCB2:                      ;
0870: E3E1         ;	EX		DE,HL															;
0871: E3E1 23                     INC    HL                   ; Move to start of ufn2				;
0872: E3E2 22 9B E2               LD     (commandBufferPointer),HL ; Save for parser					;
0873: E3E5 CD 21 E1               CALL   ParseToken1          ; Get ufn2							;
0874: E3E8 20 26                  JR     NZ,ccpRenameError2   ; Must be unambiguous. No '?'s		;
0875: E3EA         ;
0876: E3EA F1                     POP    AF                   ; Get saved disk					;
0877: E3EB 47                     LD     B,A                  ; Save a copy						;
0878: E3EC 21 20 E7               LD     HL,selectedDisk      ; Point at current selected disk	;
0879: E3EF 7E                     LD     A,(HL)               ; Get it							;
0880: E3F0 B7                     OR     A                    ; Was it the default disk ?			;
0881: E3F1 28 04                  JR     Z,ccpRename2         ;  skip if yes						;
0882: E3F3         ; drive name was specified.  same one?										;
0883: E3F3 B8                     CP     B                    ; Are they the same ?				;
0884: E3F4 70                     LD     (HL),B               ; Update to new selected disk		;
0885: E3F5 20 19                  JR     NZ,ccpRenameError2   ; Not the same, error exit			;
0886: E3F7             ccpRename2:                      ;
0887: E3F7 70                     LD     (HL),B               ; Update to new selected disk		;
0888: E3F8 AF                     XOR    A                    ; Set ACC = 0						;
0889: E3F9 32 FF E6               LD     (Token1),A           ; FCB2's disk is default			;
0890: E3FC CD E5 E6               CALL   FindFirstToken1File  ; Get ufn2'ss directory Entry		;
0891: E3FF 28 09                  JR     Z,ccpRenameError1    ; Error exit if not there			;
0892: E401         ;
0893: E401 11 FF E6               LD     DE,Token1            ; Point at both FCBs				;
0894: E404 CD 12 E6               CALL   RenameFile           ; Let BDOS do the rename			;
0895: E407 C3 90 E6               JP     RestoreDiskAtCmdEnd  ; Exit gracefully					;
0896: E40A         ;
0897: E40A             ccpRenameError1:                      ;
0898: E40A CD 63 E6               CALL   PrintNoFile          ; Inform operator there is no file	;
0899: E40D C3 90 E6               JP     RestoreDiskAtCmdEnd  ; Exit cleanly						;
0900: E410         ;
0901: E410             ccpRenameError2:                      ;
0902: E410 CD D4 E6               CALL   RestoreDisk          ; Restore Disk from before command  ;
0903: E413 C3 F5 E1               JP     CommandError         ; Error exit						;
0904: E416         ;
0905: E416             ccpRenameError3:                      ;
0906: E416 01 1F E4               LD     BC,msgFileExists     ; Load message						;
0907: E419 CD 53 E6               CALL   PrintCrLfStringNull  ; Display message on console		;
0908: E41C C3 90 E6               JP     RestoreDiskAtCmdEnd  ; Exit cleanly						;
0909: E41F         ;
0910: E41F             msgFileExists:                      ;
0911: E41F 46 49 4C 45 20 45 58 49 53 54 53 00                DB     'FILE EXISTS',0      ;
0912: E42B         ;-------------------------------- Rename Files -----------------------------;
0913: E42B
0914: E42B         ;---------------------------------- Save File ------------------------------;
0915: E42B         ; SYNTAX: SAVE n ufn														;
0916: E42B         ;																			;
0917: E42B         ;  The 'SAVE' command places n pages(256-bytes) onto disk from the			;
0918: E42B         ; TPA (Location 0100H) and names the file ufn.								;
0919: E42B         ;
0920: E42B             ccpSave:                        ;
0921: E42B CD A5 E6               CALL   GetNumberFromCmdLine ; Value returned in Acc.			;
0922: E42E F5                     PUSH   AF                   ; Save value						;
0923: E42F CD 21 E1               CALL   ParseToken1          ; Parse to get ufn					;
0924: E432 C2 F5 E1               JP     NZ,CommandError      ; Must be unambiguous. No '?'s		;
0925: E435 CD 7E E6               CALL   SetDiskForCmd        ; Change disks for this command		;
0926: E438 11 FF E6               LD     DE,Token1            ; Get the FCB						;
0927: E43B D5                     PUSH   DE                   ; Save FCB							;
0928: E43C CD 01 E6               CALL   DeleteFile           ; Deleted file if it exists			;
0929: E43F D1                     POP    DE                   ; Restore FCB						;
0930: E440 CD 0D E6               CALL   MakeFile             ; Create a new file on disk			;
0931: E443 28 2F                  JR     Z,ccpSaveError1      ;  exit, no directory space			;
0932: E445 AF                     XOR    A                    ; Set Acc = 0						;
0933: E446 32 1F E7               LD     (currentRecord),A    ; Clear next record field			;
0934: E449 F1                     POP    AF                   ; # pages to write is in Acc		;
0935: E44A 6F                     LD     L,A                  ; 	change to # sectors				;
0936: E44B 26 00                  LD     H,0                  ; Sector size is 512				;
0937: E44D 29                     ADD    HL,HL                ; Sector Count						;
0938: E44E 11 00 01               LD     DE,TPA               ; Initialize Memory pointer			;
0939: E451         ;
0940: E451             ccpSaveWrite:                      ;
0941: E451 7C                     LD     A,H                  ;
0942: E452 B5                     OR     L                    ; If Sector count = 0				;
0943: E453 28 16                  JR     Z,ccpSaveClose       ;  we are finished writing			;
0944: E455 2B                     DEC    HL                   ; Decrement Sector count			;
0945: E456 E5                     PUSH   HL                   ; Sector count						;
0946: E457 21 80 00               LD     HL,cpmRecordSize     ; Get bytes to write				;
0947: E45A 19                     ADD    HL,DE                ; Add to memory pointer				;
0948: E45B E5                     PUSH   HL                   ; memory pointer					;
0949: E45C CD 1A E6               CALL   SetDMA               ; Set DMA							;
0950: E45F 11 FF E6               LD     DE,Token1            ; Point at the FCB					;
0951: E462 CD 06 E6               CALL   WriteSeq             ; Write a sector from DMA			;
0952: E465 D1                     POP    DE                   ; memory pointer					;
0953: E466 E1                     POP    HL                   ; Sector count						;
0954: E467 20 13                  JR     NZ,ccpSaveError2     ; If disk full, exit				;
0955: E469 18 E6                  JR     ccpSaveWrite         ; Keep on writing					;
0956: E46B         ;
0957: E46B         ;
0958: E46B             ccpSaveClose:                      ;
0959: E46B 11 FF E6               LD     DE,Token1            ; Point at the FCB					;
0960: E46E CD F5 E5               CALL   CloseFile            ; Close the File					;
0961: E471 3C                     INC    A                    ; Check return code					;
0962: E472 20 0E                  JR     NZ,ccpSaveExit       ; If OK, clean exit					;
0963: E474         ;
0964: E474             ccpSaveError1:                      ;
0965: E474 01 88 E4               LD     BC,msgNoDirSpace     ; Load Error Message				;
0966: E477 CD 53 E6               CALL   PrintCrLfStringNull  ; Send it to the console			;
0967: E47A 18 06                  JR     ccpSaveExit          ; Do a clean exit					;
0968: E47C             ccpSaveError2:                      ;
0969: E47C 01 9B E4               LD     BC,msgNoDiskSpace    ; Load Error Message				;
0970: E47F CD 53 E6               CALL   PrintCrLfStringNull  ; Send it to the console			;
0971: E482         ;
0972: E482             ccpSaveExit:                      ;
0973: E482 CD 17 E6               CALL   SetDefaultDMA        ; Reset the DMA						;
0974: E485 C3 90 E6               JP     RestoreDiskAtCmdEnd  ; Perform a clean exit				;
0975: E488         ;
0976: E488             msgNoDirSpace:                      ;
0977: E488 4E 4F 20 44 49 52 45 43 54 4F 52 59 20 53 50 41 43 45 00                DB     'NO DIRECTORY SPACE',0 ;
0978: E49B             msgNoDiskSpace:                      ;
0979: E49B 4E 4F 20 44 49 53 4B 20 53 50 41 43 45 00                DB     'NO DISK SPACE',0    ;
0980: E4A9         ;---------------------------------- Save File ------------------------------;
0981: E4A9
0982: E4A9         ;---------------------------------- Type File ------------------------------;
0983: E4A9         ; SYNTAX: TYPE ufn															;
0984: E4A9         ;																			;
0985: E4A9         ;  The 'TYPE' command displays the content of the ASCII source file ufn on  ;
0986: E4A9         ; the currently logged disk at the console device.							;
0987: E4A9         ;
0988: E4A9             ccpType:                        ;
0989: E4A9 CD 21 E1               CALL   ParseToken1          ; Setup the ufn's FCB				;
0990: E4AC C2 F5 E1               JP     NZ,CommandError      ; Must be unambiguous. No '?'s		;
0991: E4AF CD 7E E6               CALL   SetDiskForCmd        ; Change disks for this command		;
0992: E4B2 CD F5 E6               CALL   OpenToken1File       ; Open the file at Token1			;
0993: E4B5 28 2D                  JR     Z,ccpTypeError       ;  error exit if not successful		;
0994: E4B7         ;
0995: E4B7 CD 42 E6               CALL   PrintCrLf            ; Send new  NewLine to console  ;
0996: E4BA         ;
0997: E4BA             ccpTypeRead:                      ;
0998: E4BA 11 FF E6               LD     DE,Token1            ; Point at Token1's FCB				;
0999: E4BD CD FA E5               CALL   DiskRead             ; Read next Record					;
1000: E4C0 20 18                  JR     NZ,ccpTypeEOF        ; Hard End Of File					;
1001: E4C2         ;
1002: E4C2 06 80                  LD     B,cpmRecordSize      ; Load Character count				;
1003: E4C4 0E 02                  LD     C,fConsoleOut        ; Load Function Number				;
1004: E4C6 21 80 00               LD     HL,DMABuffer         ; Point at the read buffer			;
1005: E4C9 E5                     PUSH   HL                   ; Buffer Pointer					;
1006: E4CA             ccpTypeRecord:                      ;
1007: E4CA E1                     POP    HL                   ; Buffer Pointer					;
1008: E4CB 7E                     LD     A,(HL)               ; Get the Character					;
1009: E4CC FE 1A                  CP     END_OF_FILE          ; Are we at EOF ?					;
1010: E4CE CA 90 E6               JP     Z,RestoreDiskAtCmdEnd ;  yes, exit						;
1011: E4D1         ;
1012: E4D1 23                     INC    HL                   ; Increment the Buffer Pointer		;
1013: E4D2 E5                     PUSH   HL                   ; Buffer Pointer					;
1014: E4D3 CD 37 E6               CALL   PrintCharInA         ; Preserve BC						;
1015: E4D6 10 F2                  DJNZ   ccpTypeRecord        ; Iterate over the record		;
1016: E4D8 18 E0                  JR     ccpTypeRead          ; Iterate over the file				;
1017: E4DA         ;
1018: E4DA             ccpTypeEOF:                      ;
1019: E4DA 3D                     DEC    A                    ; Error returned ?					;
1020: E4DB CA 90 E6               JP     Z,RestoreDiskAtCmdEnd ;  no, Restore Disk and exit		;
1021: E4DE 01 EA E4               LD     BC,msgReadErr        ; Load Message						;
1022: E4E1 CD 53 E6               CALL   PrintCrLfStringNull  ; Send it to the console			;
1023: E4E4         ;
1024: E4E4             ccpTypeError:                      ;
1025: E4E4 CD D4 E6               CALL   RestoreDisk          ; Restore Disk						;
1026: E4E7 C3 F5 E1               JP     CommandError         ; Report error and exit				;
1027: E4EA         ;
1028: E4EA             msgReadErr:                      ;
1029: E4EA 52 45 41 44 20 45 52 52 4F 52 00                DB     'READ ERROR',0       ;
1030: E4F5         ;
1031: E4F5         ;---------------------------------- Type File ------------------------------;
1032: E4F5
1033: E4F5         ;------------------------------- User Function -----------------------------;
1034: E4F5         ; SYNTAX: USER n															;
1035: E4F5         ;																			;
1036: E4F5         ;  The User command allows maintenance of separate files in the same		;
1037: E4F5         ; directory. In the syntax line, n is an integer value in the range of 0-15	;
1038: E4F5         ; On cold start, the operator is automatically logged into user area		;
1039: E4F5         ; number 0.																	;
1040: E4F5         ;  The active user number is maintained until changed by a subsequent USER	;
1041: E4F5         ; command, or until a cold start when user 0 is again assumed				;
1042: E4F5         ;
1043: E4F5             ccpUser:                        ;
1044: E4F5 CD A5 E6               CALL   GetNumberFromCmdLine ; Value returned in Acc.			;
1045: E4F8 FE 10                  CP     16                   ; Greater than 16 ?					;
1046: E4FA D2 F5 E1               JP     NC,CommandError      ;  if yes, Error exit				;
1047: E4FD 5F                     LD     E,A                  ; Prepare for SetUser call			;
1048: E4FE 3A 00 E7               LD     A,(Token1)+1         ; Look past the number				;
1049: E501 FE 20                  CP     SPACE                ; Is it a Space ?					;
1050: E503 CA F5 E1               JP     Z,CommandError       ;  yes, error exit					;
1051: E506 CD 26 E6               CALL   SetUser              ; Call BDOS to set new user			;
1052: E509 C3 93 E6               JP     EndCommand           ; Exit cleanly						;
1053: E50C         ;------------------------------- User Function -----------------------------;
1054: E50C
1055: E50C         ;------------------------------- User Command ------------------------------;
1056: E50C             ccpUserCommand:                      ;
1057: E50C 3A 00 E7               LD     A,(Token1)+1         ; Point at start CMD File name		;
1058: E50F FE 20                  CP     SPACE                ; Is it a Space ?					;
1059: E511 20 14                  JR     NZ,ccpUserCmdFileType ;  skip if not						;
1060: E513         ;
1061: E513         ; Disk change A:, B: C: .....												;
1062: E513 3A 20 E7               LD     A,(selectedDisk)     ; Get selected disk					;
1063: E516 B7                     OR     A                    ; Is it the default disk ?			;
1064: E517 CA 93 E6               JP     Z,EndCommand         ; Exit if not						;
1065: E51A 3D                     DEC    A                    ; Adjust so A=>0, B=>1, C=>2		;
1066: E51B 32 23 E7               LD     (currentDisk),A      ; Update current Disk indicator		;
1067: E51E CD 15 E1               CALL   SetPage0CurDisk      ; Set user/disk in page 0			;
1068: E521 CD EA E5               CALL   SelectDisk           ;  Go select this disk				;
1069: E524 C3 93 E6               JP     EndCommand           ; Exit Cleanly						;
1070: E527         ;
1071: E527         ;
1072: E527             ccpUserCmdFileType:                      ;
1073: E527 DD 21 FF E6               LD     IX,Token1            ; Point at Token1					;
1074: E52B DD 7E 09               LD     A,(IX+9)             ; Get 1st char of CMD file type		;
1075: E52E FE 20                  CP     SPACE                ; Is it a SPACE ?					;
1076: E530 C2 F5 E1               JP     NZ,CommandError      ;  Error exit (no type allowed)		;
1077: E533 CD 7E E6               CALL   SetDiskForCmd        ; Change disk if needed				;
1078: E536 DD 36 09 43               LD     (IX+9),ASCII_C       ;
1079: E53A DD 36 0A 4F               LD     (IX+10),ASCII_O      ;
1080: E53E DD 36 0B 4D               LD     (IX+11),ASCII_M      ; Set Token1's type to 'COM'		;
1081: E542 CD F5 E6               CALL   OpenToken1File       ; Open the CMD File					;
1082: E545 CA CD E5               JP     Z,ccpUserCmdError    ;  if error, then exit				;
1083: E548         ; file opened properly, read it into memory									;
1084: E548         ;
1085: E548 21 00 01               LD     HL,TPA               ; Set Read buffer to TPA start		;
1086: E54B             ccpUserCmdReadFile:                      ;
1087: E54B E5                     PUSH   HL                   ; Save current read buffer pointer  ;
1088: E54C EB                     EX     DE,HL                ; Load buffer pointer for BDOS call ;
1089: E54D CD 1A E6               CALL   SetDMA               ; Set the DMA						;
1090: E550 11 FF E6               LD     DE,Token1            ; Point at Token1's FCB				;
1091: E553 CD FA E5               CALL   DiskRead             ; Read int the buffer				;
1092: E556 20 10                  JR     NZ,ccpUserCmdSetFCBs ;  finished ?, skip					;
1093: E558         ;
1094: E558 E1                     POP    HL                   ; Get prior Pointer					;
1095: E559 11 80 00               LD     DE,cpmRecordSize     ; Get Record size					;
1096: E55C 19                     ADD    HL,DE                ; Need to make new pointer			;
1097: E55D 11 00 E0               LD     DE,CcpBoundary       ;  Are we still in TPA ?			;
1098: E560 7D                     LD     A,L                  ;
1099: E561 93                     SUB    E                    ;
1100: E562 7C                     LD     A,H                  ;
1101: E563 9A                     SBC    A,D                  ;
1102: E564 30 6D                  JR     NC,ccpUserCmdErrorBadLoad ;  no, error exit					;
1103: E566 18 E3                  JR     ccpUserCmdReadFile   ;  else go for another sector		;
1104: E568         ;
1105: E568             ccpUserCmdSetFCBs:                      ;
1106: E568 E1                     POP    HL                   ; Balance the Stack					;
1107: E569 3D                     DEC    A                    ; Test DiskRead return value		;
1108: E56A 20 67                  JR     NZ,ccpUserCmdErrorBadLoad ;  error exit if problem			;
1109: E56C CD D4 E6               CALL   RestoreDisk          ; Restore Disk from before command  ;
1110: E56F CD 21 E1               CALL   ParseToken1          ; Parse FCB1 from command line		;
1111: E572 21 20 E7               LD     HL,selectedDisk      ; Point at selected disk			;
1112: E575 7E                     LD     A,(HL)               ; Get selected disk					;
1113: E576 32 FF E6               LD     (Token1),A           ;  and put into FCB1				;
1114: E579 CD 1C E1               CALL   ParseToken2          ; Parse FCB2 from command line		;
1115: E57C 21 20 E7               LD     HL,selectedDisk      ; Point at selected disk			;
1116: E57F 7E                     LD     A,(HL)               ; Get selected disk					;
1117: E580 32 0F E7               LD     (Token2),A           ;  and put into FCB2				;
1118: E583 AF                     XOR    A                    ; Set Acc to 0						;
1119: E584 32 1F E7               LD     (currentRecord),A    ; Initialize record number			;
1120: E587         ;
1121: E587 21 FF E6               LD     HL,Token1            ; Set Source						;
1122: E58A 11 5C 00               LD     DE,FCB1              ; Set destination					;
1123: E58D 01 21 00               LD     BC,33                ; Set Size							;
1124: E590 ED B0                  LDIR                        ; Move FCBs to Page 0				;
1125: E592 21 1B E2               LD     HL,commandBuffer     ; Point at raw command input		;
1126: E595             ccpUserCmdFindTailStart:                      ;
1127: E595 7E                     LD     A,(HL)               ; Get byte from raw input			;
1128: E596 B7                     OR     A                    ; Are we at end of input ?			;
1129: E597 28 07                  JR     Z,ccpUserCmdTailSetUp ;  yes, get out of loop				;
1130: E599 FE 20                  CP     SPACE                ; Is it a Space						;
1131: E59B 28 03                  JR     Z,ccpUserCmdTailSetUp ;  yes, get out						;
1132: E59D 23                     INC    HL                   ; increment the pointer				;
1133: E59E 18 F5                  JR     ccpUserCmdFindTailStart ; Go back for more					;
1134: E5A0         ;
1135: E5A0             ccpUserCmdTailSetUp:                      ;
1136: E5A0 06 00                  LD     B,0                  ; Initialize Tail Count				;
1137: E5A2 3E 00                  LD     A,0                  ; Marker for end of buffer			;
1138: E5A4 11 80 00               LD     DE,ComTailCount      ; XXXXXXX ComTailChars				;
1139: E5A7         ; ready for the move														;
1140: E5A7             ccpUserCmdTailMove:                      ;
1141: E5A7 BE                     CP     (HL)                 ; Are we at end of Buffer ?			;
1142: E5A8 28 07                  JR     Z,ccpUserCmdTailCount ;  skip if yes						;
1143: E5AA 7E                     LD     A,(HL)               ;
1144: E5AB 12                     LD     (DE),A               ;  else move the character			;
1145: E5AC 04                     INC    B                    ; Adjust the count					;
1146: E5AD 23                     INC    HL                   ; Increment the target pointer		;
1147: E5AE 13                     INC    DE                   ; Increment the source pointer		;
1148: E5AF 18 F6                  JR     ccpUserCmdTailMove   ; Go back for more					;
1149: E5B1         ;
1150: E5B1             ccpUserCmdTailCount:                      ;
1151: E5B1 78                     LD     A,B                  ; Get the character count			;
1152: E5B2 32 80 00               LD     (DMABuffer),A        ; XXXXXXX ComTailCount				;
1153: E5B5         ;
1154: E5B5 CD 42 E6               CALL   PrintCrLf            ; Send new line to console		;
1155: E5B8         ; now go to the loaded program												;
1156: E5B8 CD 17 E6               CALL   SetDefaultDMA        ; Reset the DMA						;
1157: E5BB CD 06 E1               CALL   SaveUserAndDisk      ; User code saved in page 0			;
1158: E5BE         ; low memory diska contains user code										;
1159: E5BE         ;
1160: E5BE CD 00 01               CALL   TPA                  ; Go to the loaded program			;
1161: E5C1 31 F0 E7               LD     SP,Stack             ; May come back here, so			;
1162: E5C4 CD 15 E1               CALL   SetPage0CurDisk      ;  we need to clean things			;
1163: E5C7 CD EA E5               CALL   SelectDisk           ;  up.								;
1164: E5CA C3 26 E0               JP     ccpMainEntry         ; And go back to CCP				;
1165: E5CD         ;
1166: E5CD             ccpUserCmdError:                      ;
1167: E5CD CD D4 E6               CALL   RestoreDisk          ; Restore Disk from before command  ;
1168: E5D0 C3 F5 E1               JP     CommandError         ; Exit, and report error			;
1169: E5D3         ;
1170: E5D3             ccpUserCmdErrorBadLoad:                      ;
1171: E5D3 01 DC E5               LD     BC,msgBadLoad        ; Load error message				;
1172: E5D6 CD 53 E6               CALL   PrintCrLfStringNull  ; Send message to console			;
1173: E5D9 C3 90 E6               JP     RestoreDiskAtCmdEnd  ; Fall thru to end of command		;
1174: E5DC         ;
1175: E5DC             msgBadLoad:                      ;
1176: E5DC 42 41 44 20 4C 4F 41 44 00                DB     'BAD LOAD',0         ;
1177: E5E5         ;
1178: E5E5         ;------------------------------- User Command ------------------------------;
1179: E5E5
1180: E5E5         ;===========================================================================;
1181: E5E5         ;================================ BDOS API =================================;
1182: E5E5         ;===========================================================================;
1183: E5E5
1184: E5E5         ;------------------------------- Initialize --------------------------------;
1185: E5E5             Initialize:                      ;
1186: E5E5 0E 0D                  LD     C,fResetSystem       ; Load Function Number  - 0D		;
1187: E5E7 C3 05 00               JP     BDOS                 ;  and let BDOS do its work			;
1188: E5EA         ;------------------------------- Initialize --------------------------------;
1189: E5EA         ;------------------------------- Select Disk -------------------------------;
1190: E5EA             SelectDisk:                      ;
1191: E5EA 5F                     LD     E,A                  ; Load Target disk					;
1192: E5EB 0E 0E                  LD     C,fSelectDisk        ; Load Function Number - 0EH		;
1193: E5ED C3 05 00               JP     BDOS                 ;  and let BDOS do its work			;
1194: E5F0         ;------------------------------- Select Disk -------------------------------;
1195: E5F0         ;-------------------------------- Open File --------------------------------;
1196: E5F0         ;Open the file																;
1197: E5F0         ; On Entry DE = FCB to read													;
1198: E5F0         ; Exits with Z-Flag Set if file not found									;
1199: E5F0         ;					Reset if file found										;
1200: E5F0             OpenFile:                       ;
1201: E5F0 0E 0F                  LD     C,fOpenFile          ; Load Function Number - 0FH		;
1202: E5F2 C3 2B E6               JP     BDOSandIncA          ; make BDOS call & set dir index	;
1203: E5F5         ;-------------------------------- Open File --------------------------------;
1204: E5F5         ;------------------------------- Close File --------------------------------;
1205: E5F5         ;Close the file																;
1206: E5F5         ; On Entry DE = FCB to Close												;
1207: E5F5         ; Exits with Z-Flag Set if file not found									;
1208: E5F5         ;					Reset if file found										;
1209: E5F5             CloseFile:                      ;
1210: E5F5 0E 10                  LD     C,fCloseFile         ; Load Function Number - 10H		;
1211: E5F7 C3 2B E6               JP     BDOSandIncA          ; make BDOS call & set dir index	;
1212: E5FA         ;------------------------------- Close File --------------------------------;
1213: E5FA         ;-------------------------------- Read File --------------------------------;
1214: E5FA         ;Read the next record from the file.										;
1215: E5FA         ; On Entry DE = FCB to read													;
1216: E5FA             DiskRead:                       ;
1217: E5FA 0E 14                  LD     C,fReadSeq           ; Load Function Number - 14H		;
1218: E5FC CD 05 00               CALL   BDOS                 ;  and let BDOS do its work			;
1219: E5FF B7                     OR     A                    ; set return code flags				;
1220: E600 C9                     RET                         ;
1221: E601         ;-------------------------------- Read File --------------------------------;
1222: E601         ;----------------------------- Delete The File -----------------------------;
1223: E601         ;Delete the file given by DE												;
1224: E601             DeleteFile:                      ;
1225: E601 0E 13                  LD     C,fDeleteFile        ; Load Function Number - 13H			;
1226: E603 C3 05 00               JP     BDOS                 ;  and let BDOS do its work			;
1227: E606         ;----------------------------- Delete The File -----------------------------;
1228: E606         ;------------------------------- Disk Write --------------------------------;
1229: E606         ;Write the next record to the file given by DE								;
1230: E606             WriteSeq:                       ;
1231: E606 0E 15                  LD     C,fWriteSeq          ; Load Function Number - 15H		;
1232: E608 CD 05 00               CALL   BDOS                 ;  and let BDOS do its work			;
1233: E60B B7                     OR     A                    ; set return code flags				;
1234: E60C C9                     RET                         ;
1235: E60D         ;------------------------------- Disk Write --------------------------------;
1236: E60D         ;-------------------------------- Make File --------------------------------;
1237: E60D         ;Make the file given by DE													;
1238: E60D             MakeFile:                       ;
1239: E60D 0E 16                  LD     C,fMakeFile          ; Load Function Number - 16H		;
1240: E60F C3 2B E6               JP     BDOSandIncA          ; make BDOS call & set dir index	;
1241: E612         ;-------------------------------- Make File --------------------------------;
1242: E612         ;------------------------------- Rename File -------------------------------;
1243: E612         ; Rename a file give by DE													;
1244: E612             RenameFile:                      ;
1245: E612 0E 17                  LD     C,fRenameFile        ; Load Function Number - 17H		;
1246: E614 C3 05 00               JP     BDOS                 ;  and let BDOS do its work			;
1247: E617         ;------------------------------- Rename File -------------------------------;
1248: E617         ;---------------------------- Set (Default) DMA ----------------------------;
1249: E617         ;Set default buffer DMA address (0080H)										;
1250: E617             SetDefaultDMA:                      ;
1251: E617 11 80 00               LD     DE,DMABuffer         ;
1252: E61A         ;---------																	;
1253: E61A         ;Set DMA address to DE														;
1254: E61A             SetDMA:                         ;
1255: E61A 0E 1A                  LD     C,fSetDMA            ; Load Function Number - 1AH		;
1256: E61C C3 05 00               JP     BDOS                 ;  and let BDOS do its work			;
1257: E61F         ;---------------------------- Set (Default) DMA ----------------------------;
1258: E61F         ;----------------------------- Get Current Disk ----------------------------;
1259: E61F         ;Exits with current drive number to A (0=A,1=B....F=P)						;
1260: E61F             GetSelectedDrive:                      ;
1261: E61F 0E 19                  LD     C,fGetCurrentDisk    ; Load Function Number - 19H	;
1262: E621 C3 05 00               JP     BDOS                 ;  and let BDOS do its work			;
1263: E624         ;----------------------------- Get Current Disk ----------------------------;
1264: E624         ;------------------------------ Get/Set User -------------------------------;
1265: E624         ;return current user code in A												;
1266: E624             GetUser:                        ;
1267: E624 1E FF                  LD     E,0FFH               ; Set Entry Parameter for Get		;
1268: E626         ; If E <> -1 then Set user number found in E								;
1269: E626             SetUser:                        ;
1270: E626 0E 20                  LD     C,fGetSetUserNumber  ; Load Function Number - 20H		;
1271: E628 C3 05 00               JP     BDOS                 ;  and let BDOS do its work			;
1272: E62B         ;------------------------------ Get/Set User -------------------------------;
1273: E62B
1274: E62B         ;------------------------------ BDOS and Inc A -----------------------------;
1275: E62B         ; Call B DOS																;
1276: E62B         ;  Store returned directory index											;
1277: E62B         ;  Increment result.														;
1278: E62B         ; Exits with	A =  0 if File Not Found									;
1279: E62B         ;					<> 0 if file found										;
1280: E62B             BDOSandIncA:                      ;
1281: E62B CD 05 00               CALL   BDOS                 ; Make call to BDOS					;
1282: E62E 32 24 E7               LD     (directoryEntryNumber),A ; Save return value					;
1283: E631 3C                     INC    A                    ; Increment & (Re)Set Z-Flag		;
1284: E632 C9                     RET                         ;
1285: E633         ;------------------------------ BDOS and Inc A -----------------------------;
1286: E633
1287: E633         ;===========================================================================;
1288: E633         ;=============================== Utilities =================================;
1289: E633
1290: E633         ;===========================================================================;
1291: E633
1292: E633         ;------------------------------- Print Space -------------------------------;
1293: E633             PrintSpace:                      ;
1294: E633 1E 20                  LD     E,SPACE              ; Load Space						;
1295: E635 18 03                  JR     PrintCharInE         ; Go Print it  * Save BC			;
1296: E637         ;------------------------------- Print Space -------------------------------;
1297: E637         ;------------------------------- PrintCharInA ------------------------------;
1298: E637         ; Print character															;
1299: E637         ; On Entry A = Character to Send to Console									;
1300: E637             PrintCharInA:                      ;
1301: E637 5F                     LD     E,A                  ; move char to E					;
1302: E638 18 00                  JR     PrintCharInE         ;
1303: E63A         ;------------------------------- PrintCharInA ------------------------------;
1304: E63A         ;------------------------------- PrintCharInE ------------------------------;
1305: E63A         ; Print character															;
1306: E63A         ; On Entry E = Character to Send to Console									;
1307: E63A         ; Preserves BC								;								;
1308: E63A             PrintCharInE:                      ;
1309: E63A C5                     PUSH   BC                   ; Preserve BC						;
1310: E63B 0E 02                  LD     C,fConsoleOut        ; Load Function Number				;
1311: E63D CD 05 00               CALL   BDOS                 ;  and let BDOS do its work			;
1312: E640 C1                     POP    BC                   ; Restore BC						;
1313: E641 C9                     RET                         ;
1314: E642         ;------------------------------- PrintCharInE ------------------------------;
1315: E642         ;-------------------------------- CR / LF ----------------------------------;
1316: E642         ;Sent Carriage Return Line Feed to Console									;
1317: E642             PrintCrLf:                      ;
1318: E642 C5                     PUSH   BC                   ; Preserve BC						;
1319: E643 1E 0D                  LD     E,CR                 ; Load Carriage Ceturn				;
1320: E645 0E 02                  LD     C,fConsoleOut        ; Load Function Number				;
1321: E647 CD 05 00               CALL   BDOS                 ;  and let BDOS do its work			;
1322: E64A 1E 0A                  LD     E,LF                 ; Load Line Feed					;
1323: E64C 0E 02                  LD     C,fConsoleOut        ; Load Function Number				;
1324: E64E CD 05 00               CALL   BDOS                 ;  and let BDOS do its work			;
1325: E651 C1                     POP    BC                   ; Restore BC						;
1326: E652 C9                     RET                         ;
1327: E653         ;-------------------------------- CR / LF ----------------------------------;
1328: E653         ;----------------- Print (CRLF then ) Null Terminated String ---------------;
1329: E653         ;print CRLF then null terminated string at (BC)								;
1330: E653             PrintCrLfStringNull:                      ;
1331: E653 C5                     PUSH   BC                   ; Save string pointer				;
1332: E654 CD 42 E6               CALL   PrintCrLf            ; Send CR/LF					;
1333: E657 E1                     POP    HL                   ; Restore pointer & fall thru		;
1334: E658         ;print null terminated string from (HL)										;
1335: E658             PrintStringNull:                      ;
1336: E658 7E                     LD     A,(HL)               ; Get the next character			;
1337: E659 B7                     OR     A                    ; Is it the Null terminator ?		;
1338: E65A C8                     RET    Z                    ;  exit if yes						;
1339: E65B 23                     INC    HL                   ; Move string pointer				;
1340: E65C E5                     PUSH   HL                   ; Save for next iteration			;
1341: E65D CD 37 E6               CALL   PrintCharInA         ; Send the character to the console ;
1342: E660 E1                     POP    HL                   ; string pointer					;
1343: E661 18 F5                  JR     PrintStringNull      ; Loop for more						;
1344: E663         ;----------------- Print (CRLF then ) Null Terminated String ---------------;
1345: E663         ;-------------------------- Print 'No File' Message ------------------------;
1346: E663         ;print 'no file' message on console										;
1347: E663             PrintNoFile:                      ;
1348: E663 01 68 E6               LD     BC,msgNoFile         ; Point to the message				;
1349: E666 18 EB                  JR     PrintCrLfStringNull  ; Go print it & return to caller	;
1350: E668         ;
1351: E668 4E 4F 20 46 49 4C 45 00     msgNoFile: DB     'NO FILE',0          ;
1352: E670         ;-------------------------- Print 'No File' Message ------------------------;
1353: E670
1354: E670         ;------------------------- Check For Console Input -------------------------;
1355: E670         ;check for a character ready at the console									;
1356: E670         ;Exits with	Z-Flag  set if there has been no character input				;
1357: E670         ;					reset if there is a character waiting					;
1358: E670         ;			A = character input, if Z-Flag reset							;
1359: E670             CheckForConsoleChar:                      ;
1360: E670 0E 0B                  LD     C,fGetConsoleStatus  ; Load Function Number - 0BH		;
1361: E672 CD 05 00               CALL   BDOS                 ;  and let BDOS do its work			;
1362: E675 B7                     OR     A                    ; Check return value				;
1363: E676 C8                     RET    Z                    ; Return if no char waiting			;
1364: E677         ;
1365: E677 0E 01                  LD     C,fConsoleIn         ; Load Function Number - 01H		;
1366: E679 CD 05 00               CALL   BDOS                 ; character cleared				;
1367: E67C B7                     OR     A                    ; Resets the Z-Flag					;
1368: E67D C9                     RET                         ;
1369: E67E         ;------------------------- Check For Console Input -------------------------;
1370: E67E         ;--------------------------- Set Disk For Command --------------------------;
1371: E67E         ;change disks for this command, if requested								;
1372: E67E             SetDiskForCmd:                      ;
1373: E67E AF                     XOR    A                    ; Set to 0							;
1374: E67F 32 FF E6               LD     (Token1),A           ; Set Token's disk to default		;
1375: E682 3A 20 E7               LD     A,(selectedDisk)     ; Get the selected disk			;
1376: E685 B7                     OR     A                    ; Is it also set for default ?		;
1377: E686 C8                     RET    Z                    ;  exit if yes						;
1378: E687 3D                     DEC    A                    ; Adjust so A=0,B=2....				;
1379: E688 21 23 E7               LD     HL,currentDisk       ; Point at the current disk			;
1380: E68B BE                     CP     M                    ; Are they the same ?				;
1381: E68C C8                     RET    Z                    ;  exit if yes						;
1382: E68D C3 EA E5               JP     SelectDisk           ;  else go select the disk			;
1383: E690         ;
1384: E690         ;--------------------------- Set Disk For Command --------------------------;
1385: E690         ;------------------------ Restore Disk at Command End ----------------------;
1386: E690         ;Restore disk from before command, fall thru to end of command				;
1387: E690             RestoreDiskAtCmdEnd:                      ;
1388: E690 CD D4 E6               CALL   RestoreDisk          ; Restore Disk from before command  ;
1389: E693         ;
1390: E693         ;End of intrinsic command													;
1391: E693             EndCommand:                      ;
1392: E693 CD 21 E1               CALL   ParseToken1          ; Check for garbage at end of line  ;
1393: E696 3A 00 E7               LD     A,(Token1)+1         ; Point at 1st character			;
1394: E699 D6 20                  SUB    SPACE                ; Get ??							;
1395: E69B 21 20 E7               LD     HL,selectedDisk      ;
1396: E69E B6                     OR     M                    ; Are they equal ?					;
1397: E69F         ; 0 in accumulator if no disk selected, and blank FCB						;
1398: E69F C2 F5 E1               JP     NZ,CommandError      ;  no, report error					;
1399: E6A2 C3 26 E0               JP     ccpMainEntry         ;  else go back to the Start		;
1400: E6A5         ;------------------------ Restore Disk at Command End ----------------------;
1401: E6A5
1402: E6A5         ;------------------------ Get Number From Command Line ---------------------;
1403: E6A5         ; Get number from the command line											;
1404: E6A5         ; Exits with A = Value														;
1405: E6A5             GetNumberFromCmdLine:                      ;
1406: E6A5 CD 21 E1               CALL   ParseToken1          ; Get token							;
1407: E6A8 3A 20 E7               LD     A,(selectedDisk)     ; Get currently selected disk		;
1408: E6AB B7                     OR     A                    ; Is it current default disk ?		;
1409: E6AC C2 F5 E1               JP     NZ,CommandError      ;  no, then error exit				;
1410: E6AF         ; convert the byte value in Token1 to binary								;
1411: E6AF         ;
1412: E6AF 21 00 00               LD     HL,0000              ;
1413: E6B2 01 00 00               LD     BC,0000              ; Clear the registers				;
1414: E6B5         ;
1415: E6B5 DD 21 00 E7               LD     IX,Token1+1          ;
1416: E6B9             CalculateNumber:                      ;
1417: E6B9 DD 7E 00               LD     A,(IX+0)             ; Get Character						;
1418: E6BC DD 23                  INC    IX                   ; Adjust for next time around		;
1419: E6BE FE 20                  CP     SPACE                ; Terminating character ?			;
1420: E6C0 28 10                  JR     Z,ReturnNumericValue ;  get out if yes					;
1421: E6C2 D6 30                  SUB    ASCII_ZERO           ; Make binary						;
1422: E6C4 FE 0A                  CP     0AH                  ; Is it a digit ?					;
1423: E6C6 30 0A                  JR     NC,ReturnNumericValue ;  get out if no					;
1424: E6C8 29                     ADD    HL,HL                ; Prior value * 2					;
1425: E6C9 E5                     PUSH   HL                   ; Move *2							;
1426: E6CA D1                     POP    DE                   ;  to DE							;
1427: E6CB 29                     ADD    HL,HL                ; Prior value * 4					;
1428: E6CC 29                     ADD    HL,HL                ; Prior value * 8					;
1429: E6CD 19                     ADD    HL,DE                ; Add * 2 gives Prior value * 10	;
1430: E6CE 4F                     LD     C,A                  ; Get this digit					;
1431: E6CF 09                     ADD    HL,BC                ; and add it						;
1432: E6D0 18 E7                  JR     CalculateNumber      ;
1433: E6D2         ;
1434: E6D2             ReturnNumericValue:                      ;
1435: E6D2 7D                     LD     A,L                  ; Put result in Acc					;
1436: E6D3 C9                     RET                         ;
1437: E6D4         ;
1438: E6D4         ;------------------------ Get Number From Command Line ---------------------;
1439: E6D4         ;-------------------------------- Restore Disk -----------------------------;
1440: E6D4         ; Restore Disk from before command											;
1441: E6D4             RestoreDisk:                      ;
1442: E6D4 3A 20 E7               LD     A,(selectedDisk)     ; Get disk selected by command		;
1443: E6D7 B7                     OR     A                    ; Is it the Default ?				;
1444: E6D8 C8                     RET    Z                    ;  yes, the nothing to do			;
1445: E6D9 3D                     DEC    A                    ; Change to 0=A, 1=B....			;
1446: E6DA 21 23 E7               LD     HL,currentDisk       ;
1447: E6DD BE                     CP     M                    ; Is it the current disk ?			;
1448: E6DE C8                     RET    Z                    ;  yes, the nothing to do			;
1449: E6DF 3A 23 E7               LD     A,(currentDisk)      ;  else get current disk			;
1450: E6E2 C3 EA E5               JP     SelectDisk           ; Select it							;
1451: E6E5         ;-------------------------------- Restore Disk -----------------------------;
1452: E6E5         ;-------------------------- Find First Token1 Entry ------------------------;
1453: E6E5         ;Search for Token1 file														;
1454: E6E5             FindFirstToken1File:                      ;
1455: E6E5 11 FF E6               LD     DE,Token1            ; Point at Token1					;
1456: E6E8 C3 EB E6               JP     SearchForFirst       ; Go look for it					;
1457: E6EB         ;-------------------------- Find First Token1 Entry ------------------------;
1458: E6EB         ;----------------------------- Find First Entry ----------------------------;
1459: E6EB         ;Search for the first directory entry given by DE							;
1460: E6EB         ;Upon entry  DE = FCB														;
1461: E6EB             SearchForFirst:                      ;
1462: E6EB 0E 11                  LD     C,fSearchFirst       ; Load Function Number - 11H		;
1463: E6ED C3 2B E6               JP     BDOSandIncA          ; make BDOS call & set dir index	;
1464: E6F0         ;----------------------------- Find First Entry ----------------------------;
1465: E6F0         ;----------------------------- Find  Next Entry ----------------------------;
1466: E6F0         ;Search for the next occurrence of the file given DE						;
1467: E6F0         ;Upon entry  DE = FCB														;
1468: E6F0             SearchForNext:                      ;
1469: E6F0 0E 12                  LD     C,fSearchNext        ; Load Function Number - 12H		;
1470: E6F2 C3 2B E6               JP     BDOSandIncA          ; make BDOS call & set dir index	;
1471: E6F5         ;----------------------------- Find  Next Entry ----------------------------;
1472: E6F5         ;----------------------------- Open Token1 File ----------------------------;
1473: E6F5             OpenToken1File:                      ;
1474: E6F5 AF                     XOR    A                    ; Clear Acc							;
1475: E6F6 32 1F E7               LD     (currentRecord),A    ; Initialize  next record for I/O   ;
1476: E6F9 11 FF E6               LD     DE,Token1            ; Point at the FCB					;
1477: E6FC C3 F0 E5               JP     OpenFile             ; Let BDOS open the file			;
1478: E6FF         ;----------------------------- Open Token1 File ----------------------------;
1479: E6FF
1480: E6FF         ;*****************************************************************
1481: E6FF         ;************************ Data Area ******************************
1482: E6FF         ;*****************************************************************
1483: E6FF
1484: E6FF
1485: E6FF             Token1:    DS     16                   ; Command Token
1486: E70F             Token2:    DS     16                   ; Command Token
1487: E71F
1488: E71F
1489: E71F
1490: E71F 00          currentRecord: DB     00H                  ; Current record for I/O
1491: E720 00          selectedDisk: DB     00H                  ; Selected disk for current
1492: E721
1493: E721 00 00       tokenStart: DW     0000H                ; Token's pointer
1494: E723 00          currentDisk: DB     00H                  ; Current disk
1495: E724 00          directoryEntryNumber: DB     00H                  ; Index into Directory Buffer
1496: E725
1497: E725             endOfCode:
1498: E725                        ORG    BDOSBase-10H
1499: E7F0             Stack:                          ; Top Of Stack
1500: E7F0
1501: E7F0         ;Z_HighestLocation:
1502: E7F0             ZZ_MemoryLeft EQU    (BDOSBase-1) - endOfCode
           ************************   Xref   ************************
0000: $               E7F0   0682
0072: ASCII_A         0041   0248 0756
0073: ASCII_C         0043   1078
0074: ASCII_M         004D   1080
0036: ASCII_MASK      007F   0774
0075: ASCII_O         004F   1079
0076: ASCII_Y         0059   0822
0059: ASCII_ZERO      0030   1421
0057: ASTERISK        002A   0490
0182: BDOS            0005   0336 1187 1193 1218 1226 1232 1246 1256 1262 1271 1281 1311 1321 1324 1361 1366
1280: BDOSandIncA     E62B   1202 1211 1240 1463 1470
0132: BDOSBase        E800   0133 0135 1498 1502
0101: BDOSE           0005   0102
0133: BDOSEntry       E800
0122: BDOSLength      0E00   0125 0135 0136
0135: BIOSBase        F600
0123: BIOSLength      0A00   0125
0095: BIOSPAGE        0002
0136: BIOSStart       F600
0682: builtInCMDCount 0006   0592
0675: builtInCMDNames E2C0   0588 0682
0673: builtInCMDNameSize 0004   0595 0682
0684: builtInCMDVector E2D8   0266
0032: BYTE            0001
1416: CalculateNumber E6B9   1432
0077: CARET           005E
0215: CcpBoundary     E000   1097
0715: ccpDirAll       E2F6   0718
0766: ccpDirDisplayFile E347   0760
0762: ccpDirDisplayFile0 E33F   0749
0769: ccpDirDisplayFileLoop E34A   0784
0705: ccpDirectory    E2E6   0685
0792: ccpDirEnd       E374   0728 0789
0786: ccpDirLoopBottom E368   0739
0727: ccpDirLoopTop   E305   0791
0720: ccpDirQualified E2FB   0711
0130: CCPEntry        E000   0132 0136 0214
0808: ccpErase        E379   0686
0827: ccpEraseFile    E39B   0811
0121: CCPLength       0800   0125 0132 0136
0244: ccpMainEntry    E026   0329 0646 0819 0823 1164 1399
0254: CcpParseCommand E03C   0242
0845: ccpRename       E3B6   0689
0886: ccpRename2      E3F7   0881
0897: ccpRenameError1 E40A   0891
0901: ccpRenameError2 E410   0867 0874 0885
0905: ccpRenameError3 E416   0852
0854: ccpRenameFCB1   E3C8
0869: ccpRenameFCB2   E3E1   0865
0920: ccpSave         E42B   0688
0958: ccpSaveClose    E46B   0943
0964: ccpSaveError1   E474   0931
0968: ccpSaveError2   E47C   0954
0972: ccpSaveExit     E482   0962 0967
0940: ccpSaveWrite    E451   0955
0223: CcpStart        E000
0988: ccpType         E4A9   0687
1018: ccpTypeEOF      E4DA   1000
1024: ccpTypeError    E4E4   0993
0997: ccpTypeRead     E4BA   1016
1006: ccpTypeRecord   E4CA   1015
1043: ccpUser         E4F5   0690
1166: ccpUserCmdError E5CD   1082
1170: ccpUserCmdErrorBadLoad E5D3   1102 1108
1072: ccpUserCmdFileType E527   1059
1126: ccpUserCmdFindTailStart E595   1133
1086: ccpUserCmdReadFile E54B   1103
1105: ccpUserCmdSetFCBs E568   1092
1150: ccpUserCmdTailCount E5B1   1142
1140: ccpUserCmdTailMove E5A7   1148
1135: ccpUserCmdTailSetUp E5A0   1129 1131
1056: ccpUserCommand  E50C   0263 0691
1359: CheckForConsoleChar E670   0326 0788
1209: CloseFile       E5F5   0317 0960
0060: COLON           003A   0432 0574 0758 0764
0653: commandBuffer   E21B   0324 0353 0655 1125
0655: commandBufferPointer E29B   0354 0418 0462 0826 0861 0872
0626: CommandError    E1F5   0260 0566 0847 0903 0924 0990 1026 1046 1050 1076 1168 1398 1409
0641: CommandErrorExit E20B   0632 0634
0629: CommandErrorLoop E1FB   0639
0652: commandLength   E21A   0240 0304 0341 0817
0651: commandMaxLength E219   0334
0107: ComTail         0080   0108
0109: ComTailChars    0081
0108: ComTailCount    0080   0109 1138
0184: cpmRecordSize   0080   0305 0946 1002 1095
0052: CR              000D   1319
0039: CTRL_C          0003
0040: CTRL_E          0005
0041: CTRL_H          0008
0042: CTRL_L          000C
0043: CTRL_P          0010
0044: CTRL_R          0012
0045: CTRL_S          0013
0046: CTRL_U          0015
0047: CTRL_X          0018
0048: CTRL_Z          001A
1494: currentDisk     E723   0258 0287 0320 0380 0391 0399 0438 1066 1379 1446 1449
1490: currentRecord   E71F   0933 1119 1475
1224: DeleteFile      E601   0379 0830 0928
0370: DeleteSubmitFile E0EE   0328 0332 0645
0797: dirCharCount    E378   0743 0776
1495: directoryEntryNumber E724   0730 1282
0795: dirFileCount    E377   0722 0745
1216: DiskRead        E5FA   0299 0999 1091
0112: DMABuffer       0080   0255 0303 0736 1004 1152 1251
0055: DOLLAR          0024
0116: END_OF_FILE     001A   1009
1391: EndCommand      E693   1052 1064 1069
1497: endOfCode       E725   1502
0037: EndOfMessage    0000
0064: EQUAL_SIGN      003D   0568 0864
0029: FALSE           0000
0104: FCB1            005C   0105 1122
0105: FCB2            006C
0185: fcbSystemFileIndex 000A   0738
0199: fCloseFile      0010   1210
0190: fConsoleIn      0001   1365
0191: fConsoleOut     0002   1003 1310 1320 1323
0202: fDeleteFile     0013   1225
0194: fGetConsoleStatus 000B   1360
0208: fGetCurrentDisk 0019   1261
0207: fGetLoginVector 0018
0210: fGetSetUserNumber 0020   1270
0195: fGetVersion     000C
0186: FILE_NAME_SIZE  0008   0449 0465 0714 0810
0187: FILE_TYPE_SIZE  0003   0453 0465 0714 0810
0541: FillWithAcc     E1A3   0460 0544
0539: FillWithSpace   E1A1   0508 0529
1454: FindFirstToken1File E6E5   0724 0851 0890
0205: fMakeFile       0016   1239
0198: fOpenFile       000F   1201
0485: FormatElement   E178   0450 0455 0499
0495: FormatElement1  E186   0491
0498: FormatElement2  E188   0493
0192: fPrintString    0009
0203: fReadSeq        0014   1217
0193: fReadString     000A   0335
0206: fRenameFile     0017   1245
0196: fResetSystem    000D   1186
0200: fSearchFirst    0011   1462
0201: fSearchNext     0012   1469
0197: fSelectDisk     000E   1192
0209: fSetDMA         001A   1255
0204: fWriteSeq       0015   1231
1405: GetNumberFromCmdLine E6A5   0921 1044
1260: GetSelectedDrive E61F   0247 0257 0754
1266: GetUser         E624   0386
0065: GREATER_THAN    003E   0250 0580
0054: HASH_TAG        0023
1185: Initialize      E5E5   0233
0587: IntrinsicFunction E1D0   0265
0590: IntrinsicFunction1 E1D5   0618
0596: IntrinsicFunction2 E1DE   0603
0611: IntrinsicFunction3 E1EE   0599 0614
0616: IntrinsicFunction4 E1F2   0607
0096: IOBYTE          0003
0561: IsItADelimiter  E1B1   0486 0502
0522: IsItDot         E195   0454
0068: LEFT_ARROW      005F   0866
0125: LengthInBytes   2000   0126 0130
0126: LengthInK       0009
0063: LESS_THAN       003C   0578
0051: LF              000A   1322
0030: LO_NIBBLE_MASK  000F   0237
1238: MakeFile        E60D   0930
0650: maximumBufferSize 007F   0651 0653
0128: MemorySize      0040   0130
1175: msgBadLoad      E5DC   1171
0835: msgEraseAll     E3AB   0813
0910: msgFileExists   E41F   0906
0976: msgNoDirSpace   E488   0965
0978: msgNoDiskSpace  E49B   0969
1351: msgNoFile       E668   1348
1028: msgReadErr      E4EA   1021
0549: NextNonBlankChar E1A8   0419 0556 0863
0339: NoRead          E0D0   0327
0331: NotSubmitFile   E0BF   0285 0294 0300 0318
1200: OpenFile        E5F0   0293 1477
1473: OpenToken1File  E6F5   0992 1081
0507: PadTheElement   E191   0487
0413: ParseToken      E124   0410
0411: ParseToken1     E121   0259 0706 0809 0846 0873 0923 0989 1110 1392 1406
0408: ParseToken2     E11C   1114
0056: PERCENT         0025
0058: PERIOD          002E   0525 0572
0099: Pg0CurentDisk   0004   0238 0393 0400
0098: Pg0CurentUser   0004   0099
1300: PrintCharInA    E637   0249 0251 0636 0643 0757 0759 0765 0775 1014 1341
1308: PrintCharInE    E63A   1295 1302
1317: PrintCrLf       E642   0246 0627 0644 0752 0995 1154 1332
1330: PrintCrLfStringNull E653   0814 0907 0966 0970 1022 1172 1349
1347: PrintNoFile     E663   0725 0832 0898
1293: PrintSpace      E633   0763 0767 0781
1335: PrintStringNull E658   0325 1343
0066: QMARK           003F   0467 0492 0642 0716
0468: QuestionMarkCount E16E   0474
0473: QuestionMarkCount1 E173   0471
0092: RAM             0000   0094 0095 0096 0098 0101 0104 0107 0112 0114
0282: ReadCommand     E065   0252 0816
1244: RenameFile      E612   0894
1441: RestoreDisk     E6D4   0902 1025 1109 1167 1388
1387: RestoreDiskAtCmdEnd E690   0793 0833 0895 0899 0908 0974 1010 1020 1173
1434: ReturnNumericValue E6D2   1420 1423
0069: RUBOUT          007F
0385: SaveUserAndDisk E106   0333 1157
1461: SearchForFirst  E6EB   1456
1468: SearchForNext   E6F0   0790
1190: SelectDisk      E5EA   0239 0290 0322 0377 0381 1068 1163 1382 1450
1491: selectedDisk    E720   0261 0417 0444 0848 0878 1062 1111 1115 1375 1395 1407 1442
0062: SEMICOLON       003B   0576
1250: SetDefaultDMA   E617   0973 1156
1372: SetDiskForCmd   E67E   0707 0828 0850 0925 0991 1077
1254: SetDMA          E61A   0256 0949 1089
0448: SetFileName     E150   0440
0398: SetPage0CurDisk E115   0337 1067 1162
0452: SetType         E155
1269: SetUser         E626   0231 1051
0053: SPACE           0020   0540 0553 0565 0606 0631 0710 1049 1058 1075 1130 1294 1394 1419
1499: Stack           E7F0   0224 0245 1161
0669: submitCR        E2BF   0297
0663: submitExtent    E2AB
0661: submitFCB       E29E   0292 0298 0316 0378
0659: submitFlag      E29D   0234 0283 0371
0665: submitFWF       E2AD   0309
0668: submitMap       E2AF
0667: submitRC        E2AE   0295 0314
0664: submitS1        E2AC
0666: submitS2        E2AD
0662: submitType      E2A3
0050: TAB             0009
1485: Token1          E6FF   0412 0594 0708 0829 0856 0889 0893 0926 0950 0959 0998 1048 1057 1073 1090 1113 1121 1374 1393 1415 1455 1476
1486: Token2          E70F   0409 0857 1117
1493: tokenStart      E721   0420 0628
0102: TopRAM          0007
0114: TPA             0100   0938 1085 1160
0028: TRUE            FFFF
0501: TruncateElement E18A   0505
0067: UNDER_SCORE     005F   0570
0360: UpCase          E0E5   0346
0343: UpCaseLoop      E0D4   0348
0437: UseCurrentDisk  E143   0427
0442: UseTokensDisk   E14A   0433
0094: WarmBoot        0000
0033: WORD            0002
1230: WriteSeq        E606   0951
1502: ZZ_MemoryLeft   00DA
